<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/feeds/twir-contributors.atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2021-03-03T00:00:00-05:00</updated><entry><title>This Week in Rust 380</title><link href="https://this-week-in-rust.org/blog/2021/03/03/this-week-in-rust-380/" rel="alternate"></link><updated>2021-03-03T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-03-03:blog/2021/03/03/this-week-in-rust-380/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/02/26/const-generics-mvp-beta.html"&gt;Const generics MVP hits beta!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/03/03/lang-team-mar-update.html"&gt;Lang team March update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/03/01/changelog-142.html"&gt;IntelliJ Rust Changelog #142&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/03/01/changelog-66.html"&gt;rust-analyzer changelog #66&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-18/"&gt;Knurling-rs changelog #18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flott-motion.org/news/last-month-in-flott-march-2021/"&gt;Last Month in Flott - March 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flott-motion.org/news/ramp-maker-0-2/"&gt;RampMaker 0.2 - Stepper Motor Acceleration Ramp Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://console.dev/qa/oso-sam-scott/"&gt;Why we built the core auth library in Rust (interview with CTO of Oso)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://able.bio/haixuanTao/data-manipulation-pandas-vs-rust--1d70e7fc"&gt;Data Manipulation: Pandas vs Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://clux.github.io/probes/post/2021-02-28-kube-evolution/"&gt;Evolution of Kube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/luzero/temporal-rdo-update-optimization-2pf1"&gt;Temporal RDO update optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thepuzzlemaker/introducing-the-calypso-chronicles-1ff8"&gt;Introducing The Calypso Chronicles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://d3lm.medium.com/rust-beware-of-escape-sequences-85ec90e9e243#ee0e-58229fc84d02"&gt;Rust: Beware of Escape Sequences\n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://objectdisoriented.evokewonder.com/posts/introducing-rustybot-part-3/"&gt;Introducing Rustybot (part 3 of n)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2021/02/27/delete-cargo-integration-tests.html"&gt;Delete Cargo Integration Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jduchniewicz.com/posts/2021/02/c-to-rust-or-how-to-render-your-mindset/"&gt;C++ to Rust - or how to render your mindset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/somedood/generic-impl-blocks-are-kinda-like-macros-1aa0"&gt;Generic &lt;code&gt;impl&lt;/code&gt; blocks are kinda like macros...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/xinnks/make-a-back-end-number-guessing-game-with-rust-1hkj"&gt;Make a Back-End Number Guessing Game with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/captures-closures-async/"&gt;Captures in closures and async blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/test-driver-crate/"&gt;Testing a driver crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beanseverywhere.xyz/blog/rust-lambda"&gt;Using Rust for AWS Lambdas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/edge-node-engineering/always-on-benchmarking-in-rust-d23f2bac1c1d"&gt;Always-On Benchmarking in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogg.bekk.no/building-an-openstreetmap-app-in-rust-part-iv-d82ebc245381"&gt;Building an OpenStreetMap app in Rust, Part IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://timvisee.com/blog/solving-aoc-2020-in-under-a-second/"&gt;Solving Advent of Code 2020 in under a second&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.novatec-gmbh.de/en/blog/the-case-for-the-typestate-pattern-introducing-algebraic-data-types/"&gt;The Case for the Typestate Pattern - Introducing Algebraic Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DE] &lt;a href="https://www.golem.de/news/programmiersprachen-weniger-frust-mit-rust-2102-154243.html"&gt;Weniger Frust mit Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/9IbYBl48eTQ"&gt;Learning Rust: Procedural Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/eIllaNZisiU"&gt;Rust proxy server with Warp and Hyper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/ferrocene-update-three-the-road/"&gt;Ferrocene Part 3: The Road to Rust in mission- and safety-critical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/how-our-aws-rust-team-will-contribute-to-rusts-future-successes/"&gt;How our AWS Rust team will contribute to Rust's future successes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://people.gnome.org/~federico/blog/librsvg-rust-and-non-mainstream-architectures.html"&gt;Librsvg, Rust, and non-mainstream architectures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/camino"&gt;camino&lt;/a&gt;, a library with UTF-8 coded paths mimicking &lt;code&gt;std::os::Path&lt;/code&gt;'s API.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/886"&gt;piegames&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No calls for participation this week&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;402 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-02-22..2021-03-01"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82258"&gt;implement -Z hir-stats for nested foreign items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81856"&gt;suggest character encoding is incorrect when encountering random null bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81769"&gt;suggest &lt;code&gt;return&lt;/code&gt;ing tail expressions that match return type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81235"&gt;improve suggestion for tuple struct pattern matching errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82364"&gt;improve error message when found type is deref of expected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82321"&gt;AST: remove some unnecessary boxes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82620"&gt;apply lint restrictions from renamed lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78360"&gt;remove storage markers if they won't be used during code generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82305"&gt;remove many &lt;code&gt;RefCell&lt;/code&gt;s from &lt;code&gt;DocContext&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82265"&gt;prevent computing Item attributes twice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80475"&gt;new mir-opt pass to simplify gotos with const values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80553"&gt;add an impl of &lt;code&gt;Error&lt;/code&gt; on &lt;code&gt;Arc&amp;lt;impl Error&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81167"&gt;make &lt;code&gt;ptr::write&lt;/code&gt; const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82078"&gt;make &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;u8&lt;/code&gt; methods const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81837"&gt;slight perf improvement on &lt;code&gt;char::to_ascii_lowercase&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81940"&gt;stabilize &lt;code&gt;str_split_once&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81874"&gt;specialize &lt;code&gt;slice::fill&lt;/code&gt; with &lt;code&gt;Copy&lt;/code&gt; type and &lt;code&gt;u8&lt;/code&gt;/&lt;code&gt;i8&lt;/code&gt;/&lt;code&gt;bool&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2363"&gt;futures: &lt;code&gt;future::SelectAll::into_inner&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2293"&gt;futures: &lt;code&gt;futures_util::stream::SelectAll::push&lt;/code&gt; should use &lt;code&gt;&amp;amp;self&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9105"&gt;cargo: run rustdoc doctests relative to the workspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8939"&gt;cargo: throw error if &lt;code&gt;CARGO_TARGET_DIR&lt;/code&gt; is an empty string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9175"&gt;cargo: add support for &lt;code&gt;[env]&lt;/code&gt; section in .cargo/config.toml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9195"&gt;cargo: make it more clear which module is being tested when running cargo test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;Quiet week, a couple regressions and several nice improvements.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=301ad8a4fa3ea56fb980443b7997c8f9d72dd717&amp;amp;end=edeee915b1c52f97411e57ef6b1a8bd46548a37a&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;301ad8..edeee&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 3 Improvements, 0 Mixed&lt;/p&gt;
&lt;p&gt;0 of them in rollups&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2922"&gt;RFC - cargo templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2376"&gt;rfc: make cargo install extensible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82539"&gt;Deprecate &lt;code&gt;doc(include)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82121"&gt;Implement Extend and FromIterator for OsString&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81234"&gt;Allow specifying alignment for functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/79309"&gt;resolve: allow super in module in block to refer to block items&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3090"&gt;A new prelude for the 2021 edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccfbgb/"&gt;March 4, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/276401469/"&gt;March 9, Saarbücken, Saarland, DE - Meetup: 9u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/276717842/"&gt;March 9, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccfbmb/"&gt;March 9, Seattle, WA, US - Monthly meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-NYC/events/276666844/"&gt;March 10, New York, NY, US - Seemingly Dark Magic with Rust Types with Nikolai Vazquez - Rust NYC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgryccfbpb/"&gt;March 11, Columbus, OH, US - Monthly Meeting - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chemnitzer.linux-tage.de/2021/en/programm/beitrag/135"&gt;March 13th, DE - Chemnitzer Linux Tage - Talk on Rust and its ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/kcfpzryccfbpb/"&gt;March 16, Washington, DC, US - Rust and Tell Lightning Talks - Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsyccfbwb/"&gt;March 17, Vancouver, BC, US - Rust Study/Hack/Hang-out night&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccfbnb/"&gt;March 10, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Crown&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.crown.de/lang/en/company/career/software-developer-rust.html"&gt;Rust Software Engineer (Karlsruhe, DE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Polymath&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://polymath.bamboohr.com/jobs/view.php?id=80&amp;amp;source=aWQ9NQ%3D%3D"&gt;Sr. Back End Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tweede golf&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/vacatures/2/lead-developer-embedded-rust"&gt;Lead Developer Embedded Rust (Nijmegen, NL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/vacatures/11/medior-embedded-engineer"&gt;Embedded Rust Engineer (Nijmegen, NL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;It's a great example of the different attitudes of C/C++ and Rust: In C/C++ something is correct when someone can use it correctly, but in Rust something is correct when someone can't use it incorrectly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/lt4u85/const_generics_mvp_hits_beta/goyg3v4/"&gt;/u/Janohard on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1007"&gt;Vlad Frolov&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://this-week-in-rust.org/blog/2021/03/03/this-week-in-rust-380/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 379</title><link href="https://this-week-in-rust.org/blog/2021/02/24/this-week-in-rust-379/" rel="alternate"></link><updated>2021-02-24T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-02-24:blog/2021/02/24/this-week-in-rust-379/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters or official blog posts this week.&lt;/p&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://moonzoon.rs"&gt;MoonZoon - New Rust fullstack framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/02/22/changelog-65.html"&gt;rust-analyzer Changelog #65&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-17/"&gt;Knurling-rs changelog #17&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/rust-for-web-development-2-years-later/"&gt;Rust for web development: 2 years later&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manishearth.github.io/blog/2021/02/22/integrating-rust-and-c-plus-plus-in-firefox/"&gt;Integrating Rust and C++ in Firefox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/bkolobara/how-i-built-a-telnet-chat-server-in-2021-with-webassembly-2711"&gt;Building a telnet chat server with Rust and Lunatic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fy.blackhats.net.au/blog/html/2021/02/16/against_packaging_rust_crates.html"&gt;Against Packaging Rust Crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lik.ai/blog/why-building-a-front-end-framework-in-rust-is-hard"&gt;Why building a front-end framework in Rust is hard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.kraken.com/post/7964/oxidizing-kraken/?"&gt;Oxidizing Kraken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://noncombatant.org/2021/02/16/maybe-we-can-have-nice-things/"&gt;Maybe We Can Have Nice Things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bennett.dev/"&gt;Three Things I Miss About Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lp0i5r/storages_an_alternative_to_allocators/"&gt;Storages: an alternative to allocators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrismorgan.info/blog/rust-ownership-the-hard-way/"&gt;Rust ownership, the hard way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/talzvon/handling-unix-kill-signals-in-rust-55g6"&gt;Handling Unix Kill Signals in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dbanty/replacing-fastapi-with-rust-part-5-rocket-0-5-3kb3"&gt;Replacing FastAPI with Rust: Part 5 - Rocket 0.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mockersf/running-ml-models-in-a-game-and-in-wasm-12i2"&gt;Running ML models in a game (and in Wasm!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/joaoh82/what-would-sqlite-look-like-if-written-in-rust-part-2-4g66"&gt;What would SQLite look like if written in Rust? - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.benj.me/2021/02/17/cranelift-codegen-primer/"&gt;A primer on code generation in Cranelift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/defmt-test-hal/"&gt;Testing a Hardware Abstraction Layer (HAL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nivethan.dev/devlog/cross-compiling-rust-gtk-projects-for-windows.html"&gt;Cross Compiling Rust GTK Projects for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.turbo.fish/proc-macro-simple-derive/"&gt;Procedural Macros: A simple derive macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogg.bekk.no/building-an-openstreetmap-app-in-rust-part-iii-ab9ad4b83bd8"&gt;Building an OpenStreetMap app in Rust, Part III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustyyato.github.io/type/system,type/families/2021/02/22/Type-Families-1_5.html"&gt;Generalizing over Generics in Rust (Part 1.5): Mechanisms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/macros-in-rust-a-tutorial-with-examples/"&gt;Macros in Rust: A tutorial with examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ES] &lt;a href="https://yorodm.is-a.dev/blog/rust-pipeline-pattern-ii/"&gt;Pipelines en Rust(II)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/LajquCjHXK4"&gt;Rust for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/iVYWDIW71jk"&gt;Crust of Rust: Subtyping and Variance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/PMa2m0Fe-Q4"&gt;Learning Rust: Web Server with Actix Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [series] &lt;a href="https://youtube.com/playlist?list=PLauX9TuJ8sfyaLPZ1udS3zS_V9YXdsbtc"&gt;Rust For Beginners - Watch me code the Rustlings Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [series] &lt;a href="https://youtube.com/playlist?list=PLfllocyHVgsRwLkTAhG0E-2QxCf-ozBkk"&gt;Easy Rust - learn to program in Rust with simple English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/845535/"&gt;Python cryptography, Rust, and Gentoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2021/02/mitigating-memory-safety-issues-in-open.html"&gt;Mitigating Memory Safety Issues in Open Source Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2021/02/15/NEAR.html"&gt;matklad @ NEAR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://domwillia.ms/panik/"&gt;Application-wide panic handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/star-gazers/benchmarking-low-level-i-o-c-c-rust-golang-java-python-9a0d505f85f7"&gt;Benchmarking low-level I/O: C, C++, Rust, Golang, Java, Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/1uAsA1hm52I"&gt;Ask the Expert: Rust at Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/MZyleK8elPk"&gt;AWS re:Invent 2020: Next-gen networking infrastructure with Rust and Tokio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/eFQVxQsYcJ8"&gt;Interview Part 2/2 with Ashley Williams, Rust Foundation Interim Executive Director&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/lever"&gt;lever&lt;/a&gt;, a library for writing transactional systems.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/882"&gt;Mahmud Bulut&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Starlight-JS/starlight/issues/7"&gt;starlight - Support for "unsafe" cases of &lt;code&gt;finally&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;329 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-02-15..2021-02-22"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81503"&gt;suggest to create a new &lt;code&gt;const&lt;/code&gt; item if the &lt;code&gt;fn&lt;/code&gt; in the array is a &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81914"&gt;fixing bad suggestion for &lt;code&gt;_&lt;/code&gt; in &lt;code&gt;const&lt;/code&gt; type when a function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81427"&gt;simplify &lt;code&gt;eat_digits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81574"&gt;precompute ancestors when checking privacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82248"&gt;optimize counting digits in line numbers during error reporting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81611"&gt;only store a &lt;code&gt;LocalDefId&lt;/code&gt; in some HIR nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82094"&gt;to digit simplification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82116"&gt;reduce size of &lt;code&gt;InterpErrorInfo&lt;/code&gt; to 8 bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82124"&gt;pass large interpreter types by reference, not value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79100"&gt;improve &lt;code&gt;assert_eq!&lt;/code&gt; and &lt;code&gt;assert_ne!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81873"&gt;add &lt;code&gt;Mutex::unlock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82120"&gt;stabilize &lt;code&gt;Arguments::as_str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2333"&gt;futures: &lt;code&gt;FuturesUnordered&lt;/code&gt;: do not poll the same future twice per iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82302"&gt;remove &lt;code&gt;unsafe impl Send for CompletedTest&lt;/code&gt; &amp;amp; &lt;code&gt;TestResult&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82349"&gt;test: print test name only once on timeout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9182"&gt;cargo: propagate &lt;code&gt;lto=off&lt;/code&gt; harder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;Overall, a positive week for compiler performance with only one moderate regression. The change that introduced the regression leads to significantly improved &lt;a href="https://github.com/rust-lang/rust/pull/70951#issuecomment-766292996"&gt;bootstrap speed&lt;/a&gt; of the compiler as well as easier maintainability.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=f1c47c79fe8438ed241630f885797eebef3a6cab&amp;amp;end=301ad8a4fa3ea56fb980443b7997c8f9d72dd717&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;f1c47c..301ad8a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regression, 5 Improvements, 0 Mixed
0 of them in rollups&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3013"&gt;RFC: Checking conditional compilation at compile time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2922"&gt;RFC - cargo templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2376"&gt;rfc: make cargo install extensible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81234"&gt;Allow specifying alignment for functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80527"&gt;Make rustdoc lints a tool lint instead of built-in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79208"&gt;Stabilize &lt;code&gt;unsafe_op_in_unsafe_fn&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78429"&gt;[librustdoc] Only split lang string on &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;&lt;/code&gt;, and &lt;code&gt;\t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/76894"&gt;Lint for unused borrows as part of &lt;code&gt;UNUSED_MUST_USE&lt;/code&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/74773"&gt;Tracking Issue for str_split_once&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/70516"&gt;Tracking Issue for ASCII methods on OsStr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3088"&gt;RFC: An edition-compatible system for "removing" deprecated items from the standard library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3086/files"&gt;RFC: Declarative macro metavariable expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3085"&gt;RFC: 2021 Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3084"&gt;Add filename information to &lt;code&gt;std::io::Error&lt;/code&gt; to improve &lt;code&gt;std::io&lt;/code&gt; error messages &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3081"&gt;Multi-part examples in rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-ldn/rust-hack-and-learn"&gt;February 27, London, UK - Rust (Remote) Hack &amp;amp; Learn - Rust London&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;March 1, Cardiff, UK - Rust and Cpp Cardiff :: v1.9 - Rust and C++ Cardiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/276334977/"&gt;March 2, Dublin, IE - March Remote Meetup - Luca Palmieri - Rust Dublin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstryccfbfb/"&gt;March 3, Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/275738407/"&gt;March 3, Denver, CO, US - Building a Runtime Reflection System for Rust by Sam Scott - Rust Denver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccfbgb/"&gt;March 4, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/276401469/"&gt;March 9, Saarbücken, Saarland, DE - Meetup: 9u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccfbmb/"&gt;March 9, Seattle, WA, US - Monthly meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccfbnb/"&gt;March 10, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;ForAllSecure&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/forallsecure/jobs/5086295002"&gt;Senior/Staff Engineer, Backend - RUST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NZXT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer (Rust &amp;amp; C++) (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Parity&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.parity.io/jobs/#jobs"&gt;Several Rust Engineering Positions (Berlin, DE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Finally, I feel it is necessary to debunk the “&lt;em&gt;fighting the borrow checker&lt;/em&gt;” legend, a story depicting the Rust compiler as a boogeyman: in my experience, it happens mostly to beginners and the 1% trying to micro-optimize code or push the boundaries. Most experienced Rust developers know exactly how to model their code in a way that no time is wasted fighting the compiler on design issues, and can spot anti-patterns at a glance, just like most people know how to drive their car on the correct side of the road to avoid accidents, and notice those who don’t!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://blog.kraken.com/post/7964/oxidizing-kraken/"&gt;Simon Chemouil on the Kraken blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1004"&gt;scottmcm&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lrw51r/this_week_in_rust_379/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 378</title><link href="https://this-week-in-rust.org/blog/2021/02/17/this-week-in-rust-378/" rel="alternate"></link><updated>2021-02-17T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-02-17:blog/2021/02/17/this-week-in-rust-378/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html"&gt;Announcing Rust 1.50.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/02/15/changelog-141.html"&gt;IntelliJ Rust changelog #141&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/02/15/changelog-64.html"&gt;rust-analyzer changelog #64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://relm.antoyo.xyz/big-release/"&gt;A big release for relm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.liw.fi/posts/2021/02/14/xdg-base-dirs-rust/"&gt;The XDG base directory specification and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://state.smerity.com/smerity/state/01EYB6YQ5T2KFSC1PF55A3B8DG"&gt;Zero dependency images (of chaos) in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radekvit.medium.com/examples-of-declarative-style-in-rust-9fae89c0fea"&gt;Examples of declarative style in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/PoignardAzur/8038f5ed7dc8d00e3e9472aca57fb35c"&gt;Rust 2030 Christmas list: Better cfg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2021/02/14/for-the-love-of-macros.html"&gt;For the Love of Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fly.io/blog/the-tokio-1-x-upgrade/"&gt;The Tokio Upgrade from 0.2 to 1.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cfallin.org/blog/2021/01/22/cranelift-isel-2/"&gt;Cranelift, Part 2: Compiler Efficiency, CFGs, and a Branch Peephole Optimizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://anchor.fm/building-with-rust/episodes/Building-with-Rust-Luca-Palmieri-on-TrueLayer-and-Zero-to-Production-eq9rqs"&gt;Building with Rust: Luca Palmieri on TrueLayer and Zero to Production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://jamesmunns.com/podcast/008-yosh/"&gt;Chats with James 008 - Yoshua Wuyts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=C7BTIdkWreI&amp;amp;feature=youtu.be"&gt;Rust 1.50 Patch Review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ryhl.io/blog/actors-with-tokio/"&gt;Actors with Tokio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/tenable-techblog/building-a-microservice-with-rust-23a4de6e5e14"&gt;Building a microservice with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thatgeoguy.ca/blog/2021/02/15/rust-is-cool-enums/"&gt;Rust is cool - Enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jbarszczewski/rust-cli-game-of-life-tutorial-part-2-16j3"&gt;Rust CLI Game of Life tutorial - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jldec/calling-rust-from-a-cloudflare-worker-17b4"&gt;Calling Rust from a Cloudflare Worker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/vinted/validating-json-input-in-rust-web-services-5gp0"&gt;Validating JSON input with Rust web services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/joaoh82/what-would-sqlite-look-like-if-written-in-rust-part-1-2np4"&gt;What would SQLite look like if written in Rust? -- Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustyyato.github.io/type/system,type/families/2021/02/15/Type-Families-1.html"&gt;Generalizing over Generics in Rust (Part 1) - AKA Higher Kinded Types in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.turbo.fish/proc-macro-basics/"&gt;Procedural Macros: The Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogg.bekk.no/building-an-openstreetmap-app-in-rust-part-ii-933ca8d0c48a"&gt;Building an OpenStreetMap app in Rust, Part II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.novatec-gmbh.de/en/blog/look-ma-no-js-compiling-rust-to-webassembly/"&gt;Look, Ma! No JS! - Compiling Rust to WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dranikpg/simple-rays"&gt;Simple ray tracer written in Rust from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/short-circuit-sum-rust/"&gt;Short Circuit Sum in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/skeleton-and-principles-for-a-maintainable-test-suite/"&gt;Zero to Production in Rust, Part 7.1 - Skeleton And Principles For A Maintainable Test Suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/CCSS-Devclub-Rust-Workshop-dccad2c1119d4af7bf78f3d3b4797603"&gt;CCSS Devclub Rust Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/UEAg4qCALb8"&gt;Graphs in Rust: Let's Build a Maze!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Synerise/cleora"&gt;Cleora - an ultra fast graph embedding tool written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vertexclique.com/cost-based-query-optimizations/"&gt;Cost-based query optimizations in multithreaded environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lonami.dev/blog/woce-2/"&gt;Writing our own Cheat Engine: Exact Value scanning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;Despite having no nominations, this week's crate is &lt;a href="https://crates.io/crates/firestorm"&gt;firestorm&lt;/a&gt;, a fast intrusive flamegraph profiling library.&lt;/p&gt;
&lt;p&gt;llogiq is pretty pleased anyway with the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=69644"&gt;Fuchsia - netstack3: Support stable interface IDs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;340 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-02-01..2021-02-08"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81876"&gt;parser: fix panic in 'const impl' recovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81384"&gt;fix derived &lt;code&gt;PartialOrd&lt;/code&gt; operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81132"&gt;borrowck: refactor visited map to a bitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81466"&gt;add suggest &lt;code&gt;mut&lt;/code&gt; method for loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1703"&gt;miri: Remove non-power-of-two SIMD vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/685"&gt;chalk: add Movability to Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81744"&gt;try &lt;code&gt;fast_reject::simplify_type&lt;/code&gt; in coherence before doing full check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81995"&gt;fix suggestion to introduce explicit lifetime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81990"&gt;make suggestion of changing mutability of arguments broader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81126"&gt;optimize &lt;code&gt;Vec::retain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81687"&gt;make &lt;code&gt;Vec::split_at_spare_mut&lt;/code&gt; public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81486"&gt;&lt;code&gt;BTreeMap&lt;/code&gt;: disentangle &lt;code&gt;Drop&lt;/code&gt; implementation from &lt;code&gt;IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81494"&gt;initialize &lt;code&gt;BTree&lt;/code&gt; nodes directly in the heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81012"&gt;stabilize the &lt;code&gt;partition_point&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80438"&gt;add &lt;code&gt;Box::into_inner&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdsimd/pull/62"&gt;stdsimd: add SIMD shuffles for &lt;code&gt;SimdType&lt;/code&gt;{&lt;code&gt;2&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;8&lt;/code&gt;, &lt;code&gt;16&lt;/code&gt;, &lt;code&gt;32&lt;/code&gt;, &lt;code&gt;64&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdsimd/pull/61"&gt;stdsimd: add bitmasks and simplify mask API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81356"&gt;libtest: allow multiple filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9133"&gt;cargo: change git dependencies to use &lt;code&gt;HEAD&lt;/code&gt; by default &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9169"&gt;cargo: emit warning on env variable case mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/3271"&gt;crates.io: add &lt;code&gt;COM0&lt;/code&gt; and &lt;code&gt;LPT0&lt;/code&gt; to the list of reserved crate names&lt;/a&gt; (Windows users rejoice)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6657"&gt;clippy: fix suggestions that need parens in &lt;code&gt;from_iter_instead_of_collect&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6700"&gt;clippy: fix &lt;code&gt;missing_panics_doc&lt;/code&gt; warning on &lt;code&gt;unreachable!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6697"&gt;clippy: fix &lt;code&gt;vec_init_then_push&lt;/code&gt; false positives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6696"&gt;clippy: downgrade &lt;code&gt;trivial_regex&lt;/code&gt; to nursery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6695"&gt;clippy: new lint: &lt;code&gt;bytes_nth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;A mostly quiet week, though with an excellent improvement in bootstrap times, shaving off a couple percent off the total and 10% off of rustc_middle due to changes in the code being compiled.&lt;/p&gt;
&lt;p&gt;Triage done by @simulacrum. Revision range: &lt;a href="https://perf.rust-lang.org/?start=ea098255f74923d69ea234ee526df6b9cecc3b9b&amp;amp;end=f1c47c79fe8438ed241630f885797eebef3a6cab&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;ea09825..f1c47c7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 2 Improvements, 1 Mixed&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3014"&gt;Adds &lt;code&gt;must_not_suspend_lint&lt;/code&gt; RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3013"&gt;RFC: Checking conditional compilation at compile time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2944"&gt;RFC: add the Freeze trait to libcore/libstd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2708"&gt;Generic Pointer to Field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82078"&gt;Make char and u8 methods const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81514"&gt;Demote x86_64-rumprun-netbsd target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80595"&gt;&lt;code&gt;impl PartialEq&amp;lt;Punct&amp;gt; for char&lt;/code&gt;; symmetry for #78636&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80527"&gt;Make rustdoc lints a tool lint instead of built-in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79208"&gt;Stabilize &lt;code&gt;unsafe_op_in_unsafe_fn&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78880"&gt;Add &lt;code&gt;NotSupported&lt;/code&gt; to &lt;code&gt;std::io::ErrorKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78429"&gt;[librustdoc] Only split lang string on &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;&lt;/code&gt;, and &lt;code&gt;\t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/76894"&gt;Lint for unused borrows as part of &lt;code&gt;UNUSED_MUST_USE&lt;/code&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/74773"&gt;Tracking Issue for str_split_once&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/70516"&gt;Tracking Issue for ASCII methods on OsStr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/62633"&gt;Tracking issue for &lt;code&gt;Option::expect_none(msg)&lt;/code&gt; and &lt;code&gt;unwrap_none()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3074"&gt;Add named path bases to cargo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccdbxb/"&gt;February 18, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccdbfc/"&gt;February 23, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/276334977/"&gt;March 2, Dublin, IE - March Remote Meetup - Luca Palmieri - Rust Dublin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/276401469/"&gt;March 9, Saarbücken, Saarland, DE - Meetup: 9u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zfnd.org/blog/opening-core-engineer/"&gt;Rust Core Engineer at The Zcash Foundation (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zfnd.org/blog/open-position-cryptography-engineer/"&gt;Rust Cryptography Engineer at The Zcash Foundation (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/fuellabs/13b01903-490a-4497-b778-35434f4188cf"&gt;Senior Software Engineer [Rust] at Fuel (Toronto, ON, CA or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote) at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/5ec9958a-529c-4bae-89b3-0d1a104cbd81"&gt;Rust API SDET at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2442ee5c-56b6-4a73-a477-8cdda2b218d5"&gt;Rust Engineer, Desktop GUI - Cryptowatch at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4c864c8f-bde6-443d-b521-dd90df0e9105"&gt;Senior Backend Engineer - Rust - Core Backend at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Banking Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/1c6b290f-e430-430d-9b40-a258d07686b0"&gt;Site Reliability Engineer - Rust Core Backend at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4485f672-dc5f-4e49-a10b-2b0399e28a8d"&gt;Software Engineer - Trading Technology (Rust) at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team/Head-of-Developer-Relations/1e365b6a-9df0-5eec-9762-a4b25f913d23"&gt;Head of Developer Relations at Ockam (US, Mountain or Pacific Timezones)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://loanpass.io/careerPage.html"&gt;Lead Software Developer, Rust at BlockGen Corp (US &amp;amp; Canada remote only)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Have you seen someone juggle several items with one hand? That's the point of async. Blocking (non-async) it like writing - it requires constant work from each hand. If you want to write twice as fast you'll need two hands and write with both at the same time. That's multithreading. If you juggle, the moment the item leaves your hand and is in the air, you have it left with nothing to do. That's similar to network IO - you make a request and are just waiting for the server to respond. You could be doing something in the meantime, like catching another item and throwing it back up again. That's what "await" does - it says I threw and item into the air, so I want my current thread / hand to switch over to catch something else now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/lia5fu/why_async_rust/gn2q25e/"&gt;/u/OS6aDohpegavod4 on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1002"&gt;Jacob Pratt&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ln2zmo/this_week_in_rust_378/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 377</title><link href="https://this-week-in-rust.org/blog/2021/02/10/this-week-in-rust-377/" rel="alternate"></link><updated>2021-02-10T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-02-10:blog/2021/02/10/this-week-in-rust-377/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-02-08-hello-world/"&gt;Hello World!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/02/09/1.50.0-prerelease.html"&gt;1.50.0 pre-release testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-018/"&gt;This Month in Rust GameDev #18 - January 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2021-01/"&gt;This Month in Rust OSDev (January 2021)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/02/08/changelog-63.html"&gt;rust-analyzer Changelog #63&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yrashk.medium.com/launching-wasm-rs-a-collection-of-crates-a-community-4344d2ba75b3"&gt;Launching wasm.rs: a collection of crates, a community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.abetterinternet.org/post/memory-safe-tls-apache/"&gt;A Memory Safe TLS Module for the Apache HTTP Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lg0a7b/benchmarking_tokio_tasks_and_goroutines/"&gt;Benchmarking Tokio Tasks and Goroutines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2021/02/10/a-better-profiler.html"&gt;A Better Rust Profiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nyanpasu64.github.io/blog/an-unsafe-tour-of-rust-s-send-and-sync/"&gt;An unsafe tour of Rust's Send and Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nical.github.io/posts/etagere.html"&gt;Improving texture atlas allocation in WebRender&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msarmi9.github.io/posts/async-rust/"&gt;Async Rust: Futures, Tasks, Wakers; Oh My!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mmhaskell.com/rust"&gt;Rust for Haskell Programmers!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jbarszczewski/rust-cli-game-of-life-tutorial-part-1-57pp"&gt;Rust CLI Game of Life tutorial - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msirringhaus.github.io/Where-everything-went-wrong/"&gt;Where everything went wrong...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/oakes/4af1023b6c5162c6f8f0"&gt;Rust for Clojurists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ES] &lt;a href="https://blog.adrianistan.eu/formato-ron-rusty-object-notation"&gt;El formato RON: Rusty Object Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/Lh262L63asA"&gt;1Password Developer Fireside Chat: Introduction to Rust Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/tM2r9HD4ivQ"&gt;Dynamic vs Static Dispatch in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/congratulations-rustaceans-on-the-creation-of-the-rust-foundation/"&gt;Congratulations, Rustaceans, on the creation of the Rust Foundation!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudblogs.microsoft.com/opensource/2021/02/08/microsoft-joins-rust-foundation/"&gt;Microsoft joins Rust Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2021/02/google-joins-rust-foundation.html"&gt;Google joins the Rust Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mozilla.org/blog/2021/02/08/mozilla-welcomes-the-rust-foundation/"&gt;Mozilla Welcomes the Rust Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trusted-programming.github.io/2021-02-07/index.html"&gt;Trusted Programming - Our Rust Mission at Huawei&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lgccv5/ysk_vscodes_most_recent_update_fixed_a_quirk_in/"&gt;YSK: VSCode's most recent update fixed a quirk in Rust workflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daniel.haxx.se/blog/2021/02/09/curl-supports-rustls/"&gt;curl supports rustls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/artichoke/artichoke/blob/21045d8f1086c669dd428a3b5bdcc4a58e13acec/ARCHITECTURE.md"&gt;Architecting Artichoke Ruby: A Modular Ruby implementation written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/h-LoPr5553o"&gt;Interview with Ashley Williams, Rust Foundation Interim Executive Director (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/thread_io"&gt;threadIO&lt;/a&gt;, a crate that makes disk IO in a background thread easy and elegant.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/881"&gt;David Andersen&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;Fuchsia has several issues available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=34979"&gt;[netstack3] ARP: Add tests for ARP on a broadcast medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=48364"&gt;[netstack3] Migrate all transport protocols to trait associated types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=47454"&gt;[netstack3] Split IpProto into Ipv4Proto and Ipv6NextHeader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=47008"&gt;[net-types] Add common prefix length calculation for IP addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=21432"&gt;[netstack3] Make sure ICMP messages are not sent in response to non-initial fragment packets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=69355"&gt;[internet-checksum] Clarify documentation around odd byte lengths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=50830"&gt;[netstack3] IP fragment reassembly vulnerable to FragmentSmack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;384 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-02-01..2021-02-08"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81455"&gt;add AArch64 big-endian and ILP32 targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81608"&gt;improve handling of spans around macro result parse errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80632"&gt;identify unreachable subpatterns more reliably&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80092"&gt;fix issues with move closures and mutability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81577"&gt;const_evaluatable: consider sub-expressions to be evaluatable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81556"&gt;introduce future-compatibility warning for forbidden lint groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81405"&gt;&lt;code&gt;Box&lt;/code&gt; the biggest &lt;code&gt;ast::ItemKind&lt;/code&gt; variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81779"&gt;improve error message for disallowed ptr-to-int casts in const eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81737"&gt;typeck: emit structured suggestions for tuple struct syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81735"&gt;faster few span methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81647"&gt;fix bug with &lt;code&gt;assert!()&lt;/code&gt; calling the wrong edition of &lt;code&gt;panic!()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81730"&gt;make &lt;code&gt;Allocator&lt;/code&gt; object-safe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81022"&gt;add Frames Iterator for Backtrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79015"&gt;add &lt;code&gt;Vec::extend_from_within&lt;/code&gt; method under &lt;code&gt;vec_extend_from_within&lt;/code&gt; feature gate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81610"&gt;&lt;code&gt;BTreeMap&lt;/code&gt;: make &lt;code&gt;Ord&lt;/code&gt; bound explicit, compile-test its absence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81599"&gt;implement &lt;code&gt;TrustedLen&lt;/code&gt; for &lt;code&gt;Fuse&amp;lt;I: TrustedLen&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79805"&gt;rename &lt;code&gt;Iterator::fold_first&lt;/code&gt; to &lt;code&gt;reduce&lt;/code&gt; and stabilize it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74304"&gt;stabilize the &lt;code&gt;Wake&lt;/code&gt; trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80011"&gt;stabilize &lt;code&gt;peekable_next_if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81745"&gt;stabilize poison API of &lt;code&gt;Once&lt;/code&gt;, rename &lt;code&gt;poisoned()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80962"&gt;stabilize remaining integer methods as &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2332"&gt;futures-rs: avoid &lt;code&gt;once_cell&lt;/code&gt; in static wakers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/235"&gt;hashbrown: implement &lt;code&gt;From&amp;lt;HashMap&amp;lt;T, ()&amp;gt;&amp;gt;&lt;/code&gt; for &lt;code&gt;HashSet&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9142"&gt;cargo: fix panic with doc collision orphan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9122"&gt;cargo: fix env/cfg set for &lt;code&gt;cargo test&lt;/code&gt; and &lt;code&gt;cargo run&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81675"&gt;make rustdoc respect &lt;code&gt;--error-format short&lt;/code&gt; in doctests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6682"&gt;clippy: fix &lt;code&gt;let_underscore_drop&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6659"&gt;clippy: fix &lt;code&gt;let_and_return&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6661"&gt;clippy: don't trigger &lt;code&gt;exhaustive_structs&lt;/code&gt; for structs with private fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6523"&gt;clippy: add new lint &lt;code&gt;missing_panics_doc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81817"&gt;compiletest: Add option to emit compiler stderr per bitwidth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No triage report this week&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3037"&gt;Rust 2021 Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2996"&gt;adds async stream rfc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2944"&gt;RFC: add the Freeze trait to libcore/libstd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2708"&gt;Generic Pointer to Field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81415"&gt;Allow leading | anywhere we allow or-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80595"&gt;&lt;code&gt;impl PartialEq&amp;lt;Punct&amp;gt; for char&lt;/code&gt;; symmetry for #78636&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80553"&gt;Add an impl of Error on &lt;code&gt;Arc&amp;lt;impl Error&amp;gt;&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78880"&gt;Add &lt;code&gt;NotSupported&lt;/code&gt; to &lt;code&gt;std::io::ErrorKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/62633"&gt;Tracking issue for &lt;code&gt;Option::expect_none(msg)&lt;/code&gt; and &lt;code&gt;unwrap_none()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3074"&gt;Add named path bases to cargo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/275569653"&gt;February 11, Washington, DC, US - Let's learn to Rust nice with others - Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/276272745/"&gt;February 11, San Diego, CA, US - February 2021 Tele-Meetup - San Diego Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsyccdbwb/"&gt;February 17, Vancouver, BC, CA - Rust Study/Hack/Hang-out night - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccdbxb/"&gt;February 18, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccdbfc/"&gt;February 23, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgryccdbpb/"&gt;February 11, Columbus, OH, US - Monthly Meeting - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/D07759DAF6/"&gt;Rust Backend Engineer at TrueLayer (London, UK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/F13E839E3B/"&gt;Rust Backend Engineer at TrueLayer (Milan, Italy)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/3B78A6F6F4/"&gt;Rust Technical Lead at TrueLayer (London, UK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/8D8D56C09E/"&gt;Rust Technical Lead at TrueLayer (Milan, Italy)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer (Rust &amp;amp; C++) at NZXT (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angel.co/company/jetasap/jobs/1178965-rust-software-engineer"&gt;Rust Software Engineer at JetASAP (Remote US or CA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/5ec9958a-529c-4bae-89b3-0d1a104cbd81"&gt;Rust API SDET at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2442ee5c-56b6-4a73-a477-8cdda2b218d5"&gt;Rust Engineer, Desktop GUI - Cryptowatch at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Banking Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4485f672-dc5f-4e49-a10b-2b0399e28a8d"&gt;Software Engineer - Trading Technology (Rust) at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The main theme of Rust &lt;em&gt;is not&lt;/em&gt; systems programming, speed, or memory safety - it's moving runtime problems to compile time. Everything else is incidental. This is an invaluable quality of any language, and is something Rust greatly excels at.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/leki5o/advantages_of_building_a_crud_web_application_in/gmfq2w9/"&gt;/u/OS6aDohpegavod4 on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1001"&gt;Chris&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lhe7yi/this_week_in_rust_377/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry></feed>