<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/feeds/twir-contributors.atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2018-07-17T00:00:00-04:00</updated><entry><title>This Week in Rust 243</title><link href="https://this-week-in-rust.org/blog/2018/07/17/this-week-in-rust-243/" rel="alternate"></link><updated>2018-07-17T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2018-07-17:blog/2018/07/17/this-week-in-rust-243/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/clippy-is-available-as-a-rustup-component/7967"&gt;Clippy is now available as a rustup component&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/announcing-state-of-rust/7937"&gt;Announcing State of Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/8zpp5f/auditing_popular_crates_how_a_oneline_unsafe_has/"&gt;Auditing popular crates: how a one-line unsafe has nearly ruined everything&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ralfj.de/blog/2018/07/13/arc-synchronization.html"&gt;The tale of a bug in Arc: Synchronization and data races&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.joshmcguigan.com/blog/betafpv-drone-flight-controller-hello-rust/"&gt;Running Rust on a drone flight controller&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-2/"&gt;Writing a GPU-accelerated path tracer in Rust - part 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/programming-servo-the-script-event-loop-be687b985b3e"&gt;Programming Servo: a 'script' event-loop&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/teiesti/compdep/blob/master/compdep.pdf"&gt;Compatibility with dependencies&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustwasm.github.io/2018/07/10/this-week-in-rust-wasm-004.html"&gt;This week in Rust and WebAssembly 4&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/the-embedded-working-group-newsletter-7/7959"&gt;The Embedded WG newsletter 7&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/2018-edition-end-of-week-post-2018-07-13/7943"&gt;2018 Edition - end of week post (2018-07-13)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/possible-stabilizations-for-2018-edition-preview-2/7983"&gt;Possible stabilizations for 2018 Edition Preview 2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/jkcclemens/paste"&gt;paste&lt;/a&gt;, a self-hosted pastebin made of a lot of Rust and a little Ruby. Thanks to &lt;a href="https://users.rust-lang.org/u/jkcclemens"&gt;Kyle Clemens&lt;/a&gt; for both crate and suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mobile.twitter.com/japaricious/status/1017934106318032901"&gt;Help port musl's libm to Rust, for math support in WASM/core/no_std code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/image-png/issues/80"&gt;image-png: Unbounded memory consumption on malformed inputs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustaceans.org/findwork/starters"&gt;Get started with these beginner-friendly issues&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;172 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-07-09..2018-07-16"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52032"&gt;add the &lt;code&gt;amdgpu-kernel&lt;/code&gt; ABI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51702"&gt;infinite loop detection for const evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50250"&gt;chalk lowering rule: WellFormed-TraitRef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52314"&gt;fix ICE when using a pointer cast as array size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52191"&gt;implement &lt;code&gt;#[alloc_error_handler]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52207"&gt;improve error message shown for unsafe operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51829"&gt;remove most of &lt;code&gt;PartialEq&lt;/code&gt; and &lt;code&gt;Hash&lt;/code&gt; impls from AST and HIR structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52302"&gt;deny bare trait objects in the rest of rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52348"&gt;reach the body of functions returning &lt;code&gt;impl Trait&lt;/code&gt; but don't treat it as public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52242"&gt;NLL: suggest &lt;code&gt;ref mut&lt;/code&gt; and &lt;code&gt;&amp;amp;mut self&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52383"&gt;resolve: functions introducing procedural macros reserve a slot in the macro namespace as well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52328"&gt;proc_macro: fix crate root detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51614"&gt;correct suggestion for println&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52360"&gt;do not attempt to recompile codegen backend(s) with --keep-stage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/pull/1040"&gt;openbsd fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52081"&gt;rustc: stabilize the &lt;code&gt;proc_macro&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52046"&gt;ensure StorageDead is created even if variable initialization fails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52089"&gt;rustc_codegen_llvm: replace the first argument early in FnType::new_vtable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51622"&gt;change RangeInclusive to a three-field struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51339"&gt;add ExactChunks::remainder and ExactChunks::into_remainder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52003"&gt;implement &lt;code&gt;Option::replace&lt;/code&gt; in the core library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52149"&gt;add &lt;code&gt;#[repr(transparent)]&lt;/code&gt; to &lt;code&gt;Atomic*&lt;/code&gt; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52239"&gt;remove sync::Once::call_once 'static bound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5712"&gt;improve Debug display for a few types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5732"&gt;cargo: most sorts can be unstable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5710"&gt;implement default-run option to set default binary for cargo run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52361"&gt;rustdoc: don't panic when the cross-re-export handler sees a proc-macro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2289"&gt;Associated type bounds of form &lt;code&gt;MyTrait&amp;lt;AssociatedType: Bounds&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/52234"&gt;resolve: Modularize crate-local &lt;code&gt;#[macro_export] macro_rules&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/51934"&gt;Change behavior of &lt;code&gt;?&lt;/code&gt; as a macro separator and Kleene op in 2018 edition&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/51807"&gt;Deprecation of &lt;code&gt;str::slice_unchecked(_mut)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/41263"&gt;Tracking issue for &lt;code&gt;ToOwned::clone_into&lt;/code&gt; (&lt;code&gt;toowned_clone_into&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/51036"&gt;NLL lets borrowck observe drop order for &lt;code&gt;let (a, b);&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/50800"&gt;adds Default impl for Instant&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2497"&gt;if- and while-let-chains, take 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2500"&gt;Pattern API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2498"&gt;Hygiene opt-out (escaping) for declarative macros 2.0&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Jul 25. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-content"&gt;Jul 31. Rust Community Content Subteam Meeting at #rust-content on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Aug  1. Rust Events Team Meeting in Telegram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Aug  1. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia-Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Sydney/events/251749825/"&gt;Jul 23. Sydney, AU - Rust Sydney Meetup 14&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/BcnRust/events/251237895/"&gt;Jul 20. Barcelona, ES - BcnRust 1st meetup with Ashley Williams &amp;amp; Steve Klabnik&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Roma/events/252627092/"&gt;Jul 24. Rome, IT - Rust learning and hacking evening #10&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wroclaw/events/252190812/"&gt;Jul 25. Wrocław, PL - Rust Wroclaw Meetup #3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/xkdlvpyxkbhc/"&gt;Jul 25. Berlin, DE - OpenTechSchool - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-language-milano/events/252893336/"&gt;Jul 25. Milan, IT - Rust Language Milano - Rust Exercises&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustCologne/events/252432033"&gt;Aug  1. Cologne, DE - Rust Cologne&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxkbdc/"&gt;Jul 22. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpyxkbfc/"&gt;Jun 23. Durham, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/252275279/"&gt;Jul 24. Denver, US - Rust Boulder/Denver - Rust Denver July Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Chicago-Rust-Meetup/events/251961097/"&gt;Jul 25. Chicago, US - Rust Meetup July 2018&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-NYC/events/252181812/"&gt;Jul 25. New York, NY US - Rust NYC Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxkbhc/"&gt;Jul 25. Vancouver, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxkbmc/"&gt;Jul 29. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmyxkbpc/"&gt;Jul 31. Dallas, US - Last Tuesday Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/mffbtpyxlbcb/"&gt;Aug  1. Indianapolis, US - Indy.rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/rhvgrmyxlbcb/"&gt;Aug  1. Atlanta, US - Grab a beer with fellow Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://rustconf.com/"&gt;Aug 17. Portland, US - RustConf 2018&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="south-america"&gt;South America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.thedevelopersconference.com.br/tdc/2018/saopaulo/trilha-rust"&gt;Jul 21. São Paulo, BR - Rust at The Developers Conference - TDC2018&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustfloripa/events/xvglrpyxkbkb/"&gt;Jul 28. Florianópolis, BR - 2º Encontro Rust Floripa&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://iohk.recruiterbox.com/jobs/fk0177c?source=linkedin"&gt;Rust Software Engineer at IOHK (Remote work available)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;References are not pointers, but temporary locks on data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/u/kornel"&gt;Kornel&lt;/a&gt; &lt;a href="https://users.rust-lang.org/t/cannot-move-out-of-borrowed-content-take-2/18700/7"&gt;on rust-users&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/u/gilescope"&gt;Squirrel&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 242</title><link href="https://this-week-in-rust.org/blog/2018/07/10/this-week-in-rust-242/" rel="alternate"></link><updated>2018-07-10T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2018-07-10:blog/2018/07/10/this-week-in-rust-242/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;🎈🎉 &lt;a href="https://blog.rust-lang.org/2018/07/10/Rust-1.27.1.html"&gt;Announcing Rust 1.27.1&lt;/a&gt;. 🎉🎈&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/8wlkbe/actixweb_has_removed_all_unsound_use_of_unsafe_in/"&gt;Use of unsafe in actix-web codebase is down to &amp;lt;15 from 100+&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/8xdsx5/rust_actixweb_in_the_on_of_the_biggest_music/"&gt;Rust + actix-web in one of the biggest music festival Atlas Weekend&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@saschagrunert/a-web-application-completely-in-rust-6f6bdb6c4471"&gt;A web application completely written in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/8w9mfy/debian_is_starting_to_package_rust_crates/"&gt;Debian is starting to package Rust crates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/relative-paths-in-rust-2018/7883"&gt;Relative paths in Rust 2018&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/exploring-new-communication-channels/7859"&gt;Exploring new communication channels&lt;/a&gt;. Some Rust teams are trying out the Discord chat platform for team discussions.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2018/07/06/security-advisory-for-rustdoc.html"&gt;Security Advisory for rustdoc&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/legolord208/programming-for-redox-os-4124"&gt;Programming for Redox OS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/programming-servo-an-http-cache-edb52a7f267f"&gt;Programming Servo: an HTTP cache&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[podcast] &lt;a href="https://newrustacean.com/show_notes/e025/index.html"&gt;New Rustacean: Traits deep dive, part 3&lt;/a&gt;. Closure traits, impl trait, dyn trait, and object safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/anderejd/cargo-geiger"&gt;cargo-geiger&lt;/a&gt;, which detects usage of unsafe Rust in your project and its dependencies.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/8x1ayd/calling_all_raspberry_pi_owners_rustberry_010_has/"&gt;Rustberry: Test Rustberry 0.1 on Raspberry Pi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[medium/hard] &lt;a href="https://github.com/rust-lang-nursery/rustc-guide/issues/89"&gt;rustc-guide: Codegen: LLVM IR, Monomorphization, Codegen Units, Partitioning, Symbol Linkage and Visibility&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustaceans.org/findwork/starters"&gt;Get started with these beginner-friendly issues&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;158 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-07-02..2018-07-09"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52134"&gt;Stable release 1.27.1&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51395"&gt;Add &lt;code&gt;#[repr(transparent)]&lt;/code&gt; to some libcore types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52103"&gt;Stabilize rc_downcast&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51450"&gt;Add lint warning for inner function marked as &lt;code&gt;#[test]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51619"&gt;rust: add initial changes to support powerpc64le musl&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51548"&gt;Initialize LLVM's AMDGPU target machine, if available&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51564"&gt;Implement always-fallible TryFrom for usize/isize conversions that are infallible on some platforms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51757"&gt;Haiku: several smaller fixes to build and run rust on Haiku&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51809"&gt;Add &lt;code&gt;read_exact_at&lt;/code&gt; and &lt;code&gt;write_all_at&lt;/code&gt; methods to &lt;code&gt;FileExt&lt;/code&gt; on unix&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52159"&gt;Add the &lt;code&gt;alloc::prelude&lt;/code&gt; module&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52131"&gt;Ship clippy in manifests&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52106"&gt;Don't suggest &lt;code&gt;let&lt;/code&gt; bindings if they don't help with borrows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51979"&gt;Get rid of &lt;code&gt;TyImplTraitExistential&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51936"&gt;rename rustc's lld to rust-lld&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51914"&gt;Add outlives annotations to &lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52166"&gt;Performance improvement of Vec's swap_remove&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52073"&gt;Add a punch card to weird expressions test&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/pull/1031"&gt;Add linux musl powerpc (32-bit) support&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52018"&gt;Implementation of tool lints&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51953"&gt;Enable Atomic*.{load,store} for ARMv6-M / MSP430&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51889"&gt;Make causal tracking lazy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51895"&gt;Move self trait predicate to items&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51590"&gt;Mostly fix metadata_only backend and extract some code out of rustc_codegen_llvm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51656"&gt;Deprecate &lt;code&gt;std::env::home_dir&lt;/code&gt; and fix incorrect documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/51807"&gt;Deprecation of &lt;code&gt;str::slice_unchecked(_mut)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/41263"&gt;Tracking issue for &lt;code&gt;ToOwned::clone_into&lt;/code&gt; (&lt;code&gt;toowned_clone_into&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/51912"&gt;impl Clone for &lt;code&gt;Box&amp;lt;CStr&amp;gt;&lt;/code&gt;, &lt;code&gt;Box&amp;lt;OsStr&amp;gt;&lt;/code&gt;, &lt;code&gt;Box&amp;lt;Path&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2495"&gt;Minimum Supported Rust Version&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="asia"&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Tokyo-Rust-Meetup/events/252145423/"&gt;Jul 19. Tokyo, JP - Rust Meetup #9 in Shibuya&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Cambridge-Rust-Meetup/events/pzwshpyxkbzb/"&gt;Jul 19. Cambridge, GB - Cambridge Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/BcnRust/events/251237895/"&gt;Jul 20. Barcelona, ES - BcnRust 1st meetup with Ashley Williams &amp;amp; Steve Klabnik&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Roma/events/252627092/"&gt;Jul 24. Rome, IT - Rust learning and hacking evening #10&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utahrust/events/251816575/"&gt;Jul 12. Utah Valley, Utah, US - Utah Rust - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/oc-rust/events/252639183/"&gt;Jul 18. Orange County, US - Crash Course for Traits and Associated Types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Bay-Area/events/251862242/"&gt;Jul 18. Standford, US - Rust Bay Area - [@ Stanford] Munching Macros and Facebook's Mononoke&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/252275279/"&gt;Jul 24. Denver, US - Rust Boulder/Denver - Rust Denver July Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Chicago-Rust-Meetup/events/251961097/"&gt;Jul 25. Chicago, US - Rust Meetup July 2018&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://rustconf.com/"&gt;Aug 17. Portland, US - RustConf 2018&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.distilnetworks.com/job/?id=c2a5db5c-12ce-40f2-949c-48510acf7fa1"&gt;Software Engineer at Distil Networks, San Francisco&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;actix-web has removed all unsound use of unsafe in its codebase. It’s down to less than 15 occurences of unsafe from 100+.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/8wlkbe/actixweb_has_removed_all_unsound_use_of_unsafe_in/"&gt;u/_ar7 celebrating this commendable achievement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/542"&gt;Jules Kerssemakers&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 241</title><link href="https://this-week-in-rust.org/blog/2018/07/03/this-week-in-rust-241/" rel="alternate"></link><updated>2018-07-03T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2018-07-03:blog/2018/07/03/this-week-in-rust-241/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/rust-2018-the-home-stretch/7810"&gt;Rust 2018: the home stretch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/maxgortman/status/1012011425353461760"&gt;Microsoft announces using Rust to build some of its Azure IoT functionality&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@Razican/learning-simd-with-rust-by-finding-planets-b85ccfb724c3"&gt;Learning SIMD with Rust by finding planets&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/llvm-tools-a-new-rustup-component-for-binary-inspection-objdump-nm-size-and-profiling-profdata/7830"&gt;&lt;code&gt;llvm-tools&lt;/code&gt;, a new rustup component for binary inspection (objdump, nm, size) and profiling (profdata)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://4e6.github.io/firefox-lang-stats/"&gt;How much Rust in Firefox&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gsquire.github.io/static/post/a-rusty-go-at-channels/"&gt;A rusty go at channels&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://seanmonstar.com/post/175280388657/better-http-upgrades-with-hyper"&gt;Better HTTP upgrades with hyper&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustwasm.github.io/2018/07/02/vision-for-wasm-bindgen.html"&gt;Our Vision for wasm-bindgen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/the-embedded-working-group-newsletter-6/7842"&gt;The Embedded WG newsletter 6&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[podcast] &lt;a href="https://rusty-spike.blubrry.net/2018/06/28/episode-35-june-27-2018/"&gt;Rusty Spike Podcast - episode 35&lt;/a&gt;. Rust 1.27, new books, Microsoft, Eclipse, converting C to Rust, the Rust 2018 preview, the Rust 2018 roadmap, and RFCs.&lt;/li&gt;
&lt;li&gt;[podcast] &lt;a href="https://newrustacean.com/show_notes/e024/"&gt;New Rustacean news – Rust 1.27&lt;/a&gt;. Stable SIMD, dyn trait, rustfix and the alpha release of the Rust 2018 Edition Preview.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/datafrog"&gt;datafrog&lt;/a&gt;, the lightweight embeddable datalog engine that powers Rust's non-lexical lifetimes (NLL). Thanks to &lt;a href="https://users.rust-lang.org/u/juleskers"&gt;Jules Kerssemakers&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[good first issue] &lt;a href="https://github.com/rustwasm/wasm-bindgen/issues/275"&gt;wasm-bindgen: Expose bindings to ALL the global JS things&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustaceans.org/findwork/starters"&gt;Get started with these beginner-friendly issues&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;174 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-06-25..2018-07-02"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51122"&gt;did you mean to block nightlies on clippy?&lt;/a&gt; (a big leap forward on the way to stable clippy!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/llvm/pull/118"&gt;llvm: add DWARF for discriminated unions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/pull/1019"&gt;libc: simplify the stdbuild section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/49469"&gt;allow irrefutable &lt;code&gt;let&lt;/code&gt; patterns&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/2086-allow-if-let-irrefutables.html"&gt;#2086&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51110"&gt;loosened rules involving statics mentioning other statics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51613"&gt;obligation forest cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51444"&gt;suggestion for 'static impl Trait return&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/46720"&gt;fix incorrect type mismatch label pointing at return type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51920"&gt;use literal span for concrete type suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51921"&gt;improve the error message when &lt;code&gt;#[panic_implementation]&lt;/code&gt; is missing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51862"&gt;point to lifetime spans on lifetime errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51866"&gt;add modifier keyword spans to hir::Visibility; improve unreachable-pub, private-no-mangle lint suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51822"&gt;provide existing ref suggestions for more E0308 errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50966"&gt;&lt;code&gt;Self&lt;/code&gt; in where clauses may not be object safe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51883"&gt;suggest correct comparison against negative literal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51149"&gt;lint to favor &lt;code&gt;..=&lt;/code&gt; over &lt;code&gt;...&lt;/code&gt; range patterns; migrate to &lt;code&gt;..=&lt;/code&gt; throughout codebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51839"&gt;detect overflows of non u32 shifts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51321"&gt;&lt;code&gt;HirId&lt;/code&gt;-ification, continued&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51849"&gt;optimize &lt;code&gt;places_conflict&lt;/code&gt; to avoid complex vectors etc.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51729"&gt;NLL: better move errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51536"&gt;NLL: bad error message when converting anonymous lifetime to &lt;code&gt;'static&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51896"&gt;NLL: introduce dirty list to liveness, eliminate &lt;code&gt;ins&lt;/code&gt; vector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51538"&gt;convert NLL ops to caches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51869"&gt;avoid needless allocations in &lt;code&gt;liveness_of_locals&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51833"&gt;speed up compilation of large constant arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51496"&gt;implement &lt;code&gt;#[macro_export(local_inner_macros)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51492"&gt;use &lt;code&gt;Ident&lt;/code&gt;s in HIR and remove emulation of hygiene with gensyms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51882"&gt;always check type_dependent_defs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51731"&gt;fix ICEs when using continue as an array length inside closures (inside loop conditions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51747"&gt;add error for using null characters in &lt;code&gt;#[export_name]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51773"&gt;don't inspect the generated existential type items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51789"&gt;don't ICE when performing &lt;code&gt;lower_pattern_unadjusted&lt;/code&gt; on a &lt;code&gt;TyError&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51569"&gt;make the public API of the &lt;code&gt;alloc&lt;/code&gt; crate a subset of &lt;code&gt;std&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51730"&gt;new safe associated functions for &lt;code&gt;PinMut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51944"&gt;make custom trait object for &lt;code&gt;Future&lt;/code&gt; generic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51598"&gt;optimize sum of Durations by using custom function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/49987"&gt;add &lt;code&gt;str::split_ascii_whitespace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50357"&gt;&lt;code&gt;Arc&lt;/code&gt;: remove unused allocation from &lt;code&gt;Weak::new()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51893"&gt;make &lt;code&gt;BTreeMap::clone()&lt;/code&gt; not allocate when cloning an empty tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50997"&gt;make &lt;code&gt;FileMap::&lt;/code&gt;{&lt;code&gt;lines&lt;/code&gt;, &lt;code&gt;multibyte_chars&lt;/code&gt;, &lt;code&gt;non_narrow_chars&lt;/code&gt;} non-mutable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51178"&gt;implement &lt;code&gt;PartialEq&lt;/code&gt; between &lt;code&gt;&amp;amp;str&lt;/code&gt; and &lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51290"&gt;&lt;code&gt;park&lt;/code&gt;/&lt;code&gt;park_timeout&lt;/code&gt;: prohibit spurious wakeups in next &lt;code&gt;park&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50630"&gt;fix possibly endless loop in &lt;code&gt;ReadDir&lt;/code&gt; iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51511"&gt;stabilize &lt;code&gt;Iterator::flatten&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51835"&gt;stabilize &lt;code&gt;to_bytes&lt;/code&gt; and &lt;code&gt;from_bytes&lt;/code&gt; for integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5625"&gt;cargo: remove all 4 &lt;code&gt;Rc&lt;/code&gt; clones in &lt;code&gt;min_candidates&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5620"&gt;cargo: display a one line progress of what crates are currently built&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5619"&gt;cargo: remove redundant hashmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51791"&gt;rustdoc: minify css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/1441"&gt;crates.io: &lt;code&gt;dyn&lt;/code&gt; all the things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/1448"&gt;crates.io: forbid tarballs with hard links being uploaded&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2345"&gt;RFC 2345: Allow panicking in constants&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2296"&gt;RFC 2296: Add &lt;code&gt;Option::replace&lt;/code&gt; to the core library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2344"&gt;RFC 2344: Allow &lt;code&gt;loop&lt;/code&gt; in constant evaluation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2302"&gt;RFC 2302: Tuple struct construction with &lt;code&gt;Self(v1, v2, ..)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2397"&gt;RFC 2397: Introduce &lt;code&gt;#[do_not_recommend]&lt;/code&gt; to control errors for trait impls&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2478"&gt;Amend RFC 0430: Allow underscores between numbers in CamelCase names&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2233"&gt;String reflection&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/41263"&gt;Tracking issue for &lt;code&gt;ToOwned::clone_into&lt;/code&gt; (&lt;code&gt;toowned_clone_into&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/44608"&gt;Tracking issue for &lt;code&gt;Rc::downcast&lt;/code&gt; (&lt;code&gt;rc_downcast&lt;/code&gt; feature)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/51230"&gt;Respect -Z no-verify during LTO&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/51912"&gt;impl Clone for &lt;code&gt;Box&amp;lt;CStr&amp;gt;&lt;/code&gt;, &lt;code&gt;Box&amp;lt;OsStr&amp;gt;&lt;/code&gt;, &lt;code&gt;Box&amp;lt;Path&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/51395"&gt;Add &lt;code&gt;#[repr(transparent)]&lt;/code&gt; to some libcore types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/50597"&gt;Add &lt;code&gt;TryFrom&amp;lt;{integer}&amp;gt;&lt;/code&gt; for &lt;code&gt;bool&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2492"&gt;Existential types with external definition&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2490"&gt;Add a replace_with method to Option&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-community"&gt;Jul 11. Rust Community Team Meeting at #rust-community on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-content"&gt;Jul 17. Rust Community Content Subteam Meeting at #rust-content on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Jul 18. Rust Events Team Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-community"&gt;Jul 18. Rust Community Team Meeting at #rust-community on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Tokyo-Rust-Meetup/events/252145423/"&gt;Jul 19. Tokyo, JP - Rust Meetup #9 in Shibuya&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Rhein-Main/events/251928672"&gt;Jul  6. Darmstadt, DE - Rhein-Main Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Hack-Learn-Karlsruhe/events/252267570/"&gt;Jul  9. Karlsruhe, DE - Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Zurich/events/250386292/"&gt;Jul 11. Zurich, CH - Actix.rs - July Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/xkdlvpyxkbpb/"&gt;Jul 11. Berlin, DE - OpenTechSchool - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Cambridge-Rust-Meetup/events/pzwshpyxkbzb/"&gt;Jul 19. Cambridge, GB - Cambridge Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxkblb/"&gt;Jul  8. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/pkggvpyxkbmb/"&gt;Jul  9. Seattle, US - Monthly Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxjbkc/"&gt;Jul 11. Vancouver, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dbcfrpyxkbqb/"&gt;Jul 12. Columbus, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utahrust/events/251816575/"&gt;Jul 12. Utah Valley, Utah, US - Utah Rust - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxkbtb/"&gt;Jul 15. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Bay-Area/events/251862242/"&gt;Jul 18. Standford, US - Rust Bay Area - [@ Stanford] Munching Macros and Facebook's Mononoke&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://rustconf.com/"&gt;Aug 17. Portland, US - RustConf 2018&lt;/a&gt;.&lt;/strong&gt; Registration is now open.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=17442861"&gt;Rust Engineer at Commure, Inc. San Francisco, US&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Freedom to shoot yourself in the foot is not a rust marketing point 😉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/u/eugene2k"&gt;eugene2k&lt;/a&gt; on &lt;a href="https://users.rust-lang.org/t/why-cant-i-increment-a-variable-like-this/18287/14"&gt;rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/u/dylan.dpc"&gt;DPC&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 240</title><link href="https://this-week-in-rust.org/blog/2018/06/26/this-week-in-rust-240/" rel="alternate"></link><updated>2018-06-26T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2018-06-26:blog/2018/06/26/this-week-in-rust-240/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;🎈🎉 &lt;a href="https://blog.rust-lang.org/2018/06/21/Rust-1.27.html"&gt;Announcing Rust 1.27&lt;/a&gt;. 🎉🎈&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/rust-2018-an-early-preview/7776"&gt;Rust 2018: an early preview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustwasm.github.io/2018/06/25/vision-for-rust-and-wasm.html"&gt;Our vision for Rust and WebAssembly&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2018/06/20/proposal-for-a-staged-rfc-process/"&gt;Proposal for a staged RFC process&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speice.io/2018/06/dateutil-parser-to-rust.html"&gt;What I learned: Porting Dateutil parser from Python to Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2018/06/24/arc-more-atomic.html"&gt;Making &lt;code&gt;Arc&lt;/code&gt; more atomic&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitshifter.github.io/2018/06/20/the-last-10-percent/"&gt;Optimising path tracing: the last 10%&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ethanfrei.com/posts/rust-with-rocket-elm-running-on-heroku.html"&gt;Rust with Rocket + Elm running on Heroku&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boiethios.gitlab.io/blog/2018-06-21_GATs_iterators.html"&gt;Generic associated types in iterators&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[podcast] &lt;a href="https://rusty-spike.blubrry.net/2018/06/20/episode-34-jun-20-2018/"&gt;Rusty Spike Podcast - episode 34&lt;/a&gt;. DivANS, IDE support, Aaron’s continued series, async/await, non-lexical lifetimes, and Rust Reach.&lt;/li&gt;
&lt;li&gt;[podcast] &lt;a href="https://newrustacean.com/show_notes/e024/"&gt;New Rustacean: e024 – Traits deep dive, part 2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/llogiq/mutagen"&gt;mutagen&lt;/a&gt;, a mutation testing framework for Rust. Thanks to llogiq for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rustaceans.org/findwork/starters"&gt;Get started with these beginner-friendly issues&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;95 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-06-18..2018-06-25"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51580"&gt;async/await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51543"&gt;rename OOM to allocation error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51335"&gt;prohibit &lt;code&gt;global_allocator&lt;/code&gt; in submodules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51383"&gt;run some stuff in parallel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51617"&gt;reduce number of allocations done by NLL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51660"&gt;NLL: walk the MIR only once for the "unused mut" lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51275"&gt;NLL diagnostics: revise &lt;code&gt;fn check_access_permissions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51460"&gt;improve memoization and refactor NLL type check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51414"&gt;add existential type definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51664"&gt;make more &lt;code&gt;libsyntax&lt;/code&gt; methods public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50383"&gt;add ability to apply custom derive to union types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/48149"&gt;The Great Generics Generalisation: HIR Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51278"&gt;fix processing mod with multi-level path on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51666"&gt;disable probestack when GCOV profiling is being used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51681"&gt;support future deprecation for rustc_deprecated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51733"&gt;fix an ICE when matching over const slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51686"&gt;yet another "old borrowck" bug around match default bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51688"&gt;fix erroneous error note when using field after move&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51750"&gt;three diagnostics upgrades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51463"&gt;various changes to existing diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51670"&gt;don't suggest incorrect syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51785"&gt;use fstatat64 where available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51601"&gt;specialize &lt;code&gt;StepBy&amp;lt;Range(Inclusive)&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51404"&gt;&lt;code&gt;impl Hash for !&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50894"&gt;stabilize std::path::Path::ancestors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50698"&gt;replace tempdir by tempfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51482"&gt;rustdoc: greatly improve tables display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51367"&gt;rustbuild: use quiet tests by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50336"&gt;ship LLVM tools with the toolchain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2345"&gt;Allow panicking in constants&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2344"&gt;Allow &lt;code&gt;loop&lt;/code&gt; in constant evaluation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2397"&gt;Introduce &lt;code&gt;#[do_not_recommend]&lt;/code&gt; to control errors for trait impls&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2302"&gt;Tuple struct construction with &lt;code&gt;Self(v1, v2, ..)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2478"&gt;Update RFC 0430 to allow underscores between numbers in CamelCase names&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2296"&gt;Add &lt;code&gt;Option::replace&lt;/code&gt; to the core library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2429"&gt;Reserve &lt;code&gt;delegate&lt;/code&gt; as a keyword in edition 2018&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2443"&gt;Reserve &lt;code&gt;f(a = b)&lt;/code&gt; in Rust 2018&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/35896"&gt;Tracking issue for "macro naming and modularisation" (RFC #1561)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/41263"&gt;Tracking issue for &lt;code&gt;ToOwned::clone_into&lt;/code&gt; (&lt;code&gt;toowned_clone_into&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/49708"&gt;&lt;code&gt;extern type&lt;/code&gt; cannot support &lt;code&gt;size_of_val&lt;/code&gt; and &lt;code&gt;align_of_val&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/49792"&gt;Tracking issue for the to_bytes and from_bytes methods of integers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/50884"&gt;Implement &lt;code&gt;iter::{Sum&amp;lt;U&amp;gt;, Product&amp;lt;U&amp;gt;}&lt;/code&gt; for &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/51178"&gt;Implement &lt;code&gt;PartialEq&lt;/code&gt; between &lt;code&gt;&amp;amp;str&lt;/code&gt; and &lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/51285"&gt;Remove quote_*! macros&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/49786"&gt;Can't overload indexing for arrays&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2483"&gt;Add new channels for long term support (LTS) releases&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2480"&gt;Stabilize the alloc crate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2484"&gt;Conversions: &lt;code&gt;FromLossy&lt;/code&gt; and &lt;code&gt;TryFromLossy&lt;/code&gt; traits&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-content"&gt;Jul  3. Rust Community Content Subteam Meeting at #rust-content on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-community"&gt;Jul  4. Rust Community Team Meeting at #rust-community on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Jul  4. Rust Events Team Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-community"&gt;Jul 11. Rust Community Team Meeting at #rust-community on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="africa"&gt;Africa&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/cpblrnyxkbfb/"&gt;Jul  3. Johannesburg, ZA - Monthly Meetup of the Johannesburg Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Mozilla-Community-Dresden/events/252020329/"&gt;Jul  4. Dresden, DE - Mozilla Community Dresden - Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Rhein-Main/events/251928672"&gt;Jul  6. Darmstadt, DE - Rhein-Main Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Hack-Learn-Karlsruhe/events/252267570/"&gt;Jul  9. Karlsruhe, DE - Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Zurich/events/250386292/"&gt;Jul 11. Zurich, CH - Actix.rs - July Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/xkdlvpyxkbpb/"&gt;Jul 11. Berlin, DE - OpenTechSchool - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxkbcb/"&gt;Jul  1. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/rhvgrmyxkbgb/"&gt;Jul  4. Atlanta, US - Grab a beer with fellow Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/mffbtpyxkbgb/"&gt;Jul  4. Indianapolis, US - Indy.rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxkblb/"&gt;Jul  8. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/pkggvpyxkbmb/"&gt;Jul  9. Seattle, US - Monthly Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxjbkc/"&gt;Jul 11. Vancouver, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dbcfrpyxkbqb/"&gt;Jul 12. Columbus, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utahrust/events/251816575/"&gt;Jul 12. Utah Valley, Utah, US - Utah Rust - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://rustconf.com/"&gt;Aug 17. Portland, US - RustConf 2018&lt;/a&gt;.&lt;/strong&gt; Registration is now open.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nymi.com/careers/sr-software"&gt;Senior Software Developer at Nymi, Toronto, CA&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/8s0tk1/9095_remote_senior_rust_engineer_ticketmaster/"&gt;Senior Rust Engineer at Ticketmaster, Arizona, US&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m hesitating in cc’ing [the crate author] because I’d rather this be an educational conversation, and not a unsafety witchhunt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– vitalyd on &lt;a href="https://users.rust-lang.org/t/how-not-to-use-unsafe-code/18170/13"&gt;rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary></entry></feed>