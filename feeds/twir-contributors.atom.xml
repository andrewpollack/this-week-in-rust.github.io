<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/feeds/twir-contributors.atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2021-06-02T00:00:00-04:00</updated><entry><title>This Week in Rust 393</title><link href="https://this-week-in-rust.org/blog/2021/06/02/this-week-in-rust-393/" rel="alternate"></link><updated>2021-06-02T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-06-02:blog/2021/06/02/this-week-in-rust-393/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No official blog posts or research papers this week.&lt;/p&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/nqt4ul/rib_newsletter_24_bridges/"&gt;RiB Newsletter #24 - Bridges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/05/31/changelog-79.html"&gt;rust-analyzer Changelog #79&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thephilbert.io/2021/05/31/gcc-rust-monthly-report-6-may-2021/"&gt;GCC Rust Monthly Report #6 May 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tensorbase.io/thisweek/2021-06-02-tw_5/"&gt;This Week In TensorBase 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2021-05-announcing-tower-http"&gt;Announcing tower-http&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.abstractinvoke.com/05-07-unftp.html"&gt;Turning rusty tech into Rust ~ When you need to FTP but don’t want to&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/object-oriented-programming-concepts-in-rust/"&gt;Object Oriented Programming Concepts in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.frankel.ch/start-rust/1/"&gt;My first cup of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arunanshub/demystifying-mutability-and-references-in-rust-caf"&gt;Demystifying Mutability and References in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shnatsel.medium.com/the-simpler-alternative-to-gcc-rs-90da2b3685d3"&gt;The simpler alternative to GCC-RS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chorman64.medium.com/why-i-support-gcc-rs-dc69ebfffd60"&gt;Why I support GCC-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/rust-test-drive/"&gt;Taking Rust for a Test Drive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://polkadot.network/a-polkadot-postmortem-24-05-2021/"&gt;A Polkadot Postmortem - 24.05.2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/nqjyb7/the_most_annoying_bug_ive_had_to_track_down/"&gt;The Most Annoying Bug I've Had To Track Down&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/1nKC505_uTU"&gt;There and back again - Our Rust adoption journey [Open Source North 2021 / Luca Palmieri]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pretzelhammer/rust-blog/blob/master/posts/restful-api-in-sync-and-async-rust.md"&gt;RESTful API in Sync &amp;amp; Async Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/rust-closures-will-make-your-life-easy/"&gt;Rust Closures will make your life easy.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://c-hirsch.de/2020-05-30-idiomatic-rust-binary-search-extended"&gt;Idiomatic Rust Binary Search Extended&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/lets-know-about-the-relation-between-rust-and-safe-programming/"&gt;The Relation between “Rust and Safe Programming” !!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ecorax.net/tightness/"&gt;Tightness Driven Development in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://justin.restivo.me/posts/2021-05-30-nix-rust-riscv-toy-kernel.html"&gt;Writing a "hello world" Riscv Kernel with Nix in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Dhghomon/rust-fsharp"&gt;Rust for Fsharpers and F# for Rustaceans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexandrempsantos.com/deno/creating-a-deno-plugin/"&gt;Creating a Deno plugin with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itnext.io/firebird-rust-92e9043261cc"&gt;How to use the Firebird database with Rust language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seanwatters/reactive-ui-components-in-rust-290b"&gt;Reactive UI components in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/redis-streams-in-action-part-2-rust-app-to-consume-from-the-twitter-streaming-api-1ji4"&gt;Redis Streams in Action - Part 2 (Rust app to consume from the Twitter Streaming API)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblog.arcana.rs/how-to-make-plugins-system-with-rust-and-webassembly"&gt;How to make plugins system with Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jojolepro.com/blog/2021-06-01_getting_started_with_ecs/"&gt;Getting started with ECS using Planck ECS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plume.benboeckel.net/~/JustAnotherBlog/designing-rust-bindings-for-rest-ap-is"&gt;Designing Rust bindings for REST APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charles-schleich.medium.com/webrtc-video-chat-tutorial-using-rust-wasm-fa340f7aeef9"&gt;WebRTC Video chat tutorial using Rust+WASM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] &lt;a href="https://blog.budshome.com/budshome/rust-zhong-,dui-wang-zhi-jin-xing-yi-bu-kuai-zhao-,bing-qie-tian-jia-shui-yin-xiao-guo-de-shi-jian"&gt;Take Web Screenshot &amp;amp; Make Watermark in Rust (Rust 中，对网址进行异步快照，并添加水印效果的实践)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/IPmRDS0OSxM"&gt;A Firehose of Rust, for busy people who know some C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/nq3pxh/new_rust_book_rust_for_rustaceans_by_jon_gjengset/"&gt;New Rust book: Rust for Rustaceans by Jon Gjengset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/nnioxj/just_to_say_thank_you/"&gt;Just to say, thank you&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/antoyo/rustc_codegen_gcc"&gt;rust-codegen-gcc&lt;/a&gt;, a drop-in replacement for the LLVM-based rust compiler backend targetting GCC.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/920"&gt;Josh Triplett&lt;/a&gt; for the nomination&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/npnl1p/help_wanted_with_backrollrs_new_networking_library/"&gt;Backroll-rs is looking for contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;255 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-05-24..2021-05-31"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85633"&gt;post-monomorphization errors traces MVP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85607"&gt;make closures inherit their parent's "safety context"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/2779"&gt;fix low-memory issue and lower tier platforms with no sysinfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85590"&gt;fix bootstrap using host exe suffix for cargo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85546"&gt;const-eval: disallow unwinding across functions that !fn_can_unwind()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85481"&gt;deal with const_evaluatable_checked in ConstEquate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85478"&gt;disallow shadowing const parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85390"&gt;optimize proc macro bridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84968"&gt;fix incorrect suggestions for E0605&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84701"&gt;stabilize member constraints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84221"&gt;E0599 suggestions and elision of generic argument if no canditate is found&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85767"&gt;a bit more polish on const eval errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85804"&gt;merge CrateDisambiguator into StableCrateId&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85762"&gt;do not try to build LLVM with Zlib on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/271"&gt;use u64 for the GroupWord on WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85729"&gt;don't hash &lt;code&gt;thir_body&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85704"&gt;emit a hard error when a panic occurs during const-eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85702"&gt;don't sort a Vec before computing its DepTrackingHash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85645"&gt;demote &lt;code&gt;ControlFlow::&lt;/code&gt;{&lt;code&gt;from&lt;/code&gt;, &lt;code&gt;into&lt;/code&gt;}&lt;code&gt;_try&lt;/code&gt; to &lt;code&gt;pub(crate)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85819"&gt;remove &lt;code&gt;Ipv6Addr::is_unicast_link_local_strict&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83772"&gt;make &lt;code&gt;Step&lt;/code&gt; trait safe to implement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85814"&gt;fix unsoundness of &lt;code&gt;Debug&lt;/code&gt; implementation for &lt;code&gt;linked_list::IterMut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85535"&gt;&lt;code&gt;Weak&lt;/code&gt;'s type parameter may dangle on &lt;code&gt;drop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83770"&gt;add &lt;code&gt;TrustedRandomAccess&lt;/code&gt; specialization for &lt;code&gt;Vec::extend()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85737"&gt;enable &lt;code&gt;Vec&lt;/code&gt;'s calloc optimization for &lt;code&gt;Option&amp;lt;NonZero&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85625"&gt;prevent double &lt;code&gt;drop&lt;/code&gt; in &lt;code&gt;Vec::dedup_by&lt;/code&gt; if a destructor panics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85610"&gt;fix pointer provenance in &lt;code&gt;&amp;lt;[T]&amp;gt;::copy_within&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85801"&gt;add &lt;code&gt;String::extend_from_within&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85719"&gt;add &lt;code&gt;inline&lt;/code&gt; attr to &lt;code&gt;CString::into_inner&lt;/code&gt; so it can optimize out &lt;code&gt;NonNull&lt;/code&gt; checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/268"&gt;hashbrown: guard against allocations exceeding &lt;code&gt;isize::MAX&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2429"&gt;futures: allow no limit for buffered stream combinators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9488"&gt;cargo: &lt;code&gt;cargo tree -e no-proc-macro&lt;/code&gt; to hide procedural macro dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85252"&gt;rustup: bring back &lt;code&gt;x86_64-sun-solaris&lt;/code&gt; target to rustup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7187"&gt;clippy: add &lt;code&gt;avoid_breaking_exported_api&lt;/code&gt; config option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7292"&gt;clippy: add lint &lt;code&gt;suspicious_splitn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7268"&gt;clippy: move &lt;code&gt;semicolon_if_nothing_returned&lt;/code&gt; to &lt;code&gt;pedantic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7294"&gt;clippy: improve message for &lt;code&gt;not_unsafe_ptr_arg_deref&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7287"&gt;clippy: fix ICE in &lt;code&gt;too_many_lines&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7282"&gt;clippy: fix &lt;code&gt;allow&lt;/code&gt; on some statement lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7281"&gt;clippy: fix &lt;code&gt;missing_docs_in_private_items&lt;/code&gt; false negative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7256"&gt;clippy: add the ability to invalidate caches to force metadata collection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;Busy week, with several reverted PRs due to performance regressions, but overall a positive week.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=cdbe2888979bb8797b05f0d58a6f6e60753983d2&amp;amp;end=1160cf864f2a0014e3442367e1b96496bfbeadf4&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;cdbe288..1160cf8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3 Regressions, 3 Improvements, 5 Mixed&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-06-01.md"&gt;Full report here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3085"&gt;RFC: 2021 Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2845"&gt;RFC: Supertrait item shadowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2528"&gt;Type-changing struct update syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2509"&gt;RFC: Introduce concat_bytes!() to join [u8] and byte str analogous to concat! for str&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2316"&gt;RFC: Overconstraining and omitting unsafe in impls of unsafe trait methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85193"&gt;Re-add support for parsing (and pretty-printing) inner-attributes in match body&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3136"&gt;Switch from travis to github actions.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccjblb/"&gt;June 8, 2021, Seattle, WA, US - Monthly meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;June 10, 2021, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/fqpkjsyccjbvb/"&gt;June 16, 2021, Vancouver, BC, US - Rust in Mozilla's Data Platform - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/277575285/"&gt;June 17, 2021, Denver, CO, US - Learning Rust as a Python/Javascript developer by Juhis - Rust Denver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccjbmb/"&gt;June 9, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;TrueLayer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/262DB83659/"&gt;Rust Backend Engineer (London, UK)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team/Architect-Rust-Library-Design/53838c2d-1e48-5cec-8bb4-8fa8420e6171"&gt;Architect - Rust Library Design (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team/Applied-Cryptographer-Rust/61e07e82-0589-51de-b250-42dbceb31c3c"&gt;Applied Cryptographer - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tweede golf&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/vacatures/2/lead-developer-embedded-rust"&gt;Lead Developer Embedded Rust (Nijmegen, NL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dedalus Healthcare&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.karriere.at/jobs/5820070"&gt;Medical Visualization Software Engineer (Remote, EU timezone)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Yat Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.arbeitnow.com/view/senior-rust-developer-tari-71761"&gt;Senior Rust Developer (Remote, EU timezone)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ubisoft&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.smartrecruiters.com/Ubisoft2/743999750187882-software-engineer-machine-learning-f-h-nb"&gt;Software Engineer - Machine Learning (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NZXT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer for CAM (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=317"&gt;Senior Software Engineer for Streaming Software (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Parity&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://grnh.se/b61620583us"&gt;Junior/Senior Rust Solution Engineer - Substrate (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parity.io/jobs"&gt;Multiple Rust / Blockchain Engineering Positions Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken?team=Engineering"&gt;Several Rust Engineering Positions Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;p&gt;Ok, you wanted it. Let's go full meta:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I recently graduated with my Ph.D., after having worked on 5 different versions of my simulator, written in 4 different languages. The last version, written in pure, safe rust, worked correctly in part because of rust's strong guarantees about what 'safety' means, which I was able to leverage to turn what would normally be runtime errors into compile time errors. That let me catch errors that would normally be days or weeks of debugging into relatively simple corrections. [...] So, once again, thank you to everyone!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://internals.rust-lang.org/t/ot-thank-you-to-everyone-that-has-made-rust-possible/14777"&gt;Cem Karan on rust-internals&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1053"&gt;Josh Triplett&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 392</title><link href="https://this-week-in-rust.org/blog/2021/05/26/this-week-in-rust-392/" rel="alternate"></link><updated>2021-05-26T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-05-26:blog/2021/05/26/this-week-in-rust-392/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No official blog posts, newsletters, or research papers this week.&lt;/p&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/05/24/changelog-78.html"&gt;rust-analyzer Changelog #78&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tensorbase.io/thisweek/2021-05-26-tw_4/"&gt;This Week In TensorBase 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.antoyo.xyz/rustc_codegen_gcc-run-core-tests"&gt;rustc_codegen_gcc can now run libcore’s tests and pass most of them!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v2.parceljs.org/blog/beta3/"&gt;Parcel 2 beta 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lettre.rs/post/lettre-0-10-0-rc-1/"&gt;Announcing lettre 0.10.0-rc.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/njbt9s/announcing_typedsql_beta_zerocost_orm_with_fast/"&gt;Announcing typed-sql beta! Zero-cost ORM with fast compile times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2021-05-valuable"&gt;Announcing Valuable, a library for object-safe value inspection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bnjjj.medium.com/why-and-how-we-wrote-a-compiler-in-rust-blog-post-series-1-x-the-context-e2f83b10edb9"&gt;Why and how we wrote a compiler in Rust (blog post series 1/X): the context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/lagierandlagier/2d-web-rendering-with-rust-4401cf133f31"&gt;2D Web Rendering with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mateusfreira.github.io/@mateusfreira-a-fast-to-sync-search-and-space-optimized-replication-algorithm-written-in-rust-the-Nun-db-data-replication-model/"&gt;A fast-to-sync/search and space-optimized replication algorithm written in Rust, the gun-db data replication model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jam1.re/blog/adventures-in-rustc-forking"&gt;Adventures in rustc Forking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pvk.ca/Blog/2021/05/14/baseline-implementations-should-be-predictable/"&gt;Baseline implementations should be predictable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.possiblerust.com/pattern/naming-your-lifetimes"&gt;Naming Your Lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://psibi.in/posts/2021-05-22-credstash.html"&gt;Rucredstash release &amp;amp; Rust experience from a Haskeller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redpoll.ai/blog/imm-with-rv-12/"&gt;Creating an Infinite Mixture Model in Rust with the rv crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.erebe.dev/blog/debug-rust-aplication-inside-container/index.html"&gt;Debug rust application inside container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.trailofbits.com/post/write-rust-lints-without-forking-clippy"&gt;Write Rust lints without forking Clippy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://actually.fyi/posts/zig-makes-rust-cross-compilation-just-work/"&gt;Zig Makes Rust Cross-Compilation Just Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infinyon.com/blog/2021/05/ebpf-routing-rust/"&gt;Routing traffic in Rust using eBPF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://loige.co/how-to-to-string-in-rust/"&gt;How to to_string in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mitchartemis/building-small-desktop-apps-with-ember-js-and-tauri-3o28"&gt;Building small desktop apps with Ember.js and Tauri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meesha.blog/2021/coming-to-rust-from-django.html"&gt;Coming to Rust from Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beachape.com/blog/2021/05/25/structural-typing-in-rust/"&gt;Structural Typing in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shane-o.dev/blog/binary-search-rust"&gt;Idiomatic Rust? Implementing binary search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] &lt;a href="https://blog.budshome.com/budshome/shi-yong-rust-zuo-yi-bu-shu-ju-cai-ji-de-shi-jian"&gt;Practice of web crawling with async Rust (使用 Rust 做异步数据采集的实践)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/Bw8-vvtA-E8"&gt;Lock-Free to Wait-Free Simulation in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.manning.com/books/rust-web-development"&gt;Rust Web Development - MEAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/nldg5c/fuchsia_os_partially_written_in_rust_has_shipped/"&gt;Fuchsia OS partially written in Rust has shipped&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/zheland/typed-index-collections"&gt;typed-index-collections&lt;/a&gt;, a crate that lets you make Vecs with custom-typed indices.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/913"&gt;Tim&lt;/a&gt; for the nomination&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No issues were proposed for CfP&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;280 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-05-17..2021-05-24"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85338"&gt;implement more &lt;code&gt;Iterator&lt;/code&gt; methods on &lt;code&gt;core::iter::Repeat&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85176"&gt;override &lt;code&gt;clone_from&lt;/code&gt; for some types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85078"&gt;stabilize &lt;code&gt;const_fn_unsize&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84767"&gt;implement the new desugaring from &lt;code&gt;try_trait_v2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84717"&gt;impl &lt;code&gt;FromStr&lt;/code&gt; for &lt;code&gt;proc_macro::Literal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83366"&gt;stabilize &lt;code&gt;extended_key_value_attributes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85575"&gt;fix auto-hide for implementations and implementors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85557"&gt;add &lt;code&gt;rustc_mir::interpret::Machine::enforce_abi()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85555"&gt;check for more things in THIR unsafeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85393"&gt;suppress spurious errors inside &lt;code&gt;async fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85391"&gt;avoid zero-length &lt;code&gt;memcpy&lt;/code&gt; in formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85382"&gt;always produce sub-obligations when using cached projection result&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85376"&gt;CTFE core engine allocation &amp;amp; memory API improvemenets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85578"&gt;CTFE &lt;code&gt;get_alloc_extra_mut&lt;/code&gt;: also provide ref to &lt;code&gt;MemoryExtra&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85375"&gt;fix missing lifetimes diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85369"&gt;suggest borrowing if a trait implementation is found for &lt;code&gt;&amp;amp;&lt;/code&gt;/&lt;code&gt;&amp;amp;mut T&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85340"&gt;remove &lt;code&gt;InPlaceIterable&lt;/code&gt; marker from &lt;code&gt;Peekable&lt;/code&gt; due to unsoundness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85596"&gt;extend &lt;code&gt;rustc_on_implemented&lt;/code&gt; to improve more &lt;code&gt;?&lt;/code&gt; error messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9486"&gt;cargo: add &lt;code&gt;cargo:rustc-link-arg-bin&lt;/code&gt; flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85602"&gt;rustdoc: don't hide inherent implementations by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7242"&gt;clippy: fix ICE in &lt;code&gt;implicit_return&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7264"&gt;clippy: fix invalid syntax in &lt;code&gt;from_iter_instead_of_collect&lt;/code&gt; suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7105"&gt;clippy: fix &lt;code&gt;needless_borrow&lt;/code&gt; suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7263"&gt;clippy: fix &lt;code&gt;redundant_closure&lt;/code&gt; for &lt;code&gt;vec![]&lt;/code&gt; macro in a closure with arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7089"&gt;clippy: don't lint &lt;code&gt;multiple_inherent_impl&lt;/code&gt; with generic arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7253"&gt;clippy: early return from &lt;code&gt;LintPass&lt;/code&gt; registration when collecting metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7246"&gt;clippy: adding the default lint level to the metadata collection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;A somewhat quiet week. Some PRs had performance runs performed on them, but the changes were merged despite this. Also, we still have issues with certain benchmarks being noisy. &lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=25a277f03df7e44643ddfcc240d034409cb2f505&amp;amp;end=cdbe2888979bb8797b05f0d58a6f6e60753983d2&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;25a277..cdbe2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 2 Improvements, 1 Mixed
0 of them in rollups&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-05-25.md"&gt;Full report here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3114"&gt;A new prelude for the 2021 edition (trait-only edition)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3085"&gt;RFC: 2021 Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2316"&gt;RFC: Overconstraining and omitting unsafe in impls of unsafe trait methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84988"&gt;rustc: Allow safe #[target_feature] on wasm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84863"&gt;Show test type during prints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/78021"&gt;Tracking Issue for VecDeque binary search functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/74372"&gt;Tracking issue for WebAssembly SIMD support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84612"&gt;Use try_reserve in Vec's io::Write&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3131"&gt;ArrayBuilder struct for safe/efficient dynamic array initialisation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3128"&gt;RFC: I/O Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3127"&gt;A Cargo profile option trim-path to sanitise absolute paths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-London-User-Group/events/278045628/"&gt;May 27, 2021, London/Remote, UK - Runtime reflection, gRPC at scale, and more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Montreal/events/278011978/"&gt;May 27, 2021, Montréal, QC, CN - Rust MTL: Building a Scrabble AI with the fst crate - Rust Montréal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/278409501/"&gt;June 1, 2021, Dublin, IE - June Remote Meetup - Rust Dublin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/jxfdjsyccjbcb/"&gt;June 1, 2021, Buffalo, NY, US - Buffalo Rust User Group, First Tuesdays - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccjbmb/"&gt;June 9, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team/Architect-Rust-Library-Design/53838c2d-1e48-5cec-8bb4-8fa8420e6171"&gt;Architect - Rust Library Design (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Red Hat&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://global-redhat.icims.com/jobs/82606/senior-software-engineer---virtualization-&amp;amp;-storage/job?mobile=false&amp;amp;width=708&amp;amp;height=500&amp;amp;bga=true&amp;amp;needsRedirect=false&amp;amp;jan1offset=60&amp;amp;jun1offset=120"&gt;Senior Software Engineer - Virtualization &amp;amp; Storage (Remote Europe)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Starry&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.arbeitnow.com/view/rust-software-engineer-starry-293692"&gt;Rust Software Engineer (Boston, MA, US)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NZXT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer for CAM (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=317"&gt;Senior Software Engineer for Streaming Software (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kollider&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/junior-backend-engineer/en"&gt;Junior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/senior-backend-engineer/en"&gt;Senior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/devops-engineer/en"&gt;DevOps Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken?team=Engineering"&gt;Several Rust Engineering Postions Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;p&gt;Ok, you wanted it. Let's go full meta:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This time, there were two crates and one quote, which is not much, but ok. Keep it up, folks!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/ngp41e/this_week_in_rust_391/gysis5e"&gt;llogiq on reddit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1051"&gt;Patrice Peterson&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/nly298/this_week_in_rust_392/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 391</title><link href="https://this-week-in-rust.org/blog/2021/05/19/this-week-in-rust-391/" rel="alternate"></link><updated>2021-05-19T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-05-19:blog/2021/05/19/this-week-in-rust-391/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters or research papers this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/05/17/Rustup-1.24.2.html"&gt;Announcing Rustup 1.24.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/05/15/six-years-of-rust.html"&gt;Six Years of Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/05/17/changelog-77.html"&gt;rust-analyzer Changelog #77&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/05/18/changelog-147.html"&gt;IntelliJ Rust Changelog #147&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thephilbert.io/2021/05/14/gcc-rust-weekly-status-report-15/"&gt;GCC Rust Weekly Status Report 15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/martinkavik/moonzoon-dev-news-3-signals-react-like-hooks-optimizations-39lp"&gt;MoonZoon Dev News (3): Signals, React-like Hooks, Optimizations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alacritty/alacritty/releases/tag/v0.8.0"&gt;Alacritty Version 0.8.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/nekdbc/ann_micromath_200_approximationbased_embedded/"&gt;Micromath 2.0.0: approximation-based embedded arithmetic, 2D/3D vector, quarternion, and statistics library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tensorbase.io/thisweek/2021-05-19-tw_3/"&gt;This Week In TensorBase 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ddtkey.com/blog/authz-mechanisms-in-Rust/"&gt;Authorization mechanisms in Rust web applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scylladb.com/2021/02/17/scylla-developer-hackathon-rust-driver/"&gt;Scylla Developer Hackathon: Rust Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nullderef.com/blog/plugin-tech/"&gt;Plugins in Rust: The Technologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://truelayer.com/blog/grpc-load-balancing-in-rust"&gt;gRPC load-balancing in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://project-oak.github.io/rust-verification-tools/2021/05/15/verifying-vectorized-code2.html"&gt;Verifying vectorized Rust revisited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.abor.dev/p/timclicks"&gt;Routes to Discovering Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/tezedge/how-we-utilized-fuzzing-to-improve-security-in-the-tezedge-node-and-created-an-open-source-ci-tool-92ffbd804db1"&gt;How we utilized fuzzing to improve security in the TezEdge node and created an open-source CI tool for Rust code fuzzing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pancy/boost-productivity-with-rust-anf"&gt;Boost productivity with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://utopixel.games/en/blog/building-outer-wonders-for-linux/"&gt;Building Outer Wonders for Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dteare.medium.com/behind-the-scenes-of-1password-for-linux-d59b19143a23"&gt;Behind the scenes of 1Password for Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cmyr.net/blog/rust-python-learnings.html"&gt;Writing Pythonic Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://morestina.net/blog/1739/upgradable-parking_lotrwlock-might-not-be-what-you-expect"&gt;Upgradable parking_lot::RwLock might not be what you expect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/why-rust-for-embedded-development/"&gt;Why Rust for Embedded Development?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://iximiuz.com/en/posts/rust-privacy-and-visibility/"&gt;Understanding Rust Privacy and Visibility Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/what-you-cant-do-in-rust-and-what-to-do-instead/"&gt;Things you can't do in Rust (and what to do instead)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seanwatters/state-management-with-webassembly-rust-5a1g"&gt;State Management With WebAssembly and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/felixfaisal/implementing-linked-list-in-rust-3and"&gt;Implementing Linked List in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/steadylearner/how-to-use-grpc-with-rust-tonic-and-postgres-database-with-examples-3dl7"&gt;How to use gRPC with Rust Tonic and Postgres database with examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rtyler/generating-pre-signed-s3-urls-in-rust-27gd"&gt;Generating pre-signed S3 URLs in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jahwi/a-simple-user-input-collection-validation-and-conversion-library-in-rust-34cj"&gt;A simple user input collection, validation, and conversion library in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/steadylearner/how-to-make-a-telegram-bot-with-rust-teloxide-m60"&gt;How to make a cryptocurrency Telegram bot with Rust and Teloxide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redpoll.ai/blog/imm-with-rv-12/"&gt;Infinite Mixture Model in Rust with RV 0.12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/optimizing-hashmaps-even-more/"&gt;Optimizing HashMaps even more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2021-05-14-inventing-the-service-trait"&gt;Inventing the Service trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shivjm.blog/rust-macros-rule-dry-warp-routes/"&gt;Rust Macros Rule: DRY warp Routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/error-handling-rust/"&gt;Error Handling in Rust - A Deep Dive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DE] &lt;a href="https://jo-so.de/2021-01/Speicher-Rust.html"&gt;Speicherverwaltung in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ES] &lt;a href="https://dev.to/steadylearner/como-utilizar-rust-web-framework-warp-n3c"&gt;Cómo utilizar Rust web framework Warp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PT] &lt;a href="https://dev.to/henrybarreto/o-que-e-dyn-no-rust-4ol9"&gt;O que é dyn no Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] &lt;a href="https://blog.budshome.com/budshome/rust-zhong-jiang-markdown-xuan-ran-wei-html"&gt;Practice of rendering markdown to HTML in Rust (Rust web 开发中，将 markdown 渲染为 HTML 的实践)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] [series] &lt;a href="https://blog.budshome.com/budshome/ji-yu-actix-web-+-async-graphql-+-rbatis-+-postgresql---mysql-gou-jian-yi-bu-rust-graphql-fu-wu-(4)---bian-geng-fu-wu-,yi-ji-xiao-zhong-gou"&gt;Build GraphQL services based on Async Rust using actix-web + async-graphql + rbatis + postgresql / mysql (基于 actix-web + async-graphql + rbatis + postgresql / mysql 构建异步 Rust GraphQL 服务) - Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/Ys7ma3au5m0"&gt;The Rust Borrow Checker - A Deep Dive @ Rust DC, April 20 2021 w/ Nell Shamrell-Harrington&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=SNUklwUi_M4"&gt;James Munns on the state and the future of embedded &amp;amp; safety-critical Rust | Emergence Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.theregister.com/2021/05/13/rust_2021_edition/"&gt;Rust 2021 edition to arrive in October with 'more consistent panic' and other new features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ndm4ne/spacex_about_the_rust_programming_language/"&gt;SpaceX about the Rust Programming Language!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://docs.rs/arraygen"&gt;arraygen&lt;/a&gt;, a derive proc macro to generate arrays from structs.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/911"&gt;José Manuel Barroso Galindo&lt;/a&gt; for the nomination&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No issues were proposed for CfP&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;333 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-05-10..2021-05-17"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84730"&gt;add auto traits and clone trait migrations for&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/2229-capture-disjoint-fields.html"&gt;#2229&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84152"&gt;insignificant destructors for RFC #2229&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84732"&gt;add &lt;code&gt;asm!()&lt;/code&gt; support for PowerPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85279"&gt;add &lt;code&gt;asm!()&lt;/code&gt; support for PowerPC64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84107"&gt;add support for const operands and options to &lt;code&gt;global_asm!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84793"&gt;recover from invalid struct item syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85068"&gt;fix diagnostic for cross crate private tuple struct constructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85050"&gt;fix suggestions for missing return type lifetime specifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85041"&gt;suggest adding a type parameter for impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85012"&gt;fix stack overflow when checking for structural recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84278"&gt;implement span quoting for proc-macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83759"&gt;handle more span edge cases in generics diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82272"&gt;improve diagnostics for GATs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82069"&gt;show macro name in 'this error originates in macro' message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85195"&gt;store &lt;code&gt;VariantIdx&lt;/code&gt; to distinguish enum variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85178"&gt;remove &lt;code&gt;CrateNum&lt;/code&gt; parameter for queries that only work on local crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85152"&gt;adjust target search algorithm for rustlib path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85240"&gt;don't suggest adding &lt;code&gt;'static&lt;/code&gt; lifetime to arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85233"&gt;improve error message for non-exhaustive matches on non-exhaustive enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85353"&gt;allow &lt;code&gt;async {}&lt;/code&gt; expressions in const contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85324"&gt;warn about unused pub fields in non-pub structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85312"&gt;fix unused attributes on &lt;code&gt;macro_rules&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85311"&gt;box &lt;code&gt;Impl.blanket_impl&lt;/code&gt; to reduce size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85218"&gt;&lt;code&gt;#[inline(always)]&lt;/code&gt; on basic pointer methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85096"&gt;make &lt;code&gt;unchecked_&lt;/code&gt;{&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;mul&lt;/code&gt;} inherent methods unstably const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84904"&gt;BTree: no longer copy keys and values before dropping them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84751"&gt;&lt;code&gt;str::is_char_boundary&lt;/code&gt; - slight optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2433"&gt;futures-macro: improve diagnostics on type mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2438"&gt;futures: implement &lt;code&gt;try_chunks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2431"&gt;futures: change &lt;code&gt;SelectAll&lt;/code&gt; iterators to return stream instead of &lt;code&gt;StreamFuture&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2428"&gt;futures: expose iterators from &lt;code&gt;SelectAll&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2430"&gt;futures: &lt;code&gt;SelectAll::clear&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2415"&gt;futures: &lt;code&gt;FuturesUnordered::clear&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2427"&gt;futures: change &lt;code&gt;StreamExt::scan&lt;/code&gt; to pass state to closure by value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2410"&gt;futures: abortable streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9478"&gt;cargo: improve performance of git status check in &lt;code&gt;cargo package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85067"&gt;rustdoc: minimize amount of fake DefIds used in rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7133"&gt;clippy: add &lt;code&gt;needless_bitwise_bool&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7225"&gt;clippy: new lint: &lt;code&gt;unused_async&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7193"&gt;clippy: move &lt;code&gt;inconsistent_struct_constructor&lt;/code&gt; to &lt;code&gt;pedantic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7188"&gt;clippy: &lt;code&gt;needless_collect&lt;/code&gt; enhancements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6966"&gt;clippy: &lt;code&gt;while_let_on_iterator&lt;/code&gt; improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7222"&gt;clippy: add &lt;code&gt;Sized&lt;/code&gt; trait for &lt;code&gt;wrong_self_convention&lt;/code&gt; lint test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7095"&gt;clippy: &lt;code&gt;match_single_binding&lt;/code&gt;: fix invalid suggestion when match scrutinee has side effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7215"&gt;clippy: trigger &lt;code&gt;wrong_self_convention&lt;/code&gt; only if it has implicit self&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7216"&gt;clippy: stop linting else if let pattern in &lt;code&gt;option_if_let_else&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7223"&gt;clippy: fix false positives about generic args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7233"&gt;clippy: fix a &lt;code&gt;manual_unwrap_or&lt;/code&gt; false positive with deref coercion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;A lot of noise in the benchmark results this week. We are discussing (&lt;a href="https://zulip-archive.rust-lang.org/247081tcompilerperformance/06104coercionsdebugnoise.html"&gt;zulip archive&lt;/a&gt;, &lt;a href="https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/coercions-debug.20noise"&gt;live zulip&lt;/a&gt;) how best to update the benchmark set to eliminate the noisy cases that are bouncing around. Beyond that, some large improvements to a few individual benchmarks.&lt;/p&gt;
&lt;p&gt;The memory usage (&lt;a href="https://perf.rust-lang.org/?start=2021-05-11&amp;amp;end=2021-05-18&amp;amp;absolute=true&amp;amp;stat=max-rss"&gt;max-rss&lt;/a&gt;) seemed largely flat. Except for an upward trend on &lt;code&gt;tuple-stess&lt;/code&gt; that indicates 4% more memory from a week ago.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=382f748f23979e37e3e012b090e5a0313463f182&amp;amp;end=25a277f03df7e44643ddfcc240d034409cb2f505&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;382f..25a2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 Regressions, 7 Improvements, 2 Mixed
1 of them in rollups&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-05-18.md"&gt;Full report here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3085"&gt;RFC: 2021 Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2722"&gt;Allow Overloading || and &amp;amp;&amp;amp;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85078"&gt;stabilize const_fn_unsize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84988"&gt;rustc: Allow safe #[target_feature] on wasm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84910"&gt;stabilize int_error_matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84863"&gt;Show test type during prints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84701"&gt;stabilize member constraints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84662"&gt;Move UnwindSafe, RefUnwindSafe, AssertUnwindSafe to core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84612"&gt;Use try_reserve in Vec's io::Write&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82179"&gt;Add functions &lt;code&gt;Duration::try_from_secs_{f32, f64}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/79850"&gt;Allow unused variables with todo!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3124"&gt;Pinned synchronization primitives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/zppkjsycchbzb/"&gt;May 19, 2021, Vancouver, BC - Rust Study/Hack/Hang-out night - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustlab.it/en/rust-vs-go/"&gt;May 20, 2021, Online - Go vs Rust | Round table discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrycchbhc/"&gt;May 20, 2021, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;May 25, 2021, Berlin, DE - Rust and Tell - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Montreal/events/278011978/"&gt;May 27, 2021, Montréal, QC, CN - Rust MTL: Building a Scrabble AI with the fst crate - Rust Montréal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/jxfdjsyccjbcb/"&gt;June 1, 2021, Buffalo, NY, US - Buffalo Rust User Group, First Tuesdays - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Protocol Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.arbeitnow.com/view/research-engineer-cryptocompute-lab-protocol-labs-444987"&gt;Research Engineer, CryptoCompute Lab (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Amazon Web Services&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.jobs/en/jobs/1555897/applied-scientist"&gt;Applied Scientist (Boston/Cambridge Area, MA, US)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Techno Creatives&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://technocreatives.homerun.co/senior-rust-full-stack-developer/en"&gt;Senior Rust Full Stack Developer (Gothenburg, Sweden)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Paige&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/paige/jobs/5210311002"&gt;Senior Software Engineer, Visualization (Remote, Europe)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ANIXE&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://anixe.bamboohr.com/jobs/view.php?id=72"&gt;Rust Software Engineer (Wrocław, PL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NZXT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer for CAM (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=317"&gt;Senior Software Engineer for Streaming Software (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Zondax&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zondax.ch/news/embedded-systems-engineer"&gt;Embedded Systems Engineer (C/C++ &amp;amp; Rust)(Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zondax.ch/news/engineers-golang-rust"&gt;Software Engineer (Golang / Rust) (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team#open-roles"&gt;Several Rust related positions available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I often think about Rust as a process and community for developing a programming language, rather than as a programming language itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://news.ycombinator.com/item?id=27120691"&gt;throwaway894345 on hacker news&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1050"&gt;Krishna Sundarram&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ngp41e/this_week_in_rust_391/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 390</title><link href="https://this-week-in-rust.org/blog/2021/05/12/this-week-in-rust-390/" rel="alternate"></link><updated>2021-05-12T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-05-12:blog/2021/05/12/this-week-in-rust-390/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/05/11/edition-2021.html"&gt;The Plan for the Rust 2021 Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html"&gt;Announcing Rust 1.52.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/05/06/Rust-1.52.0.html"&gt;Announcing Rust 1.52.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/news/021/"&gt;This Month in Rust GameDev #21 - April 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/n5xhku/rib_newsletter_23_rewriting_in_rust/"&gt;RiB Newsletter #23 - Rewriting in Rust?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/05/10/changelog-76.html"&gt;rust-analyzer Changelog #76&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-24/"&gt;Knurling-rs changelog #24: three releases, &lt;code&gt;defmt-test&lt;/code&gt; supports more items and a nasty issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tensorbase.io/thisweek/2021-05-10-tw_2/"&gt;This Week In TensorBase 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2021/05/09/dota2-msl-compilation.html"&gt;Naga shader translation benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/n9f6vt/announcing_egui_012_the_simple_gui_library/"&gt;Announcing egui 0.12 - the simple GUI library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thephilbert.io/2021/05/10/gcc-rust-weekly-status-report-14/"&gt;GCC Rust Weekly Status Report 14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2021/05/integrating-rust-into-android-open.html"&gt;Integrating Rust Into the Android Open Source Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/developer/a-new-aws-sdk-for-rust-alpha-launch/"&gt;A New AWS SDK for Rust - Alpha Launch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gleam.run/news/gleam-v0.15-released/"&gt;Gleam v0.15 released!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://isomorphicdb.io/blog/2021/05/11/IsomorphicDB-The-Road-ahead/"&gt;IsomorphicDB. The Road ahead&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sfietkonstantin.github.io/2021/05/10/First-Crate-Pretend.html"&gt;My first Rust crate, pretend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.abor.dev/p/moonzoon"&gt;Rust on the Frontend and Backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/why-rust-for-embedded-development/"&gt;Why we should consider Rust for Embedded Developement?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shane-o.dev/blog/aiming-for-idiomatic-rust"&gt;Aiming for idiomatic Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/tenable-techblog/optimizing-700-cpus-away-with-rust-dc7a000dbdb2"&gt;Optimizing 700 CPUs Away with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/blog/2021/05/bors-confident-merges/"&gt;Improving our development confidence and productivity with Bors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@danilheres/increasing-the-level-of-parallelism-in-datafusion-4-0-d2a15b5a2093"&gt;Increasing the level of parallelism in DataFusion 4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepu.tech/my-second-impression-of-rust/"&gt;My second impression of Rust and why I think it's the best general-purpose language!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.waleedkhan.name/port-python-to-rust/"&gt;Incrementally porting a small Python project to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/6dcf3tOPOwo"&gt;Rust Verification Workshop 2021 - Ferrite: A Rust EDSL for Message-passing Protocol Verification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/iAs0gZ8o0oQ"&gt;Rust Verification Workshop 2021 - RustBelt: A Quick Dive into the Abyss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/H54VDCuT0J0"&gt;Rust Verification Workshop 2021 - Polonius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/_DM36e2A9dg"&gt;Rust Verification Workshop 2021 - Rust Interest in safety- and mission-critical environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/0DcIn7kiNxM"&gt;Rust Verification Workshop 2021 - Leveraging Compiler Intermediate Representation for Multi- and Cross-Language Verification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/babe-consensus-algorithm-and-how-to-implement-it-in-our-runtime/"&gt;BABE – Consensus Algorithm and How to Implement it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/pallets-in-substrate-and-using-them-in-runtime/"&gt;Pallets in Substrate and using them in runtime.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/steadylearner/how-to-deploy-rust-web-app-with-digitalocean-h2o"&gt;How to deploy Rust web app with DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/hamatti/learning-rust-4-parsing-json-with-strong-types-575m"&gt;Learning Rust #4: Parsing JSON with strong types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/steadylearner/how-to-use-rust-warp-web-framework-2b4e"&gt;How to use Rust web framework Warp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://misterdanb.github.io/raytracinginrust/"&gt;Ray Tracing in One Weekend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.turbo.fish/proc-macro-error-handling/"&gt;Procedural Macros: Error handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mnwa.medium.com/speeding-up-algorithms-with-arena-allocators-d72d06f23607"&gt;Speeding up algorithms with arena allocators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://agmprojects.com/blog/building-a-rest-and-web-socket-api-with-actix.html"&gt;Building a REST and Web Socket API with Actix and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kobzol.github.io/rust/ci/2021/05/07/building-rust-binaries-in-ci-that-work-with-older-glibc.html"&gt;Building Rust binaries in CI that work with older GLIBC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] [series] &lt;a href="https://blog.budshome.com/budshome/gou-jian-rust-yi-bu-graphql-fu-wu-:ji-yu-tide-+-async-graphql-+-mongodb(4)--bian-geng-fu-wu-,yi-ji-di-er-ci-zhong-gou"&gt;Build GraphQL services based on Async Rust using tide + async-graphql + mongodb (基于 Async Rust 构建 GraphQL 服务，使用 tide + async-graphql + mongodb) - Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] [series] &lt;a href="https://blog.budshome.com/budshome/ji-yu-actix-web-+-async-graphql-+-rbatis-+-postgresql---mysql-gou-jian-yi-bu-rust-graphql-fu-wu-(3)---zhong-gou"&gt;Build GraphQL services based on Async Rust using actix-web + async-graphql + rbatis + postgresql / mysql (基于 actix-web + async-graphql + rbatis + postgresql / mysql 构建异步 Rust GraphQL 服务) - Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/3DLrUNbKhjQ"&gt;Graphs in Rust: What is a Graph? Representing them in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/SKmd5A-1cSE"&gt;Rust Verification Workshop 2021 - Peeking at compiler-internal data (for fun and profit)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/vMGilPbIotw"&gt;Rust Verification Workshop 2021 - Verifying that Rust programs don't crash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/0mocaSR9f_M"&gt;Rust Verification Workshop 2021 - crux-mir: Symbolic testing for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/bikmlNlwAYo"&gt;Rust Verification Workshop 2021 - Rustv: Semi-automatic Verification of Unsafe Rust Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/yJQZ7sG8xSM"&gt;Rust Verification Workshop 2021 - Towards Automatic Verification of Unsafe Rust with Constrained Horn Solvers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/C9TTioH5JUg"&gt;Rust Verification Workshop 2021 - Prusti - Deductive Verification for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/b8sBtmzq0FM"&gt;Rust Verification Workshop 2021 - Creusot: A prototype tool for verification of Rust software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/k7_BcWwvz7k"&gt;Rust Verification Workshop 2021 - hacspec: succinct, executable, verifiable specifications for high-assurance cryptography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/innovating-with-rust/"&gt;Innovating with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/n7rjfk/what_can_c_do_that_rust_cant_2021_edition/"&gt;What can C++ do that Rust can't? (2021 edition)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/Ys7ma3au5m0"&gt;The Rust Borrow Checker—A Deep Dive @ Rust DC, April 20, 2021 w/ Nell Shamrell-Harrington&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/tokio-rs/console"&gt;tokio-console&lt;/a&gt;, a "top"-like utility to view your tasks run.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/910"&gt;Simon Farnsworth&lt;/a&gt; for the nomination&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drmason13/advent_of_code_traits/issues/3"&gt;advent_of_code_traits - Improve the efficiency of the default &lt;code&gt;run&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OSSystems/compress-tools-rs/issues/57"&gt;compress-tools-rs - Cannot statically compile on Windows due to linking failure, exit code 1120&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;324 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-05-03..2021-05-10"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85053"&gt;fix duplicate unknown lint errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76808"&gt;improve diagnostics for functions in &lt;code&gt;struct&lt;/code&gt; definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85112"&gt;ensure failing promoteds in const/static bodies are handled correctly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83507"&gt;implement Native link modifiers&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/2951-native-link-modifiers.html"&gt;#2951&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84794"&gt;deduplicate native libs before they are passed to the linker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84915"&gt;retain data in vectorized registers for longer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84923"&gt;only compute Obligation &lt;code&gt;cache_key&lt;/code&gt; once in register_obligation_at&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84833"&gt;"const" initialized thread locals in rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84806"&gt;streamline &lt;code&gt;try_start&lt;/code&gt; code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84712"&gt;simplify &lt;code&gt;chdir&lt;/code&gt; implementation and minimize unsafe block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79930"&gt;optimize &lt;code&gt;BufWriter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85146"&gt;provide &lt;code&gt;io::Seek::rewind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84328"&gt;stablize {&lt;code&gt;HashMap&lt;/code&gt;, &lt;code&gt;BTreeMap&lt;/code&gt;}&lt;code&gt;::into_&lt;/code&gt;{&lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2423"&gt;futures: add FuturesUnordered::into_iter, make iter_pin_ref public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/regex/pull/772"&gt;regex: fix compilation with pattern feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/datafrog/pull/29"&gt;datafrog: speed up Relation::merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9472"&gt;cargo: improve two error messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85148"&gt;rustdoc: fix source code line number display and make it clickable again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84734"&gt;compiletest: add &lt;code&gt;needs-unwind&lt;/code&gt; and beginning of support for testing &lt;code&gt;panic=abort&lt;/code&gt; std&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7170"&gt;clippy: fix stack overflow issue in &lt;code&gt;redundant_pattern_matching&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7174"&gt;clippy: fix &lt;code&gt;eval_order_dependence&lt;/code&gt; async false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7167"&gt;clippy: fix &lt;code&gt;unused_unit&lt;/code&gt; macro false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7165"&gt;clippy: fix &lt;code&gt;needless_quesiton_mark&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7182"&gt;clippy: for &lt;code&gt;to_*&lt;/code&gt; variant don't lint in trait impl taking &lt;code&gt;self&lt;/code&gt; when non-&lt;code&gt;Copy&lt;/code&gt; type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7175"&gt;clippy: fix &lt;code&gt;unnecessary_filter_map&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7163"&gt;clippy needless_collect: Lint cases with type annotations for indirect usage and recognize &lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;Not much change overall - both regressions and improvements were all minor, apart from the 2x compile-time improvement for libcore from PR &lt;a href="https://github.com/rust-lang/rust/issues/83278"&gt;#83278&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=7a0f1781d04662041db5deaef89598a8edd53717&amp;amp;end=382f748f23979e37e3e012b090e5a0313463f182&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;7a0f..382f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 3 Improvements, 0 Mixed
0 of them in rollups&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-05-11.md"&gt;Full report here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3101"&gt;RFC: Reserved prefixes in the 2021 edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3114"&gt;A new prelude for the 2021 edition (trait-only edition)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2722"&gt;Allow Overloading || and &amp;amp;&amp;amp;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85078"&gt;stabilize const_fn_unsize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/84916"&gt;FCP poll for ErrorKind::OutOfMemory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84717"&gt;impl FromStr for proc_macro::Literal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84701"&gt;stabilize member constraints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84039"&gt;Uplift the invalid_atomic_ordering lint from clippy to rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83918"&gt;Stabilize "RangeFrom" patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83366"&gt;Stabilize extended_key_value_attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82179"&gt;Add functions &lt;code&gt;Duration::try_from_secs_{f32, f64}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3123"&gt;Scrape code examples from examples/ directory for Rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSf_hz-ZDwYEhVmIH0uzJ0uH41aXWZ_zRDsI0XENpfkKHvh_Jg/viewform"&gt;May 12, Online - Rust Meetup May 2021 - Rust Malaysia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/2021/05/13/rust-hack-and-learn.html"&gt;May 13, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/solana/status/1387411221717176323?s=20"&gt;May 15 - June 7, Online - Solana Season Hackathon - Registration open now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://secure.meetup.com/register/?referrer_n=event&amp;amp;referrer_i=278002832&amp;amp;ctx=ref"&gt;May 17, 2021, Cardiff, UK - Rust and Cpp Cardiff :: v2.0 - Rust and C++ Cardiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/ntvrgsycchbxb"&gt;May 18, 2021, Washington, DC, US - Mid-month Rustful: rust4ml - Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/zppkjsycchbzb/"&gt;May 19, 2021, Vancouver, BC - Rust Study/Hack/Hang-out night - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustlab.it/en/rust-vs-go/"&gt;May 20, 2021, Online - Go vs Rust | Round table discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrycchbhc/"&gt;May 20, 2021, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Paige&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/paige/jobs/5210311002"&gt;Senior Software Engineer, Visualization (Remote, Europe)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impero&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/jobs/view/2493233249/"&gt;Full Stack Developer (Denmark + Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Zimpler&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://careers.zimpler.com/jobs/1170476-rust-developer-to-zimpler"&gt;Rust Developer (Gothenburg, SE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Yat Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.arbeitnow.com/view/senior-rust-developer-tari-71761"&gt;Senior Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kollider&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/junior-backend-engineer/en"&gt;Junior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/senior-backend-engineer/en"&gt;Senior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/devops-engineer/en"&gt;DevOps Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TrueLayer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/D07759DAF6/"&gt;Rust Backend Engineer (London, UK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/F13E839E3B/"&gt;Rust Backend Engineer (Milan, Italy)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/3B78A6F6F4/"&gt;Rust Engineering Lead (London, UK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/8D8D56C09E/"&gt;Rust Engineering Lead (Milan, Italy)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Aleph Alpha&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aleph-alpha.de/career"&gt;Several Rust Engineering Positions (Heidelberg, DE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken?team=Engineering"&gt;Several Rust Engineering Positions (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ChainSafe&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chainsafe.io/careers"&gt;Several Rust Engineering Positions (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;You won’t appreciate Rust unless you spend few weeks building something in it. The initial steep learning curve could be frustrating or challenging depending on how you see it, but once past that it’s hard not to love it. It’s a toddler with superpowers after all 💗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://deepu.tech/my-second-impression-of-rust"&gt;Deepu K Sasidharan on their blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1049"&gt;robin&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/nb4s14/this_week_in_rust_390/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry></feed>