<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/feeds/twir-contributors.atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2020-04-14T00:00:00-04:00</updated><entry><title>This Week in Rust 334</title><link href="https://this-week-in-rust.org/blog/2020/04/14/this-week-in-rust-334/" rel="alternate"></link><updated>2020-04-14T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-04-14:blog/2020/04/14/this-week-in-rust-334/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://words.steveklabnik.com/how-often-does-rust-change"&gt;How often does Rust change&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yaah.dev/try-blocks"&gt;The differences between Ok-wrapping, try blocks, and function level try&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2020/04/09/wrapping-mental-models.html"&gt;Mental models around Ok-wrapping&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/the-problem-of-effects/"&gt;The problem of effects in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2020/04/09/libraryification/"&gt;Library-ification and analyzing Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jason-williams.co.uk/a-possible-new-backend-for-rust"&gt;A possible new backend for Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html"&gt;Simple but powerful Pratt parsing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ruma.io/news/ruma-is-dead-long-live-ruma-2020-04-10/"&gt;Ruma is dead, long live Ruma&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/programming-servo-my-own-private-runtime-8a5ba74c63c8"&gt;Programming Servo: My own private runtime&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2020/04/13/hyper-traps.html"&gt;Hyper traps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pietroalbini.org/blog/downloading-crates-io/"&gt;Downloading all the crates on crates.io&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deislabs.io/posts/kubernetes-a-rusty-friendship/"&gt;Kubernetes: A Rusty Friendship&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/fallible-iterator-adapters/"&gt;Fallible Iterator Adapters&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://willcrichton.net/notes/types-over-strings/"&gt;Types over strings: Extensible architectures in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[pdf] &lt;a href="https://arxiv.org/pdf/2004.03494"&gt;LLHD: Rust is used to drive research in Hardware Design Languages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/04/13/changelog-20.html"&gt;rust-analyzer changelog 20&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/04/13/changelog-120.html"&gt;IntelliJ Rust changelog 120&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.guillaume-gomez.fr/articles/2020-04-09+New+sysinfo+release%3A+processes+disk+usage"&gt;New sysinfo release: processes disk usage&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/04/10/lang-team-design-meetings.html"&gt;April lang team design meetings&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/sudo"&gt;sudo&lt;/a&gt;, a library to let your program run as root.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/751"&gt;Stefan Schindler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/That3Percent/tree-buf/issues/1"&gt;tree-buf: Floating point compression&lt;/a&gt;. Tree-buf is an experimental serialization system written in Rust.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;367 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-04-06..2020-04-13"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70916"&gt;support &lt;code&gt;#[track_caller]&lt;/code&gt; on functions in &lt;code&gt;extern "Rust" { ... }&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69707"&gt;handle &lt;code&gt;impl Trait&lt;/code&gt; where &lt;code&gt;Trait&lt;/code&gt; has an assoc type with missing bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70982"&gt;normalize function signature in function casting check procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70665"&gt;do not lose or reorder user-provided linker arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70906"&gt;suggest move for closures and async blocks in more cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70789"&gt;remove false positives of &lt;code&gt;unused_braces&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70876"&gt;use a &lt;code&gt;SmallVec&lt;/code&gt; for &lt;code&gt;Cache::predecessors&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70837"&gt;speed up path searching with &lt;code&gt;find_library_crate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70161"&gt;allocate some query results on an arena&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70612"&gt;add &lt;code&gt;io::Write::write_all_vectored&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70573"&gt;detailed panic messages for &lt;code&gt;Vec&lt;/code&gt; functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70201"&gt;small tweaks in &lt;code&gt;ToOwned::clone_into&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70843"&gt;remove the &lt;code&gt;Ord&lt;/code&gt; bound that was plaguing &lt;code&gt;drain_filter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70750"&gt;match options directly in the &lt;code&gt;Fuse&lt;/code&gt; implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70896"&gt;implement &lt;code&gt;Chain&lt;/code&gt; with &lt;code&gt;Option&lt;/code&gt; fuses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70981"&gt;rearrange &lt;code&gt;BTreeMap::into_iter&lt;/code&gt; to match &lt;code&gt;range_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70850"&gt;&lt;code&gt;BTreeMap&lt;/code&gt; first last proposal tweaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70996"&gt;add &lt;code&gt;or_insert_with_key&lt;/code&gt; to &lt;code&gt;Entry&lt;/code&gt; of &lt;code&gt;HashMap&lt;/code&gt;/&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/152"&gt;hashbrown: add or_insert_with_key to Entry of HashMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/792"&gt;arch: add more ARM SIMD intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8062"&gt;cargo: add &lt;code&gt;cargo tree&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2585"&gt;Unsafe blocks in unsafe fn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/70941"&gt;Resolving &lt;code&gt;Ok&lt;/code&gt;-wrapping for &lt;code&gt;try&lt;/code&gt; blocks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68716"&gt;Stabilize &lt;code&gt;Span::mixed_site&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/69362"&gt;Stabilize most common subset of alloc_layout_extras&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/58234"&gt;Tracking issue for PathBuf capacity methods&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/69984"&gt;Add Option to Force Unwind Tables&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/70458"&gt;Move LLVM bitcode destination&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/70729"&gt;A big options clean-up&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71068"&gt;Stabilize UNICODE_VERSION (feature unicode_version)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2906"&gt;Deduplicate Cargo workspace information&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2904"&gt;Major change proposal process for compiler team&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.toolboxoffice.it/eventi/rust-meetup-15/"&gt;Apr 23. Turin, IT - Rust Turin online meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/gztznrybcgbnc/"&gt;Apr 30. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Ann-Arbor-Rust-Meetup/events/zdfscrybcgbdc/"&gt;Apr 22. Ann Arbor, MI, US - Ann Arbor Rust Meetup - Monthly Gathering&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpybcgbkc/"&gt;Apr 27. Durham, NC, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmybcgblc/"&gt;Apr 28. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/246f7fd2-000a-4f61-8f53-b1cc783d51cb"&gt;Backend Engineer, Data Processing – Rust (Remote) at Kraken&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://1password.com/jobs/rust-developer/"&gt;Rust Developer (US &amp;amp; Canada) at 1Password&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aleph-alpha.de/sw_engineer.html?language=de"&gt;Infrastructure Engineer at Aleph Alpha, Heidelberg, Germany&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This viewpoint is very controversial, and I have no capacity to debate it with anyone who disagrees with me. But Rust has a very powerful macro system, so I don’t have to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://boats.gitlab.io/blog/post/failure-to-fehler"&gt;withoutboats blogging about failure/fehler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/849"&gt;lxrec&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/g1fj7p/this_week_in_rust_334/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 333</title><link href="https://this-week-in-rust.org/blog/2020/04/07/this-week-in-rust-333/" rel="alternate"></link><updated>2020-04-07T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-04-07:blog/2020/04/07/this-week-in-rust-333/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stjepang.github.io/2020/04/03/why-im-building-a-new-async-runtime.html"&gt;Why I'm building a new async runtime&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cfsamson.github.io/books-futures-explained/"&gt;Futures explained in 200 lines of Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sled.rs/errors"&gt;Sled: Error handling in a correctness-critical Rust project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/issues/5418"&gt;Most commonly ignored lints&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/why-ok-wrapping/"&gt;A brief apology of Ok-Wrapping&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/failure-to-fehler/"&gt;From failure to Fehler&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/14_exceptions_part2_peripheral_IRQs"&gt;The embedded WG's Raspberry Pi OS dev tutorials: Tutorial 14 - exceptions part 2: peripheral IRQs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/nine-patches/"&gt;Contributing to Rust: Nine patches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/04/07/update-on-the-github-actions-evaluation.html"&gt;Inside Rust: Update on the GitHub Actions evaluation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/programming-servo-workers-at-your-service-db71e5943511"&gt;Programming Servo: Workers at your service&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hecrj/iced/pull/253"&gt;Iced, a cross-platform GUI library: New release featuring custom styling, event subscriptions, additional widgets, new examples, and more&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/04/06/changelog-19.html"&gt;rust-analyzer changelog 19&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustsim.org/blog/2020/04/01/this-month-in-rustsim/"&gt;This month in rustsim 10 - March 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-008/"&gt;This month in Rust GameDev 8 - March 2020&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/jrvidal/explaine.rs"&gt;explaine.rs&lt;/a&gt;, an interactive Rust syntax playground.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/747"&gt;Vlad Frolov&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No issues were proposed for CfP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;443 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-03-30..2020-04-06"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70681"&gt;handle unterminated raw strings with no &lt;code&gt;#&lt;/code&gt;s properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70421"&gt;parse: recover on &lt;code&gt;const fn()&lt;/code&gt; / &lt;code&gt;async fn()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70522"&gt;improve error messages for raw strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70595"&gt;remove unused discriminant reads from MIR bodies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70535"&gt;track the finalizing node in the specialization graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70827"&gt;use smaller span for suggestion restricting lifetime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70803"&gt;fix performance regression in debuginfo &lt;code&gt;file_metadata&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70815"&gt;enable layout debugging for &lt;code&gt;impl Trait&lt;/code&gt; type aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/polonius/pull/147"&gt;polonius: update facts to remove the rest (🤞) of the move errors false positives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/366"&gt;chalk: use fallback debug impls instead of &lt;code&gt;unimplemented&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/361"&gt;chalk: goal builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/370"&gt;chalk: intern &lt;code&gt;Vec&amp;lt;ProgramClause&amp;lt;I&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70272"&gt;typeck/type_of: let wfcheck handle generics in opaque types' substs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70590"&gt;miri: make backtrace function names and spans match up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70771"&gt;miri terminator handling: only do progress sanity check for 'Call' terminator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70597"&gt;fix double-free and undefined behaviour in &lt;code&gt;libstd::syn::unix::Thread::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70585"&gt;std: fix over-aligned allocations on wasm32-wasi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70511"&gt;add &lt;code&gt;-Z dump-mir-dataflow&lt;/code&gt; flag for dumping dataflow results visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70487"&gt;stabilize &lt;code&gt;float::to_int_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70479"&gt;avoid creating unnecessary reference in Windows &lt;code&gt;Env&lt;/code&gt; iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70281"&gt;implement &lt;code&gt;Hash&lt;/code&gt; for &lt;code&gt;Infallible&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69784"&gt;optimize &lt;code&gt;strip_prefix&lt;/code&gt; and &lt;code&gt;strip_suffix&lt;/code&gt; with &lt;code&gt;str&lt;/code&gt; patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1157"&gt;add shims for &lt;code&gt;RwLock::&lt;/code&gt;{&lt;code&gt;try_read&lt;/code&gt;, &lt;code&gt;try_write&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67797"&gt;query-ify &lt;code&gt;Instance::resolve&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/834"&gt;stdarch: support &lt;code&gt;crc32&lt;/code&gt; even if on arm32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70752"&gt;add &lt;code&gt;slice::fill&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70632"&gt;expand &lt;code&gt;vec![]&lt;/code&gt; to &lt;code&gt;Vec::new()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70573"&gt;detailed panic messages for &lt;code&gt;Vec&lt;/code&gt; functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70558"&gt;fix some aliasing issues in &lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69425"&gt;add &lt;code&gt;fn make_contiguous&lt;/code&gt; to &lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68770"&gt;&lt;code&gt;BTreeMap&lt;/code&gt;/&lt;code&gt;BTreeSet&lt;/code&gt;: implement &lt;code&gt;drain_filter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70795"&gt;keep track of position when deleting from a &lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70766"&gt;use &lt;code&gt;ManuallyDrop&lt;/code&gt; instead of &lt;code&gt;forget&lt;/code&gt; inside collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70750"&gt;match options directly in the &lt;code&gt;Fuse&lt;/code&gt; implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70720"&gt;place TLS initializers with relocations in .tdata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2104"&gt;futures: reduce box allocation in bilock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2107"&gt;futures: impl &lt;code&gt;Extend&lt;/code&gt; for &lt;code&gt;SelectAll&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/150"&gt;hashbrown: micro optimize &lt;code&gt;repeat&lt;/code&gt; function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2585"&gt;Unsafe blocks in unsafe fn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/58234"&gt;Tracking issue for PathBuf capacity methods&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/70175"&gt;Remove -Z no-landing-pads flag&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/70458"&gt;Move LLVM bitcode destination&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2897"&gt;result-missing-methods-for-err&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://samara-it-community.timepad.ru/event/1293744/"&gt;Apr 10. Samara, RU - Rust Users Team Samara - Online meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/prbtdrybcgbsb/"&gt;Apr 14. Seattle, WA, US - Seattle Rust Meetup - Monthly meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.toolboxoffice.it/eventi/rust-meetup-15/"&gt;Apr 23. Turin, IT - Rust Turin online meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/gztznrybcgbvb/"&gt;Apr 15. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybcgbtb/"&gt;Apr 15. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Ann-Arbor-Rust-Meetup/events/zdfscrybcgbdc/"&gt;Apr 22. Ann Arbor, MI, US - Ann Arbor Rust Meetup - Monthly Gathering&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://1password.com/jobs/rust-developer/"&gt;Rust Developer (US &amp;amp; Canada) at 1Password&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aleph-alpha.de/sw_engineer.html?language=de"&gt;Infrastructure Engineer at Aleph Alpha, Heidelberg, Germany&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;In many cases, it is possible to completely rearchitect the underlying code while leaving the public API as-is, and without introducing new bugs. I've literally never had such a liberating experience with refactoring until Rust.&lt;/p&gt;
&lt;p&gt;In other words, I have never been so productive in any other language. Dynamic languages like JavaScript and Python are the least productive &lt;em&gt;by far&lt;/em&gt;. Code runs, tests pass, put it into production and... uncaught exception! Time to rollback and redo that whole dance &lt;strong&gt;AGAIN&lt;/strong&gt;. With Rust, we take care of all of that crap while actually writing the code the first time. No more surprise 3am wake up calls. &lt;em&gt;That&lt;/em&gt; is productivity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/rust-language-efficacy-and-productivity/39352/10"&gt;Jay Oster on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/846"&gt;Louis Cloete&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/fxqdrs/this_week_in_rust_333/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 332</title><link href="https://this-week-in-rust.org/blog/2020/03/31/this-week-in-rust-332/" rel="alternate"></link><updated>2020-03-31T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-03-31:blog/2020/03/31/this-week-in-rust-332/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://os.phil-opp.com/async-await/"&gt;Writing an OS in Rust: async/await&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/03/26/rustc-dev-guide-overview.html"&gt;rustc-dev-guide overview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2020-04-preemption/"&gt;Tokio: Reducing tail latencies with automatic cooperative task yielding&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://r2.rs/blog/"&gt;Introducing R2, a router in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/03/27/goodbye-docs-team.html"&gt;Goodbye, docs team&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html"&gt;Traits working group 2020 sprint 1 summary&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://csherratt.github.io/blog/posts/specs-and-legion/"&gt;Specs and Legion, two very different approaches to ECS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://people.gnome.org/~federico/blog/reducing-memory-consumption-in-librsvg-4.html"&gt;Reducing memory consumption in librsvg, part 4: compact representation for Bézier paths&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/state-machines/"&gt;State machines in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/blog/2020/03/30/macros-vs-rename.html"&gt;Macros vs rename&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://notes.iveselov.info/programming/refs-and-pattern-matching-in-rust"&gt;More advanced aspects of pattern matching in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/vulnerabilities/"&gt;What constitutes a vulnerability&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thomashartmann.dev/blog/on-generics-and-associated-types/"&gt;On generics and associated types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/03/30/changelog-18.html"&gt;rust-analyzer changelog 18&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/03/30/changelog-119.html"&gt;IntelliJ Rust changelog 119&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustinblockchain.org/newsletters/2020-04-01-keep-calm-and-hack-more/"&gt;Rust in blockchain 10&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crates is &lt;a href="https://github.com/dcchut/async-recursion"&gt;async-recursion&lt;/a&gt;, a macro to allow recursion in async functions.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/744"&gt;Zicklag&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/issues/70460"&gt;rust: Implement conversion traits for usize/isize together with a portability lint&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/03/13/twir-new-lead.html"&gt;This Week in Rust is looking for a new maintainer&lt;/a&gt;. (If you're interested, please &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScJUYdkpLwQc_4zn3oxpVLdT3IHtKlYEBAzd6lgSgE3vsTOtA/viewform"&gt;fill this form&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cfp.rustconf.com/events/rustconf-2020"&gt;The RustConf 2020 CFP is now open&lt;/a&gt;. We'd love to hear from you at RustConf!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/mgrachev/status/1241700876244434951"&gt;dotenv-linter is looking for contributors&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;468 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-03-23..2020-03-30"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68004"&gt;permit negative impls for non-auto traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70417"&gt;parser: recover on &lt;code&gt;...&lt;/code&gt; as a pattern, suggesting &lt;code&gt;..&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70297"&gt;clean up debugging options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69981"&gt;evaluate repeat expression lengths as late as possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69936"&gt;fix cycle error when emitting suggestion for mismatched &lt;code&gt;fn&lt;/code&gt; type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70369"&gt;fix smaller issues with invalid placeholder type errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70413"&gt;fix incorrect pattern warning "unreachable pattern"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70294"&gt;account for bad placeholder types in where clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69878"&gt;tweak chained operators diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70087"&gt;remove const eval loop detector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70319"&gt;correctly normalize constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69778"&gt;perf: avoid allocating a set on dep graph when the number reads are small&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70384"&gt;refactor object file handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70234"&gt;&lt;code&gt;#[track_caller]&lt;/code&gt; on &lt;code&gt;core::ops::&lt;/code&gt;{&lt;code&gt;Index&lt;/code&gt;, &lt;code&gt;IndexMut&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70140"&gt;add &lt;code&gt;Result&amp;lt;Result&amp;lt;T, E&amp;gt;, E&amp;gt;::flatten -&amp;gt; Result&amp;lt;T, E&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70101"&gt;add copy bound to atomic &amp;amp; numeric intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69937"&gt;ASCII methods on &lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68700"&gt;add &lt;code&gt;Wake&lt;/code&gt; trait for safe construction of &lt;code&gt;Waker&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68692"&gt;&lt;code&gt;impl From&amp;lt;[T; N]&amp;gt; for Vec&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/65222"&gt;&lt;code&gt;fold_self&lt;/code&gt; and &lt;code&gt;try_fold_self&lt;/code&gt; for Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70510"&gt;fix &lt;code&gt;TryEnterCriticalSection&lt;/code&gt; return type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/regex/pull/658"&gt;regex: add fast path for &lt;code&gt;c_char&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/regex/pull/655"&gt;regex: improve allocation of &lt;code&gt;escape_into&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/67058"&gt;Tracking issue for &lt;code&gt;{f32,f64}::to_int_unchecked&lt;/code&gt; methods&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2893"&gt;Add a &lt;code&gt;trustme&lt;/code&gt; keyword to define unsafe code blocks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2894"&gt;documentation-in-code-block-in-documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2890"&gt;YieldSafe auto trait&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876539/"&gt;Apr  6. Auckland, NZ - Rust AKL - Using C Libraries in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/269639205/"&gt;Apr  9. San Diego, CA, US - San Diego Rust - April 2020 Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Zurich/events/269771239/"&gt;Apr  8. Zurich, CH - Rust Zurich - PyO3 and Rust - an experimental online meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrybcgbmb/"&gt;Apr  9. Columbus, OH, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybcgbtb/"&gt;Apr 15. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aleph-alpha.de/sw_engineer.html?language=de"&gt;Infrastructure Engineer at Aleph Alpha, Heidelberg, Germany&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.glassdoor.com/job-listing/backend-engineer-rust-kraken-bitcoin-exchange-JV_KO0,21_KE22,45.htm?jl=2913415229"&gt;Backend Engineer at Kraken Bitcoin Exchange, remote or in Oregon&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Meta-Comment: I started this topic as someone completely uninvolved in the rust project. It's very reassuring seeing the nature of the response. Even knowing how fantastic the Rust community is, I was still prepared to be met with at least a small element of condescension given the nature of this issue. I haven't felt any sense of it. It's amazing. Anyone that has impact on the community culture deserves credit: This sort of experience doesn't come from nowhere. It comes from a long history of many people nudging things in the right direction.
Thank you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://rust-lang.zulipchat.com/#narrow/stream/122653-zulip/topic/new-user.20friction.20from.20stream.20naming.20conventions/near/191422121"&gt;Ben on Zulip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/842"&gt;Josh Triplett&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ftl9l3/this_week_in_rust_332/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 331</title><link href="https://this-week-in-rust.org/blog/2020/03/24/this-week-in-rust-331/" rel="alternate"></link><updated>2020-03-24T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-03-24:blog/2020/03/24/this-week-in-rust-331/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/regex/issues/656"&gt;Plans for the regex crate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tokio-rs/tokio/commit/acf8a7da7a64bf08d578db9a9836a8e061765314"&gt;Tokio's new internal semaphore based on intrusive lists&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@KevinHoffman/rust-async-and-the-terrible-horrible-no-good-very-bad-day-348ebc836274"&gt;Rust async and the terrible, horrible, no good, very bad day&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=olM7o_oYML0"&gt;C++20 &amp;amp; Rust on static vs dynamic generics&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/03/22/fast-simple-rust-interner.html"&gt;Fast and simple Rust interner&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://anssi-fr.github.io/rust-guide/"&gt;Secure Rust guidelines&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dpc.pw/how-i-structure-my-apps-in-rust-and-other-languages"&gt;How I structure my apps (in Rust and other languages)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://notes.iveselov.info/programming/cheatsheet-rust-option-vs-haskell-maybe"&gt;Cheatsheet: Option (in Rust) vs Maybe (in Haskell)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://brooker.co.za/blog/2020/03/22/rust.html"&gt;Two years with Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://people.gnome.org/~federico/blog/reducing-memory-consumption-in-librsvg-3.html"&gt;Reducing memory consumption in librsvg, part 3: slack space in Bézier paths&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://troubles.md/abusing-rustc/"&gt;Inviting God's wrath with cursed Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@richardanaya/lets-write-a-web-assembly-interpreter-part-1-287298201d75"&gt;Let’s write a Web Assembly interpreter (part 1)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shahinrostami.com/posts/programming/rust-notebooks/descriptive-statistics-with-ndarray/"&gt;Descriptive statistics with NDArray&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/03/23/changelog-17.html"&gt;rust-analyzer changelog #17&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/XAMPPRocky/tokei/releases/tag/v11.0.0"&gt;Announcing Tokei 11: Now over 40–60% faster&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/LukeMathWalker/build-your-own-jira-with-rust"&gt;Learn Rust building a toy JIRA clone&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/mart3ll/status/1240705442839277569"&gt;The original concept for the Rust logo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crates is &lt;a href="https://github.com/zesterer/flume"&gt;flume&lt;/a&gt;, a fast multi-producer single-consumer channel.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/741"&gt;Vikrant&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.ipfs.io/2020-03-18-announcing-rust-ipfs/"&gt;Announcing Rust IPFS, and a call for contributors&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cfp.rustconf.com/events/rustconf-2020"&gt;The RustConf 2020 CFP is now open&lt;/a&gt;. We'd love to hear from you at RustConf!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/03/13/twir-new-lead.html"&gt;This Week in Rust is looking for a new maintainer&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;380 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-03-16..2020-03-23"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69033"&gt;use generator resume arguments in the async/await lowering&lt;/a&gt; (async on core!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69814"&gt;async: smaller and more correct generator codegen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68970"&gt;implement a feature for a sound specialization subset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69251"&gt;&lt;code&gt;#[track_caller]&lt;/code&gt; in traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69901"&gt;add &lt;code&gt;#[rustc_layout(debug)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70209"&gt;parser: recover on &lt;code&gt;for&amp;lt;'a&amp;gt; |...| body&lt;/code&gt; closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69811"&gt;resolve: print import chains on privacy errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70233"&gt;resolve: do not resolve visibilities on proc macro definitions twice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70215"&gt;ast: compress &lt;code&gt;AttrId&lt;/code&gt; from &lt;code&gt;usize&lt;/code&gt; to &lt;code&gt;u32&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70223"&gt;fix type of const params in associated types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70199"&gt;revised span-to-lines conversion to produce an empty vec on &lt;code&gt;DUMMY_SP&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70119"&gt;rustc: use &lt;code&gt;LocalDefId&lt;/code&gt; instead of &lt;code&gt;DefId&lt;/code&gt; in &lt;code&gt;TypeckTables&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69934"&gt;update the mir inline costs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70249"&gt;handle &lt;code&gt;ConstKind::Unresolved&lt;/code&gt; after monomorphizing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69778"&gt;perf(dep_graph): avoid allocating a set on when the number reads are small&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69497"&gt;don't unwind when hitting the macro expansion recursion limit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1248"&gt;miri: detect UB: overflow in &lt;code&gt;copy&lt;/code&gt;/&lt;code&gt;write_bytes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69079"&gt;allow calculating the layout behind a pointer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/65097"&gt;make &lt;code&gt;std::sync::Arc&lt;/code&gt; compatible with ThreadSanitizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70266"&gt;proc_macro_harness: use item header spans for errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69922"&gt;implement &lt;code&gt;zeroed&lt;/code&gt; and &lt;code&gt;uninitialized&lt;/code&gt; with &lt;code&gt;MaybeUninit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70240"&gt;return &lt;code&gt;NonZeroU64&lt;/code&gt; from &lt;code&gt;ThreadId::as_u64&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70111"&gt;&lt;code&gt;BTreeMap&lt;/code&gt;: remove shared root&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/148"&gt;hashbrown: use &lt;code&gt;NonNull&lt;/code&gt; for the Bucket pointer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2843"&gt;RFC 2843: Add llvm_asm! and deprecate asm!&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/67058"&gt;Tracking issue for &lt;code&gt;{f32,f64}::approx_unchecked_to&lt;/code&gt; methods&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/70048"&gt;Allow obtaining &amp;amp;mut OsStr&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68692"&gt;impl From&amp;lt;[T; N]&amp;gt; for Vec&lt;T&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/70281"&gt;Implement Hash for Infallible&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2886"&gt;Access to traits' associated functions and constants from trait objects&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2887"&gt;Allow specifying dependencies for individual artifacts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2888"&gt;&lt;code&gt;ForbiddenValue&lt;/code&gt; trait to enable more optimizations&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Stockholm-Rust/events/269572409/"&gt;Mar 28. Stockholm, SE - Stockholm Rust - Rust Discord Hangout - Social Social Distancing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/269648606/"&gt;Apr  1. Johannesburg, ZA - Johannesburg Rust Meetup - Remote coffee and chat about Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876539/"&gt;Apr  6. Auckland, NZ - Rust AKL - Using C Libraries in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/269639205/"&gt;Apr  9. San Diego, CA, US - San Diego Rust - April 2020 Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmybcfbpc/"&gt;Mar 31. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/dtqwprybcgbcb/"&gt;Apr  1. Indianapolis, IN, US - Indy.rs - WebAssembly 101&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrybcgbmb/"&gt;Apr  9. Columbus, OH, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aleph-alpha.de/sw_engineer.html?language=de"&gt;Infrastructure Engineer at Aleph Alpha, Heidelberg, Germany&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is funny because in one sense it's hard and clunky. However, it's only ever &lt;em&gt;precisely as hard and clunky as it needs to be&lt;/em&gt;. Everywhere something can be made more concise, or readable, or convenient, without sacrificing any control, it has been. Anytime something is hard or inconvenient, it's because the underlying domain really is exactly that hard or inconvenient.&lt;/p&gt;
&lt;p&gt;Contrast this with other languages, which are often clunky when they don't need to be and/or "easy" when they shouldn't be.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://news.ycombinator.com/item?id=22609082"&gt;brundolf on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/837"&gt;pitdicker&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/fp9z5t/this_week_in_rust_331/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry></feed>