<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust - TWiR Contributors</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/feeds/twir-contributors.atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2022-06-22T00:00:00-04:00</updated><entry><title>This Week in Rust 448</title><link href="https://this-week-in-rust.org/blog/2022/06/22/this-week-in-rust-448/" rel="alternate"></link><published>2022-06-22T00:00:00-04:00</published><updated>2022-06-22T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2022-06-22:/blog/2022/06/22/this-week-in-rust-448/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2022/06/21/survey-2021-report.html"&gt;2021 Annual Survey Report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2022/06/20/changelog-134.html"&gt;rust-analyzer changelog #134&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fornjot.app/blog/weekly-dev-log/2022-w24/"&gt;Fornjot (code-first CAD in Rust) - Weekly Dev Log - 2022-W24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slint-ui.com/thisweek/2022-06-20.html"&gt;Slint UI crate weekly updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weekly.databend.rs/2022-06-22-databend-weekly/"&gt;This week in Databend #47: A Modern Cloud Data Warehouse for Everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jamesmunns.com/blog/postcard-1-0/"&gt;Postcard 1.0.0 Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rui314/mold/releases/tag/v1.3.0"&gt;mold 1.3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/rust-secure-code/that-vendored-openssl-most-of-us-rely-on-probably-needs-a-patch-aae8fea5160f"&gt;That vendored OpenSSL ðŸ¦€ most of us rely on probably needs a patch ..&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nikolish.in/gs-with-iced-2"&gt;GUI in Rust with iced #2: Composable Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/remote-development-with-rust-on-fly-io"&gt;Remote development with Rust on fly.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://simbleau.github.io/blog/gpu-profiling-with-rust/"&gt;NVIDIA GPU profiling with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://veykril.github.io/posts/semantic-unsafe/"&gt;Unsafe code highlighting with rust-analyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.greyblake.com/blog/when-serde-json-to-string-fails/"&gt;When serde_json::to_string() fails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2206.07185"&gt;Aeneas: Rust Verification by Functional Translation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PuMXWc0xrK0"&gt;Rust: Turtles all the way down&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mahdi.blog/rust-box-str-vs-string/"&gt;What is &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;/code&gt; and how is it different from &lt;code&gt;String&lt;/code&gt; in Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2022/06/15/what-it-feels-like-when-rust-saves-your-bacon/"&gt;What it feels like when Rust saves your bacon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dzejkop.space/serde-by-example-1/"&gt;Serde by Example 1: JSON-RPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://m.youtube.com/watch?v=R8Pr21nlhig"&gt;Adding a Rust compiler front end to GCC Philip Herron &amp;amp; Arthur Cohen, Embecosm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/twir-445/"&gt;This Week in Rust - Issue 445&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/grant-gurvis/"&gt;Fig with Grant Gurvis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://anchor.fm/building-with-rust/episodes/Ernest-Kissiedu-on-the-DevX-Initiative-e1k3cs4"&gt;Building with Rust: Ernest Kissiedu on the DevX Initiative&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.spike.codes/build-a-template-engine"&gt;Build a simple template engine in &amp;lt;100 lines of Rust code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2022/06/16/a-short-introduction-to-async-rust"&gt;A short introduction to async Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/nine-rules-for-elegant-rust-library-apis-9b986a465247"&gt;Nine rules for elegant Rust library APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/rust-projects-maintenance-and-supply-chain-security"&gt;Automated maintenance and dependencies security for Rust projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video]&lt;a href="https://www.youtube.com/watch?v=yfcJGEISsLc"&gt;Async I/O in Depth (Part 3): Implementing an Async Runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=kvmMGjF-_zo"&gt;Rust for Beginners -- Learning Rust Syntax faster with these Rustlings Tips&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://docs.rs/error-stack/latest/error_stack/"&gt;error-stack&lt;/a&gt;, a currently nightly-only error handling library that optimizes for ease of use while allowing to add arbitrary context data to errors.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1070"&gt;Alfred Mountfield&lt;/a&gt; for the self-suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;374 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2022-06-13..2022-06-20"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/95243"&gt;add Apple WatchOS compile targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/95897"&gt;std support for the Nintendo 3DS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98264"&gt;make missing argument placeholder more obvious that it's a placeholder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98268"&gt;improve &lt;code&gt;lifetime arguments are not allowed on&lt;/code&gt; error message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/95211"&gt;improve parser diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97474"&gt;improve parsing errors and suggestions for bad &lt;code&gt;if&lt;/code&gt; statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98087"&gt;suggest adding a &lt;code&gt;#[macro_export]&lt;/code&gt; to a private macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97798"&gt;hide irrelevant lines in suggestions to allow for suggestions that are far from each other to be shown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97377"&gt;do not suggest adding semicolon/changing delimiters for macros in item position that originates in macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97964"&gt;fix suggestions for &lt;code&gt;&amp;amp;a: T&lt;/code&gt; parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2228"&gt;miri: prevent futex_wait from actually waiting if a concurrent waker was executed before us&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2237"&gt;miri: add ICE error level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98153"&gt;fix &lt;code&gt;MissingDoc&lt;/code&gt; quadratic behaviour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97931"&gt;fix &lt;code&gt;SourceScope&lt;/code&gt; for &lt;code&gt;if let&lt;/code&gt; bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97268"&gt;make "Assemble stage1 compiler" orders of magnitude faster (take 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97863"&gt;&lt;code&gt;BitSet&lt;/code&gt; related perf improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97674"&gt;obligation forest tweaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98186"&gt;batch &lt;code&gt;proc_macro&lt;/code&gt; RPC for &lt;code&gt;TokenStream&lt;/code&gt; iteration and combination operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97936"&gt;compile &lt;code&gt;unicode-normalization&lt;/code&gt; faster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/96591"&gt;use valtrees as the type-system representation for constant values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98238"&gt;make some lints incremental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/93765"&gt;optimize heapsort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97803"&gt;&lt;code&gt;impl Termination for Infallible&lt;/code&gt; and then make the &lt;code&gt;Result&lt;/code&gt; impls of &lt;code&gt;Termination&lt;/code&gt; more generic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97150"&gt;&lt;code&gt;Stdio::makes_pipe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/93080"&gt;implement &lt;code&gt;core::slice::IterMut::as_mut_slice&lt;/code&gt; and &lt;code&gt;impl&amp;lt;T&amp;gt; AsMut&amp;lt;[T]&amp;gt; for IterMut&amp;lt;'_, T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/95534"&gt;add &lt;code&gt;core::mem::copy&lt;/code&gt; to complement &lt;code&gt;core::mem::drop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97924"&gt;avoid &lt;code&gt;thread::panicking()&lt;/code&gt; in non-poisoning methods of &lt;code&gt;Mutex&lt;/code&gt; and &lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97791"&gt;make {&lt;code&gt;Mutex&lt;/code&gt;, &lt;code&gt;Condvar&lt;/code&gt;, &lt;code&gt;RwLock&lt;/code&gt;}&lt;code&gt;::new()&lt;/code&gt; const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98143"&gt;add &lt;code&gt;#[inline]&lt;/code&gt; to small fns of futex &lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/96609"&gt;add {&lt;code&gt;Arc&lt;/code&gt;, &lt;code&gt;Rc&lt;/code&gt;}&lt;code&gt;::downcast_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98004"&gt;add &lt;code&gt;VecDeque::extend&lt;/code&gt; from &lt;code&gt;TrustedLen&lt;/code&gt; specialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98103"&gt;&lt;code&gt;BTreeMap&lt;/code&gt;: Support custom allocators (v1.5)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98078"&gt;use unchecked mul to compute slice sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/95392"&gt;stabilize &lt;code&gt;try_reserve_2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/95118"&gt;stabilize &lt;code&gt;io_safety]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97912"&gt;stabilize &lt;code&gt;Path::try_exists()&lt;/code&gt; and improve doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97367"&gt;stabilize checked slice â†’ &lt;code&gt;str&lt;/code&gt; conversion functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/342"&gt;hashbrown: Add an &lt;code&gt;Entry&lt;/code&gt; API for &lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/343"&gt;hashbrown: allow compiling on 1.56.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/181"&gt;codegen_gcc: more intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8947"&gt;clippy: add lint output to lint list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9002"&gt;clippy: fix false positive for &lt;code&gt;never_loop&lt;/code&gt; struct expression fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8901"&gt;clippy: rework &lt;code&gt;branches_sharing_code&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8964"&gt;clippy: warn about read into zero-length &lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9006"&gt;clippy: ignore &lt;code&gt;todo!&lt;/code&gt; and &lt;code&gt;unimplemented!&lt;/code&gt; in &lt;code&gt;if_same_then_else&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8989"&gt;clippy: add &lt;code&gt;default_iter_empty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9025"&gt;clippy: unused_async: lint async methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5372"&gt;rustfmt: add width for codeblocks in comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12544"&gt;rust-analyzer: show proc-macro loading errors in unresolved-proc-macro diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12576"&gt;rust-analyzer: add fold range for multi line match arm list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12517"&gt;rust-analyzer: fix methods in pub trait generated by macro cannot be completed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12529"&gt;rust-analyzer: ask the user to reload the vscode window when changing server settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12528"&gt;rust-analyzer: check for the correct proc-macro settings in missing proc-macro diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12541"&gt;rust-analyzer: clear proc-macro changed flag when reloading workspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12596"&gt;rust-analyzer: don't trigger pattern completions when typing a wildcard pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A pretty busy week for performance, with quite a few PRs landing with
significant improvements to specific benchmarks. Overall the week was positive,
with many benchmarks improving at least a little. No significant changes in
memory usage this week.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf&amp;amp;end=abace0a1f17986d89aedf610819deab2b4afee56&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;edab34a..abace0a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 Regressions, 6 Improvements, 3 Mixed; 1 of them in rollups
54 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2022-06-21.md"&gt;full report&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3276"&gt;Mention de-approval of &lt;code&gt;cfg(target = "...")&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3245"&gt;Refined trait implementations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97346"&gt;Remove a back-compat hack on lazy TAIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97995"&gt;allow unions with mutable references and tuples of allowed types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97743"&gt;make const_err show up in future breakage reports &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No New or Updated RFCs were created this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2022-06-22 - 2022-07-20 ðŸ¦€&lt;/p&gt;
&lt;h3&gt;Virtual&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-22 | Cardiff, UK | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/286594851/"&gt;&lt;strong&gt;Rust Book Study Session - Procedural Macros&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-24 | Minneapolis, MN, US | &lt;a href="https://www.meetup.com/Minneapolis-Rust-Meetup/"&gt;Minneapolis Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Minneapolis-Rust-Meetup/events/286688186/"&gt;&lt;strong&gt;Beginner Rust Open "Office Hours"&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-28 | Dallas, TX, US | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrydcjblc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-29 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/qwgrssydcjbmc/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-30 | Linz, AT | &lt;a href="https://www.meetup.com/Rust-Linz/"&gt;Rust Linz&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Linz/events/286029968/"&gt;&lt;strong&gt;Rust Meetup Linz - 23th Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-05 | Austin, TX, US | &lt;a href="https://www.meetup.com/webassembly-and-wasmedge/"&gt;WebAssembly and WasmEdge&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/webassembly-and-wasmedge/events/zzdnrsydckbhb/"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting #10&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-05 | Beijing, CN | &lt;a href="https://www.meetup.com/wasm-rust-meetup/"&gt;WebAssembly and Rust Meetup (Rustlang)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/wasm-rust-meetup/events/jbfnrsydckbhb/"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting, a CNCF sandbox WebAssembly runtime&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-05 | Buffalo, NY, US | &lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/xgmfssydckbhb/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-06 | Indianapolis, IN, US | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsydckbjb/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-07 | Charlottesville, VA, US | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/285818136/"&gt;&lt;strong&gt;Rust, nalgebra, and Fourier Optics&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-09 | Virtual | &lt;a href="https://github.com/rust-gamedev/wg"&gt;Rust Game Dev&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discord.gg/yNtPTb2&amp;amp;sa=D&amp;amp;source=calendar&amp;amp;usd=2&amp;amp;usg=AOvVaw2pjyb-YBsl99IFDmrOKoOK"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-13 | Boulder, CO, US | &lt;a href="https://www.meetup.com/boulder-elixir-rust/"&gt;Boulder Elixir and Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/zvxcsrydckbrb/"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-14 | NÃ¼rnberg, DE | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nurnberg DE&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/hlvbvsydckbsb/"&gt;&lt;strong&gt;Rust NÃ¼rnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-14 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/swgrssydckbsb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-16 | Vancouver, BC, CA | &lt;a href="https://www.meetup.com/Vancouver-Rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/nwcmpsydckbbc/"&gt;&lt;strong&gt;Rust Study/Hack/Hang-out&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-19 | Sydney, NSW, AU | &lt;a href="https://github.com/RustAU"&gt;Rust Australia&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/RustAU/Virtual"&gt;&lt;strong&gt;Rust Lightning Talks&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-19 | Washington, DC, US | &lt;a href="https://www.meetup.com/RustDC/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/vdhxgsydckbzb/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-07-04 | Tel Aviv, IL | &lt;a href="https://www.meetup.com/rust-tlv/"&gt;Rust TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/286610368/"&gt;&lt;strong&gt;Rust Interop, Rewrites and fun&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-22 | Amsterdam, NL | &lt;a href="https://www.meetup.com/rust-amsterdam-group/"&gt;Rust Developers Amsterdam Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-amsterdam-group/events/286305083/"&gt;&lt;strong&gt;Rust Developers Amsterdam Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-23 | WrocÅ‚aw, PL | &lt;a href="https://www.meetup.com/rust-wroclaw/"&gt;Rust WrocÅ‚aw&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-wroclaw/events/286415834/"&gt;&lt;strong&gt;Rust WrocÅ‚aw Meetup #26&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-28 | London, UK | &lt;a href="https://www.meetup.com/Rust-London-User-Group/"&gt;Rust London User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-london-user-group/events/286489185/"&gt;&lt;strong&gt;LDN Talks June 2022: Community Showcase&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-29 | Nijmegen, NL | &lt;a href="https://www.meetup.com/rust-nederland/"&gt;Rust Nederland&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-nederland/events/286582960/"&gt;&lt;strong&gt;Get started with Rust and stories from the frontlines&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-30 | Copenhagen, DK | &lt;a href="https://cph.rs/"&gt;Copenhagen Rust Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cph.rs/"&gt;&lt;strong&gt;Hack Night #26&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-29 | Austin, TX, US | &lt;a href="https://www.meetup.com/atx-rustaceans/"&gt;ATX Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/atx-rustaceans/events/285878081/"&gt;&lt;strong&gt;First Official Meetup - June 2022&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-29 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/286596997/"&gt;&lt;strong&gt;Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-13 | Atlanta, GA, US | &lt;a href="https://www.meetup.com/rust-atl/"&gt;Rust Atlanta&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atl/events/pczdssydckbrb/"&gt;&lt;strong&gt;Grab a beer with fellow Rustaceans&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-14 | Columbus, IL | &lt;a href="https://www.meetup.com/columbus-rs/"&gt;Columbus Rust Society&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrydckbsb/"&gt;&lt;strong&gt;Monthly Meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-19 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/wjkjssydckbzb/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Oceania&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-23 | Brisbane, QLD, AU | &lt;a href="https://www.meetup.com/rust-brisbane/"&gt;Rust Brisbane&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-brisbane/events/286385515/"&gt;&lt;strong&gt;June Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1&gt;Rust Jobs&lt;/h1&gt;
&lt;!--

New jobs can be posted here.

They should be of the form:

**Company Name**

* [Job Title (Location)](https://example.com/my-job-link)

--&gt;

&lt;h1&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Mutate&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustjobs.dev/featured-jobs/Mutate-Rust-Backend-Software-Engineer-7kfTlQFSagzwHhugw1p0"&gt;Rust Backend Software Engineer (Remote Europe)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Matician&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/matician/3d2a49ae-43c9-41c0-b9e8-7b87e7429b8f"&gt;Robotics Systems Engineer - FT and intern roles (Mountain View, CA, US)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lithic&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/lithic/jobs/4252422004"&gt;Senior Infrastructure Engineer (New York, NY, US, Austin, TX, US, San Francisco, CA, US, or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Spire Global&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spire.com/careers/job-openings/job/?gh_jid=4226230"&gt;Software Engineers + Engineering Managers (Glasgow, UK, Luxembourg - Relocation Available)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rwlock vs Mutex? Please, tell me like I'm 5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;
&lt;blockquote&gt;
&lt;p&gt;Mutex: "Mom says it's my turn on the synchronization primitive."&lt;br&gt;
vs.&lt;br&gt;
Write lock: "Hey! You all are not allowed to look until I'm done writing!"
Read lock: "Hey! You are not allowed to edit what you wrote until we're done reading it!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks for an actual 5 year old reply, made me laugh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://www.reddit.com/r/rust/comments/vcaabk/rwlock_vs_mutex_please_tell_me_like_im_5/"&gt;/u/LyonSyonII and /u/everything-narrative on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1254"&gt;Josh Triplett&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="REDDIT_LINK_HERE"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 447</title><link href="https://this-week-in-rust.org/blog/2022/06/15/this-week-in-rust-447/" rel="alternate"></link><published>2022-06-15T00:00:00-04:00</published><updated>2022-06-15T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2022-06-15:/blog/2022/06/15/this-week-in-rust-447/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3&gt;Official&lt;/h3&gt;
&lt;h3&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/2022-06-09-cloud-compute-program-update/"&gt;Cloud Compute Program Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/2022-06-14-community-grants-program-awards-announcement/"&gt;Community Grants Program Awards Announcement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2022-05/"&gt;This Month in Rust OSDev: May 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hash.dev/blog/announcing-error-stack"&gt;Announcing error-stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustexplorer.com/b/about"&gt;Rust Explorer: Rust playground with the top 10k crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://epage.github.io/blog/2022/06/clap-32-last-call-before-40/"&gt;Clap 3.2: Last Call Before 4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://immunant.com/blog/2022/06/back/"&gt;C2Rust is Back&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2022/06/13/changelog-133.html"&gt;rust-analyzer changelog #133&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bjorn3.github.io/2022/06/13/progress-report-june-2022.html"&gt;Progress report on rustc_codegen_cranelift (June 2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.antoyo.xyz/rustc_codegen_gcc-progress-report-12"&gt;rustc_codegen_gcc: Progress Report #12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2022/06/14/changelog-172.html"&gt;IntelliJ Rust Changelog #172&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fornjot.app/blog/weekly-dev-log/2022-w23/"&gt;Fornjot (code-first CAD in Rust) - Weekly Dev Log - 2022-W23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slint-ui.com/thisweek/2022-06-13.html"&gt;Slint UI crate weekly updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weekly.databend.rs/2022-06-15-databend-weekly/"&gt;This week in Databend #46: A Modern Cloud Data Warehouse for Everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0036/"&gt;This week in Fluvio #36: The programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://refaktory.net/blog/posts/into-the-future-with-intofuture-improving-rust-async-ergonomics"&gt;Into the Future with IntoFuture - Improving Rust Async Ergonomics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jackh726.github.io/rust/2022/06/10/nll-stabilization.html"&gt;The Rust borrow checker just got (a little bit) smarter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2022/06/13/async-cancellation-a-case-study-of-pub-sub-in-mini-redis/"&gt;Async cancellation: a case study of pub-sub in mini-redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://maciej.codes/2022-06-09-local-async.html"&gt;Local Async Executors and Why They Should be the Default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://briankung.dev/2022/06/14/rust-advocacy-at-a-medium-sized-startup/"&gt;Rust advocacy at a medium-sized startup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metalbear.co/blog/carcinisation-of-mirrord-or-why-we-use-rust/"&gt;Carcinisation of mirrord (or: why we use Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2022/06/everything-is-broken-shipping-rust-minidump-at-mozilla/"&gt;Everything Is Broken: Shipping rust-minidump at Mozilla â€“ Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fly.io/blog/rust-memory-leak/"&gt;How to Make Rust Leak Memory (Also: How to Make It Stop)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=aGrlEdAe6YE"&gt;Post-Crust of Rust Q&amp;amp;A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/rebecca-rumbul/"&gt;Rust Foundation with Rebecca Rumbul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/twir-444/"&gt;This Week in Rust - Issue 444&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2022/06/11/caches-in-rust.html"&gt;Caches In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mdaverde.com/posts/rust-bindgen-enum/"&gt;Flavors of enums with Rust bindgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakobwaibel.com/2022/06/06/ptrace/"&gt;Implementing strace in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/async-cancellation-2/"&gt;Async Cancellation II: Time and Signals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://justinwoodring.com/blog/tidy-your-rust-imports-with-prelude/"&gt;Tidy up your Rust imports with a prelude.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdev.com/hitchikers-guide-to-lunatic-tcp-servers-in-ae44258750f1"&gt;Hitchikers guide to Lunatic TCP Servers in ðŸ¦€&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/web-application-with-rust-and-webassembly"&gt;Building a web application with Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shane-o.dev/blog/unwrap-a-value-with-the-question-mark-operator-in-rust"&gt;Unwrap a value with the question mark operator in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=_3LpJ6I-tzc"&gt;Async I/O in Depth: State Machines, Event Loops and Non-Blocking I/O System Calls in Rust (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=yOezcP-XaIw"&gt;Crust of Rust: Send, Sync, and their implementors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [series] &lt;a href="https://www.youtube.com/playlist?list=PLrmY5pVcnuE_R5qJ0o30eGw77bWmnrUtL"&gt;Introduction to Yew.rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Research&lt;/h3&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/blog/rustyjam-02/"&gt;Rusty Jam 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.blog/2022-06-06-github-brings-supply-chain-security-features-to-the-rust-community/"&gt;GitHub brings supply chain security features to the Rust community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/IxMilia/dxf-rs"&gt;dxf-rs&lt;/a&gt;, a library to parse AutoCAD files.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1067"&gt;cosj&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/krojew/cdrs-tokio/issues/96"&gt;cdrs-tokio - Protocol v5 tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/boa-dev/boa/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22"&gt;boa has several good first issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;368 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2022-06-06..2022-06-13"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97512"&gt;add support for emitting functions with &lt;code&gt;coldcc&lt;/code&gt; to LLVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97301"&gt;allow unstable items to be re-exported unstably without requiring the feature be enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97856"&gt;don't suggest adding &lt;code&gt;let&lt;/code&gt; in certain &lt;code&gt;if&lt;/code&gt; conditions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97738"&gt;fix ICEs from zsts within unsized types with non-zero offsets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97325"&gt;fix precise field capture of univariant enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97903"&gt;never regard macro rules with &lt;code&gt;compile_error!&lt;/code&gt; invocations as unused&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97845"&gt;use more targeted suggestion when confusing i8 with std::i8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98012"&gt;&lt;code&gt;ValuePairs::PolyTraitRefs&lt;/code&gt; should be called "trait"s in type error diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97740"&gt;use precise spans for recursive const evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97857"&gt;suggest escaping &lt;code&gt;box&lt;/code&gt; as identifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97812"&gt;suggest to swap a struct and a trait in trait impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97871"&gt;suggest using &lt;code&gt;iter()&lt;/code&gt; or &lt;code&gt;into_iter()&lt;/code&gt; for &lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97778"&gt;tidy up miscellaneous bounds suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97648"&gt;cleanup bound variable handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97927"&gt;do not introduce bindings for types and consts in higher-ranked trait bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97447"&gt;folding revamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/94732"&gt;make &lt;code&gt;Encodable&lt;/code&gt; and &lt;code&gt;Encoder&lt;/code&gt; infallible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97081"&gt;re-use the type op instead of calling the &lt;code&gt;implied_outlives_bounds&lt;/code&gt; query directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97922"&gt;remove redundant calls to &lt;code&gt;reserve&lt;/code&gt; in &lt;code&gt;impl Write for VecDeque&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98043"&gt;remove unnecessary &lt;code&gt;to_string&lt;/code&gt; and &lt;code&gt;String::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2208"&gt;miri: make scheduler preemptive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/95860"&gt;stabilize &lt;code&gt;$$&lt;/code&gt; in Rust 1.63.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/95818"&gt;stabilize the &lt;code&gt;bundle&lt;/code&gt; native library modifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/96868"&gt;stabilize &lt;code&gt;explicit_generic_args_with_impl_trait&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97276"&gt;stabilize &lt;code&gt;const_intrinsic_copy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97992"&gt;stabilize scoped threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97763"&gt;allow &lt;code&gt;ptr_from_addr_cast&lt;/code&gt; to fail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91970"&gt;add the &lt;code&gt;Provider&lt;/code&gt; api to &lt;code&gt;core::any&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97868"&gt;&lt;code&gt;BTreeSet&lt;/code&gt;: avoid intermediate sorting when collecting sorted iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/95632"&gt;&lt;code&gt;impl Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; for &lt;code&gt;VecDeque&amp;lt;u8&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97832"&gt;change &lt;code&gt;Direction::{is_forward,is_backward}&lt;/code&gt; functions into constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/471"&gt;fix infinite recursion in x86_64 memcmp if SSE2 is not present&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97970"&gt;fix &lt;code&gt;Termination&lt;/code&gt; impl panic on closed stderr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/340"&gt;hashbrown: add &lt;code&gt;Extend&amp;lt;&amp;amp;'a (K, V)&amp;gt; for HashMap&amp;lt;K, V, S, A&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/341"&gt;hashbrown: editing &lt;code&gt;do_alloc&lt;/code&gt; for reducing LLVM IR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/176"&gt;codegen_gcc: feature/more simd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8960"&gt;clippy: fix &lt;code&gt;iter_overeager_cloned&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8976"&gt;clippy: fix some &lt;code&gt;#[expect]&lt;/code&gt; lint interaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8950"&gt;clippy: fix &lt;code&gt;derive_partial_eq_without_eq&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8907"&gt;clippy: check const context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5380"&gt;rustfmt: dedup &lt;code&gt;imports_granularity = "Item"&lt;/code&gt; (#4737)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12514"&gt;rust-analyzer: more precise proc-macro errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12477"&gt;rust-analyzer: restart server automatically on settings changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12492"&gt;rust-analyzer: add proc macro ABI for rustc 1.63&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12519"&gt;rust-analyzer: on assoc item name hover, render trait decl docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12481"&gt;rust-analyzer: add label to loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12464"&gt;rust-analyzer: fix inline variable produce mismatched type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12508"&gt;rust-analyzer: don't respond to cancelled requests when retrying them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/3006"&gt;rustup: Visual Studio: add the English language pack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/3008"&gt;rustup: Visual Studio: let the user choose install method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/3004"&gt;rustup: improve handling of Visual Studio errors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A mixed week. I suppose it is best to focus on the fact we made some big
improvements to a large number of primary benchmarks, at the cost of some
smaller regressions to a smaller number of primary benchmarks.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=bb55bd449e65e611da928560d948982d73e50027&amp;amp;end=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;bb55bd44..edab34ab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;max&lt;/th&gt;
&lt;th align="center"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ðŸ˜¿ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;0.6%&lt;/td&gt;
&lt;td align="center"&gt;1.6%&lt;/td&gt;
&lt;td align="center"&gt;35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ðŸ˜¿ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;2.1%&lt;/td&gt;
&lt;td align="center"&gt;8.1%&lt;/td&gt;
&lt;td align="center"&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ðŸŽ‰ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;-0.8%&lt;/td&gt;
&lt;td align="center"&gt;-3.5%&lt;/td&gt;
&lt;td align="center"&gt;72&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ðŸŽ‰ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;-0.8%&lt;/td&gt;
&lt;td align="center"&gt;-2.9%&lt;/td&gt;
&lt;td align="center"&gt;62&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;All ðŸ˜¿ðŸŽ‰ (primary)&lt;/td&gt;
&lt;td align="center"&gt;-0.4%&lt;/td&gt;
&lt;td align="center"&gt;-3.5%&lt;/td&gt;
&lt;td align="center"&gt;107&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;4 Regressions, 3 Improvements, 5 Mixed; 4 of them in rollups
47 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;Full report &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2022-06-14.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3228"&gt;RFC: Add a process_group method to UNIX CommandExt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97837"&gt;Document Rust's stance on /proc/self/mem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97867"&gt;lub: don't bail out due to empty binders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97803"&gt;Impl Termination for Infallible and then make the Result impls of Termination into a blanket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97547"&gt;Partial stabilization of "nonzero_checked_ops".&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/55149"&gt;Tracking issue for RFC 2514, "Union initialization and Drop"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97912"&gt;Stabilize &lt;code&gt;Path::try_exists()&lt;/code&gt; and improve doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97437"&gt;&lt;code&gt;impl&amp;lt;T: AsRawFd&amp;gt; AsRawFd for {Arc,Box}&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97202"&gt;os str capacity documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3279"&gt;Cargo and Rustup safe file discovery.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3278"&gt;Mention infer_static_outlives_requirements removal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[updated] &lt;a href="https://github.com/rust-lang/rfcs/pull/3276"&gt;Mention de-approval of &lt;code&gt;cfg(target = "...")&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2022-06-15 - 2022-07-13 ðŸ¦€&lt;/p&gt;
&lt;h3&gt;Virtual&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-15 | Philadelphia, PA, US | &lt;a href="https://www.meetup.com/RustPhilly/"&gt;Rust Philly (Rust Philadelphia)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustPhilly/events/qkbktsydcjbtb/"&gt;&lt;strong&gt;Remote Book Club: Rust for Rustaceans Chapter Discussion&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-15 | Vancouver, BC, CA | &lt;a href="https://www.meetup.com/Vancouver-Rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/nwcmpsydcjbtb/"&gt;&lt;strong&gt;Nushell&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-17 | Virtual | &lt;a href="https://rust-meetup.ir/"&gt;Rust Iran Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-meetup.ir/2022/06/17/seventh-meetup.html"&gt;&lt;strong&gt;Rust Iran Meetup #7 - Actix-Web Framework&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-20 | KÃ¶ln, DE | &lt;a href="https://www.meetup.com/rustcologne/"&gt;Rust Cologne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustcologne/events/286557151/"&gt;&lt;strong&gt;Reboot&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-21 | Berlin, DE | &lt;a href="https://berline.rs/"&gt;Berline.rs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/2022/06/21/rust-hack-and-learn.html"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-21 | Washington, DC, US | &lt;a href="https://www.meetup.com/RustDC/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/vdhxgsydcjbcc/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-28 | Dallas, TX, US | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrydcjblc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-29 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/qwgrssydcjbmc/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-30 | Linz, AT | &lt;a href="https://www.meetup.com/Rust-Linz/"&gt;Rust Linz&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Linz/events/286029968/"&gt;&lt;strong&gt;Rust Meetup Linz - 23th Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-05 | Austin, TX, US | &lt;a href="https://www.meetup.com/webassembly-and-wasmedge/"&gt;WebAssembly and WasmEdge&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/webassembly-and-wasmedge/events/zzdnrsydckbhb/"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting #10&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-05 | Beijing, CN | &lt;a href="https://www.meetup.com/wasm-rust-meetup/"&gt;WebAssembly and Rust Meetup (Rustlang)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/wasm-rust-meetup/events/jbfnrsydckbhb/"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting, a CNCF sandbox WebAssembly runtime&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-05 | Buffalo, NY, US | &lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/xgmfssydckbhb/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-06 | Indianapolis, IN, US | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsydckbjb/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-07 | Charlottesville, VA, US | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/285818136/"&gt;&lt;strong&gt;Rust, nalgebra, and Fourier Optics&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-09 | Virtual | &lt;a href="https://github.com/rust-gamedev/wg"&gt;Rust Game Dev&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discord.gg/yNtPTb2&amp;amp;sa=D&amp;amp;source=calendar&amp;amp;usd=2&amp;amp;usg=AOvVaw2pjyb-YBsl99IFDmrOKoOK"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-13 | Boulder, CO, US | &lt;a href="https://www.meetup.com/boulder-elixir-rust/"&gt;Boulder Elixir and Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/zvxcsrydckbrb/"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-15 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/286463726/"&gt;&lt;strong&gt;Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-21 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/wjkjssydcjbcc/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-29 | Austin, TX, US | &lt;a href="https://www.meetup.com/atx-rustaceans/"&gt;ATX Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/atx-rustaceans/events/285878081/"&gt;&lt;strong&gt;First Official Meetup - June 2022&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-13 | Atlanta, GA, US | &lt;a href="https://www.meetup.com/rust-atl/"&gt;Rust Atlanta&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atl/events/pczdssydckbrb/"&gt;&lt;strong&gt;Grab a beer with fellow Rustaceans&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-16 | Bristol City, UK | &lt;a href="https://www.meetup.com/rust-bristol/"&gt;Rust Bristol&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-bristol/events/286391025/"&gt;&lt;strong&gt;Talks - Serverless WASM &amp;amp; Graphics in Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-21 | Oslo, NO | &lt;a href="https://www.meetup.com/Rust-Oslo/"&gt;Rust Oslo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Oslo/events/286236751/"&gt;&lt;strong&gt;Async Rust and Embedded&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-22 | Amsterdam, NL | &lt;a href="https://www.meetup.com/rust-amsterdam-group/"&gt;Rust Developers Amsterdam Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-amsterdam-group/events/286305083/"&gt;&lt;strong&gt;Rust Developers Amsterdam Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-23 | WrocÅ‚aw, PL | &lt;a href="https://www.meetup.com/rust-wroclaw/"&gt;Rust WrocÅ‚aw&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-wroclaw/events/286415834/"&gt;&lt;strong&gt;Rust WrocÅ‚aw Meetup #26&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-28 | London, UK | &lt;a href="https://www.meetup.com/Rust-London-User-Group/"&gt;Rust London User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-london-user-group/events/286489185/"&gt;&lt;strong&gt;LDN Talks June 2022: Community Showcase&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Oceania&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-17 | Melbourne, VIC, AU | &lt;a href="https://www.meetup.com/Rust-Melbourne/"&gt;Rust Melbourne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Melbourne/events/285962368/"&gt;&lt;strong&gt;June 2022 Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-23 | Brisbane, QLD, AU | &lt;a href="https://www.meetup.com/rust-brisbane/"&gt;Rust Brisbane&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-brisbane/events/286385515/"&gt;&lt;strong&gt;June Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1&gt;Rust Jobs&lt;/h1&gt;
&lt;!--

New jobs can be posted here.

They should be of the form:

**Company Name**

* [Job Title (Location)](https://example.com/my-job-link)

--&gt;

&lt;p&gt;&lt;strong&gt;Audiotool&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.audiotool.com/jobs#rust-audio-dsp-developer"&gt;Rust / Audio DSP Developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kollider&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://careers.kollider.xyz/junior-backend-engineer/en"&gt;Junior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disney&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.disneycareers.com/job/seattle/senior-software-engineer/391/30162448528"&gt;Senior Software Engineer (Seattle, WA, US, New York, NY, US, San Francisco Bay Area, CA, US, FT Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Stockly&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.welcometothejungle.com/fr/companies/stockly/jobs/back-end-developer-rust-grpc-postgresql_paris"&gt;Back-end developer (Rust, gRPC, PostgreSQL) (Paris, FR)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Stellate&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/stellate/jobs/4027858005"&gt;Rust Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Enso&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/enso-org/hiring/blob/main/positions/senior-rust-ide-developer.md"&gt;Senior Rust IDE Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/enso-org/hiring/blob/main/positions/senior-rust-cloud-developer.md"&gt;Senior Cloud Rust Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Spire Global&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spire.com/careers/job-openings/job/?gh_jid=4226230"&gt;Software Engineers + Engineering Managers (Glasgow, UK, Luxembourg - Relocation Available)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Because lower-level software has more operational constraints than higher-level software (e.g. it typically cannot tolerate a runtime or memory management via garbage collection), developing a memory safe language suitable for systems software is particularly challenging. The Rust language has met that challenge, however, and is an excellent candidate for replacing C in many systems applications.&lt;/p&gt;
&lt;p&gt;We plan to invest in the tools that allow systems engineers to move their software to Rust. This means investing in improving package management, compilers, and Foreign Function Interface (FFI) generators. In many cases this will include providing interfaces compatible with existing widely-used components to enable transition. With these tools, adoption of a memory safe alternative will scale much faster without replication of efforts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://8112310.fs1.hubspotusercontent-na1.net/hubfs/8112310/OpenSSF/White%20House%20OSS%20Mobilization%20Plan.pdf?utm_referrer=https%3A%2F%2Fopenssf.org%2Foss-security-mobilization-plan%2F"&gt;The White House Open Source Software Mobilization Plan, multiple authors&lt;/a&gt; (PDF link)&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1253"&gt;Brian Kung&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/vdbleg/this_week_in_rust_447/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 446</title><link href="https://this-week-in-rust.org/blog/2022/06/08/this-week-in-rust-446/" rel="alternate"></link><published>2022-06-08T00:00:00-04:00</published><updated>2022-06-08T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2022-06-08:/blog/2022/06/08/this-week-in-rust-446/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2022/06/03/jun-steering-cycle.html"&gt;Rust Compiler June 2022 Steering Cycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/news/034/"&gt;This Month in Rust GameDev #34 - May 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2022/06/06/changelog-132.html"&gt;rust-analyzer changelog #132&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weekly.databend.rs/2022-06-01-databend-weekly/"&gt;This week in Databend #44: A Modern Cloud Data Warehouse for Everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weekly.databend.rs/2022-06-08-databend-weekly/"&gt;This week in Databend #45: A Modern Cloud Data Warehouse for Everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slint-ui.com/thisweek/2022-06-06.html"&gt;Slint UI crate weekly updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0035/"&gt;This week in Fluvio #35: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fornjot.app/blog/weekly-dev-log/2022-w22/"&gt;Fornjot (code-first CAD in Rust) - Weekly Dev Log - 2022-W22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thephilbert.io/2022/06/06/gcc-rust-monthly-report-17-may-2022/"&gt;GCC Rust Monthly Report #17 May 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zellij.dev/news/edit-scrollback-compact/"&gt;Zellij 0.30.0: use your $EDITOR to search and save your scrollback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://conradludgate.com/posts/async-stack"&gt;Stacked Futures and why they are impossible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hirrolot.github.io/posts/rust-is-hard-or-the-misery-of-mainstream-programming.html"&gt;Rust Is Hard, Or: The Misery of Mainstream Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thecodedmessage.com/posts/trivia-rust-types/"&gt;Trivia About Rust Types: An (Authorized) Transcription of Jon Gjengsetâ€™s Twitter Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2022/06/01/hyper-vs-rocket"&gt;Hyper vs Rocket - Low Level vs Batteries included&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itsallaboutthebit.com/async-simple/"&gt;(async) Rust doesn't have to be hard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thestack.technology/rust-language-explosive-growth-challenges-rust-governance/"&gt;Rust languageâ€™s explosive popularity comes with challenges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/emil-ernerfeldt/"&gt;egui with Emil Ernerfeldt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/rust-generics-trait-objects"&gt;Introduction to Rust generics (2/2): Trait Objects - Static vs Dynamic dispatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://desmondwillowbrook.github.io/blog/rust-error-handling/"&gt;Beginner-Intermediate Errror Handling in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://conradludgate.com/posts/macros_match"&gt;Macro Patterns - A match made in heaven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://model-checking.github.io/kani-verifier-blog/2022/06/01/using-the-kani-rust-verifier-on-a-rust-standard-library-cve.html"&gt;Using the Kani Rust Verifier on a Rust Standard Library CVE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://audunhalland.github.io/blog/entrait-pattern/"&gt;The entrait pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrapingbee.com/blog/web-scraping-rust/"&gt;Web Scraping with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://logankeenan.com/posts/a-rust-server-app-compiled-to-wasm-as-an-spa/"&gt;Logan Keenan - A Rust Server App Compiled to WASM as an SPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=fdxhcDne2Ww"&gt;Async I/O in Depth: Creating a High Performance HTTP Web Server in Rust (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=05pS-m6iuQ4"&gt;Stream Ingestion with Kafka &amp;amp; Kinesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=tf9x97eTcpk"&gt;is salvo really the simplest rust web framework?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/playlist?list=PL_UrKDEhALdJS0VrLPn7dqC5A4W1vCAUT"&gt;Rust wgpu Graphics Programming Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Research&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2206.01041"&gt;End-to-End Security for Distributed Event-Driven Enclave Applications on Heterogeneous TEEs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://lib.rs/crates/osmpbf"&gt;osmpbf&lt;/a&gt; an OpenStreetMap pbf-file reader.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1065"&gt;Kornel&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/metalbear-co/mirrord/issues/112"&gt;mirrord - Handle Job/Pod creation errors in mirrord-layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/metalbear-co/mirrord/issues/110"&gt;mirrord - mirrord-layer panics without any relevant info if the agent exits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;385 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2022-05-30..2022-06-06"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97715"&gt;support the &lt;code&gt;#[expect]&lt;/code&gt; attribute on fn parameters&lt;/a&gt; (RFC #&lt;a href="https://rust-lang.github.io/rfcs/2383-lint-reasons.html"&gt;2383&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97722"&gt;tighten spans for bad fields in struct deriving &lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97656"&gt;add a suggestion to replace parentheses with angle brackets on associated trait constraint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97023"&gt;diagnose anonymous lifetimes errors more uniformly between async and regular fns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97696"&gt;do not ICE when failing to normalize during inlining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97683"&gt;fail gracefully when encountering an HRTB in APIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97716"&gt;fix reachability analysis for const methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97640"&gt;fix wrong suggestion for adding where clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97264"&gt;suggest &lt;code&gt;extern crate foo&lt;/code&gt; when failing to resolve &lt;code&gt;use foo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97759"&gt;suggest adding &lt;code&gt;{}&lt;/code&gt; for &lt;code&gt;'label: non_block_expr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97371"&gt;suggest adding a semicolon to a closure without block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/96271"&gt;suggest &lt;code&gt;?&lt;/code&gt; when method is missing on &lt;code&gt;Result&amp;lt;T, _&amp;gt;&lt;/code&gt; but found on &lt;code&gt;T&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97764"&gt;use strict provenance APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97471"&gt;provide more context when denying invalid type params&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97172"&gt;optimize the diagnostic generation for &lt;code&gt;extern unsafe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97707"&gt;improve soundness of &lt;code&gt;rustc_data_structures&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97664"&gt;on E0204 suggest missing type param bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97684"&gt;interpret: better control over whether we read data with provenance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2165"&gt;miri: add support for &lt;code&gt;_COARSE&lt;/code&gt; clocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2145"&gt;miri: save a created event for zero-size reborrows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1963"&gt;miri: weak memory emulation using store buffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2183"&gt;miri: adjust for better provenance control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2197"&gt;miri: make Miri's scheduler proper round-robin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97609"&gt;iterate over &lt;code&gt;maybe_unused_trait_imports&lt;/code&gt; when checking dead trait imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97604"&gt;inline &lt;code&gt;bridge::Buffer&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97575"&gt;lazify &lt;code&gt;SourceFile::lines&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97647"&gt;lazily allocate and initialize pthread locks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/96737"&gt;add windows application manifest to rustc-main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/467"&gt;Implement faster memcmp for x86_64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97553"&gt;inline &lt;code&gt;Vec&lt;/code&gt;'s &lt;code&gt;Deref/DerefMut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97526"&gt;add unicode fast path to &lt;code&gt;is_printable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/95594"&gt;additional &lt;code&gt;*mut [T]&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/94647"&gt;expose &lt;code&gt;get_many_mut&lt;/code&gt; and &lt;code&gt;get_many_unchecked_mut&lt;/code&gt; to &lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/96881"&gt;implement &lt;code&gt;[OsStr]::join&lt;/code&gt;&lt;/a&gt; &amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97419"&gt;make &lt;code&gt;from{,_mut}_ptr_range&lt;/code&gt; const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97397"&gt;stabilize &lt;code&gt;box_into_pin&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97455"&gt;stabilize &lt;code&gt;toowned_clone_into&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97366"&gt;stabilize {slice, array}&lt;code&gt;::from_ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/338"&gt;hashbrown: add shortcircuit in iteration if we yielded all elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2608"&gt;futures: fix orderings in &lt;code&gt;LocalPool&lt;/code&gt; waker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2556"&gt;futures: switch to &lt;code&gt;FuturesOrdered&lt;/code&gt; dynamically in &lt;code&gt;try_join_all&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2611"&gt;futures: stream: fix &lt;code&gt;Chunk&lt;/code&gt; adapters size hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10701"&gt;cargo: emit warning upon encountering multiple packages with the same name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10713"&gt;cargo: expose rust-version through env var&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97613"&gt;rustdoc: improve calculation of "Impls on Foreign Types"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97592"&gt;rustdoc: also index impl trait and raw pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97130"&gt;rustdoc: avoid including impl blocks with filled-in generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7359"&gt;clippy: clippy book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8918"&gt;clippy: add lint &lt;code&gt;almost_complete_letter_range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8933"&gt;clippy: add lint &lt;code&gt;needless_parens_on_range_literals&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8831"&gt;clippy: add lint &lt;code&gt;mismatching_type_param_order&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8916"&gt;clippy: new lint &lt;code&gt;swap_ptr_to_ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7930"&gt;clippy: new lint: &lt;code&gt;borrow_deref_ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8934"&gt;clippy: add &lt;code&gt;as_underscore&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8941"&gt;clippy: improve &lt;code&gt;for_loops_over_fallibles&lt;/code&gt; to detect the usage of iter, iter_mut and into_iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8899"&gt;clippy: fix &lt;code&gt;use_self&lt;/code&gt; false negative with on struct and tuple struct patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8884"&gt;clippy: fix &lt;code&gt;manual_range_contains&lt;/code&gt; false negative with chains of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8902"&gt;clippy: when setting suggestion for significant_drop_in_scrutinee, add suggestion for MoveAndClone for non-ref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8932"&gt;clippy: &lt;code&gt;needless_return&lt;/code&gt; checks for macro expr in return stmts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8564"&gt;clippy: don't lint &lt;code&gt;useless_transmute&lt;/code&gt; on types with erased regions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8876"&gt;clippy: &lt;code&gt;cast_abs_to_unsigned&lt;/code&gt;: do not remove cast if it's required&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8906"&gt;clippy: remove &lt;code&gt;large_enum_variant&lt;/code&gt; suggestion for &lt;code&gt;Copy&lt;/code&gt; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8930"&gt;clippy: fix &lt;code&gt;manual_find_map&lt;/code&gt; and &lt;code&gt;manual_filter_map&lt;/code&gt;: check clone method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8913"&gt;clippy: fix ICE in shadow lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8912"&gt;clippy: needless_late_init: fix ICE when all branches return the never type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8869"&gt;clippy: set correct &lt;code&gt;ParamEnv&lt;/code&gt; for &lt;code&gt;derive_partial_eq_without_eq&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12466"&gt;rust-analyzer: increase worker thread stack and name them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12461"&gt;rust-analyzer: move trait_impl completion analysis into CompletionContext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12333"&gt;rust-analyzer: order auto-imports by relevance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12435"&gt;rust-analyzer: cleaer status bar bg color / command  when server status returns to OK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12451"&gt;rust-analyzer: support &lt;code&gt;$$&lt;/code&gt; in macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12452"&gt;rust-analyzer: &lt;code&gt;Merge imports&lt;/code&gt; assist can merge multiple selected imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12440"&gt;rust-analyzer: don't remove diagnostic with empty message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12347"&gt;rust-analyzer: resolving import panics and improve import resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12336"&gt;rust-analyzer: type-mismatch when using equals w/ a trait bound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12470"&gt;rust-analyzer: cleanup output channels when restarting server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12427"&gt;rust-analyzer: fix VSCode config patching incorrectly patching some configs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12431"&gt;rust-analyzer: fix completions disappearing when typing two keys in quick succession&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12467"&gt;rust-analyzer: fix match to if let assist for wildcard pats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12475"&gt;rust-analyzer: fix trait impl completions using wrong insert position&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12471"&gt;rust-analyzer: restart the server instead of reloading the window when config changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12425"&gt;rust-analyzer: float display impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12444"&gt;rust-analyzer: parsing of &lt;code&gt;?&lt;/code&gt; opt-out trait bounds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A busy week in compiler performance, but fortunately improvements outweighed regressions. The biggest improvements came from @nnethercote's work on making the decoding of &lt;code&gt;SourceFile::lines&lt;/code&gt; lazy which significantly cuts the costs of decoding crate metadata. The biggest regressions came from the removal of json handling in &lt;code&gt;rustc_serialize&lt;/code&gt; which has been a multi-month effort to improve the maintainability of json (de-)serialization in the compiler.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=0a43923a86c3b8f11d005884871b152f59b746f7&amp;amp;end=bb55bd449e65e611da928560d948982d73e50027&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;0a43923a..bb55bd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;max&lt;/th&gt;
&lt;th align="center"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ðŸ˜¿ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;0.5%&lt;/td&gt;
&lt;td align="center"&gt;3.2%&lt;/td&gt;
&lt;td align="center"&gt;36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ðŸ˜¿ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;0.3%&lt;/td&gt;
&lt;td align="center"&gt;0.9%&lt;/td&gt;
&lt;td align="center"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ðŸŽ‰ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;-1.3%&lt;/td&gt;
&lt;td align="center"&gt;-15.1%&lt;/td&gt;
&lt;td align="center"&gt;124&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ðŸŽ‰ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;-2.7%&lt;/td&gt;
&lt;td align="center"&gt;-13.5%&lt;/td&gt;
&lt;td align="center"&gt;182&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;All ðŸ˜¿ðŸŽ‰ (primary)&lt;/td&gt;
&lt;td align="center"&gt;-0.9%&lt;/td&gt;
&lt;td align="center"&gt;-15.1%&lt;/td&gt;
&lt;td align="center"&gt;160&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;2 Regression, 6 Improvements, 5 Mixed; 4 of them in rollups
48 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2022-06-07.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2945"&gt;RFC: 'C-unwind' ABI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2945#issuecomment-1134003542"&gt;Testing instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3262"&gt;Rolling co-lead roles for T-compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97791"&gt;Make {Mutex, Condvar, RwLock}::new() const. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97675"&gt;Make std::mem::needs_drop accept ?Sized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/93203"&gt;Tracking Issue for scoped threads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No New or Updated RFCs were created this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2022-06-08 - 2022-07-06 ðŸ¦€&lt;/p&gt;
&lt;h3&gt;Virtual&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-08 | Boulder, CO, US | &lt;a href="https://www.meetup.com/boulder-elixir-rust/"&gt;Boulder Elixir and Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/zvxcsrydcjblb/"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-08 | Cardiff, UK | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/286079097/"&gt;&lt;strong&gt;Rust Book Study Session - Macros&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | Dublin, IE | &lt;a href="https://www.meetup.com/Rust-Dublin/"&gt;Rust Dublin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/286018947/"&gt;&lt;strong&gt;Verus â€” Verified Rust for low-level systems code&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | NÃ¼rnberg, DE | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nurnberg DE&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/hlvbvsydcjbmb/"&gt;&lt;strong&gt;Rust NÃ¼rnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | San Diego, CA, US | &lt;a href="https://www.meetup.com/San-Diego-Rust/"&gt;San Diego Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/285952122/"&gt;&lt;strong&gt;San Diego Rust June 2022 Tele-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/swgrssydcjbmb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-11 | Online | &lt;a href="https://arewegameyet.rs/"&gt;Rust Gamedev&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discord.gg/j6QJsMd"&gt;&lt;strong&gt;Rust Gamedev Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-14 | Dallas, TX, US | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/vqtjcsydcjbsb/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-14 | Rostock, DE | &lt;a href="https://www.meetup.com/altow-academy/"&gt;Altow Academy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/altow-academy/events/286138086/"&gt;&lt;strong&gt;Rust Meetup Rostock&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-14 | SaarbrÃ¼cken, DE | &lt;a href="https://www.meetup.com/rust-saar/"&gt;Rust-Saar&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-saar/events/286291318/"&gt;&lt;strong&gt;Meetup: 22u16&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-15 | Philadelphia, PA, US | &lt;a href="https://www.meetup.com/RustPhilly/"&gt;Rust Philly (Rust Philadelphia)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustPhilly/events/qkbktsydcjbtb/"&gt;&lt;strong&gt;Remote Book Club: Rust for Rustaceans Chapter Discussion&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-15 | Vancouver, BC, CA | &lt;a href="https://www.meetup.com/Vancouver-Rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/nwcmpsydcjbtb/"&gt;&lt;strong&gt;Nushell&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-21 | Washington, DC, US | &lt;a href="https://www.meetup.com/RustDC/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/vdhxgsydcjbcc/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-28 | Dallas, TX, US | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrydcjblc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-29 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/qwgrssydcjbmc/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-30 | Linz, AT | &lt;a href="https://www.meetup.com/Rust-Linz/"&gt;Rust Linz&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Linz/events/286029968/"&gt;&lt;strong&gt;Rust Meetup Linz - 23th Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-05 | Austin, TX, US | &lt;a href="https://www.meetup.com/webassembly-and-wasmedge/"&gt;WebAssembly and WasmEdge&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/webassembly-and-wasmedge/events/zzdnrsydckbhb/"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting #10&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-05 | Beijing, CN | &lt;a href="https://www.meetup.com/wasm-rust-meetup/"&gt;WebAssembly and Rust Meetup (Rustlang)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/wasm-rust-meetup/events/jbfnrsydckbhb/"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting, a CNCF sandbox WebAssembly runtime&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-05 | Buffalo, NY, US | &lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/xgmfssydckbhb/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-07-06 | Indianapolis, IN, US | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsydckbjb/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-08 | Atlanta, GA, US | &lt;a href="https://www.meetup.com/Rust-ATL/"&gt;Rust ATL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/pczdssydcjblb/"&gt;&lt;strong&gt;Grab a beer with fellow Rustaceans&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | Columbus, OH, US | &lt;a href="https://www.meetup.com/columbus-rs/"&gt;Columbus Rust Society&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrydcjbmb/"&gt;&lt;strong&gt;Monthly Meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-21 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/wjkjssydcjbcc/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-29 | Austin, TX, US | &lt;a href="https://www.meetup.com/atx-rustaceans/"&gt;ATX Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/atx-rustaceans/events/285878081/"&gt;&lt;strong&gt;First Official Meetup - June 2022&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-09 | Edinburgh, UK | &lt;a href="https://www.meetup.com/rust-edi/"&gt;Rust Edinburgh&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-edi/events/286080531/"&gt;&lt;strong&gt;Rust Night June, Edinburgh&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | Oslo, NO | &lt;a href="https://www.meetup.com/Rust-Oslo/"&gt;Rust Oslo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Oslo/events/286006378/"&gt;&lt;strong&gt;Introduction to axum - An ergonomic and modular web framework by David Pedersen&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-14 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/286137650/"&gt;&lt;strong&gt;On Site Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-16 | Bristol City, UK | &lt;a href="https://www.meetup.com/rust-bristol/"&gt;Rust Bristol&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-bristol/events/286391025/"&gt;&lt;strong&gt;Talks - Serverless WASM &amp;amp; Graphics in Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-21 | Oslo, NO | &lt;a href="https://www.meetup.com/Rust-Oslo/"&gt;Rust Oslo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Oslo/events/286236751/"&gt;&lt;strong&gt;Async Rust and Embedded&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-22 | Amsterdam, NL | &lt;a href="https://www.meetup.com/rust-amsterdam-group/"&gt;Rust Developers Amsterdam Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-amsterdam-group/events/286305083/"&gt;&lt;strong&gt;Rust Developers Amsterdam Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Oceania&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-14 | Canberra, ACT, AU | &lt;a href="https://www.meetup.com/rust-canberra/"&gt;Rust Canberra&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-canberra/events/285918739/"&gt;&lt;strong&gt;Canberra Rust User Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-17 | Melbourne, VIC, AU | &lt;a href="https://www.meetup.com/Rust-Melbourne/"&gt;Rust Melbourne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Melbourne/events/285962368/"&gt;&lt;strong&gt;June 2022 Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-23 | Brisbane, QLD, AU | &lt;a href="https://www.meetup.com/rust-brisbane/"&gt;Rust Brisbane&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-brisbane/events/286385515/"&gt;&lt;strong&gt;June Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1&gt;Rust Jobs&lt;/h1&gt;
&lt;!--

New jobs can be posted here.

They should be of the form:

**Company Name**

* [Job Title (Location)](https://example.com/my-job-link)

--&gt;

&lt;p&gt;&lt;strong&gt;Spire Global&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spire.com/careers/job-openings/job/?gh_jid=4226230"&gt;Software Engineers + Engineering Managers (Glasgow, UK, Luxembourg - Relocation Available)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Meilisearch&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/meili/5b9f780a-0c80-41a7-aba0-bd86834e6823"&gt;Senior Software Engineer (Remote, European timezone)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Stockly&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.welcometothejungle.com/fr/companies/stockly/jobs/back-end-developer-engine-team-rust-grpc-postgresql_paris"&gt;Back-end developer - Engine (Rust, gRPC, PostgreSQL) (Paris, FR)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Nikulipe&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/jobs/view/3107060725/"&gt;Software Engineer â€“ Full Stack Rust (Vilnius, Vilniaus, LT)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;GMEX Group&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/jobs/view/3099462018/"&gt;Senior Blockchain MPC Developer / Blockchain MPC Developer (Various, Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Enso&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/enso-org/hiring/blob/main/positions/senior-rust-ide-developer.md"&gt;Senior Rust IDE Developer (KrakÃ³w, PL or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/enso-org/hiring/blob/main/positions/senior-rust-cloud-developer.md"&gt;Senior Cloud Rust Engineer (KrakÃ³w, PL or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I wrote a bespoke time-series database in Rust a few years ago, and it has had exactly one issue since I stood it up in production, and that was due to pessimistic filesystem access patterns, rather than the language. This thing is handling hundreds of thousands of inserts per second, and it's even threaded.&lt;/p&gt;
&lt;p&gt;Given that I've been programming professionally for over a decade in Python, Perl, Ruby, C, C++, Javascript, Java, and Rust, I'll pick Rust absolutely any time that I want something running that I won't get called at 3 AM to fix. It probably took me 5 times as long to write it as if I did it in Go or Python, but I guarantee it's saved me 10 times as much time I would have otherwise spent triaging, debugging, and running disaster recovery.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://news.ycombinator.com/item?id=31616966"&gt;Taywee on hacker news&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1250"&gt;Erich Gubler&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/v88hmw/this_week_in_rust_446/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 445</title><link href="https://this-week-in-rust.org/blog/2022/06/01/this-week-in-rust-445/" rel="alternate"></link><published>2022-06-01T00:00:00-04:00</published><updated>2022-06-01T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2022-06-01:/blog/2022/06/01/this-week-in-rust-445/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2022/05/26/Concluding-events-mods.html"&gt;Concluding the events of last November&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2022/05/30/changelog-131.html"&gt;rust-analyzer changelog #131&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://helix-editor.com/news/release-22-05-highlights/"&gt;Helix editor 22.05 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slint-ui.com/thisweek/2022-05-30.html"&gt;Slint UI crate weekly updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fornjot.app/blog/weekly-dev-log/2022-w21/"&gt;Fornjot (code-first CAD in Rust) - Weekly Dev Log - 2022-W21&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2022/05/30/changelog-171.html"&gt;IntelliJ Rust Changelog #171&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/ferrocene-language-specification/"&gt;Introducing the Ferrocene Language Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustjobs.com/blog/the-rust-jobs-market.html"&gt;The Rust Jobs Market&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=0rJ94rbdteE"&gt;Rust makes you feel like a GENIUS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/twir-443/"&gt;This Week in Rust Issue 443&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kas-gui.github.io/blog/impl-tools.html"&gt;Impl-tools: beyond derive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/rust-generics-traits"&gt;Introduction to Rust generics (1/2): Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2022/05/29/builder-lite.html"&gt;Builder Lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/the-curse-of-strong-typing"&gt;The curse of strong typing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flakm.github.io/posts/rust_interview_questions/"&gt;Simple rust interview questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flakm.github.io/posts/heap_allocation/"&gt;Profiling heap allocation in rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itsallaboutthebit.com/arc-mutex/"&gt;Arc and Mutex in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ectobit.com/blog/speed-up-github-actions-rust-pipelines/"&gt;How I speeded up my Rust builds on GitHub ~30 times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://inspektor.cloud/blog/how-profiler-works/"&gt;Some notes on internal working of profiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eli.thegreenplace.net/2022/rewriting-the-lexer-benchmark-in-rust/"&gt;Rewriting the lexer benchmark in Rust &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev-random.io/parallel-programming-with-bip-buffer/"&gt;Parallel programming design with BipBuffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geekabyte.io/2022/05/a-neophytes-introduction-to-asyncawait.html"&gt;A Neophyte's Introduction to the async/await landscape in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Research&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2205.11709"&gt;Hardware/Software Co-Assurance using the Rust Programming Language and ACL2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustconf.com/schedule"&gt;RustConf 2022 Presentation Schedule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/DJDuque/pgfplots"&gt;pgfplots&lt;/a&gt;, a crate to generate publication-quality figures (with or without LaTeX).&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1066"&gt;Daniel Duque&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/metalbear-co/mirrord/issues/53"&gt;mirrord - extract panics on non-existent directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/metalbear-co/mirrord/issues/62"&gt;mirrord - Support MIRRORD_AGENT_TTL as an argument in the CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;361 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2022-05-23..2022-05-30"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/94214"&gt;prepare Rust for opaque pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97298"&gt;parse expression after &lt;code&gt;else&lt;/code&gt; as a condition if followed by &lt;code&gt;{&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97327"&gt;macros: introduce &lt;code&gt;fluent_messages&lt;/code&gt; macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97456"&gt;improve error message for E0081&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97370"&gt;minor improvement on else-no-if diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97351"&gt;output correct type responsible for structural match violation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2138"&gt;miri: adjust Miri to also require return places everywhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2158"&gt;miri: avoid error patterns matching themselves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2151"&gt;miri: enable number validity checking and &lt;code&gt;ptr::invalid&lt;/code&gt; checking by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97302"&gt;do writeback of Closure params before visiting the parent expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97034"&gt;implement &lt;code&gt;Hash&lt;/code&gt; for &lt;code&gt;core::alloc::Layout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/96098"&gt;refactor call terminator to always include destination place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97291"&gt;split out the various responsibilities of &lt;code&gt;rustc_metadata::Lazy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97383"&gt;try to cache &lt;code&gt;region_scope_tree&lt;/code&gt; as a query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97345"&gt;add a deep &lt;code&gt;fast_reject&lt;/code&gt; routine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/94954"&gt;extend &lt;code&gt;ptr::null&lt;/code&gt; and &lt;code&gt;null_mut&lt;/code&gt; to all thin (including extern) types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97308"&gt;stabilize &lt;code&gt;cell_filter_map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/94640"&gt;partially stabilize (&lt;code&gt;const_&lt;/code&gt;)&lt;code&gt;slice_ptr_len&lt;/code&gt; feature by stabilizing &lt;code&gt;NonNull::len&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/96051"&gt;use rounding instead of truncation in float to Duration conversion methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97046"&gt;improve case conversion happy path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97328"&gt;rustc: fix ICE in native library error reporting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/165"&gt;codegen_gcc: Define immutable statics with const qualified types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/96298"&gt;libcore: add &lt;code&gt;iter::from_generator&lt;/code&gt; which is like &lt;code&gt;iter::from_fn&lt;/code&gt;, but for coroutines instead of functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/464"&gt;builtins: faster float conversion operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8866"&gt;clippy: add new lint &lt;code&gt;unused_rounding&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8385"&gt;clippy: add &lt;code&gt;doc_link_with_quotes&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8882"&gt;clippy: new lint about use first() instead of get(0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8754"&gt;clippy: new lint &lt;code&gt;no_effect_replace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8885"&gt;clippy: support &lt;code&gt;Weak&lt;/code&gt; in &lt;code&gt;rc_clone_in_vec_init&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8862"&gt;clippy: &lt;code&gt;get_last_with_len&lt;/code&gt;: lint &lt;code&gt;VecDeque&lt;/code&gt; and any deref to slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8892"&gt;clippy: fix &lt;code&gt;empty_line_after_outer_attribute&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8786"&gt;clippy: &lt;code&gt;identity_op&lt;/code&gt;: add parenthesis to suggestions where required&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8897"&gt;clippy: introduce &lt;code&gt;allow-dbg-in-tests&lt;/code&gt; config value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12416"&gt;rust-analyzer: add implicit static lifetime hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12384"&gt;rust-analyzer: generate variant: insert code in file with enum definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12409"&gt;rust-analyzer: fix overflow during type inference for tuple struct patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12387"&gt;rust-analyzer: correct single-file module rename&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12383"&gt;rust-analyzer: clear native diagnostics for files when they are deleted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12412"&gt;rust-analyzer: retrigger visibility completion after parentheses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12395"&gt;rust-analyzer: &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt; representation during lowering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/12341"&gt;rust-analyzer: make &lt;code&gt;files.excludeDirs&lt;/code&gt; work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A good week: The regressions were small; some have follow-up PR's in flight to
address them; and we saw a big improvement from PR
&lt;a href="https://github.com/rust-lang/rust/pull/97345"&gt;#97345&lt;/a&gt;, which adds more fast
paths for quickly exiting comparisons between two types (such as &lt;code&gt;BitsImpl&amp;lt;M&amp;gt;&lt;/code&gt;
and &lt;code&gt;BitsImpl&amp;lt;N&amp;gt;&lt;/code&gt; for const integers &lt;code&gt;M&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt;). This improved compile-times
for the &lt;code&gt;bitmaps&lt;/code&gt; benchmark by 50-65% in some cases (including the trunk
&lt;code&gt;nalgebra&lt;/code&gt;, according to independent investigation from nnethercote). That same
PR had more modest improvements (1% to 2%) to the compile-times for a number of
other crates. Many thanks to lcnr and nnethercote for some excellent work here!&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=43d9f3859e0204e764161ee085a360274b5f3e9a&amp;amp;end=0a43923a86c3b8f11d005884871b152f59b746f7&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;43d9f385..0a43923a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3 Regressions, 1 Improvements, 9 Mixed; 0 of them in rollups
59 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2022-05-31.md"&gt;Full report here&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3216"&gt;Allow using for&amp;lt;'a&amp;gt; syntax when declaring closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3254"&gt;Create a types team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/93203"&gt;Tracking Issue for scoped threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97316"&gt;Put a bound on collection misbehavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/87074"&gt;Tracking Issue for RFC 3128: I/O Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/97122"&gt;Lang: Stabilize usage of rustc_nonnull_optimization_guaranteed on -1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[notice] &lt;a href="https://github.com/rust-lang/rfcs/pull/3273"&gt;Mention about removal of crate visibility specifier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2022-06-01 - 2022-06-29 ðŸ¦€&lt;/p&gt;
&lt;h3&gt;Virtual&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-01 | Indianapolis, IN, US | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsydcjbcb/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-01 | Philadelphia, PA, US | &lt;a href="https://www.meetup.com/RustPhilly/"&gt;Rust Philly (Rust Philadelphia)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustPhilly/events/qkbktsydcjbcb/"&gt;&lt;strong&gt;Remote Book Club: Rust for Rustaceans Chapter Discussion&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-07 | Beijing, CN | &lt;a href="https://www.meetup.com/Wasm-Rust-Meetup/"&gt;WebAssembly and Rust Meetup (Rustlang)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Wasm-Rust-Meetup/events/jbfnrsydcjbkb/"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting, a CNCF sandbox WebAssembly runtime&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-07 | Berlin, DE | &lt;a href="https://berline.rs/"&gt;Berline.rs&lt;/a&gt; | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;Open Tech School Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/zdrzpsydcjbkb/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-07 | Buffalo, NY, US | &lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/xgmfssydcjbkb/"&gt;&lt;strong&gt;June Meetup: Intro to monoids and semi groups using Frunk&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-08 | Boulder, CO, US | &lt;a href="https://www.meetup.com/boulder-elixir-rust/"&gt;Boulder Elixir and Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/zvxcsrydcjblb/"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-08 | Cardiff, UK | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff &lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/286079097/"&gt;&lt;strong&gt;Rust Book Study Session - Macros&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | Dublin, IE | &lt;a href="https://www.meetup.com/Rust-Dublin/"&gt;Rust Dublin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/286018947/"&gt;&lt;strong&gt;Verus â€” Verified Rust for low-level systems code&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | NÃ¼rnberg, DE | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nurnberg DE&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/hlvbvsydcjbmb/"&gt;&lt;strong&gt;Rust NÃ¼rnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | San Diego, CA, US | &lt;a href="https://www.meetup.com/San-Diego-Rust/"&gt;San Diego Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/285952122/"&gt;&lt;strong&gt;San Diego Rust June 2022 Tele-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/swgrssydcjbmb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-11 | Online | &lt;a href="https://arewegameyet.rs/"&gt;Rust Gamedev&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discord.gg/j6QJsMd"&gt;&lt;strong&gt;Rust Gamedev Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-14 | Dallas, TX, US | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/vqtjcsydcjbsb/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-14 | Rostock, DE | &lt;a href="https://www.meetup.com/altow-academy/"&gt;Altow Academy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/altow-academy/events/286138086/"&gt;&lt;strong&gt;Rust Meetup Rostock&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-15 | Philadelphia, PA, US | &lt;a href="https://www.meetup.com/RustPhilly/"&gt;Rust Philly (Rust Philadelphia)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustPhilly/events/qkbktsydcjbtb/"&gt;&lt;strong&gt;Remote Book Club: Rust for Rustaceans Chapter Discussion&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-15 | Vancouver, BC, CA | &lt;a href="https://www.meetup.com/Vancouver-Rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/nwcmpsydcjbtb/"&gt;&lt;strong&gt;Nushell&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-21 | Washington, DC, US | &lt;a href="https://www.meetup.com/RustDC/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/vdhxgsydcjbcc/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-28 | Dallas, TX, US | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrydcjblc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-29 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/qwgrssydcjbmc/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-30 | Linz, AT | &lt;a href="https://www.meetup.com/Rust-Linz/"&gt;Rust Linz&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Linz/events/286029968/"&gt;&lt;strong&gt;Rust Meetup Linz - 23th Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-01 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/285973465/"&gt;&lt;strong&gt;Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-08 | Atlanta, GA, US | &lt;a href="https://www.meetup.com/Rust-ATL/"&gt;Rust ATL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/pczdssydcjblb/"&gt;&lt;strong&gt;Grab a beer with fellow Rustaceans&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | Columbus, OH, US | &lt;a href="https://www.meetup.com/columbus-rs/"&gt;Columbus Rust Society&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrydcjbmb/"&gt;&lt;strong&gt;Monthly Meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-21 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/wjkjssydcjbcc/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-29 | Austin, TX, US | &lt;a href="https://www.meetup.com/atx-rustaceans/"&gt;ATX Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/atx-rustaceans/events/285878081/"&gt;&lt;strong&gt;First Official Meetup - June 2022&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-09 | Edinburgh, UK | &lt;a href="https://www.meetup.com/rust-edi/"&gt;Rust Edinburgh&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-edi/events/286080531/"&gt;&lt;strong&gt;Rust Night June, Edinburgh&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-09 | Oslo, NO | &lt;a href="https://www.meetup.com/Rust-Oslo/"&gt;Rust Oslo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Oslo/events/286006378/"&gt;&lt;strong&gt;Introduction to axum - An ergonomic and modular web framework by David Pedersen&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-14 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/286137650/"&gt;&lt;strong&gt;On Site Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-06-21 | Oslo, NO | &lt;a href="https://www.meetup.com/Rust-Oslo/"&gt;Rust Oslo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Oslo/events/286236751/"&gt;&lt;strong&gt;Async Rust and Embedded&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Oceania&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-06-17 | Melbourne, VIC, AU | &lt;a href="https://www.meetup.com/Rust-Melbourne/"&gt;Rust Melbourne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Melbourne/events/285962368/"&gt;&lt;strong&gt;June 2022 Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1&gt;Rust Jobs&lt;/h1&gt;
&lt;!--

New jobs can be posted here.

They should be of the form:

**Company Name**

* [Job Title (Location)](https://example.com/my-job-link)

--&gt;

&lt;p&gt;&lt;strong&gt;Element&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/elementio/j/5BD58AFB6F/"&gt;Software Engineer - VoIP (Go/Rust) (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Quickwit&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quickwit.io/jobs/distributed-software-engineer"&gt;Senior Software Engineer, Rust &amp;amp; distributed systems (Remote, European/Asian time zones)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Micropelt&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.micropelt.com/en/micropelt/jobs"&gt;Embedded Engineer (Freiburg, DE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Stockly&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.welcometothejungle.com/fr/companies/stockly/jobs/back-end-developer-rust-grpc-postgresql_paris"&gt;Back-end developer (Rust, gRPC, PostgreSQL) (Paris, FR)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Audiotool&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.audiotool.com/jobs#rust-audio-dsp-developer"&gt;Rust / Audio DSP Developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Zcash Foundation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cryptojobslist.com/jobs/core-engineer-zcash-foundation-no-restrictions"&gt;Core Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bolt Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/@bolt/H1gYR6NEq"&gt;Cryptographic Engineer at Bolt Labs (Remote, US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/@bolt/S1wOGzS4q"&gt;Senior Software Engineer (Rust) at Bolt Labs (Remote, US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/@bolt/SknjzfB49"&gt;Software Engineer (Rust) at Bolt Labs (Remote, US)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is a perfect language for a dad like me, who every day puts kids to sleep, and tired after long day of work and chores, can sit down and possibly write some code for the hobby open source project, even when he's already just half awake. And it usually just works, tend to be robust and make the day feel extra productive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://www.reddit.com/r/rust/comments/uxx7w8/this_week_in_rust_444/ia1cwn6"&gt;Dawid CiÄ™Å¼arkiewicz on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/v2wdgj/this_week_in_rust_445/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry></feed>