<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/feeds/twir-contributors.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 01 Dec 2021 00:00:00 -0500</lastBuildDate><item><title>This Week in Rust 419</title><link>https://this-week-in-rust.org/blog/2021/12/01/this-week-in-rust-419/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2021/11/25/in-response-to-the-moderation-team-resignation.html"&gt;In response to the moderation team resignation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2021/11/30/1.57.0-prerelease.html"&gt;1.57.0 pre-release testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io//thisweek/2021/11/29/changelog-105.html"&gt;Rust Analyzer Changelog #105&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-11-29.html"&gt;SixtyFPS (GUI crate): Changelog for 28th of November 2021 ‚Äì 0.1.15 Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weekly.databend.rs/2021-12-01-databend-weekly/"&gt;This week in Databend #18: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wasmer.io/posts/wasmer-2.1"&gt;Wasmer 2.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/wyrcan/wyrcan"&gt;Wyrcan ~ The Container Bootloader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0015/"&gt;This week in Fluvio #15: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ralfj.de/blog/2021/11/24/ub-necessary.html"&gt;Do we Really Need Undefined Behavior?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io//2021/11/27/notes-on-module-system.html"&gt;Notes On Module System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://njk.onl/blog/gaffer.html"&gt;A prioritised micro-batch scheduler in rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mark_saward/go-footguns-go-defer-and-rust-drop-17af"&gt;Go footguns: Go Defer and Rust Drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yossarian.net/2021/11/29/LLVM-internals-part-4-attributes-and-attribute-groups"&gt;LLVM internals, part 4: attributes and attribute groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eevans.co/blog/wraft/"&gt;Implementing Raft for Browsers with Rust and WebRTC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oxide.computer/blog/hubris-and-humility"&gt;Hubris and Humility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] &lt;a href="https://dev.to/daniel1in/zero-cost-abstractions-in-rust-5e41"&gt;Zero-Cost Abstractions in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/048-herbert-wolverson/"&gt;Game Development with Herbert Wolverson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=bejThbzAYOA"&gt;Rust Linz, November 2021 - Advent of Code by Rainer Stropek with Fred Morcos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=UhZGYS13twc"&gt;Rust Linz, November 2021 - Serde Shenanigans by Armin Ronacher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=o6qe4lw9-8c"&gt;Rust Linz, November 2021 - WebAssembly beyond the browser by Thorsten Hans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=uIeIBlB0JFw"&gt;Rust 2021 Edition Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=DGbsHENouy4"&gt;Mats Kindahl: A C++ programmer's view on Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/black-hat-rust-week-2021/"&gt;Black Hat Week (Black Hat Rust is out üçæ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.joshfinnie.com/blog/using-webassembly-created-in-rust-for-fast-react-components/"&gt;Using WebAssembly (created in Rust) for Fast React Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kflansburg.com/posts/rust-cachepot/"&gt;Speed up Rust Builds with Cachepot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://veera.app/rena%27s_memory_model.html"&gt;Rena‚Äôs Memory Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://levelup.gitconnected.com/how-to-build-a-note-taking-command-line-application-with-rust-part-1-34b9cd5be6b9"&gt;How to Build a Note Taking Command Line Application With Rust: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://phychic-owl.medium.com/rust-project-ping-pong-game-665766cc45ed"&gt;Rust Project: Ping Pong Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/rust-in-replit/"&gt;Learn Rust Programming Course ‚Äì Interactive Rust Language Tutorial on Repl.it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/rust-position-independent-shellcode/"&gt;Position Independent Shellcodes in Rust (PIC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/pragmatic-programmers/run-your-rust-games-in-a-browser-ceea86b04616"&gt;Run Your Rust Games in a Browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/calebsander/git-internals-part-2-packfiles-1jg8"&gt;Git Internals part 2: packfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/fndomendez/building-a-simple-on-chain-point-of-sale-with-solana-anchor-and-react-859"&gt;Building a simple on-chain point of sale with Solana, Anchor and React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://erayerdin.com/checking-unused-dependencies-in-a-rust-project-with-github-actions-ckwm3yov901cwlvs1h48z54xi"&gt;Checking Unused Dependencies in a Rust Project with Github Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=U_XGkDZcV1k"&gt;rg3d - live coding session #3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=4y1aRPiH9Ko"&gt;The Ray Tracer Challenge - 022 - Planes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PL] [video] &lt;a href="https://www.youtube.com/watch?v=q2lWUmAKsVQ"&gt;Rust na raz #2: Ugliest workaround for unsafe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theregister.com/2021/11/30/aws_reinvent_rust/"&gt;Can Rust save the planet? Why, and why not&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.asciinema.org/post/smaller-faster/"&gt;4x smaller, 50x faster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PT] &lt;a href="https://github.com/luisvonmuller/Esta-Semana-Em-Rust/blob/main/%23418.md"&gt;Esta-Semana-Em-Rust #418&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=pQmL71xAzIk"&gt;RCIG Sync-up call #6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/poem-openapi"&gt;poem-openapi&lt;/a&gt;, a framework to implement OpenAPI services.&lt;/p&gt;
&lt;p&gt;llogiq is very pleased with his suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rusty-celery/rusty-celery"&gt;rusty-celery is looking for maintainers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2288"&gt;Move the ockam_vault_core create into ockam_core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2291"&gt;Move the ockam_key_exchange_core create into ockam_core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2287"&gt;Delete the ockam_node_no_std crate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;244 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-11-22..2021-11-29"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84197"&gt;add codegen option for using LLVM stack smash protection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/442"&gt;do not use atomic reads on platforms without atomic support in LLVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85102"&gt;diagnostic tweaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/709"&gt;chalk: introduce &lt;code&gt;Folder::Error&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1923"&gt;miri: more portable SIMD: rem, shl, shr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91212"&gt;fix ICE due to out-of-bounds statement index when reporting borrowck error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91308"&gt;fix ICE when lowering &lt;code&gt;trait A where for&amp;lt;'a&amp;gt; Self: 'a&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91246"&gt;faster &lt;code&gt;Layout::array&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91230"&gt;make &lt;code&gt;TypeFolder::fold_*&lt;/code&gt; return &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89542"&gt;partially stabilize &lt;code&gt;duration_consts_2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91301"&gt;stabilize &lt;code&gt;nonzero_is_power_of_two&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90896"&gt;stabilize some &lt;code&gt;MaybeUninit&lt;/code&gt; behavior as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91043"&gt;add fast path to &lt;code&gt;is_descendant_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2520"&gt;futures: remove dependency on proc-macro-hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10130"&gt;cargo: improve unused patch message when source URLs mismatched&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7995"&gt;clippy: add &lt;code&gt;needless_late_init&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8028"&gt;clippy: add more descriptive help info for &lt;code&gt;needless_question_mark&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7980"&gt;clippy: fix false positive on &lt;code&gt;if_then_some_else_none&lt;/code&gt; with early return&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8001"&gt;clippy: improve &lt;code&gt;strlen_on_c_string&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8034"&gt;clippy: extend &lt;code&gt;non_ascii_literal&lt;/code&gt; to cover chars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8006"&gt;clippy: apply iter_cloned_collect to collect() using copied()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91094"&gt;rustdoc: avoid documenting top-level private imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5096"&gt;rustfmt: fix: do not wrap reference-style doc links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5113"&gt;rustfmt: maintain more AST info when formatting a RHS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;Overall, many changes this week, but overall an improvement on multiple benchmarks over
the week from a number of pull requests dedicated to optimizations of certain
patterns. We are still seeing a large number of spurious changes due to
&lt;a href="https://github.com/rust-lang/rustc-perf/issues/1105"&gt;rustc-perf#1105&lt;/a&gt;, which
has yet to be addressed.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=22c2d9ddbf356bcdb718e88ca6ee3665e1e42690&amp;amp;end=1c0287830e0fb3c4007afea2819ba03766da6e9c&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;22c2d9d..1c028783&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4 Regressions, 4 Improvements, 9 Mixed; 5 of them in rollups
41 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-11-30.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered final comment period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/91260"&gt;rustdoc: accept --out-dir and soft-deprecate --output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/74479"&gt;Tracking Issue for #![feature(available_parallelism)]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3201"&gt;RFC: Attributes in function return type position&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3200"&gt;RFC: proc macro include!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3199"&gt;RFC: Unsafe Lifetime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 12/01-12/15 ü¶Ä&lt;/p&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/NewSpace-NYC/events/282320805"&gt;December 3, 2021 | New York City, NY, US | &lt;strong&gt;Getting started in aerospace with Rust ü¶Ä&lt;/strong&gt; | NewSpace NYC&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/281833990/"&gt;December 7, 2021 | Buffalo, NY, US | &lt;strong&gt;First Tuesdays&lt;/strong&gt; | Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Los-Gatos-Rust-Reading-Group/events/281966245"&gt;December 8, 2021 | Los Gatos, CA, US | &lt;strong&gt;Book #24 - Rust for Rustaceans - Chapter 1&lt;/strong&gt; | Los Gatos Reading Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/281944671/"&gt;December 8, 2021 | Los Angeles, CA, US | &lt;strong&gt;Rust Computer Vision Project with Geordon Worley&lt;/strong&gt; | Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/282009864"&gt;December 8, 2021 | Stuttgart, DE | &lt;strong&gt;Rust-Meetup&lt;/strong&gt; | Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/8th-light-university/events/282381279"&gt;December 10, 2021 | Chicago, IL, US | &lt;strong&gt;8LU Keynote by Eric Smith - Write Your Game in Rust!&lt;/strong&gt; | 8th Light University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/281875277"&gt;December 14, 2021 | Seattle, WA, US | &lt;strong&gt;Monthly Meetup&lt;/strong&gt; | Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsyccqblb/"&gt;December 8, 2021 | Atlanta, GA, US | &lt;strong&gt;Grab a beer with fellow Rustaceans&lt;/strong&gt; | Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustcon.ru"&gt;December 3, 2021 | Moscow, RU | &lt;strong&gt;Rust Con&lt;/strong&gt; | RustCon.ru&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Tangram&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tangram.dev/jobs"&gt;Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Flaps&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/jobs/view/2818309506/"&gt;Rust developer &amp;amp; distributed systems (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CoBloX&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://comit.network/blog/2021/03/01/we-are-hiring/"&gt;Software Engineer (Sydney, AU or Remote with 5h overlap with UTC+10 (AEST)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Globelise&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.techinasia.com/jobs/75de79c7-492d-4493-b247-1315979227bc"&gt;Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bionaut Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.indeed.com/viewjob?jk=9cda3e340d35e515"&gt;Embedded Software Engineer (Senior) (Los Angeles, CA, US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.indeed.com/viewjob?jk=5b14daa53cc356d2"&gt;Embedded Software Engineer (Junior) (Los Angeles, CA)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Massa Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://massa.net/jobs.html"&gt;Several Rust Engineering Positions Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The design of the safe/unsafe split means that there is an asymmetric trust relationship between Safe and Unsafe Rust. Safe Rust inherently has to trust that any Unsafe Rust it touches has been written correctly. On the other hand, Unsafe Rust cannot trust Safe Rust without care.&lt;/p&gt;
&lt;p&gt;As an example, Rust has the &lt;a href="https://doc.rust-lang.org/nightly/std/cmp/trait.PartialOrd.html"&gt;&lt;code&gt;PartialOrd&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/nightly/std/cmp/trait.Ord.html"&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt; traits to differentiate between types which can "just" be compared, and those that provide a "total" ordering (which basically means that comparison behaves reasonably).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://doc.rust-lang.org/nightly/std/collections/struct.BTreeMap.html"&gt;&lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt; doesn't really make sense for partially-ordered types, and so it requires that its keys implement &lt;code&gt;Ord&lt;/code&gt; . However, &lt;code&gt;BTreeMap&lt;/code&gt; has Unsafe Rust code inside of its implementation. Because it would be unacceptable for a sloppy &lt;code&gt;Ord&lt;/code&gt; implementation (which is Safe to write) to cause Undefined Behavior, the Unsafe code in BTreeMap must be written to be robust against &lt;code&gt;Ord&lt;/code&gt; implementations which aren't actually total ‚Äî even though that's the whole point of requiring &lt;code&gt;Ord&lt;/code&gt; .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://github.com/rust-lang/rfcs/pull/3197#issuecomment-976032253"&gt;Gankra citing the Rustonomicon on github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1144"&gt;robin&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/marriannegoldin"&gt;marriannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/r6wnr7/this_week_in_rust_419/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 01 Dec 2021 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2021-12-01:blog/2021/12/01/this-week-in-rust-419/</guid></item><item><title>This Week in Rust 418</title><link>https://this-week-in-rust.org/blog/2021/11/24/this-week-in-rust-418/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="foundation"&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Twb4u57kH5E"&gt;The Rust Foundation Ask Me Anything (AMA) - November 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-11-22.html"&gt;SixtyFPS (GUI crate): Changelog for 21th of November 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sea-ql.org/SeaORM/blog/2021-11-19-whats-new-in-0.4.0/"&gt;What's new in SeaORM 0.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0014/"&gt;This week in Fluvio #14: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/11/22/changelog-104.html"&gt;Rust Analyzer Changelog #104&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/11/22/changelog-160.html"&gt;IntelliJ Rust Changelog #160&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.torproject.net/t/arti-0-0-1-is-released-an-embeddable-tor-client-in-rust/281"&gt;Arti 0.0.1 is released: An embeddable Tor client in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weekly.databend.rs/2021-11-24-databend-weekly/"&gt;This week in Databend #17: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/team/pull/671"&gt;mod team resignation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blainehansen.me/post/my-path-to-magma/"&gt;My Path to Magma: How I slowly became convinced we absolutely have to build a proof checker and bring formal verification to the mainstream.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jeffa.io/rust_packages_vs_crates"&gt;Rust Packages vs Crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kflansburg.com/posts/merge-queues/"&gt;Merge Queues with Bors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hurryabit.github.io/blog/stack-safety-for-free/"&gt;Stack-safety for free?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.schichler.dev/intrusive-smart-pointers-heap-only-types-ckvzj2thw0caoz2s1gpmi1xm8"&gt;Intrusive Smart Pointers + Heap Only Types = üíû&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mojosd.medium.com/the-second-first-rustc-reading-club-d0d0ffedc92f"&gt;The Second First Rustc Reading Club&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2021/11/18/rustc-reading-club-take-2/"&gt;Rustc Reading Club, Take 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sigplan.org/2021/11/18/undefined-behavior-deserves-a-better-reputation/"&gt;Undefined Behavior deserves a better reputation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/logrocket/improving-overconstrained-rust-library-apis-47ok"&gt;Improving overconstrained Rust library APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.scaleway.com/i-used-rust-for-the-first-time-to-bridge-two-softwares-heres-how-it-went/"&gt;I used Rust for the first time to bridge two softwares, here‚Äôs how it went&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io//blog/2021/11/21/ides-and-macros.html"&gt;IDEs and Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://briankung.dev/2021/11/20/contributing-to-artichoke-in-rust/"&gt;Contributing to Artichoke in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chillfish8.ghost.io/fuzzy-searching-5x-faster-with-symspell/"&gt;How lnx does fuzzy searching over 5x faster with SymSpell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thecodedmessage.com/posts/endian_polymorphism/"&gt;Endianness, API Design, and Polymorphism in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.convex.dev/a-tale-of-three-codebases/"&gt;A Tale of Three Rust Codebases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DE] &lt;a href="https://www.heise.de/news/Die-Rust-Foundation-hat-eine-neue-Geschaeftsfuehrerin-6270875.html"&gt;Programmiersprachen: Die Rust Foundation hat eine neue Gesch√§ftsf√ºhrerin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DE] &lt;a href="https://www.heise.de/news/Rust-Moderatoren-der-Programmiersprache-treten-zurueck-6275049.html"&gt;Rust: Moderatoren der Programmiersprache treten zur√ºck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/047-jane-lusby/"&gt;Error Handling in Rust with Jane Lusby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/PHa9rGuDzQI"&gt;I'm learning Rust - Ownership, lifetimes, and structs (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://saidvandeklundert.net/learn/2021-11-18-calling-rust-from-python-using-pyo3/"&gt;Calling Rust from Python using PyO3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.schichler.dev/pinning-in-plain-english-ckwdq3pd0065zwks10raohh85"&gt;Pinning in plain English&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/perimeterx/lets-build-a-salesforce-commerce-cloud-products-search-component-with-ocapi-rust-and-yew-part-98d7b3774f2f"&gt;Let‚Äôs Build a Salesforce Commerce Cloud Product Search Component with OCAPI, Rust, and Yew ‚Äî Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cmoran.xyz/writing/adventures_in_photogrammetry"&gt;Adventures in Drone Photogrammetry Using Rust and Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/igorpetruk/async-refactoring-and-fewer-bugs-rust-block-expressions-to-the-rescue-ef0"&gt;Async, refactoring and fewer bugs: Rust block expressions to the rescue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://21-lessons.com/how-to-instrument-a-rust-application-with-opentelemetry/"&gt;How to instrument a Rust application with OpenTelemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/azure/rust-from-the-beginning-your-first-program-30cp"&gt;Rust from the beginning, your first program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/deciduously/oops-i-did-it-againi-made-a-rust-web-api-and-it-was-not-that-difficult-3kk8"&gt;Oops, I Did It Again...I Made A Rust Web API And It Was Not That Difficult&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/smurawski/getting-started-with-hippo-a-webassembly-paas-part-1-5470"&gt;Getting Started with Hippo - a WebAssembly PaaS (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/smurawski/getting-started-with-hippo-a-webassembly-paas-part-2-2ilo"&gt;Getting Started with Hippo - a WebAssembly PaaS (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/smurawski/getting-started-with-hippo-a-webassembly-paas-part-3-1h76"&gt;Getting Started with Hippo - a WebAssembly PaaS (Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/Sfb0DKD8e9A"&gt;Using Rust with Elixir for code reuse and performance by Niklas Begley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/2VPSzb7RNtY"&gt;Rust Autocomplete and Debugging in VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/AlsIhnrQO9A"&gt;Getting Started with WebAssembly (WASM) with Rust Lang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/YxzGp33K088"&gt;What's Special About Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/5ObNvCMIkPs"&gt;Web api benchmarking: NodeJS (Express) vs Rust (actix-web)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/Ejzi-56-nqc"&gt;Munich Rust Meetup Remote #9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://youtu.be/U6Yg6-aW_Zg"&gt;LRG-16: Threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://www.youtube.com/watch?v=EPdilVGovxE"&gt;Writing a Programming Language (in Rust) 8: Function returns and list indexing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codecaptured.com/blog/i-made-a-star-wars-programming-language-called-the-force/"&gt;I Made a Star Wars Programming Language Called "The Force" in Rust!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/rustc_codegen_nvvm"&gt;rustc_codegen_nvvm&lt;/a&gt;, a rustc codegen backend that targets NVIDIA's libnvvm CUDA library.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/987"&gt;troiganto&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rusty-celery/rusty-celery"&gt;rusty-celery is looking for contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Artichoke&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/artichoke/artichoke/issues/1501"&gt;Implement &lt;code&gt;mezzaluna_feature_loader::LoadedFeatures::shrink_to&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/artichoke/artichoke/issues/1503"&gt;Implement &lt;code&gt;artichoke_backend::module::Registry::shrink_to&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/artichoke/artichoke/issues/1502"&gt;Implement &lt;code&gt;artichoke_backend::class::Registry::shrink_to&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2236"&gt;Fix handling of larger messages in ockam_node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2256"&gt;Replace TCP port 5000 in examples&amp;amp;guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2249"&gt;Update to Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;284 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-11-15..2021-11-22"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90058"&gt;stabilize &lt;code&gt;-Z strip&lt;/code&gt; as &lt;code&gt;-C strip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90687"&gt;permit const panics in stable const contexts in stdlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90352"&gt;simplify &lt;code&gt;for&lt;/code&gt; loop desugar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89610"&gt;warn on &lt;code&gt;#[must_use]&lt;/code&gt; use on async fn's&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90803"&gt;suggest &lt;code&gt;&amp;amp;str.chars()&lt;/code&gt; on attempt to &lt;code&gt;&amp;amp;str.iter()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91022"&gt;suggest &lt;code&gt;await&lt;/code&gt; in more situations where infer types are involved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90961"&gt;suggest removal of arguments for unit variant, not replacement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90329"&gt;try all stable method candidates first before trying unstable ones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89580"&gt;point at source of trait bound obligations in more places&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90861"&gt;print escaped string if char literal has multiple characters, but only one printable character&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90901"&gt;improve &lt;code&gt;ManuallyDrop&lt;/code&gt; suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90667"&gt;improve diagnostics when a static lifetime is expected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90575"&gt;improve suggestions for compatible variants on type mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90927"&gt;fix float ICE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90933"&gt;fix await suggestion on non-future type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90819"&gt;fix incorrect handling of &lt;code&gt;TraitRef&lt;/code&gt;s when emitting suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90989"&gt;avoid suggesting literal formatting that turns into member access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90845"&gt;address performance regression introduced by recent ADT drop requirements fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90996"&gt;optimize &lt;code&gt;impl Hash for ObligationCauseData&lt;/code&gt; by not hashing &lt;code&gt;ObligationCauseCode&lt;/code&gt; variant fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91008"&gt;add IEEE 754-2019 minimun and maximum functions for &lt;code&gt;f32&lt;/code&gt;/&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89258"&gt;make char conversion functions unstably &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90607"&gt;make slice ‚Üí &lt;code&gt;str&lt;/code&gt; conversion and related functions &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90958"&gt;mark &lt;code&gt;&amp;lt;*const _&amp;gt;::align_offset&lt;/code&gt; and &lt;code&gt;&amp;lt;*mut _&amp;gt;::align_offset&lt;/code&gt; as &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89741"&gt;mark &lt;code&gt;Arc::from_inner&lt;/code&gt; / &lt;code&gt;Rc::from_inner&lt;/code&gt; as &lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85766"&gt;stabilize &lt;code&gt;File::options&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90772"&gt;add &lt;code&gt;Vec::retain_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88601"&gt;implement &lt;code&gt;Termination&lt;/code&gt; for &lt;code&gt;Result&amp;lt;Infallible, E&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90535"&gt;implement &lt;code&gt;clone_from&lt;/code&gt; for &lt;code&gt;State&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1918"&gt;miri: portable SIMD: basic binops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/1249"&gt;arch: work-around buggy Intel chips erroneously reporting BMI1/BMI2 support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/1256"&gt;arch: complete armv8 instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/log/pull/471"&gt;log: add &lt;code&gt;Log&lt;/code&gt; implementation for &lt;code&gt;&amp;amp;impl Log&lt;/code&gt; and &lt;code&gt;Arc&amp;lt;impl Log&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10107"&gt;cargo: add &lt;code&gt;--message-format&lt;/code&gt; for &lt;code&gt;install&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10090"&gt;cargo: enhance error message for target auto-discovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10082"&gt;cargo: warn when alias shadows external subcommand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8007"&gt;clippy: add new lint &lt;code&gt;octal_escapes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8009"&gt;clippy: allow &lt;code&gt;suboptimal_flops&lt;/code&gt; in &lt;code&gt;const&lt;/code&gt; functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8011"&gt;clippy: avoid inline hints with double backticks for &lt;code&gt;doc-markdown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7898"&gt;clippy: don't show &lt;code&gt;no_effect&lt;/code&gt; warning on unit structs implementing &lt;code&gt;fn_once&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7988"&gt;clippy: fix ICE on &lt;code&gt;undocumented_unsafe_blocks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7968"&gt;clippy: fix &lt;code&gt;manual_map&lt;/code&gt; with unsafe functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7982"&gt;clippy: fix &lt;code&gt;needless_collect&lt;/code&gt;'s tendency to suggest code requiring multiple mutable borrows of the same value.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7896"&gt;clippy: fix behavior-changing &lt;code&gt;manual_split_once&lt;/code&gt; suggestion and add new lint &lt;code&gt;needless_splitn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7997"&gt;clippy: fix &lt;code&gt;shadow_same&lt;/code&gt; false positives for async function arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7977"&gt;clippy: improve &lt;code&gt;needless_borrow&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7639"&gt;clippy: improve heuristic for eagerness suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7971"&gt;clippy: fix suggestion in &lt;code&gt;option_map_or_none&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5091"&gt;rustfmt: preserve normalized comments after last list item&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;This week, there were a number of cases where the &lt;code&gt;incr-unchanged&lt;/code&gt; variants of &lt;code&gt;inflate&lt;/code&gt; went up or down by 5% to 6%; we believe these are instances of increased noise in benchmarks documented on &lt;a href="https://github.com/rust-lang/rustc-perf/issues/1105"&gt;rustc-perf#1105&lt;/a&gt;. I was tempted to remove these from the report, but its non-trivial to re-construct the report "as if" some benchmark were omitted.&lt;/p&gt;
&lt;p&gt;Otherwise, there were some nice wins for performance. For example, PR &lt;a href="https://github.com/rust-lang/rust/issues/90996"&gt;#90996&lt;/a&gt; more than halved the time to document builds of &lt;code&gt;diesel&lt;/code&gt; by revising how we hash &lt;code&gt;ObligationCauseData&lt;/code&gt;. If anyone is interested, it might be good to follow-up on the effects of PR &lt;a href="https://github.com/rust-lang/rust/issues/90352"&gt;#90352&lt;/a&gt;, "Simplify &lt;code&gt;for&lt;/code&gt; loop desugar", where we have hypothesized that the increased compilation time is due to more LLVM optimizations being applied.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=934624fe5f66ce3fb8abf0597a6deb079783335f&amp;amp;end=22c2d9ddbf356bcdb718e88ca6ee3665e1e42690&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;934624fe..22c2d9dd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 3 Improvements, 8 Mixed; 3 of them in rollups
34 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-11-23.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2972"&gt;Constrained Naked Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3180"&gt;Cargo --crate-type CLI Argument&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered final comment period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/90896"&gt;Stabilize some MaybeUninit behavior as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/90292"&gt;Document setgroups call caused by std::os::unix::process::CommandExt.uid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/84223"&gt;Tracking Issue for const-initialized thread locals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81106"&gt;Tracking Issue for NonZeroUn::is_power_of_two (feature nonzero_is_power_of_two)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/74479"&gt;Tracking Issue for #![feature(available_parallelism)]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/72016"&gt;Tracking Issue for inline assembly (asm!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/71249"&gt;Tracking Issue for cargo report future-incompat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RFC Update: &lt;a href="https://github.com/rust-lang/rfcs/pull/3197"&gt;Clarify that RFC1520 does not permit the compiler to replace calls to Clone::clone with a memcpy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 11/24-12/08 ü¶Ä&lt;/p&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/282025037"&gt;November 25, 2021 | Cardiff, WLS | &lt;strong&gt;Rust Book Study Session - Packages, Crates and Modules &amp;amp; Common Collections&lt;/strong&gt; | Rust and C++ Cardiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/281829098"&gt;November 25, 2021 | Nuremberg, DE | &lt;strong&gt;Rust N√ºrnberg online #7&lt;/strong&gt; | Rust Nuremberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/282000759"&gt;November 25, 2021 | Stuttgart, DE | &lt;strong&gt;Rust-Meetup&lt;/strong&gt; | Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Linz/events/282093961"&gt;November 25, 2021 | Linz, AT | &lt;strong&gt;Rust Meetup Linz - 16th Edition&lt;/strong&gt; | Rust Linz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccpbnc/"&gt;November 30, 2021 | Dallas, TX, US | &lt;strong&gt;Last Tuesday&lt;/strong&gt; | Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Graz-Rust-Meetup/events/281955585"&gt;November 30, 2021 | Graz, AT | &lt;strong&gt;Rust and memory safety&lt;/strong&gt; | Rust Graz Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/281833990/"&gt;December 7, 2021 | Buffalo, NY, US | &lt;strong&gt;First Tuesdays&lt;/strong&gt; | Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Los-Gatos-Rust-Reading-Group/events/281966245"&gt;December 8, 2021 | Los Gatos, CA, US | &lt;strong&gt;Book #24 - Rust for Rustaceans - Chapter 1&lt;/strong&gt; | Los Gatos Reading Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/281944671/"&gt;December 8, 2021 | Los Angeles, CA, US | &lt;strong&gt;Rust Computer Vision Project with Geordon Worley&lt;/strong&gt; | Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/282009864"&gt;December 8, 2021 | Stuttgart, DE | &lt;strong&gt;Rust-Meetup&lt;/strong&gt; | Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsyccqblb/"&gt;December 8, 2021 | Atlanta, GA, US | &lt;strong&gt;Grab a beer with fellow Rustaceans&lt;/strong&gt; | Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustcon.ru"&gt;December 3, 2021 | Moscow, RU | &lt;strong&gt;Rust Con&lt;/strong&gt; | RustCon.ru&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;StackBlitz&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/stackblitz/7ccd2472-1416-4448-8642-e58e9b32e129"&gt;WebContainer Systems Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Elektron&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elektron.se/rust-audio-developer/"&gt;Rust Audio Developer (Gothenburg, SE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;tangram&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tangram.dev/jobs"&gt;Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Rust Engineer - Banking (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Maasa Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://massa.net/jobs.html"&gt;Several Rust Engineering Positions Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;On the topic of reframing UB, I was reminded of an article about the &lt;a href="https://acoup.blog/2019/06/28/collections-oaths-how-do-they-work/"&gt;mechanics of oaths and vows in historical cultures&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When a programmer writes &lt;code&gt;get_unchecked&lt;/code&gt; , we can imagine them wanting to promise the compiler that they uphold its preconditions. But since the compiler is normally not so trusting of unproven assertions, the programmer swears an &lt;em&gt;oath&lt;/em&gt; that their argument is in bounds.&lt;/p&gt;
&lt;p&gt;The compiler, seeing such a solemn commitment, treats the programmer's word as true and optimizes accordingly. The compiler is so thoroughly convinced that it never even entertains the possibility of doubting the programmer's oath.&lt;/p&gt;
&lt;p&gt;But if the programmer has sworn falsely, then they might well suffer divine retribution in the form of nasal demons ‚Äî or worse, subtly baffling program behaviour.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://reddit.com/r/rust/comments/qx168t/undefined_behavior_deserves_a_better_reputation/hl8koel/"&gt;/u/scook0 on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1142"&gt;G. Thorondorsen&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/marriannegoldin"&gt;marriannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/r1krej/this_week_in_rust_418/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 24 Nov 2021 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2021-11-24:blog/2021/11/24/this-week-in-rust-418/</guid></item><item><title>This Week in Rust 417</title><link>https://this-week-in-rust.org/blog/2021/11/17/this-week-in-rust-417/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2021/11/15/libs-contributors-the8472-kodraus.html"&gt;Please welcome The 8472 and Ashley Mannix to Library Contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="foundation"&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/2021-11-16-news-announcing-cloud-compute-initiative/"&gt;Rust Foundation Announces Cloud Compute Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tag1consulting.com/blog/tag1-joins-rust-foundation-first-silver-member"&gt;Tag1 Joins the Rust Foundation as the First Silver Member&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/2021-11-17-news-announcing-rebecca-rumbul-executive-director-ceo/"&gt;Rust Foundation Taps Rebecca Rumbul as Executive Director &amp;amp; CEO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/posts/2021-11-17-introducing-rebecca-rumbul/"&gt;Hello Everyone! How Can I Help?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/11/15/changelog-103.html"&gt;Rust Analyzer Changelog #103&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-11-15.html"&gt;SixtyFPS (GUI crate): Changelog for 14th of November 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://maybevoid.com/blog/mononym-part-1/"&gt;Mononym: Type-Level Named Values in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/quinn-rs/quinn/releases/tag/0.8.0"&gt;Quinn 0.8.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.khonsulabs.com/t/bonsaidb-november-update-working-towards-alpha-1/86"&gt;BonsaiDb November update: Working towards alpha 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weekly.databend.rs/2021-11-17-databend-weekly/"&gt;This week in Databend #16: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0013/"&gt;This week in Fluvio #13: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hole.tuziwo.info/cargo-sonar.html"&gt;Announcing &lt;code&gt;cargo-sonar&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/rust-crate-backdoor/"&gt;8 Ways to backdoor a crate in Rust for fun and profit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lucumr.pocoo.org/2021/11/14/abusing-serde/"&gt;Rust Adventures: Abusing Serde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://estebank.github.io/rust-iterator-item-syntax.html"&gt;Rust Iterator Items: An exploration of syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/async-cancellation-1/"&gt;Async Cancellation I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nnethercote.github.io/2021/11/12/the-rust-compiler-has-gotten-faster-again.html"&gt;The Rust compiler has gotten faster again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.embeddedrelated.com/showarticle/1432.php"&gt;Learning Rust For Embedded Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ncameron.org/blog/what-is-an-async-runtime/"&gt;What is an async runtime?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidadewoyin/top-rust-cargo-commands-2b70"&gt;Top 10 Rust Cargo Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/046-alice-ryhl/"&gt;Tokio Ecosystem with Alice Ryhl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://www.youtube.com/watch?v=JxFLD4R3WzE"&gt;Flutter Backend using Rust - Flying High with Flutter #32&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/geekculture/a-data-pipeline-for-go-trains-delay-analysis-part-2-e5b9ef0ea315"&gt;A Data Pipeline for Go Trains Delay Analysis ‚Äî Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://romankudryashov.com/blog/2021/11/monitoring-rust-web-application/"&gt;Monitoring Rust web application with Prometheus and Grafana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eli.thegreenplace.net/2021/rust-data-structures-with-circular-references/"&gt;Rust data structures with circular references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eli.thegreenplace.net/2021/testing-multiple-implementations-of-a-trait-in-rust/"&gt;Testing multiple implementations of a trait in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/harmonydevelopment/introducing-hrpc-a-simple-rpc-system-for-user-facing-apis-16ge"&gt;Introducing hRPC: a simple RPC system for user-facing APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gamozolabs.github.io/fuzzing/2021/11/16/rust_on_nt_mips.html"&gt;Rust on MIPS64 Windows NT 4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jareds/how-to-get-started-with-rust-for-risc-v-linux-2fop"&gt;How to get started with Rust for RISC-V Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/RustMagazine/rust_magazine_2021/blob/main/src/chapter_11/rust-reading-club-part1.md"&gt;[ZH] Rust Reading Club Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=HNnbIW2Kzbc"&gt;Rust Web Development - Warp Introduction (by example)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=zcfixnuJFXg"&gt;Getting started with opencv on Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://www.youtube.com/watch?v=4MKcqR9z8AU"&gt;Getting started with Rust ü¶Ä 2021: 8. Building a web app with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://www.youtube.com/watch?v=nyQLenFK4Xc"&gt;Writing a Programming Language (in Rust) 7: Function calls (Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theverge.com/2021/11/16/22784996/1password-version-8-windows-release-download-features"&gt;1Password 8 arrives on Windows with a new design and big performance improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://dayzerosec.com/podcast/rust-in-the-web-a-special-guest-and-some-bad-crypto.html"&gt;Day0 Podcast - Rust in the Web? A Special Guest and some Bad Crypto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/starship/starship"&gt;starship&lt;/a&gt;, a fast featureful customizable UNIX terminal prompt.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/984"&gt;matchai&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;273 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-11-08..2021-11-15"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87264"&gt;proc_macro: add an expand_expr method to TokenStream&lt;/a&gt; (literals only for now)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89561"&gt;type inference for inline consts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89316"&gt;add support for specifying multiple clobber_abi in &lt;code&gt;asm!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/llvm-project/pull/118"&gt;LLVM: fix nondeterminism in debuginfo generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87337"&gt;don't abort compilation after giving a lint error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89550"&gt;do not emit overlap errors for impls failing the orphan check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90645"&gt;implement diagnostic for &lt;code&gt;String&lt;/code&gt; conversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88670"&gt;miri: detect uninitialized integers and floats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90041"&gt;re-enable &lt;code&gt;copy&lt;/code&gt;(&lt;code&gt;_nonoverlapping&lt;/code&gt;) debug-checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90755"&gt;specialize array cloning for &lt;code&gt;Copy&lt;/code&gt; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86041"&gt;replace &lt;code&gt;Copy&lt;/code&gt;/&lt;code&gt;Clone&lt;/code&gt; compiler magic on arrays with library impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88282"&gt;optimize &lt;code&gt;BinaryHeap::extend&lt;/code&gt; from &lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90596"&gt;optimize &lt;code&gt;Eq&lt;/code&gt; and &lt;code&gt;Hash&lt;/code&gt; for &lt;code&gt;Path&lt;/code&gt;/&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90746"&gt;optimize pattern matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89551"&gt;stabilize &lt;code&gt;const_raw_ptr_deref&lt;/code&gt; for &lt;code&gt;*const T&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90473"&gt;stabilize format args capture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90644"&gt;extend the const swap feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90485"&gt;don't destructure args tuple in &lt;code&gt;format_args!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/portable-simd/pull/159"&gt;portable-simd: use new bitmask intrinsics with byte arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/portable-simd/pull/177"&gt;portable-simd: add &lt;code&gt;Simd::from_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/portable-simd/pull/181"&gt;portable-simd: rotate_{left,right} -&amp;gt; rotate_lanes_{left,right}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7813"&gt;clippy: add Clippy version to Clippy's lint list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7944"&gt;clippy: add minimum supported Rust version to &lt;code&gt;deprecated_cfg_attr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7950"&gt;clippy: fix &lt;code&gt;explicit_counter_loop&lt;/code&gt; suggestion for non-&lt;code&gt;usize&lt;/code&gt; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7955"&gt;clippy: fix &lt;code&gt;semicolon_if_nothing_returned&lt;/code&gt; FP on &lt;code&gt;let-else&lt;/code&gt; stmts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7949"&gt;clippy: fix suggestion for deref expressions in &lt;code&gt;redundant_pattern_matching&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7948"&gt;clippy: lint for bool to integer casts in &lt;code&gt;cast_lossless&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7957"&gt;clippy: make &lt;code&gt;let_underscore_lock&lt;/code&gt; also detect &lt;code&gt;parking_lot&lt;/code&gt; locks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7643"&gt;clippy: new lint &lt;code&gt;index_refutable_slice&lt;/code&gt; to avoid slice indexing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7877"&gt;clippy: &lt;code&gt;swap&lt;/code&gt; lints now check if there is &lt;code&gt;no_std&lt;/code&gt; or &lt;code&gt;no_core&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7974"&gt;clippy: &lt;code&gt;option_if_let_else&lt;/code&gt;: don't expand macros in suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/2898"&gt;rustup: optimization: parse manifest only once&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A large amount of noise in the comparisons this week, likely due to new
probabilistic query hash verification increasing likelihood of changes in each
benchmark; solutions are being tracked in &lt;a href="https://github.com/rust-lang/rustc-perf/issues/1105"&gt;rustc-perf#1105&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Otherwise, though, the week largely amounted to a neutral one for performance.
There were some regressions, particularly in doc builds, as a result of the
addition of portable SIMD. These are relatively speaking minor and primarily
impact small crates.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=eee8b9c7bafade55981d155dae71657f1cc55a22&amp;amp;end=934624fe5f66ce3fb8abf0597a6deb079783335f&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;eee8b9c7..934624f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 Regressions, 2 Improvements, 6 Mixed; 2 of them in rollups&lt;/p&gt;
&lt;p&gt;41 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-11-16.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3173"&gt;Add RFC float-next-up-down.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/63567"&gt;&lt;code&gt;#![feature(maybe_uninit_extra,const_maybe_uninit_write)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/84223"&gt;Tracking Issue for const-initialized thread locals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81106"&gt;Tracking Issue for NonZeroUn::is_power_of_two (feature nonzero_is_power_of_two)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/63567"&gt;Tracking issue for &lt;code&gt;#![feature(maybe_uninit_extra,const_maybe_uninit_write)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3196"&gt;Add std::inputln()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3193"&gt;return position impl trait in traits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 11/17-12/01 ü¶Ä&lt;/p&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/zkqvjsyccpbwb/"&gt;November 17, 2021, Vancouver, BC, CA - Borrowing and Lifetimes through Metaphors - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/houston-functional-programming-users-group/events/281526282"&gt;November 17, 2021, Houston, TX, US - A Functional Introduction to Rust - Houston Functional Programming User Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/281944639"&gt;November 17, 2021, Los Angeles, CA, US - Live Coding Session: Mob Programming a Rust Code Kata - Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-meetup.ir/2021/11/19/second-meetup.html"&gt;November 19, 2021, IR - The Second Rust Iran online meetup - Rust Iran Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustfest.global/"&gt;November 20, 2021, RustFest Global 2021: Rust In Arts Edition - RustFest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;November 23, 2021, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccpbnc/"&gt;November 30, 2021, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;If a normal add is &lt;a href="https://en.wikipedia.org/wiki/Waffle_iron"&gt;a waffle iron &lt;/a&gt;, SIMD add is a
double or quadruple waffle iron. You can make 2 or 4 or more waffles at the same time.&lt;/p&gt;
&lt;p&gt;In case of waffles it would be called SIMW: &lt;strong&gt;S&lt;/strong&gt; ingle &lt;strong&gt;I&lt;/strong&gt; ron, &lt;strong&gt;M&lt;/strong&gt; ultiple &lt;strong&gt;W&lt;/strong&gt; affles.&lt;/p&gt;
&lt;p&gt;It's not multithreading - because you open and close the waffle iron for all the waffles at the
same time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://www.reddit.com/r/rust/comments/qucind/stdsimd_is_now_available_on_nightly/hkpy4y4/"&gt;/u/EarthyFeet on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Editors note: Do yourself a favor, click the link and read the whole thread, it's pure gold (&lt;em&gt;chef's kiss&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1137"&gt;Stephan Sokolow&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/marriannegoldin"&gt;marriannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/qwgmge/this_week_in_rust_417/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 17 Nov 2021 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2021-11-17:blog/2021/11/17/this-week-in-rust-417/</guid></item><item><title>This Week in Rust 416</title><link>https://this-week-in-rust.org/blog/2021/11/10/this-week-in-rust-416/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="foundation"&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/posts/2021-11-04-rust-foundation-ama-launch/"&gt;Launching the Rust Foundation Quarterly AMAs: Join the Conversation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-11-08.html"&gt;SixtyFPS (GUI crate): Changelog for 7th of November 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/11/08/changelog-102.html"&gt;Rust Analyzer Changelog #102&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/11/08/changelog-159.html"&gt;Intellij Rust Changelog #159&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0012/"&gt;This week in Fluvio #12: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datafuselabs.github.io/weekly/2021-11-10-databend-weekly/"&gt;This week in Databend #15: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/defmt-3/"&gt;Knurling toolset v0.3.0 has been released!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletter"&gt;Newsletter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2021-10/"&gt;This Month in Rust OSDev (October 2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/news/027/"&gt;This Month in Rust GameDev #27&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/rust-symmetric-encryption-aead-benchmark/"&gt;Benchmarking symmetric encryption (AEAD) in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps//blog/2021/11/05/view-types/"&gt;View types for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://paulmck.livejournal.com/66175.html"&gt;What Memory Model Should the Rust Language Use?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thecodedmessage.com/posts/cpp-move/"&gt;C++ Move Semantics Considered Harmful (Rust is better)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nora.codes/post/its-time-to-get-hyped-about-const-generics-in-rust/"&gt;It's Time to Get Hyped About Const Generics in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://simplabs.com/blog/2021/11/09/automating-ember-learning-releases-with-rust/"&gt;Automating Ember releases with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pci.github.io/blog/2021/10/advent-of-code-rust-wasm-and-js/"&gt;Breakout: optimizing rust+WASM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.qovery.com/guides/engineering/how_we_extended_helm_lifecycle_with_rust/"&gt;How we extended Helm lifecycle with Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hands-on-rust.com/2021/11/06/run-your-rust-games-in-a-browser-hands-on-rust-bonus-content/"&gt;Run Your Rust Games in a Browser: Hands-on Rust Bonus Content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devtails.medium.com/building-my-first-command-line-interface-cli-with-rust-b6beb9c284e0"&gt;Building My First Command Line Interface (CLI) with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rotoclone.zone/blog/posts/webserver"&gt;Making My Website Part 2: The Webserver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.erebe.dev/blog/debug-rust-aplication-inside-container/index.html"&gt;Debugging Rust application inside linux container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nullderef.com/blog/plugin-abi-stable/"&gt;Plugins in Rust: Reducing the Pain with Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jonaylor.xyz/discover-hidden-secrets-in-git-repos-with-rust"&gt;Discover Hidden Secrets in Git Repos with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/deciduously/prepare-your-rust-api-docs-for-github-pages-2n5i"&gt;Prepare your Rust API docs for Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayush1325/using-ki18n-with-rust-and-qml-ja7"&gt;Using KI18n with Rust and Qml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arunanshub/self-referential-structs-in-rust-33cm"&gt;Self Referential Structs in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://youtu.be/mBi_FsPKd9w"&gt;Rust Book Club #5: Structs!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/rzZt0fEzUXQ"&gt;Rust Programming - Full 59-Second Course for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/sNyEgAGkDN8"&gt;Causing problems with Rust traits (then fixing them)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/045-sean-arthur/"&gt;Hyper with Sean McArthur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series][video] &lt;a href="https://www.youtube.com/watch?v=Qm1IM8SEvi8"&gt;Writing a Programming Language (in Rust) 6: Function calls (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series][video] &lt;a href="https://www.youtube.com/watch?v=sLmervrw8Ow"&gt;Writing a Programming Language (in Rust) Extra 6.1: Fixing Environment Lookups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ihatereality.space/04-what-mutref-to-slice-ref-means/"&gt;What does &lt;code&gt;&amp;amp;mut &amp;amp;[T]&lt;/code&gt; mean?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.trailofbits.com/2021/11/09/write-rust-lints-without-forking-clippy/"&gt;Write Rust lints without forking Clippy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/zesterer/chumsky"&gt;chumsky&lt;/a&gt;, a friendly parser combinator crate.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/981"&gt;Jan Riemer&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2194"&gt;ockam - Renumber WebSocket transport type from 2 to 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2051"&gt;ockam - Use Zeroize for temporary sensitive data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;296 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-11-01..2021-11-08"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88368"&gt;improve error when an &lt;code&gt;.rlib&lt;/code&gt; can't be parsed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89970"&gt;implementation of GATs outlives lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90179"&gt;add beginner friendly lifetime elision hint to E0623&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90439"&gt;add &lt;code&gt;JoinHandle::is_running&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90507"&gt;suggest &lt;code&gt;extern crate alloc&lt;/code&gt; when using undeclared module &lt;code&gt;alloc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90627"&gt;suggest dereference of &lt;code&gt;Box&lt;/code&gt; when inner type is expected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90417"&gt;stabilize &lt;code&gt;relaxed_struct_unsize&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90559"&gt;optimize bidi character detection.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87467"&gt;implement &lt;code&gt;RefUnwindSafe&lt;/code&gt; for &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89310"&gt;make &lt;code&gt;std::thread::available_concurrency&lt;/code&gt; support process-limited number of CPUs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/298"&gt;hashbrown: implement From\&amp;lt;array&gt; on HashSet and HashMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10048"&gt;cargo: fix debug panic on download with redirect body.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7917"&gt;clippy: add &lt;code&gt;cargo dev lint&lt;/code&gt; to manually run clippy on a file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7904"&gt;clippy: add suggestion to missing backticks error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7916"&gt;clippy: advise to put a &lt;code&gt;::&lt;/code&gt; prefix inside the ticks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7906"&gt;clippy: fix panics while parsing format string that uses named arg twice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7945"&gt;clippy: fix ICE in &lt;code&gt;undocumented_unsafe_blocks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7909"&gt;clippy: fix false negative in &lt;code&gt;match_overlapping_arms&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7851"&gt;clippy: fix &lt;code&gt;manual_assert&lt;/code&gt; and &lt;code&gt;match_wild_err_arm&lt;/code&gt; for &lt;code&gt;#![no_std]&lt;/code&gt; and Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7907"&gt;clippy: move &lt;code&gt;non_ascii_literal&lt;/code&gt; to restriction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7901"&gt;clippy: prevent &lt;code&gt;clippy::needless_lifetimes&lt;/code&gt; false positive in async function definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7726"&gt;clippy: unseparated literal suffix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7918"&gt;clippy: use .cargo/config.toml instead of .cargo/config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7819"&gt;clippy: avoid linting &lt;code&gt;possible_truncation&lt;/code&gt; on bit-reducing operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5060"&gt;rustfmt: put empty trait braces on same line if possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5068"&gt;rustfmt: dedupe and simplify type alias formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5069"&gt;rustfmt: dedupe associated item visitation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5064"&gt;rustfmt: handle external mods imported via external ‚Üí inline load hierarchy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;Largely a positive week despite taking a significant performance hit from turning on incremental compilation verification for a subsection of the total queries that the compiler does in order to more quickly catch bugs in incremental compilation. Luckily optimizations in bidi detection brought large performance improvements.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=6384dca100f3cedfa031a9204586f94f8612eae5&amp;amp;end=eee8b9c7bafade55981d155dae71657f1cc55a22&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;6384dc..eee8b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 4 Improvements, 4 Mixed; 1 of them in rollups
45 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-11-09.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3180"&gt;Cargo --crate-type CLI Argument&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3185"&gt;Static async fn in traits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/90473"&gt;stabilize format args capture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/90128"&gt;Stabilize -Z symbol-mangling-version=v0 as -C symbol-mangling-version=v0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/90058"&gt;Stabilize -Z strip as -C strip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3192"&gt;Add provide_any module to core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 11/10-11/24 ü¶Ä&lt;/p&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/281765483"&gt;November 10, 2021, Boulder, CO, US - Monthly Meetup - Boulder Elixir and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/9Xj8H2EXTD"&gt;November 10, 2021, Malaysia - Rust Meetup - Rust Malaysia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/281944639/"&gt;November 10, 2021, Los Angeles, CA, US - Rust Los Angeles: Live Coding Session - Mob Programming a Rust Code Kata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linuxfoundation.org/webinars/rust-for-linux-writing-abstractions-and-drivers/"&gt;November 11, 2021 - Rust For Linux: Writing Safe Abstractions &amp;amp; Drivers - The Linux Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zoom.us/webinar/register/WN_BNOwcv_TS7aMpGNGEaTgEQ"&gt;November 16, 2021 - The Rust Foundation Ask Me Anything (AMA) - Rust Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/zkqvjsyccpbwb/"&gt;November 17, 2021, Vancouver, BC, CA - Borrowing and Lifetimes through Metaphors - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/houston-functional-programming-users-group/events/281526282"&gt;November 17, 2021, Houston, TX, US - A Functional Introduction to Rust - Houston Functional Programming User Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/281944639"&gt;November 17, 2021, Los Angeles, CA, US - Live Coding Session: Mob Programming a Rust Code Kata - Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;November 23, 2021, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsyccpbnb/"&gt;November 10, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Desert-Rustaceans/events/281729697"&gt;November 10, 2021, Mesa, AZ, US - Booze.rs - Desert Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/belgrade-rust-meetup-group/events/281523208/"&gt;November 11, 2021, Belgrade, RS - First! - Belgrade Rust Meetup Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;CoScreen&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/unusual/59a25c98-5d46-4ce5-8376-758e239bb356"&gt;Senior Desktop Application Developer (C++/Rust) (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Polar Sync&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://polarsync.breezy.hr/p/0c1d3630d39d"&gt;Principal/Senior Software Engineer - Rust/C++ (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tangram&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tangram.dev/jobs"&gt;Senior Rust Developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Toposware&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://toposware.bamboohr.com/jobs/view.php?id=23&amp;amp;source=toposware"&gt;Distributed Systems Engineer (Blockchain) (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Rust Engineer - Banking (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;And even if you could fix all of rustc's soundness holes, or otherwise prevent user code from
exploiting them, a soundness bug in any third-party library can also make it possible for
malicious crates to trigger arbitrary behavior from safe code.&lt;/p&gt;
&lt;p&gt;[...]&lt;/p&gt;
&lt;p&gt;This is why we need to emphasize that while Rust's static analyses are very good at limiting
accidental vulnerabilties in non-malicious code, they are not a sandbox system that can place
meaningful limits on malicious code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://users.rust-lang.org/t/regarding-the-security-safety-of-libraries-on-crates-io/66294/24"&gt;Matt Brubeck on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1132"&gt;robin&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/marriannegoldin"&gt;marriannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/qras8f/this_week_in_rust_416/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 10 Nov 2021 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2021-11-10:blog/2021/11/10/this-week-in-rust-416/</guid></item></channel></rss>