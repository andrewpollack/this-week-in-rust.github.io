<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/feeds/twir-contributors.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 06 Jan 2021 00:00:00 -0500</lastBuildDate><item><title>This Week in Rust 372</title><link>https://this-week-in-rust.org/blog/2021/01/06/this-week-in-rust-372/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html"&gt;Announcing Rust 1.49.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/01/04/mdbook-security-advisory.html"&gt;mdBook security advisory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ks5ivd/rib_newsletter_19_rust_and_smart_contracts/"&gt;RiB Newsletter #19 - Rust and smart contracts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/01/04/changelog-58.html"&gt;Rust Analyzer Changelog #58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.extension.sh/changelog/#v1-1-2021-01-07"&gt;Rust Search Extension Changelog v1.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kowtqn/rust_design_patterns_now_also_as_a_book/"&gt;Rust Design Patterns now also as a book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pijul.org/posts/2021-01-05-how-to-survive/"&gt;Pijul - How to survive?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/rustfft-5-0-has-been-released/53709"&gt;RustFFT 5.0 has been released!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://napi.rs"&gt;napi 1.0 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://insta.rs/"&gt;Insta got a new website with docs&lt;/a&gt; and a &lt;a href="https://marketplace.visualstudio.com/items?itemName=mitsuhiko.insta"&gt;Visual Studio Code Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stephencoakley.com/2020/12/29/isahc-1.0-and-retrospective"&gt;Isahc 1.0 and Retrospective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kq6lt2/slotmap_10_has_been_released_copy_restriction/"&gt;slotmap 1.0 has been released! Copy restriction removed, no_std support, and more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dxuuu.xyz/libbpf-rs.html"&gt;libbpf-rs: eBPF for the Rust ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alex-dukhno.github.io/2020-12-31-Reflecting-on-developing-a-database-(2020-edition)/"&gt;Reflecting on developing a database (2020 edition)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.azabani.com/2021/01/03/nonymous-bore.html"&gt;bore(1) + nonymous: lessons learned writing a DNS query tool and &lt;code&gt;#![no_std]&lt;/code&gt; DNS library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/exploring-rustffts-simd-architecture/53780"&gt;Exploring RustFFT's SIMD Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rusty_sys_dev/understanding-yew-part-1-3cfn"&gt;Understanding Yew Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/elshize/transposing-options-results-with-iterators-aj3"&gt;Transposing options/results with iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2021/01/03/dark-side-of-posix-apis.html"&gt;Dark side of POSIX APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/teryror/7b9a23fd0cd8dcfbcb6ebd34ee2639f8"&gt;Redesigning coca's Storage Abstraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://willcrichton.net/notes/gats-are-hofs/"&gt;Generic associated types encode higher-order functions on types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jack.wrenn.fyi/blog/semver-snares-size/"&gt;Rust's SemVer Snares: Sizedness and Size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.ibm.com/articles/why-webassembly-and-rust-together-improve-nodejs-performance/"&gt;Why using WebAssembly and Rust together improves Node.js performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.osohq.com/post/runtime-reflection-pt-3"&gt;Building a runtime reflection system for Rust ü¶ÄÔ∏è (Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://technosophos.com/2019/08/07/writing-a-kubernetes-controller-in-rust.html"&gt;Writing a Kubernetes CRD Controller in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dpbriggs.ca/blog/Adding-FFI-Support-In-x7"&gt;Adding FFI Support in x7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/recursive-iterators-rust"&gt;Recursive Iterators in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beyermatthias.de/blog/2021/01/03/writing-a-prometheus-mpd-exporter/"&gt;Writing a Prometheus MPD Exporter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-build-a-to-do-app-with-rust/"&gt;Rust Programming Language Tutorial - How to Build a To-Do List App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kbknapp/diving-into-rust-with-a-cli-4gap"&gt;Diving into Rust with a CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/henrybarreto/creating-a-gui-for-a-rust-application-2h1g"&gt;Creating a GUI for a Rust application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/an-introduction-to-property-based-testing-in-rust/"&gt;Zero to Production #6.5: An Introduction To Property-Based Testing In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jcdav.is/2021/01/04/Holiday-Hacking-COD-HR/"&gt;Holiday Hacking - Tracking my heart rate while playing Call of Duty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://objectdisoriented.evokewonder.com/posts/introducing-rustybot-part-1/"&gt;Introducing Rustybot (part 1 of n)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://objectdisoriented.evokewonder.com/posts/introducing-rustybot-part-2/"&gt;Introducing Rustybot (part 2 of n)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jam1.re/blog/extracting-files-from-an-archive-format-i-understand-way-too-much"&gt;Extracting Files From an Archive Format I Understand Way Too Much&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/kbknapp/series/10570"&gt;eBPF Networking in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/k_P0wG3-dNk"&gt;FLTK Rust: use FLUID (RAD tool) with Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Rust-1.49-Released"&gt;Rust 1.49.0 Released With 64-bit ARM Linux Support Rated Tier-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/knpvv9/rust_will_drop_official_support_for_windows_xp/"&gt;Rust will drop official support for Windows XP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/knyoej/rust_is_the_second_most_used_language_for_advent/"&gt;Rust is the second most used language for Advent of Code, after Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kp1piy/rust_grew_94_on_oreilly_online_learning_this_year/"&gt;Rust grew 94% on O'Reilly online learning this year&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kpqmrh/rust_is_now_overall_faster_than_c_in_benchmarks/"&gt;Rust is now overall faster than C in benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/nom-supreme"&gt;nom-supreme&lt;/a&gt;, a crate of utilities for nom parsers, especially for great parse error handling.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/864"&gt;Zicklag&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-unofficial/patterns/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;rust-unofficial/patterns has a few good first issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;322 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-12-28..2021-01-04"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79576"&gt;add edition 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80408"&gt;sync &lt;code&gt;rustc_codegen_cranelift&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80613"&gt;diag: print enum variant instead of enum type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80592"&gt;suggest renaming or escaping when fixing non-snake-case identifiers which would conflict with keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80551"&gt;support pattern as const parents in &lt;code&gt;type_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80547"&gt;parse const generics defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80491"&gt;miri: make size/align_of_val work for dangling raw ptrs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80260"&gt;slightly more typed interface to panic implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79150"&gt;remove all &lt;code&gt;doc_comment!{}&lt;/code&gt; hacks by using &lt;code&gt;#[doc = expr]&lt;/code&gt; where needed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79684"&gt;make &lt;code&gt;copy&lt;/code&gt;(&lt;code&gt;_nonoverlapping&lt;/code&gt;) const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79479"&gt;add &lt;code&gt;Iterator::intersperse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80310"&gt;add fallible &lt;code&gt;Box&lt;/code&gt;, &lt;code&gt;Arc&lt;/code&gt;, and &lt;code&gt;Rc&lt;/code&gt; allocator APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80488"&gt;do not create dangling &lt;code&gt;&amp;amp;T&lt;/code&gt; in &lt;code&gt;Weak&amp;lt;T&amp;gt;::drop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80422"&gt;de-stabilize unsized raw ptr methods for &lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-01-05.md"&gt;2020-01-05&lt;/a&gt;:
0 Regressions, 2 Improvements, 2 Mixed
This was a somewhat quiet week with the exception of large gains to the &lt;code&gt;ctfe&lt;/code&gt; 
(const function) stress test benchmark caused by changes to how rustc serializes
and deserializes cache from disk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Triage done by @rylev.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-01-05.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77858"&gt;Stabilize split_inclusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/issues/48556"&gt;Tracking issue for stable SIMD in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3052"&gt;Deprecate the authors field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrycccbkb/"&gt;January 7, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrycccbqb/"&gt;January 11, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/275077213/"&gt;January 12, Saarb√ºcken, Saarland, DE - Meetup: 7u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/275547915/"&gt;January 14, San Diego, CA, US - San Diego Rust January 2021 Tele-Meetup - San Diego Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrycccbsb/"&gt;January 14, Columbus, OH, US - Monthly Meeting - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/268567961/"&gt;January 14, Provo, UT, US - The Blue Pill: Rust on Microcontrollers (Jan / Third Round) - Utah Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of "it works" when you have UB like this: You've flipped a coin 1 time and it's come up heads and you've concluded it's never tails.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì @mirashii on the community discord&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/981"&gt;Michael Bryan&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kss4kv/this_week_in_rust_372/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 06 Jan 2021 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2021-01-06:blog/2021/01/06/this-week-in-rust-372/</guid></item><item><title>This Week in Rust 371</title><link>https://this-week-in-rust.org/blog/2020/12/30/this-week-in-rust-371/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/12/28/cjgillot-and-nadrieril-for-compiler-contributors.html"&gt;Please welcome cjgillot and Nadrieril to compiler-contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/12/29/1.49.0-prerelease.html"&gt;1.49.0 pre-release testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/12/28/changelog-138.html"&gt;IntelliJ Rust Changelog #138&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/12/28/changelog-57.html"&gt;Rust Analyzer Changelog #57&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.redox-os.org/news/release-0.6.0/"&gt;Redox OS 0.6.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/12/28/csdi.html"&gt;Call Site Dependency Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leshow.github.io/post/udp_tokio_1_0/"&gt;A look at tokio 1.0 API Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2003.03296"&gt;Memory-Safety Challenge Considered Solved? An In-Depth Study with All Rust CVEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sidkshatriya/me/blob/master/003-Rd-makes-significant-advances.md"&gt;45,000+ lines of Rust code later: An update on the Record &amp;amp; Debug Tool (rd)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/cloning-reference-method-calls/"&gt;Cloning A Reference and Method Call Syntax in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://djharper.dev/post/2020/12/26/executable-pngs/"&gt;Executable PNGs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://windsoilder.github.io/why_mongodump_is_fast.html"&gt;Why mongodump is fast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;Concurrency in modern programming languages: Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rkudryashov/building-distributed-graphql-backend-using-rust-and-apollo-federation-50bm"&gt;Building distributed GraphQL backend using Rust and Apollo Federation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/enhance-code-quality-using-matches-macro-in-rust/"&gt;Enhance code quality using &lt;code&gt;matches&lt;/code&gt; macro! in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://taggartsoftware.medium.com/clickonce-for-rust-apps-f96873feb8f1"&gt;ClickOnce for Rust Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhauniarovich.com/post/2020/2020-12-closures-in-rust/"&gt;Closures in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cyplo.dev/posts/2020/12/fail-and-fork/"&gt;Don't let failures spread over your suite with process-based tests isolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-tutorials.github.io/triangle-from-scratch/opening_a_window/win32.html"&gt;Triangle From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [series] &lt;a href="https://youtube.com/playlist?list=PLoSY6azqHO7BpQo8jWKi4cFIobJo-TCzU"&gt;(Live Coding) Advent of Code 2020 in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Redox-OS-0.6-Released"&gt;Redox OS 0.6 Released With Many Fixes, Rewritten Kernel Memory Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2020/12/30/the-more-things-change/"&gt;The more things change...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kl1e24/min_const_generics_stabilization_has_been_merged/"&gt;Min const generics stabilization has been merged into master! It will reach stable on March 25, 2021 as part of Rust 1.51&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/raskr/rust-autograd"&gt;autograd&lt;/a&gt;, a library of differentiable operations and tensors for machine learning applications.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/864"&gt;Zicklag&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/withoutboats/heck/issues/18"&gt;withoutboats/heck - kebab case doesn't treat numbers as separate word?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jplatte/js_int/issues?q=is:issue+is:open+label:%22good+first+issue%22"&gt;jplatte/js_int has several good first issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;275 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-12-21..2020-12-28"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79135"&gt;stabilize &lt;code&gt;min_const_generics&lt;/code&gt;&lt;/a&gt; (Huzzah!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80262"&gt;utilize PGO for rustc linux dist builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80284"&gt;suggest fn ptr rather than fn item and suggest to use &lt;code&gt;Fn&lt;/code&gt; trait bounds rather than the unique closure type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80160"&gt;implement a compiler diagnostic for move async mistake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80226"&gt;highlight edition-specific keywords correctly in code blocks, accounting for code block edition modifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80246"&gt;prevent caching normalization results with a cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80170"&gt;fix ICE when lookup method in trait for type that have bound vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80099"&gt;remove &lt;code&gt;DefPath&lt;/code&gt; from &lt;code&gt;Visibility&lt;/code&gt; and calculate it on demand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79589"&gt;`rustc_query_system : reduce dependency graph memory usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79134"&gt;add &lt;code&gt;impl Div&amp;lt;NonZeroU*&amp;gt; for u*&lt;/code&gt; which cannot panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79261"&gt;deprecate atomic &lt;code&gt;compare_and_swap&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79213"&gt;stabilize &lt;code&gt;core::slice::fill&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79022"&gt;stabilize &lt;code&gt;deque_range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80400"&gt;use &lt;code&gt;clone_from&lt;/code&gt; from &lt;code&gt;hashbrown::&lt;/code&gt;{&lt;code&gt;HashMap&lt;/code&gt;, &lt;code&gt;HashSet&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2283"&gt;futures: perf: pack the state and future of unfolds in the same memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8976"&gt;cargo: stabilize &lt;code&gt;RUSTC_WORKSPACE_WRAPPER&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79642"&gt;rustdoc: stabilise &lt;code&gt;--default-theme&lt;/code&gt; command line option&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-24.md"&gt;2020-12-24&lt;/a&gt;:
3 Regressions, 5 Improvements
Major event this week is landing PGO for rustc (on x86_64-unknown-linux-gnu). We
expect other platforms to follow but further investigation will be needed,
especially for cross-compiled platforms. We expect to add LLVM PGO as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Triage done by @simulacrum.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-24.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77853"&gt;Stabilize slice::strip_prefix and slice::strip_suffix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/issues/48556"&gt;Tracking issue for stable SIMD in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3046"&gt;New trait: core::convert::IntoUnderlying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3042"&gt;#[target_feature(..)] In Trait Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/274936687/"&gt;January 5, Buffalo, NY, US - Buffalo Rust User Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/275424876/"&gt;January 6, Johannesburg, ZA - Monthly Joburg Rust Chat - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstrycccbjb/"&gt;January 6, Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrycccbkb/"&gt;January 7, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrycccbqb/"&gt;January 12, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cemsbv.nl/jobs/rust-software-engineer"&gt;Rust Software Engineer at CEMS (Amsterdam, NL and Delft, NL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a common theme in Rust‚Äôs design: To reduce breakage as code evolves, you‚Äôre only allowed to rely on features that have been intentionally declared by the author.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://users.rust-lang.org/t/why-explicit-const-fn-token-needed/53006/2"&gt;2e71828 on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/980"&gt;Kornel&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/knhni9/this_week_in_rust_371/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 30 Dec 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-12-30:blog/2020/12/30/this-week-in-rust-371/</guid></item><item><title>This Week in Rust 370</title><link>https://this-week-in-rust.org/blog/2020/12/23/this-week-in-rust-370/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No official blog posts or newsletters this week.&lt;/p&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/12/21/changelog-56.html"&gt;Rust Analyzer Changelog #56&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-11/"&gt;Knurling-rs Changelog #11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bevyengine.org/news/bevy-0-4/"&gt;Bevy 0.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2020-12-tokio-1-0"&gt;Announcing Tokio 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seanmonstar.com/post/638320652536922112/hyper-v014"&gt;hyper 0.14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/rustfft-5-0-0-experimental-1-now-faster-than-fftw/53049"&gt;RustFFT 5.0.0.experimental-1: Now faster than FFTW!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yeslogic.com/blog/allsorts-rust-font-shaping-engine-2020-review/"&gt;Allsorts Font Shaping Engine Year in Review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2020/12/18/looking-back-on-2020/"&gt;Looking back on 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://timofreiberg.github.io/clojure-vs-rust/"&gt;I rewrote a Clojure tool in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/somedood/rust-reviewed-is-the-hype-justified-1pa1"&gt;ü¶Ä Rust Reviewed: Is the hype justified? ü¶Ä&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.darkcoding.net/software/three-things-i-wish-id-known-learning-rust/"&gt;Three things I wish I'd known learning Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jbbgameich.github.io/misc/2020/12/21/rust-in-a-kde-project.html"&gt;Rust in a KDE Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/khrt69/first_3_months_of_rust/"&gt;First 3 Months of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/khlln4/how_rust_changed_and_saved_my_life/"&gt;How rust changed and saved my life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.0xfa.be/building-a-backend-app-in-rust/"&gt;Problems with building backend app in Rust in 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gendignoux.com/blog/2020/12/17/rust-async-type-system-limits.html"&gt;Reaching the (current) limits of Rust's type system with asynchronous programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustgamedev.com/episodes/interview-with-fedor-logachev"&gt;Rust GameDev Podcast - Interview with Fedor Logachev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/blog/50/build-your-own-async-primitive"&gt;Build your own async primitive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/16/"&gt;Make A Language - Part Sixteen: Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/17/"&gt;Make A Language - Part Seventeen: Crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/18/"&gt;Make A Language - Part Eighteen: Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://explog.in/notes/funnn.html"&gt;A Simple Neural Network (&amp;lt;200LoC, Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rocket-tutorial-05-enforcing-uniqueness-of-emails-136j"&gt;Rocket Tutorial 05: Enforcing uniqueness of emails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://implaustin.hashnode.dev/how-to-write-a-terminal-multiplexer-with-rust-async-and-actors-part-2"&gt;How to write a Terminal Multiplexer with Rust, Async, and Actors - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeandbitters.com/static-trait-bound/"&gt;Learning Rust: static trait bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ryhl.io/blog/async-what-is-blocking/"&gt;Async: What is blocking?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/schedule-the-program-in-rust/"&gt;Schedule the program in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=JwG-Wa7dOBU&amp;amp;feature=youtu.be"&gt;Generic Associated Types - Learn Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [series] &lt;a href="https://youtube.com/playlist?list=PLLqEtX6ql2EyPAZ1M2_C0GgVd4A-_L4_5"&gt;Rust Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/a-potential-rust-learning-project-group/13620"&gt;A Potential Rust Learning Project Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rustfest.eu/watch-all-of-rustfest"&gt;Watch all of RustFest Global&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kgw8bz/when_to_use_rust/"&gt;When to use Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kgcye2/hyper_support_is_merged_to_curl_master/"&gt;Hyper support is merged to curl master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kfiaqn/just_wanted_to_say_thanks_to_the_rust_community/"&gt;Just wanted to say thanks to the Rust community!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/ejmahler/RustFFT"&gt;RustFFT&lt;/a&gt;, a &lt;em&gt;Fast&lt;/em&gt; Fourier transformation library that lives up to the name.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/863"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/rc3-assembly-ccc-congress/50283/3"&gt;The CCC Rustaceans are looking for artwork for badges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;292 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-12-14..2020-12-21"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80213"&gt;skip &lt;code&gt;dsymutil&lt;/code&gt; by default for compiler bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79051"&gt;implement if-let match guards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80100"&gt;or_patterns: implement &lt;code&gt;:pat&lt;/code&gt; edition-specific behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80104"&gt;improve and fix diagnostics of exhaustiveness checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77035"&gt;gracefully handle mistyping &lt;code&gt;-&amp;gt;&lt;/code&gt; as &lt;code&gt;=&amp;gt;&lt;/code&gt; in function return type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80211"&gt;handle desugaring in impl trait bound suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80023"&gt;enhance error message when misspelled label to value in break expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80040"&gt;always run intrinsics lowering pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73210"&gt;mir-opt: allow debuginfo to be generated for a constant or a Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78317"&gt;turn quadratic time on number of impl blocks into linear time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79607"&gt;&lt;code&gt;MaybeUninit::copy&lt;/code&gt;/&lt;code&gt;clone_from_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79485"&gt;stabilize &lt;code&gt;unsafe_cell_get_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79473"&gt;move {&lt;code&gt;f32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;}&lt;code&gt;::clamp&lt;/code&gt; to &lt;code&gt;core&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79342"&gt;stabilize all stable methods of &lt;code&gt;Ipv4Addr&lt;/code&gt;, &lt;code&gt;Ipv6Addr&lt;/code&gt; and &lt;code&gt;IpAddr&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78083"&gt;stabilize &lt;code&gt;or_insert_with_key&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77618"&gt;add fast futex-based thread parker for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80035"&gt;optimization for &lt;code&gt;bool&lt;/code&gt;'s &lt;code&gt;PartialOrd&lt;/code&gt; impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80003"&gt;fix overflow when converting ZST &lt;code&gt;Vec&lt;/code&gt; to &lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80236"&gt;use pointer type in &lt;code&gt;AtomicPtr::swap&lt;/code&gt; implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/973"&gt;stdarch: move code out of constify macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2957"&gt;stabilize cargo's new feature resolver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-15.md"&gt;2020-12-15&lt;/a&gt;:
6 Regressions, 1 Improvements, 2 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week was fairly quite with lots of small regressions. Most of the regressions were either for fixes to changes that yielded large performance wins in previous weeks or small performance losses where there is already a plan for how to gain those losses back.&lt;/p&gt;
&lt;p&gt;Triage done by @rylev.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-15.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2957"&gt;Stabilize Cargo's new feature resolver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3027"&gt;Infallible promotion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2955"&gt;Opt-in Stable Trait VTables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2789"&gt;RFC: Serve crates-io registry over HTTP as static files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition:merge] &lt;a href="https://github.com/rust-lang/rust/pull/79285"&gt;Stabilize Arc::{increment,decrement}_strong_count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition:merge] &lt;a href="https://github.com/rust-lang/rust/pull/79135"&gt;stabilize &lt;code&gt;#![feature(min_const_generics)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition:merge] &lt;a href="https://github.com/rust-lang/rust/pull/79134"&gt;Add &lt;code&gt;impl Div&amp;lt;NonZeroU{0}&amp;gt; for u{0}&lt;/code&gt; which cannot panic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3040"&gt;Primitive enum conversion reform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3037"&gt;Rust 2021 Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcqbmc/"&gt;December 29, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/274936687/"&gt;January 5, Buffalo, NY, US - Buffalo Rust User Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/signal/7aa1ff1f-bd43-4359-82c7-8703d8b842d9"&gt;Distributed Systems (Rust) Developer at Signal (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team/Architect-Rust-Library-Design/53838c2d-1e48-5cec-8bb4-8fa8420e6171"&gt;Architect - Rust Library Design at Ockam (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer (Rust &amp;amp; C++) at NZXT (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/signavio/jobs/4167572003?gh_src=e31399983us"&gt;Lead Backend Engineer - Rust or C/C++ at Signavio (Berlin, DE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;It took me sometime to let go and embrace getting things working before optimizing. It was a major breakthrough on that journey when I realized that ALL my python variables are &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; , so any chance I had to make a variable that was less complicated than that was already a big optimization. If 1/10 Rust variables had to be that complicated it would not feel good, but it would already be 90% better. So if 1/50 make the code ezere to read and maintain then do it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://www.reddit.com/r/rust/comments/kdayix/i_need_some_advice_about_heap_usage_with_rust/gfvtcwx"&gt;Eh2406 on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/977"&gt;Stephan Sokolow&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kj9mcb/this_week_in_rust_370/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 23 Dec 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-12-23:blog/2020/12/23/this-week-in-rust-370/</guid></item><item><title>This Week in Rust 369</title><link>https://this-week-in-rust.org/blog/2020/12/16/this-week-in-rust-369/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/12/11/lock-poisoning-survey.html"&gt;Launching the Lock Poisoning Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/12/14/Next-steps-for-the-foundation-conversation.html"&gt;Next steps for the Foundation Conversation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/12/16/rust-survey-2020.html"&gt;Rust Survey 2020 Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/12/14/changes-to-compiler-team.html"&gt;Changes to Rust Compiler Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2020-11/"&gt;This Month in Rust OSDev (November 2020)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/12/14/changelog-137.html"&gt;IntelliJ Rust Changelog #137&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/12/14/changelog-55.html"&gt;Rust Analyzer Changelog #55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-10/"&gt;Knurling-rs Changelog #10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jrvidal.github.io/explaine.rs/blog/these-months-in-explainers.html"&gt;These Months in explaine.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cargo2nix/cargo2nix/releases/tag/v0.9.0"&gt;Cargo2nix 0.9.0 release notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adventures.michaelfbryan.com/posts/ffi-safe-polymorphism-in-rust/"&gt;FFI-Safe Polymorphism: Thin Trait Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://confused.ai/posts/rust-bpf-target"&gt;Adding BPF target support to the Rust compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.qovery.com/blog/why-rust-has-a-bright-future-in-the-cloud"&gt;Why Rust Has a Bright Future in the Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustyyato.github.io/rust/syntactic/sugar/2019/01/17/Closures-Magic-Functions.html"&gt;Closures: Magic Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://john-millikin.com/notes-on-cross-compiling-rust"&gt;Notes on cross-compiling Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mattkennedy.io/blog/rust_polymorphism/"&gt;Polymorphism in Rust: Enums vs Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scie.nz/rust/"&gt;Beyond R and Python: Rust for Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ralfj.de/blog/2020/12/14/provenance.html"&gt;Pointers Are Complicated II, or: We need better language specs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://0x709394.me/Serde-tricks"&gt;Serde tricks: The lesson learnt from refactoring rspotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/12/12/notes-on-lock-poisoning.html"&gt;Notes On Lock Poisoning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://danielvz.cl/blog/fast-rust.html"&gt;I tried to make the fastest sorting algorithm I could think of... in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deislabs.io/posts/still-rusting-one-year-later/"&gt;Still Rusting - One Year Later&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mongodb.com/article/six-principles-building-robust-flexible-shared-data-applications"&gt;6 Principles for Building Robust Flexible Shared Data Apps with Rust &amp;amp; MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/EY7Wi9fV5bk"&gt;The Unsafe Chronicles: Exhibit A: Aliasing Boxes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/14/"&gt;Make A Language - Part Fourteen: Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/15/"&gt;Make A Language - Part Fifteen: Markers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://benjamin.computer/posts/2020-12-12-rust-python.html"&gt;Rust, Python and Fish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caballerocoll.com/blog/bevy-chess-tutorial/"&gt;Chess game in Rust using Bevy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.drogue.io/rust-and-microbit/"&gt;Rust on the BBC micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yangwao/developing-smart-contracts-with-ink-4g72"&gt;Developing smart contracts with ink!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/blog/memory-game-tutorial.html"&gt;Learn SixtyFPS: Memory Game Tutorial (Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/aiming-for-correctness-with-types"&gt;Aiming for correctness with types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2020-12-11-zero-to-production-6-domain-modelling/"&gt;Zero to Production in Rust #6: Using Types To Guarantee Domain Invariants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventures.michaelfbryan.com/posts/ffi-safe-polymorphism-in-rust/"&gt;FFI-Safe Polymorphism: Thin Trait Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cargo2nix/cargo2nix/tree/master/examples/4-independent-packaging"&gt;Distributing Rust Analyzer with Nix and Cargo2nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PL] &lt;a href="https://postacnormalna.pl/crabbybird-4-generowanie-swiata-gry-czesc-ii/"&gt;CrabbyBird #4 Generowanie ≈õwiata gry ‚Äì cze≈õƒá II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/J7Aosp1Uauo"&gt;How oso built a runtime reflection library for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/3OL95gZgPWA"&gt;Implementing Rust's Vec From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[RU] [video] &lt;a href="https://www.youtube.com/watch?v=yCrc5BwZrtw"&gt;Rust: Not as hard as you think / Russian Rust Online Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jrvidal.github.io/explaine.rs/blog/these-months-in-explainers.html"&gt;These Months in explaine.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sequoia-pgp.org/"&gt;Sequoia PGP&lt;/a&gt; released &lt;a href="https://sequoia-pgp.org/blog/2020/12/16/202012-1.0/"&gt;version 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cyrilfougeray.com/2020/12/14/leger-rust-wallet-1.html"&gt;Connect devices to blockchains with L√©ger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kdo06l/signal_group_calls_are_powered_by_rust/"&gt;Signal Group Calls are powered by Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kdfb9k/rusts_option_in_one_figure/"&gt;Rust's Option in One Figure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kcou9c/authors_of_programming_rust_2nd_edition_have_a/"&gt;Authors of "Programming Rust 2nd Edition" have a sense of humor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2020/12/11/rotating-the-compiler-team-leads/"&gt;Rotating the compiler team leads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lupyuen.github.io/articles/debug"&gt;Debug Rust on PineCone BL602 with VSCode and GDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[RU] [audio] &lt;a href="https://www.youtube.com/watch?v=w99C9heBWHE&amp;amp;feature=youtu.be"&gt;SitCast#32 - –≠—Ö, Rust, –¥–∞ –µ—â—ë Rust‚Ä¶&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/raygon-renderer/thermite"&gt;thermite&lt;/a&gt;, a SIMD struct-of-arrays-algorithms library.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/857"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hubblo-org/scaphandre/issues"&gt;scaphandre: several help wanted issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;300 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-12-07..2020-12-14"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79818"&gt;fixes to Rust coverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79721"&gt;properly re-use def path hash in incremental mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79656"&gt;add some &lt;code&gt;core::cmp::Ordering&lt;/code&gt; helpers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79621"&gt;constify some &lt;code&gt;MaybeUninit&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79893"&gt;Windows TLS: &lt;code&gt;ManuallyDrop&lt;/code&gt; instead of &lt;code&gt;mem::forget&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78768"&gt;use &lt;code&gt;is_write_vectored&lt;/code&gt; to optimize the &lt;code&gt;write_vectored&lt;/code&gt; implementation for &lt;code&gt;BufWriter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77801"&gt;enforce no-move rule of &lt;code&gt;ReentrantMutex&lt;/code&gt; using &lt;code&gt;Pin&lt;/code&gt; and fix UB in stdio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/207"&gt;hashbrown: enable specialization with aHash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2155"&gt;future: &lt;code&gt;SinkExt::feed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2273"&gt;futures-util: migrate from pin-project to pin-project-lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8973"&gt;cargo: check if rerun-if-changed points to a directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8950"&gt;cargo: workaround fs issue in &lt;code&gt;cargo publish&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6424"&gt;clippy: add MSRV to more lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4557"&gt;rustfmt: don't force a newline after an empty where clause&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-15.md"&gt;2020-12-15&lt;/a&gt;:
6 Regressions, 1 Improvements, 2 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week was fairly quite with lots of small regressions. Most of the regressions were either for fixes to changes that yielded large performance wins in previous weeks or small performance losses where there is already a plan for how to gain those losses back.&lt;/p&gt;
&lt;p&gt;Triage done by @rylev.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-15.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2992"&gt;RFC: Add &lt;code&gt;target_abi&lt;/code&gt; configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2859"&gt;added secret types rfc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79502"&gt;Implement &lt;code&gt;From&amp;lt;char&amp;gt;&lt;/code&gt; for u64 and u128.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79485"&gt;Stabilize &lt;code&gt;unsafe_cell_get_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79473"&gt;Move &lt;code&gt;{f32,f64}::clamp&lt;/code&gt; to core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79342"&gt;Stabilize all stable methods of &lt;code&gt;Ipv4Addr&lt;/code&gt;, &lt;code&gt;Ipv6Addr&lt;/code&gt; and &lt;code&gt;IpAddr&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79270"&gt;Acknowledge that &lt;code&gt;[CONST; N]&lt;/code&gt; is stable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79261"&gt;Deprecate atomic compare_and_swap method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79213"&gt;Stabilize &lt;code&gt;core::slice::fill&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/79188"&gt;Made matches! more useful by adding mapping support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition:merge] &lt;a href="https://github.com/rust-lang/rust/pull/79135"&gt;stabilize &lt;code&gt;#![feature(min_const_generics)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition:merge] &lt;a href="https://github.com/rust-lang/rust/pull/79134"&gt;Add &lt;code&gt;impl Div&amp;lt;NonZeroU{0}&amp;gt; for u{0}&lt;/code&gt; which cannot panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79073"&gt;passes: prohibit invalid attrs on generic params&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79022"&gt;stabilize deque_range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78242"&gt;Rename &lt;code&gt;overlapping_patterns&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78083"&gt;Stabilize or_insert_with_key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/77688"&gt;Add built-in implementations of &lt;code&gt;Default&lt;/code&gt; for function definition and‚Ä¶ &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/74699"&gt;Mark &lt;code&gt;-1&lt;/code&gt; as an available niche for file descriptors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/74304"&gt;Stabilize the Wake trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/63514"&gt;Tracking issue for map_ok and map_err method for &lt;code&gt;Poll&amp;lt;Option&amp;lt;Result&amp;lt;T, E&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3036"&gt;Add min_target_api_version cfg predicate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3035"&gt;Cargo: providing artifacts (for artifact dependencies) via build.rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsybcqbvb/"&gt;December 16, Vancouver, BC, US - Are Results just Checked Exceptions? - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcqbmc/"&gt;December 29, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer (Rust &amp;amp; C++) at NZXT (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.jobs/en/jobs/1321570/software-development-engineer"&gt;Software Development Engineer at Amazon Web Services (Seattle, WA, US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://massa.network/#jobs"&gt;Full remote Rust developer, long-term contract (French CDI) at Massa Labs (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Engineering is not about "not doing mistakes". Engineering is about designing systems that ensure fewer mistakes occur.&lt;/p&gt;
&lt;p&gt;Rust is such a system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://fasterthanli.me/articles/aiming-for-correctness-with-types"&gt;amos on his blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/972"&gt;Joshua Nelson&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://this-week-in-rust.org/blog/2020/12/16/this-week-in-rust-369/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 16 Dec 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-12-16:blog/2020/12/16/this-week-in-rust-369/</guid></item></channel></rss>