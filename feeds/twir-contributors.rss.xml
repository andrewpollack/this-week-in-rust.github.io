<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/feeds/twir-contributors.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 13 Oct 2021 00:00:00 -0400</lastBuildDate><item><title>This Week in Rust 412</title><link>https://this-week-in-rust.org/blog/2021/10/13/this-week-in-rust-412/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2021/10/08/Lang-team-Oct-update.html"&gt;Lang team October update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aaronerhardt.github.io/blog/posts/announcing_relm4_v0.2/"&gt;Announcing Relm4 v0.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-10-11.html"&gt;SixtyFPS (GUI crate) weekly update for 10th of October 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0008/"&gt;This week in Fluvio #8: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-32/"&gt;Knurling-rs changelog #32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2021/10/07/release-0.11.html"&gt;wgpu: Release of 0.11 with beta WebGL support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datafuselabs.github.io/weekly/2021-10-13-databend-weekly/"&gt;This week in Databend #11: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rtl-sdr.com/futuresdr-an-async-sdr-framework-implemented-in-rust/"&gt;FutureSDR: An Async Software Defined Radio Framework Implemented in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/10/11/changelog-98.html"&gt;Rust Analyzer Changelog #98&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/10/11/changelog-157.html"&gt;IntelliJ Rust Changelog #157&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kentiklabs.com/blog/container-visibility/"&gt;Convis - Open Source Container Visibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/news/026/"&gt;This Month in Rust GameDev #26 - September 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tevps.net/blog/2021/10/10/awesome-rust-projects-hacktoberfest/"&gt;Awesome Rust projects for Hacktoberfest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swatinem.de/blog/zero-cost-async/"&gt;Rust async can truly be zero-cost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://davidkoloski.me/blog/intelligent-brute-forcing/"&gt;Intelligent brute forcing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://acrimon.dev/blog/async-locks/"&gt;Locks in asynchronous applications in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.getsynth.com/docs/blog/2021/10/11/nightly"&gt;The nightly elephant in the room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/871283/"&gt;Rust and GCC, two different ways&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.p99conf.io/session/whoops-i-rewrote-it-in-rust/"&gt;Whoops! I Rewrote It in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.p99conf.io/session/rust-is-safe-but-is-it-fast/"&gt;Rust Is Safe. But Is It Fast?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=cuvp-e4ztC0"&gt;Rust, Wright's Law, and the Future of Low-Latency Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jeffa.io/rust_guide_generics_demystified_part_1"&gt;Rust Guide: Generics Demystified Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nickymeuleman.netlify.app/blog/multithreading-rust"&gt;Multithreading in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.greyblake.com/blog/2021-10-11-phantom-types-in-rust/"&gt;Phantom Types in Rust ðŸ‘»&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gill.net.in/posts/pic32-blink-led-rust/"&gt;Programming PIC32 Microcontroller with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2021/10/10/testing-with-spirit.html"&gt;Testing with Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexis-lozano.com/hexagonal-architecture-in-rust-6/"&gt;Hexagonal architecture in Rust #6 - CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.secondstate.io/articles/embed-javascript-in-rust/"&gt;Incorporating JavaScript into a Rust app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itnext.io/rust-iterators-2f0bb958aa08"&gt;Rust Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ballpointcarrot.net/posts/rust-arm-lambdas/"&gt;Running Rust on AWS Lambda on ARM64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://source.android.com/setup/build/rust/building-rust-modules/overview"&gt;Android Rust Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/akkoro/lambda-function-http-authorization-with-auth0-and-assemblylift-webassembly-lambda-api-gateway-rust-4fl8"&gt;Lambda function HTTP authorization with Auth0 and AssemblyLift (WebAssembly + Lambda + API Gateway + Rust) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dineshgdk/game-of-life-in-rust-4mfc"&gt;Game of Life in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://medium.com/@otukof/build-your-text-editor-with-rust-part-6-3cff61dc2de5"&gt;Build Your Text Editor With Rust! Part 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/mileswatson/url-shortener-with-rust-svelte-aws-6-deploying-to-aws-2gi0"&gt;URL Shortener with Rust, Svelte, &amp;amp; AWS (6/): Deploying to AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series]&lt;a href="https://dev.to/penumbra23/container-runtime-in-rust-part-ii-34em"&gt;Container Runtime in Rust - Part II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=NtUkr_z7l84"&gt;Getting started with Rust ðŸ¦€ 2021: 7a. Building a GUI app in Rust [Part A]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=bnnacleqg6k"&gt;Type-Driven API Design in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=rDoqT-a6UFg"&gt;Visualizing memory layout of Rust's data types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=dHkzSZnYXmk"&gt;Crust of Rust: functions, closures, and their traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=LDlBTbO8oQ4"&gt;LRG-01: The essence of Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/fzyzcjy/flutter_rust_bridge"&gt;flutter_rust_bridge&lt;/a&gt;, a memory-safe binding generator for Flutter/Dart â†” Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/972"&gt;fzyzcjy&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1998"&gt;ockam - Make TryAsyncClone trait derivable. Add TryAsyncClone impl for structs that implement Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1999"&gt;ockam - Use async_trait through ockam_core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/this-week-in-rust/issues/2469"&gt;This Week in Rust is looking for additional editors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;353 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-10-04..2021-10-11"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88952"&gt;add new tier-3 target: armv7-unknown-linux-uclibceabihf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88090"&gt;perform type inference in range pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88780"&gt;add abs_diff for integer types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89082"&gt;implement #85440 (Random test ordering)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89413"&gt;correctly handle supertraits for min_specialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89323"&gt;consider unfulfilled obligations in binop errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89461"&gt;add &lt;code&gt;deref_into_dyn_supertrait&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89501"&gt;note specific regions involved in 'borrowed data escapes' error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89528"&gt;fix suggestion to borrow when casting from pointer to reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89428"&gt;feature gate the non_exhaustive_omitted_patterns lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89423"&gt;fix ICE caused by non_exaustive_omitted_patterns struct lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89454"&gt;perf: only check for &lt;code&gt;rustc_trivial_field_reads&lt;/code&gt; attribute on traits, not items, impls, etc.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89534"&gt;perf: introduce &lt;code&gt;tcx.get_diagnostic_name&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7770"&gt;improved help message for &lt;code&gt;suspicious_map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89585"&gt;emit item no type error even if type inference fails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89582"&gt;optimize File::read_to_end and read_to_string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89576"&gt;prevent error reporting from outputting a recursion error if it finds an ambiguous trait impl during suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89597"&gt;create more accurate debuginfo for vtables.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89596"&gt;make cfg imply doc(cfg)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89633"&gt;show detailed expected/found types in error message when trait paths are the same&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89632"&gt;fix docblock code display on mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89622"&gt;use correct edition for panic in (&lt;code&gt;debug_&lt;/code&gt;)&lt;code&gt;assert!()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75644"&gt;add &lt;code&gt;core::array::from_fn&lt;/code&gt; and &lt;code&gt;core::array::try_from_fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86434"&gt;add &lt;code&gt;Ipv6Addr::is_benchmarking&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87601"&gt;add functions to add unsigned and signed integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87091"&gt;implement advance_(back_)_by on more iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86525"&gt;array &lt;code&gt;.len()&lt;/code&gt; MIR optimization pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89270"&gt;&lt;code&gt;path.push()&lt;/code&gt; should work as expected on windows verbatim paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89219"&gt;use get_unchecked in &lt;code&gt;str::&lt;/code&gt;(&lt;code&gt;r&lt;/code&gt;)&lt;code&gt;split_once&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87993"&gt;stabilize &lt;code&gt;try_reserve&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89735"&gt;stabilize &lt;code&gt;proc_macro::is_available&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89508"&gt;stabilize &lt;code&gt;const_panic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88436"&gt;stabilize &lt;code&gt;command_access&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2505"&gt;futures: make &lt;code&gt;futures::task::noop_waker_ref&lt;/code&gt; available without &lt;code&gt;std&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/100"&gt;&lt;code&gt;rustc_codegen_gcc&lt;/code&gt;: add missing cast and change some bitcasts to casts to avoid a gimple verification failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5020"&gt;rustfmt: stabilize &lt;code&gt;match_block_trailing_comma&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4994"&gt;rustfmt: wrap long array and slice patterns.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88816"&gt;rustdoc: migrate to table so the gui can handle &amp;gt;2k constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7748"&gt;clippy: add &lt;code&gt;undocumented_unsafe_blocks&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7795"&gt;clippy: fix false positive in external macros for &lt;code&gt;mut_mut&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7794"&gt;clippy: fix false positive when &lt;code&gt;Drop&lt;/code&gt; and &lt;code&gt;Copy&lt;/code&gt; involved in &lt;code&gt;field_reassign_with_default&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7772"&gt;clippy: handle intra-doc links in &lt;code&gt;doc_markdown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7800"&gt;clippy: refactor &lt;code&gt;clippy::match_ref_pats&lt;/code&gt; to check for multiple reference patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7782"&gt;clippy: make &lt;code&gt;shadow_reuse&lt;/code&gt; suggestion less verbose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7793"&gt;clippy: add option to &lt;code&gt;new_lint&lt;/code&gt; to generate MSRV enabled lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7774"&gt;clippy: drop exponent on suggestion when exponent value is zero&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A relatively quiet week: two smallish regressions, and one largish regression that is isolated to doc builds. A couple of nice small wins as well.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=25ec8273855fde2d72ae877b397e054de5300e10&amp;amp;end=9475e609b8458fff9e444934a6017d2e590642cf&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;25ec82..9475e6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 2 Improvements, 2 Mixed; 1 of them in rollups
42 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-10-12.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89677"&gt;Stabilize is_symlink() for Metadata and Path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89542"&gt;Partially stabilize duration_consts_2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89509"&gt;Stabilize unreachable_unchecked as const fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89507"&gt;Add &lt;code&gt;#[repr(i8)]&lt;/code&gt; to Ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89433"&gt;Fix ctrl-c causing reads of stdin to return empty on Windows.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88652"&gt;linux/aarch64 Now() should be actually_monotonic()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88300"&gt;Stabilise unix_process_wait_more, extra ExitStatusExt methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88041"&gt;Make all proc-macro back-compat lints deny-by-default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87704"&gt;Windows: Resolve process::Command program without using the current directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87467"&gt;Implement RefUnwindSafe for &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87339"&gt;Make two Paths unequal if they differ in trailing slash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/86984"&gt;Reject octal zeros in IPv4 addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/86479"&gt;Automatic exponential formatting in Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/73179"&gt;Tracking Issue for methods to go from nul-terminated &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; to CString &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust.bettercode.eu/"&gt;October 13, 2021 - betterCode Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/MUCplusplus/events/281231257"&gt;October 13, 2021 - C++/Rust: Learning from Each Other - MUC++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/280981968/"&gt;October 13, 2021, Los Angeles, CA, US - Processing shaders in Rust with Dzmitry Malyshau - Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/281236385/"&gt;October 20, 2021, Buffalo, NY, US - Buffalo Rust User Group, Alternate Day - Buffalo Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/zkqvjsyccnbbc/"&gt;October 20, 2021, Vancouver, BC, CA - WASM plugin for Istio - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsyccnbrb/"&gt;October 13, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-meetup.ir/"&gt;October 22, 2021, IR - The First Rust Iran online meetup - Rust Iran Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;System 76&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://system76.com/careers/pop_os-software-engineer-rust"&gt;Pop! OS Software Engineer (Rust) (Remote US)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Enso&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/enso-org/hiring/blob/main/people/senior-rust-developer.md"&gt;Senior Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Second Spectrum&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.secondspectrum.com/careers/opportunities.html#job-780636"&gt;Software Engineer Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is the language where you get the hangover first.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://www.youtube.com/watch?v=ylOpCXI2EMM&amp;amp;t=565s"&gt;unattributed via Niko Matsakis' RustConf keynote&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1122"&gt;Alice Ryhl&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 13 Oct 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-10-13:blog/2021/10/13/this-week-in-rust-412/</guid></item><item><title>This Week in Rust 411</title><link>https://this-week-in-rust.org/blog/2021/10/06/this-week-in-rust-411/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0007/"&gt;This week in Fluvio #7: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datafuselabs.github.io/weekly/2021-10-06-databend-weekly/"&gt;This week in Databend #10: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-10-04.html"&gt;SixtyFPS (GUI crate) weekly update for 3rd of October 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thephilbert.io/2021/10/04/gcc-rust-monthly-report-10-september-2021/"&gt;GCC Rust Monthly Report #10 September 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/10/04/changelog-97.html"&gt;Rust Analyzer Changelog #97&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amethyst.rs/posts/amethyst--starting-fresh"&gt;Amethyst â€“ Starting fresh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="research-and-papers"&gt;Research and Papers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/abs/10.1145/3453483.3454084"&gt;SyRust: automatic testing of Rust libraries with semantic-aware program synthesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocamlpro.github.io/verification_for_dummies/"&gt;Verification for dummies: SMT and Induction&lt;/a&gt; using the &lt;a href="https://github.com/OCamlPro/mikino_bin"&gt;mikino&lt;/a&gt; model-checker&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2110.01098"&gt;Does the Bronze Garbage Collector Make Rust Easier to Use? A Controlled Experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2021-09/"&gt;This Month in Rust OSDev (September 2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustinblockchain.org/newsletters/rib-newsletter-28/"&gt;Rust in Blockchain #28&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codeandbitters.com/published-crate-analysis/"&gt;Does the published crate match the upstream source?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@cedricbeust/what-rust-could-learn-from-kotlin-b32ebe2da28d"&gt;What Rust could learn from Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nullderef.com/blog/plugin-dynload/"&gt;Plugins in Rust: Diving into Dynamic Loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/blog/62/measuring-power-consumption-sync-vs-async"&gt;Measuring power consumption: sync vs. async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/870555/"&gt;Using Rust for kernel development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.phylum.io/spark-and-rust-how-to-build-fast-distributed-and-flexible-analytics-pipelines"&gt;Spark and Rust - How to Build Fast, Distributed and Flexible Analytics Pipelines with Side Effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://paulmck.livejournal.com/62436.html"&gt;So You Want to Rust the Linux Kernel?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/417431284"&gt;[ZH] Rust Web Eco Watchï½œ SeaORM: To be the Rust version of ActiveRecord &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=k023OIxlzpA&amp;amp;list=PL85XCvVPmGQgWcpd230SUixObnBoL9cif"&gt;Talks from Rust Computer Vision Meetup 2021-09-29 (YouTube playlist)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=VQdStWU2ewY"&gt;Rust v.s Java 17 Pattern Matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/040-louis-pilford/"&gt;Gleam with Louis Pilfold&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/aero/giving-your-json-a-web-api-with-rust-290"&gt;Giving Your JSON a Web API with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nrxus.github.io/faux/guide/exporting-mocks.html"&gt;Exporting Test Mocks Across Crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://windsoilder.github.io/writing_dockerfile_in_rust_project.html"&gt;Writing dockerfile in rust project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://passcod.name/technical/rust-crimes-enum-ints.html"&gt;Rust crimes: Enum ints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fujita.tomonori/scalable-server-design-in-rust-with-tokio-4c81a5f350a3"&gt;Scalable server design in Rust with Tokio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ballpointcarrot/running-rust-on-aws-lambda-on-arm64-4h28"&gt;Running Rust on AWS Lambda on ARM64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.qovery.com/guides/tutorial/how-to-deploy-a-rust-rest-api-application-on-aws-with-ease/?utm_source=twitter.com&amp;amp;utm_medium=social&amp;amp;utm_campaign=because-some-users-asked-how-to-deploy-r&amp;amp;utm_content=54750877"&gt;How to deploy a Rust REST API application on AWS with ease&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PT] &lt;a href="https://dev.to/higordiego/rust-borrowing-1220"&gt;Rust - Borrowing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://medium.com/@otukof/build-your-text-editor-with-rust-678a463f968b"&gt;Build Your Text Editor WithÂ Rust!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=t6rlp0TXE2I&amp;amp;list=PL4k64WemroGkSMVCGvtksaYvzz4mvOzfK&amp;amp;index=2"&gt;Building a Reddit Ticker with Rust and Flutter using Rid and Bloc/Cubit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=8_HPKGZGM5I"&gt;Pattern Syntax in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/pubgrub"&gt;pubgrub&lt;/a&gt;, a Rust implementation of the state of the art version solving algorithm.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/968"&gt;Louis Pilfold&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/this-week-in-rust/issues/2469"&gt;This Week in Rust is looking for additional editors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://veloren.net/hacktoberfest-2021/"&gt;Veloren will be participating in Hacktoberfest 2021!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustfest.world/news/introducing-rust-in-arts"&gt;RustFest - Introducing Rust in Arts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jplatte/caniuse.rs/issues/16"&gt;caniuse.rs - Data to add&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/labels/E-help-wanted"&gt;cargo - Help Wanted Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1928"&gt;Implement IntoIterator/FromIterator for AddressSet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1944"&gt;Split Context methods accepting &lt;code&gt;Into&amp;lt;T&amp;gt;&lt;/code&gt; generics up to improve compile time and binary size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;jsonschema-rs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Stranger6667/jsonschema-rs/issues/288"&gt;Implement unevaluatedProperties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Stranger6667/jsonschema-rs/issues/287"&gt;Implement unevaluatedItems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Stranger6667/jsonschema-rs/issues/286"&gt;Implement dependentRequired &amp;amp; dependentSchemas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Stranger6667/jsonschema-rs/issues/236"&gt;Python: Add an iterator over validation errors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;266 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-09-27..2021-10-04"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84267"&gt;make &lt;em&gt;const (), &lt;/em&gt;mut () okay for FFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89239"&gt;resolve: cache module loading for all foreign modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89447"&gt;improve error message for missing angle brackets in &lt;code&gt;[_]::method&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89408"&gt;avoid nondeterminism in &lt;code&gt;trimmed_def_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89340"&gt;improve error message for printf-style format strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89327"&gt;pick one possible lifetime in case there are multiple choices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89293"&gt;suggest using the path separator for tuple struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89248"&gt;suggest similarly named associated items in trait impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89249"&gt;improve cause information for NLL higher-ranked errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89233"&gt;hide &lt;code&gt;&amp;lt;...&amp;gt; defined here&lt;/code&gt; note if the source is not available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89255"&gt;fix incorrect disambiguation suggestion for associated items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89489"&gt;fix unsound optimization with explicit variant discriminants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89250"&gt;don't anonymize bound region names during typeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89214"&gt;pass real crate-level attributes to &lt;code&gt;pre_expansion_lint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89110"&gt;use larger span for adjustment THIR expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88963"&gt;coerce const FnDefs to implement const Fn traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86853"&gt;constify ?-operator for &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88353"&gt;partially stabilize &lt;code&gt;array_methods&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87998"&gt;avoid spurious "previous iteration of loop" errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89443"&gt;include the length in &lt;code&gt;BTree&lt;/code&gt; hashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88060"&gt;optimize unnecessary check in &lt;code&gt;Vec::retain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88452"&gt;&lt;code&gt;VecDeque&lt;/code&gt;: improve performance for &lt;code&gt;From&amp;lt;[T; N]&lt;/code&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89335"&gt;optimize &lt;code&gt;is_sorted&lt;/code&gt; for &lt;code&gt;Range&lt;/code&gt; and &lt;code&gt;RangeInclusive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[optimize &lt;code&gt;str::from_utf8()&lt;/code&gt; validation when slice contains multibyte chars and &lt;code&gt;str.chars().count()&lt;/code&gt; in all * &lt;a href="https://github.com/rust-lang/rust/pull/89165"&gt;Fix &lt;code&gt;read_to_end&lt;/code&gt; to not grow an exact size buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87870"&gt;make &lt;code&gt;&amp;lt;[T]&amp;gt;::split_at_unchecked&lt;/code&gt; and &lt;code&gt;&amp;lt;[T]&amp;gt;::split_at_mut_unchecked&lt;/code&gt; public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87910"&gt;mark unsafe methods &lt;code&gt;NonZero*::unchecked_&lt;/code&gt;{&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;mul&lt;/code&gt;} as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86828"&gt;const fn for &lt;code&gt;Option::&lt;/code&gt;{&lt;code&gt;copied&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;}&lt;/a&gt;
cases](https://github.com/rust-lang/rust/pull/88834)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/296"&gt;hashbrown: relax the bounds on &lt;code&gt;HashSet&lt;/code&gt;: &lt;code&gt;Debug&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7747"&gt;clippy: correctly handle signs in exponents in &lt;code&gt;numeric_literal::format()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7741"&gt;clippy: make &lt;code&gt;if_then_panic&lt;/code&gt; handle situation of &lt;code&gt;BinOpKind::And || BinOpKind::Or&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7338"&gt;clippy: re-write &lt;code&gt;shadow&lt;/code&gt; lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7734"&gt;clippy: make &lt;code&gt;doc_unsafe&lt;/code&gt; warn on unsafe traits as well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7677"&gt;clippy: fix bug for &lt;code&gt;large_enum_variants&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7608"&gt;clippy: add new 'while_let_some_result' linting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7762"&gt;clippy: add lint &lt;code&gt;equatable_if_let&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7761"&gt;clippy: fix ICE in &lt;code&gt;implicit_hasher&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7755"&gt;clippy: exclude enum from derivable impls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A fairly busy week, with a relatively high percentage of PRs landing with
regressions and improvements. The overall trajectory is fairly neutral for this
week though.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=83f147b3baf21acfc367a6da1045d212cd3957e4&amp;amp;end=25ec8273855fde2d72ae877b397e054de5300e10&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;83f147b..25ec82&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 Regressions, 5 Improvements, 5 Mixed; 1 of them in rollups&lt;/p&gt;
&lt;p&gt;43 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-10-05.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89542"&gt;Partially stabilize duration_consts_2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89509"&gt;Stabilize unreachable_unchecked as const fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89507"&gt;Add &lt;code&gt;#[repr(i8)]&lt;/code&gt; to Ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89433"&gt;Fix ctrl-c causing reads of stdin to return empty on Windows.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/89381"&gt;Tracking Issue for saturating_div&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89337"&gt;Avoid allocations and copying in &lt;code&gt;Vec::leak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88652"&gt;linux/aarch64 Now() should be actually_monotonic()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88300"&gt;Stabilise unix_process_wait_more, extra ExitStatusExt methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88041"&gt;Make all proc-macro back-compat lints deny-by-default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87704"&gt;Windows: Resolve process::Command program without using the current directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87467"&gt;Implement RefUnwindSafe for &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/86984"&gt;Reject octal zeros in IPv4 addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/73179"&gt;Tracking Issue for methods to go from nul-terminated &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; to CString &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/71436"&gt;Tracking issue for &lt;code&gt;proc_macro::is_available()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/58935"&gt;Tracking issue for &lt;code&gt;alloc::prelude&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3180"&gt;Cargo --crate-type CLI Argument&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discord.gg/yNtPTb2"&gt;October 9, 2021 - Rust Gamedev Discord - Rust Gamedev Monthly Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;October 12, 2021, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccnbqb/"&gt;October 12, 2021, Seattle, WA, US - Monthly meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.bettercode.eu/"&gt;October 13, 2021 - betterCode Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/MUCplusplus/events/281231257"&gt;October 13, 2021 - C++/Rust: Learning from Each Other - MUC++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/280981968/"&gt;October 13, 2021, Los Angeles, CA, US - Processing shaders in Rust with Dzmitry Malyshau - Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/281236385/"&gt;October 20, 2021, Buffalo, NY, US - Buffalo Rust User Group, Alternate Day - Buffalo Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/zkqvjsyccnbbc/"&gt;October 20, 2021, Vancouver, BC, CA - WASM plugin for Istio - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsyccnbrb/"&gt;October 13, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Grafbase&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://careers.grafbase.com/jobs/1345933-backend-engineer"&gt;Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Jigzi&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angel.co/company/jewish-interactive/jobs/1682182-frontend-rust-developer"&gt;Software Engineer - WebAssembly, Frontend (remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;pganalyze&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devitjobs.us/jobs/pganalyze-Senior-Backend-Engineer"&gt;Senior Backend Engineer - Rust (remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Oso&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/oso/70ed08c0-521f-4089-a51c-422a73f64366"&gt;Software Engineer (NY/Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/oso/0b65731e-4cf4-4e42-96ed-5f985f08fa66"&gt;Developer Advocate (NY/Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.osohq.com/company/jobs"&gt;And more...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Rust Engineer - Banking (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Subspace Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/subspacelabs"&gt;Multiple Rust Engineering Positions Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;There's a common trope among people unfamiliar with rust where they assume that if you use unsafe at all, then it's just as unsafe as C and rust provided no benefit. Comparing C's approach to safety vs Rust's is like comparing an &lt;a href="https://en.wikipedia.org/wiki/Open-world_assumption"&gt;open world assumption&lt;/a&gt; to a closed world assumption in formal logic systems. In C, you publish your api if it's possible to use correctly (open world). In Rust, you publish a safe api if it's &lt;strong&gt;im&lt;/strong&gt; possible to use &lt;strong&gt;in&lt;/strong&gt; correctly (closed world). Rust's key innovation here is that it enables you to build a 'bridge' from open world (unsafe) to a closed world (safe), a seemingly impossible feat that feels like somehow pairwise reducing an uncountable infinity with a countable infinity. Rust's decision to design an analogous closed-world assumption for safe code is extremely powerful, but it seems very hard for old school C programmers to wrap their head around it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://www.reddit.com/r/rust/comments/pzo1v9/comment/hf2thv2/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3"&gt;/u/infogulch on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1122"&gt;Alice Ryhl&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/q3pb94/this_week_in_rust_411/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 06 Oct 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-10-06:blog/2021/10/06/this-week-in-rust-411/</guid></item><item><title>This Week in Rust 410</title><link>https://this-week-in-rust.org/blog/2021/09/29/this-week-in-rust-410/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/09/27/Core-team-membership-updates.html"&gt;Core team membership updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/posts/2021-09-21-member-spotlight-open-source-security-software/"&gt;Rust Foundation Member Spotlight: Open Source Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-09-27.html"&gt;SixtyFPS (GUI crate) weekly update for 27th of September 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0006/"&gt;This week in Fluvio #6: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datafuselabs.github.io/weekly/2021-09-29-databend-weekly/"&gt;This week in Databend #9: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/09/27/changelog-156.html"&gt;IntelliJ Rust Changelog #156&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/09/27/changelog-96.html"&gt;Rust Analyzer #96&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adventures.michaelfbryan.com/posts/rust-best-practices/bad-habits/"&gt;Common Newbie Mistakes and Bad Practices in Rust: Bad Habits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bmd-software.com/news/why-rust-in-medical-imaging-a-reflection-on-modern-technologies-for-next-generation-systems"&gt;Why Rust in medical imaging? A reflection on modern technologies for next generation systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dropbox.tech/application/why-we-built-a-custom-rust-library-for-capture"&gt;Why we built a custom Rust library for Capture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/038-jon-gjengset/"&gt;Rust for Rustaceans by Jon Gjengset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.reddit.com/r/rust/comments/pxz7at/rustlinux_plumbers_conference_2021/"&gt;Rust Talks at the Linux Plumbers Conference 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/rust-static-site-generator/"&gt;Building a static site generator in 100 lines of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/stm32f3-magnetometer-use-cases-reading-extraction-part-1/"&gt;STM32F3â€™s Magnetometer | Use-cases &amp;amp; Reading Extraction (Part-1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/rust-reproducible-cross-compilation-with-docker/"&gt;Reproducible cross-compilation for Rust (with Docker)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pragprog.com/titles/hwrustbrain/rust-brain-teasers/"&gt;Rust Brain Teasers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.anyleaf.org/blog/writing-embedded-firmware-using-rust"&gt;Writing embedded firmware using Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/askrodney/using-rust-cloudflare-workers-serverless-hcaptcha-358g"&gt;Using Rust Cloudflare Workers: Serverless hCaptcha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/akkoro/deploy-an-ultra-fast-blog-in-minutes-with-eleventy-and-assemblylift-webassembly-lambda-api-gateway-rust-568l"&gt;Deploy an ultra-fast blog in minutes with Eleventy and AssemblyLift (WebAssembly + Lambda + API Gateway + Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PT] &lt;a href="https://dev.to/higordiego/rust-ownership-1hka"&gt;Rust - Ownership ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=OGihuce8rl8"&gt;Hacking on rustc - Negative literals in indexing expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=J_yGWdgeGQM"&gt;Getting started with Rust ðŸ¦€ 2021: 6. Library API design overhaul, async and more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.blog/2021-09-23-github-advisory-database-now-supports-rust/"&gt;GitHub Advisory Database now supports Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chiark.greenend.org.uk/~ianmdlvl/rust-polyglot/index.html"&gt;&lt;em&gt;Rust for the Polyglot Programmer&lt;/em&gt; - introducing a new guide to the language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DE] &lt;a href="https://rg-rhein-main.gi.de/veranstaltung/modernes-rust-im-jahr-2021"&gt;Modernes Rust im Jahr 2021 @ Gesellschaft fÃ¼r Informatik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/miette"&gt;miette&lt;/a&gt;, a library for error handling that is beautiful both in code and output.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/965"&gt;Kat MarchÃ¡n&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;265 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-09-20..2021-09-27"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89263"&gt;suggest both of immutable and mutable trait implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89221"&gt;give better error for &lt;code&gt;macro_rules! name!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88680"&gt;validate builtin attributes for macro args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88865"&gt;implement &lt;code&gt;#[must_not_suspend]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87064"&gt;support &lt;code&gt;#[track_caller]&lt;/code&gt; on closures and generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89237"&gt;make &lt;code&gt;#[track_caller]&lt;/code&gt; actually do stuff in &lt;code&gt;Steal::borrow&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88804"&gt;revise never type fallback algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89125"&gt;don't use projection cache or candidate cache in intercrate mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89285"&gt;don't normalize opaque types with escaping late-bound regions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89120"&gt;disable visible path calculation for &lt;code&gt;PrettyPrinter&lt;/code&gt; in &lt;code&gt;Ok&lt;/code&gt; path of compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88243"&gt;enable new pass manager with LLVM 13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89104"&gt;simplify &lt;code&gt;scoped_thread&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89086"&gt;stabilize &lt;code&gt;Iterator::map_while&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89139"&gt;use ZST for &lt;code&gt;fmt&lt;/code&gt; unsafety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4998"&gt;rustfmt: trailing comma on match block goes missing when guard is on its own line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4997"&gt;rustfmt: simplify and speed up search for local path based deps with &lt;code&gt;cargo fmt --all&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7692"&gt;clippy: demote &lt;code&gt;float_cmp&lt;/code&gt; to pedantic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7669"&gt;clippy: new lint &lt;code&gt;if_then_panic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7722"&gt;clippy: stop &lt;code&gt;excessive_precision&lt;/code&gt; from suggesting a float truncation that is not shorter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7707"&gt;clippy: don't lint &lt;code&gt;suspicious_else_formatting&lt;/code&gt; inside proc-macros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;The largest story for the week are the massive improvements that come from enabling the new pass manager in LLVM which leads to consistent 5% to 30% improvements across almost all test cases. The regressions were mostly minor with clear paths for addressing the ones that were not made with some specific trade off in mind.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=7743c9fadd64886d537966ba224b9c20e6014a59&amp;amp;end=83f147b3baf21acfc367a6da1045d212cd3957e4&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;7743c9..83f147&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4 Regressions, 4 Improvements, 3 Mixed; 0 of them in rollups&lt;/p&gt;
&lt;p&gt;43 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-09-28.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/89381"&gt;Tracking Issue for saturating_div&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89337"&gt;Avoid allocations and copying in &lt;code&gt;Vec::leak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/89006"&gt;Stabilize RFC 2345: Allow panicking in constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88090"&gt;Perform type inference in range pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/71436"&gt;Tracking issue for &lt;code&gt;proc_macro::is_available()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/58935"&gt;Tracking issue for &lt;code&gt;alloc::prelude&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;September 30, 2021, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gfx-rs/meetup"&gt;October 2, 2021 - Rust Graphics meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/280628523/"&gt;October 5, 2021, Buffalo, NY, US - Buffalo Rust User Group, First Tuesdays - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Zurich/events/280399418/"&gt;October 7, 2021, ZÃ¼rich, CH - Rust &amp;amp; GUI: egui - Rust ZÃ¼richsee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/yNtPTb2"&gt;October 9, 2021 - Rust Gamedev Discord - Rust Gamedev Monthly Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccnbqb/"&gt;October 12, 2021, Seattle, WA, US - Monthly meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.bettercode.eu/"&gt;October 13, 2021 - betterCode Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsyccnbrb/"&gt;October 13, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Enso&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/enso-org/hiring/blob/main/people/senior-rust-developer.md"&gt;Senior Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Stockly&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.welcometothejungle.com/fr/companies/stockly-1/jobs/back-end-developer-engine-team-rust-grpc-postgresql_paris"&gt;Back-end developer - Engine team (Rust, GRPC, PostgreSQL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Timescale&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/timescale/jobs/5542785002"&gt;Senior Toolkit Engineer - Database (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ChainSafe&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.smartrecruiters.com/ChainSafeSystemsInc/743999769790643-protocol-engineer-forest-rust-"&gt;Protocol Engineer for Filecoin Forest (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.smartrecruiters.com/ChainSafeSystemsInc/743999769885107-rust-engineer-substrate-"&gt;Rust Engineer for Substrate (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Banking Engineer - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;p&gt;This week we have two great quotes!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The signature of your function is your contract with not only the compiler, but also users of your function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://users.rust-lang.org/t/why-rust-lifetime-elision-cannot-inference-the-proper-lifetime-annotations-on-functions/65106/3"&gt;Quine Dot on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you want to know what was harder than learning lifetimes? Learning the same lessons through twenty years of making preventable mistakes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://www.youtube.com/watch?v=4_Jg-rLDy-Y&amp;amp;t=1658s"&gt;Zac Burns in his RustConf talk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1116"&gt;Daniel H-M&lt;/a&gt; and &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1117"&gt;Erik Zivkovic&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/pyat4g/this_week_in_rust_410/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 29 Sep 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-09-29:blog/2021/09/29/this-week-in-rust-410/</guid></item><item><title>This Week in Rust 409</title><link>https://this-week-in-rust.org/blog/2021/09/22/this-week-in-rust-409/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;h3 id="rustconf-2021"&gt;RustConf 2021&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/ylOpCXI2EMM"&gt;Project Update: Lang Team by Niko Matsakis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/DnYQKWs_7EA"&gt;Project Update: Libs Team by Mara Bos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/UrDhMWISR3w"&gt;Move Constructors: Is it Possible? by Miguel Young de la Sota&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/CV5CjUlcqsw"&gt;The Importance of Not Over-Optimizing in Rust by Lily Mara&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/BLy_YF4nmqQ"&gt;Identifying Pokemon Cards by Hugo Peixoto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/qUu1vJNg8yo"&gt;Fuzz Driven Development by Midas Lambrichts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/D1NAREuicNs"&gt;Writing the Fastest GDBT Library in Rust by Isabella Tromba&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/m-Qg3OoPIdc"&gt;Whoops! I Rewrote it in Rust by Brian Martin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/b0I4vP2CP88"&gt;How I Used Rust to Become Extremely Offline by Luke Westby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/8d7DqeYXq7A"&gt;Supercharging Your Rust Code With Five Little-Known Attributes by Jackson Lewis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/4_Jg-rLDy-Y"&gt;Compile-Time Social Coordination by Zac Burns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/9H9SO2u6Q20"&gt;Hacking rustc: Contributing to the Compiler by Esteban Kuber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/OZPXhmy-wVw"&gt;This Week in Rust: 400 Issues and Counting! by This Week in Rust's very own Lead Editor Nell Shamrell-Harrington!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/09/20/changelog-95.html"&gt;rust-analyzer Changelog #95&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rome.tools/blog/2021/09/21/rome-will-be-rewritten-in-rust"&gt;Rome will be rewritten in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-09-20.html"&gt;SixtyFPS (GUI crate) weekly report 19th of September&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sea-ql.org/SeaORM/blog/2021-09-20-introducing-sea-orm"&gt;Introducing SeaORM: An async &amp;amp; dynamic ORM for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2021/09/16/deno-webgpu.html"&gt;wgpu alliance with Deno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Mesa-Rust-2021-Experiment"&gt;Experimenting Is Underway For Rust Code Within Mesa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/pqiiw1/goscript_is_now_language_feature_complete/"&gt;Goscript is now language feature complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2021/09/an-update-on-memory-safety-in-chrome.html?m=1"&gt;An update on Memory Safety in Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datafuselabs.github.io/weekly/2021-09-22-databend-weekly/"&gt;This week in Databend #8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/how-to-use-vectors-in-rust/"&gt;How to use Vectors in Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/message-passing-in-rust-threads-is-very-helpful/"&gt;Message Passing in Rust Threads is very helpful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gregstoll.wordpress.com/2021/09/18/new-project-wheel-of-fortune-solver-and-rust-is-still-faster-than-python/"&gt;New project: Wheel of Fortune solver! (and Rust is still faster than Python)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2021/09/08/rustacean-principles/"&gt;Rustacean Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps//blog/2021/09/16/rustacean-principles-continued/"&gt;Rustacean Principles, Continued&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.justinm.one/blog/2021/09/11/fullstackrust/"&gt;Full Stack Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://epage.github.io/blog/2021/09/learning-rust/"&gt;Learnability of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://research.activision.com/publications/2021/09/the-rust-programming-language-for-game-tooling"&gt;The Rust Programming Language for Game Tooling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nickb.dev/blog/reality-check-for-cloudflare-wasm-workers-and-rust"&gt;Reality Check for Cloudflare Wasm Workers and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gergo.erdi.hu/blog/2021-09-18-rust_on_the_mos_6502__beyond_fibonacci/"&gt;Rust on the MOS 6502: Beyond Fibonacci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tech.marksblogg.com/rocket-rust-web-framework.html"&gt;Rocket: A Web Framework for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.kraken.com/post/7964/oxidizing-kraken-improving-kraken-infrastructure-using-rust/"&gt;Oxidizing Kraken: Improving Kraken Infrastructure Using Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://diziet.dreamwidth.org/9894.html"&gt;Tricky compatibility issue - recent changes to &lt;code&gt;std::io::ErrorKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://youtu.be/SsZUicpnpVE"&gt;Flutter/Rust Roundtable - Flying High with Flutter #24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/036-luca-palmieri/"&gt;Rustacean Station: From Zero to Production with Luca Palmieri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://soundcloud.com/arewepodcastyet/awpy-08-jon-ferdinand-ronge-gjengset"&gt;AreWePodcastYet 08 with Jon Ferdinand Ronge Gjenset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/037-daniel-mckenna/"&gt;Rustacean Station: Rust Code Coverage with Daniel McKenna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/FiEbgZlBXhk"&gt;rust4ml @ Rust DC w/ Vlad Orlov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/Gv-nG6F_09I"&gt;In-kernel, fast-path packet processing with AF_XDP @ Rust DC w/ Collins Huff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/tree/develop/documentation/use-cases/end-to-end-encrypt-all-application-layer-communication"&gt;How to end-to-end encrypt all application layer communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/rust-on-esp32"&gt;Rust on ESP32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/compile-rust-for-esp32-xtensa-on-raspberry-pi-aarch64/"&gt;How to compile Rust and LLVM for ESP32 on a Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oknozor.github.io/blog/optimize-rust-binary-size/"&gt;Optimize Rust binaries size with cargo and Semver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/axum-hyper-tonic-tower-part2"&gt;Combining Axum, Hyper, Tonic, and Tower for hybrid web/gRPC apps: Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/axum-hyper-tonic-tower-part3"&gt;Combining Axum, Hyper, Tonic, and Tower for hybrid web/gRPC apps: Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/axum-hyper-tonic-tower-part4/"&gt;Combining Axum, Hyper, Tonic, and Tower for hybrid web/gRPC apps: Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hoj-senna.github.io/HShhss/texts/001arduino1.html"&gt;First steps with an Arduino board and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/full-stack-rust-a-complete-tutorial-with-examples/"&gt;Full-stack Rust: A complete tutorial with examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/senyeezus/designing-state-machines-in-rust-252k"&gt;Designing state machines in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/antoniovdlc/optimising-a-javascript-library-with-webassembly-a-failed-attempt-48le"&gt;Optimizing a JavaScript library with WebAssembly, a failed attempt!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/mileswatson/series/14520"&gt;URL Shortener with Rust, Svelte, &amp;amp; AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[CN] &lt;a href="https://dev.to/daniel1in/string-in-rust-34d7"&gt;String in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=7odJDwhjCXQ&amp;amp;list=PLEIv4NBmh-GsWGE9mY3sF9c5lgh5Z_jLr&amp;amp;ab_channel=BedroomBuilds"&gt;From Python to Rust - all episodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/UVUjnzpQKUo"&gt;1 Problem, 16 Programming Languages (C++ vs Rust vs Haskell vs Python vs APL...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/0HlrqwLjCxA"&gt;Explaing Rust Analyzer 15: Error Resilient Parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=J_yGWdgeGQM"&gt;Getting started with Rust ðŸ¦€ 2021: 6. Library API design overhaul, async and more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [series] &lt;a href="https://youtube.com/playlist?list=PL7r-PXl6ZPcD63DS2djSiz4SlXkaTfobc"&gt;Rust for Java Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neverworkintheory.org/2021/09/20/do-developers-read-compiler-error-messages.html"&gt;Do Developers Read Compiler Error Messages?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/pqs2dh/alpine_system_change_proposal_rust_in_main/"&gt;Alpine: System change proposal: Rust in main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Rust-Adds-Motorola-M68k"&gt;Rust Adds Support For The Motorola M68000 Processors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://saveriomiroddi.github.io/Rust-lulz-godbolt-assembly-exploring-without-crate-limitations-in-visual-studio-code"&gt;Godbolt assembly exploring without crate limitations, in Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/pm4xe9/what_libraries_do_you_miss_from_other_languages/"&gt;What libraries do you miss from other languages?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/pp0nfa/rust_for_rustaceans_is_off_to_the_printer/"&gt;Rust for Rustaceans is off to the printer!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ppf83d/gcc_codegen_now_under_rustlang_organization/"&gt;GCC codegen now under rust-lang organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ppya5y/rust_in_qemu_host_support_matrix/"&gt;Rust in Qemu, host support matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/document/u/1/d/e/2PACX-1vSt2VB1zQAJ6JDMaIA9PlmEgBxz2K5Tx6w2JqJNeYCy0gU4aoubdTxlENSKNSrQ2TXqPWcuwtXe6PlO/pub"&gt;Chrome - Borrowing Trouble: The Difficulty Of A C++ Borrow Checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[picture] &lt;a href="https://www.reddit.com/r/rust/comments/pskqhk/media_my_rust_project_was_featured_in_one_of/"&gt;My Rust project was featured in one of Europe's biggest computer magazines (heise c't)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.reddit.com/r/rust/comments/pl7n8a/media_wrote_a_neat_little_maze_solver_largest/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3"&gt;Wrote a neat little maze solver. Largest solved so far is 125k x 125k. Here's a smaller 512x512&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/willcrichton/flowistry"&gt;flowistry&lt;/a&gt;, a VS code extension to visualize data flow in Rust code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/963"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1804"&gt;ockam-network/ockam - Ockam TCP Transport using smoltcp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1624"&gt;ockam-network/ockam - File Transfer over end-to-end encrypted secure channels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h2&gt;
&lt;p&gt;256 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-09-13..2021-09-20"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88529"&gt;ARMv6K Nintendo 3DS Tier 3 target added&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88321"&gt;add initial support for m68k&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88994"&gt;disable the evaluation cache when in intercrate mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87867"&gt;use a separate interner type for &lt;code&gt;UniqueTypeId&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88690"&gt;accept &lt;code&gt;m!{ .. }.method()&lt;/code&gt; and &lt;code&gt;m!{ .. }?&lt;/code&gt; statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88729"&gt;recover from &lt;code&gt;Foo(a: 1, b: 2)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86422"&gt;emit clearer diagnostics for parens around for loop heads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86382"&gt;make diagnostics clearer for &lt;code&gt;?&lt;/code&gt; operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88911"&gt;improve error message for type mismatch in generator arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88894"&gt;improve error message for missing trait in trait impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89021"&gt;add a separate error for &lt;code&gt;dyn Trait&lt;/code&gt; in &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87960"&gt;suggest replacing an inexisting field for an unmentioned field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89055"&gt;suggest better place to add call parentheses for method expressions wrapped in parentheses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88841"&gt;suggest removing bad parens in &lt;code&gt;(recv.method)()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89012"&gt;suggest removing &lt;code&gt;#![feature]&lt;/code&gt; for library features that have been stabilized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88735"&gt;don't lint about missing code examples in derived traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88719"&gt;point at argument instead of call for their obligations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89000"&gt;reuse existing shared &lt;code&gt;Lrc&lt;/code&gt; for &lt;code&gt;MatchImpl&lt;/code&gt; parent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88965"&gt;fast reject for &lt;code&gt;NeedsNonConstDrop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82183"&gt;simplify lazy &lt;code&gt;DefPathHash&lt;/code&gt; decoding by using an on-disk hash table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88988"&gt;avoid codegen for &lt;code&gt;Result::into_ok&lt;/code&gt; in &lt;code&gt;lang_start&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89069"&gt;use &lt;code&gt;&amp;lt;[T; N]&amp;gt;::map&lt;/code&gt; in &lt;code&gt;Sharded&lt;/code&gt; instead of &lt;code&gt;SmallVec&lt;/code&gt; and unsafe code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88832"&gt;introduce a fast path that avoids the &lt;code&gt;debug_tuple&lt;/code&gt; abstraction when deriving &lt;code&gt;Debug&lt;/code&gt; for unit-like enum variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88722"&gt;make &lt;code&gt;UnsafeCell::get_mut&lt;/code&gt; const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88558"&gt;&lt;code&gt;const&lt;/code&gt; &lt;code&gt;drop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89031"&gt;don't inline &lt;code&gt;OnceCell&lt;/code&gt; initialization closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88954"&gt;allow &lt;code&gt;panic!("{}", computed_str)&lt;/code&gt; in &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89017"&gt;fix potential race in &lt;code&gt;AtomicU64&lt;/code&gt; time monotonizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2499"&gt;futures: fix Unusable &lt;code&gt;Sink&lt;/code&gt; implementation on &lt;code&gt;Scan&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7690"&gt;clippy: change &lt;code&gt;while_let_on_iterator&lt;/code&gt; suggestion to use &lt;code&gt;by_ref()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7640"&gt;clippy: improve accuracy of &lt;code&gt;mut_key&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7653"&gt;clippy: new lint: &lt;code&gt;same_name_method&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A nice week: more improvements than regressions.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=9f85cd6f2ab2769c16e89dcdddb3e11d9736b351&amp;amp;end=7743c9fadd64886d537966ba224b9c20e6014a59&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;9f85cd6f2..7743c9f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 4 Improvements, 8 Mixed; ??? of them in rollups&lt;/p&gt;
&lt;p&gt;44 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-09-21.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2845"&gt;RFC: Supertrait item shadowing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/89006"&gt;Stabilize RFC 2345: Allow panicking in constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88090"&gt;Perform type inference in range pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/88028"&gt;Disable unused_must_use for statically known bools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/87228"&gt;Decide whether asm! and/or global_asm! should be exported from the prelude.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87220"&gt;Make #[derive(A, B, ...)] cfg-eval its input only for A, B, ... and stabilize feature(macro_attributes_in_derive_output)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84267"&gt;Make &lt;code&gt;*const (), *mut ()&lt;/code&gt; okay for FFI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3177"&gt;[Help wanted] First draft of patchfile RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3176"&gt;Multiple artifact deps on the same crate with different names, for different targets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccmblc/"&gt;September 28, 2021, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gfx-rs/meetup"&gt;October 2, 2021 - Rust Graphics meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/280628523/"&gt;October 5, 2021, Buffalo, NY, US - Buffalo Rust User Group, First Tuesdays - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsyccnbrb/"&gt;October 13, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;September 22, 2021, Berlin, DE - Rust and Tell - an onsite event - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Kollider&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/junior-backend-engineer/en"&gt;Junior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Subspace Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/subspacelabs/9d8f9b6d-4141-4782-923a-2872a06c723e"&gt;EVM Execution Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Oxford Ionics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.oxionics.com/software-engineer-embedded"&gt;Software Engineer: Embedded (Begbroke, UK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oxionics.com/software-engineer-compiler"&gt;Software Engineer: Compiler (Begbroke, UK)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ChainSafe&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.smartrecruiters.com/ChainSafeSystemsInc/743999769790643-protocol-engineer-forest-rust-"&gt;Protocol Engineer - Forest (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.smartrecruiters.com/ChainSafeSystemsInc/743999769885107-rust-engineer-substrate-"&gt;Rust Engineer - Substrate (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;the strains of the project have hurt a lot of people over the years and I think maybe the only path to recovery involves getting some distance from it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://twitter.com/graydon_pub/status/1437521319722029056"&gt;Graydon Hoare on twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1107"&gt;mmmmib&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ptjwmc/this_week_in_rust_409/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 22 Sep 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-09-22:blog/2021/09/22/this-week-in-rust-409/</guid></item></channel></rss>