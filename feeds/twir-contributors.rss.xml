<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/feeds/twir-contributors.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 25 Nov 2020 00:00:00 -0500</lastBuildDate><item><title>This Week in Rust 366</title><link>https://this-week-in-rust.org/blog/2020/11/25/this-week-in-rust-366/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/11/23/What-the-error-handling-project-group-is-working-on.html"&gt;What the Error Handling Project Group is Working On&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/11/23/changelog-52.html"&gt;Rust Analyzer Changelog #52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-7/"&gt;Knurling-rs Changelog #7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adsharma.github.io/flattools-11222020.html"&gt;FlatBuffer as serialization agnostic IDL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/egghead/wtf-is-rust-the-illustrated-notes-564p"&gt;WTF is Rust? The Illustrated Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arschles/first-lines-of-rust-ofe"&gt;First Lines of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nodebb.org/optimizing-benchpress/"&gt;Optimizing Benchpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lfcode.ca/blog/pwintln-uwu"&gt;pwintln uwu and other fun with elves and dynamic linkers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/titles/hwrust/hands-on-rust/"&gt;Hands-on Rust: Effective Learning through 2D Game Development and Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jaredwolff.com/cbor-for-embedded-c-and-rust/"&gt;CBOR IoT Data Serialization for Embedded C and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/fllstck/basic-interactions-with-yew-3pa3"&gt;Basic Interactions with Yew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/luzero/testing-your-crate-c-api-19nc"&gt;Testing your crate C-API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rocket-tutorial-03-part-ii-proper-testing-6h"&gt;Rocket Tutorial 03 part II: Proper Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pjam/select-syscall-in-rust-mm"&gt;Select Syscall in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iantayler.com/2020/11/22/fbsim-football-playing-ai-agents-in-rust/"&gt;FBSim: football-playing AI agents in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bheisler.github.io/post/recipe-manager-part-5-data-integrity/"&gt;Building a Recipe Manager - Part 5 - Data Integrity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jitter.company/blog/2020/11/23/bootstrapping-support-for-the-stm32wle-with-the-embedded-rust-ecosystem/"&gt;Bootstrapping support for the STM32WLE with the Embedded Rust ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nickwilcox.com/blog/recipe_swift_rust_callback/"&gt;Recipe for Calling Swift Closures from Asynchronous Rust Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/eLNAMEoKAAc"&gt;A Cool Generic Concurrency Primitive in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/d9lsT4kJo44"&gt;Creative coding in Rust: re-creating a retro screensaver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/2u362vR167c"&gt;(Live Coding) Audio adventures in Rust: Packaging Actix + React app as macOS bundle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=lL0PmeYWqiU&amp;amp;feature=youtu.be"&gt;Prototype (Rust tutorial) - Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.brainiumstudios.com/2020/11/24/cargo-mobile.html"&gt;cargo-mobile: Rust on mobile made easy!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rustfest.eu/rustfest-project-announcement"&gt;Welcoming the RustFest Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://advancedresearch.github.io/blog/2020-11-21-levenshtein-heuristic-in-poi"&gt;Levenshtein Heuristic in Poi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nw0.github.io/cheri-rust.pdf"&gt;Strengthening memory safety in Rust: exploring CHERI capabilities for a safe language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/why-aws-loves-rust-and-how-wed-like-to-help/#"&gt;Why AWS loves Rust, and how we'd like to help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/centrality/why-work-in-blockchain-journey-from-c-to-rust-developer-eddbc9ccdc3d"&gt;Why Work in Blockchain? - Journey from C++ to Rust Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/jxfhnp/flash_animations_live_forever_at_the_internet/"&gt;Flash Animations Live Forever at the Internet Archive [via ruffle.rs, a Flash emulator written in Rust compiled to WASM]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=meAz2RQMHvM"&gt;How to create an awesome Rust GitHub project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/cargo-intraconv"&gt;cargo-intraconv&lt;/a&gt;, a cargo subcommand to convert links in rust documentation to the newly stable intra-doc-links format.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/849"&gt;Alexis Bourget&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/c410-f3r/oapth/issues/5"&gt;oapth - Meta issue for &lt;code&gt;clean&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/iliekturtles/uom/issues/223"&gt;uom - Fix issues with uom CI process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;345 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-11-16..2020-11-23"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79192"&gt;never inline naked functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79072"&gt;fix exhaustiveness in case a byte string literal is used at slice type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78569"&gt;Arena: use specialization to avoid copying data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79002"&gt;add column number support to Backtrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78461"&gt;add support for custom allocators in &lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79186"&gt;change &lt;code&gt;slice::to_vec&lt;/code&gt; to not use &lt;code&gt;extend_from_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79039"&gt;tighten the bounds on atomic Ordering in &lt;code&gt;std::sys::unix::weak::Weak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79172"&gt;Add &lt;code&gt;#[cold]&lt;/code&gt; attribute to &lt;code&gt;std::process::abort&lt;/code&gt; and &lt;code&gt;alloc::alloc::handle_alloc_error&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77893"&gt;impl &lt;code&gt;Default&lt;/code&gt; for &lt;code&gt;PhantomPinned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79114"&gt;add &lt;code&gt;trailing_zeros&lt;/code&gt; and &lt;code&gt;leading_zeros&lt;/code&gt; to non zero types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76941"&gt;add &lt;code&gt;f&lt;/code&gt;{&lt;code&gt;32&lt;/code&gt;, &lt;code&gt;64&lt;/code&gt;}&lt;code&gt;::is_subnormal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79222"&gt;add &lt;code&gt;core::slice::fill_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74989"&gt;implement &lt;code&gt;Index&lt;/code&gt; and &lt;code&gt;IndexMut&lt;/code&gt; for arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79194"&gt;make &lt;code&gt;as&lt;/code&gt;{&lt;code&gt;_mut&lt;/code&gt;,}&lt;code&gt;_slice&lt;/code&gt; on &lt;code&gt;array::IntoIter&lt;/code&gt; public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78608"&gt;stabilize &lt;code&gt;refcell_take&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77872"&gt;stabilize &lt;code&gt;clamp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79299"&gt;stabilise &lt;code&gt;then&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76226"&gt;stabilize &lt;code&gt;IpAddr::is_ipv4&lt;/code&gt; and &lt;code&gt;is_ipv6&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78305"&gt;stabilize &lt;code&gt;alloc::Layout&lt;/code&gt; const functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2263"&gt;futures: stream: unzip operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8857"&gt;cargo: allow resolver="1" to explicitly use the old resolver behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78752"&gt;rustdoc: give a better error when rustdoc tests fail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-semverver/pull/138"&gt;semverver: speed compilation by using .rmeta over .rlib files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/measureme/pull/143"&gt;measureme: hardware performance counter support (via &lt;code&gt;rdpmc&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-24.md"&gt;2020-11-24&lt;/a&gt;:
1 Regression, 2 Improvements, 2 mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week saw landing of &lt;a href="https://github.com/rust-lang/rust/pull/79237"&gt;#79237&lt;/a&gt; which by itself provides no wins but opens the door to support for split debuginfo on macOS. This'll eventually show huge wins as we can likely avoid re-collecting debuginfo while retaining support for lldb and Rust backtraces. &lt;a href="https://github.com/rust-lang/rust/issues/79361"&gt;#79361&lt;/a&gt; tracks the stabilization of the rustc flag, but the precise rollout to stable users is not yet 100% clear.&lt;/p&gt;
&lt;p&gt;Triage done by @jyn514 and @simulacrum.&lt;/p&gt;
&lt;p&gt;4 regressions, 4 improvements, 2 mixed results.
5 of them in rollups.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-24.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No Tracking Issues or PRs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3022"&gt;Add a new syntax to declare that a trait must always be object-safe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-edi/events/273101770"&gt;November 26, Edinburgh, UK - Rust in the Polymesh Project - Rust Edinburgh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcpbjc/"&gt;November 26, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Tel-Aviv-Data-Science-ODSC/events/274650041/"&gt;November 26, Tel Aviv-Yafo, IL - Rust Machine Learning On-line Meetup - ODSC Tel Aviv Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/274623141/"&gt;December 1, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/273529335"&gt;December 1, Munich, DE - Rust Remote #4 (CEST) - Rust Munich Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/274734310/"&gt;December 2, Johannesburg, ZA - Monthly Joburg Rust Chat - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstrybcqbdb/"&gt;December 2, Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/274592167"&gt;December 8, Saarbücken, Saarland, DE - Meetup: 6u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybcqbmb/"&gt;December 9, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876724/"&gt;December 7, Auckland, NZ - Rust AKL - Show and Tell + Introduction to RUst II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/influxdb/jobs/2447843?gh_src=da842a8d1us"&gt;Senior Software Engineer, IOx at InfluxData (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I know noting about the compiler internals but it looks to me as if 90% of the time is spent pretty-printing LayoutError.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://github.com/rust-lang/rust/issues/75992#issuecomment-716622473"&gt;Vadzim Dambrouski on github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/968"&gt;mmmmib&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k17f0k/this_week_in_rust_366/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 25 Nov 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-11-25:blog/2020/11/25/this-week-in-rust-366/</guid></item><item><title>This Week in Rust 365</title><link>https://this-week-in-rust.org/blog/2020/11/18/this-week-in-rust-365/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/11/19/Rust-1.48.html"&gt;Announcing Rust 1.48.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/11/12/source-based-code-coverage.html"&gt;Source-based code coverage in nightly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/11/16/changelog-135.html"&gt;IntelliJ Rust Changelog #135&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/11/16/changelog-51.html"&gt;Rust-Analyzer Changelog #51&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-6/"&gt;Knurling-rs Changelog #6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ratysz.github.io/article/scheduling-1/"&gt;ECS Scheduler Thoughts, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tarquin-the-brave.github.io/blog/posts/generating-config-reference-rust-cli/"&gt;Generating a config file reference for CLI tools in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/tjtelan/rust-in-2021-5p6"&gt;Rust in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jam1.re/blog/anonymous-sum-types-for-rust-errors"&gt;Anonymous Sum Types for Rust Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prilik.com/blog/post/c-is-not-dependency-free/"&gt;The C Standard Library Is Not Dependency Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jack.wrenn.fyi/blog/private-trait-impls/"&gt;Scoped Trait Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freemasen.com//blog/sqlite-parser-pt-2/index.html"&gt;SQLite File Parser Pt. 2: The Header... continues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://levpaul.com/posts/rust-lesson-7-8-9/"&gt;Rust from a Gopher - Lessons 7, 8 &amp;amp; 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nitschinger.at/Writing-an-embedded-display-driver-in-Rust/"&gt;Writing an embedded display driver in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rocket-tutorial-03-proper-routing-4ch3"&gt;Rocket Tutorial 03: Proper routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/fllstck/intro-to-yew-a-rust-frontend-framework-20hb"&gt;Intro to Yew, a Rust Frontend Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/ownership-puzzle-rust-async-hyper/"&gt;An Ownership Puzzle with Rust, Async, and Hyper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/10/"&gt;Make A Language - Part Ten: Starting Again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/11/"&gt;Make A Language - Part Eleven: Refinements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-custom-target-to-build-kernel-for-a-bare-metal-part-3/"&gt;OS in Rust: Custom target to build kernel for a bare metal: Part-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://corbamico.github.io/2020/11/12/tetris-1/"&gt;Creating a Tetris Clone in Rust, with Bevy (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PL] &lt;a href="https://postacnormalna.pl/crabbybird-3-generowanie-swiata-gry-czesc-i/"&gt;CrabbyBird #3 Generowanie świata gry – cześć I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/h4RkCyJyXmM"&gt;Crust of Rust: Sorting Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/vmvq9jKBlGc"&gt;(Live Coding) Audio adventures in Rust: UI with Actix, WebView, and React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2020/11/16/big-picture.html"&gt;The Big Picture of gfx/wgpu ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.azabani.com/2020/11/15/xd.html"&gt;xd(1): hex-dumping tool with a ♥♪ code page 437 twist ♫♥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andraztori.medium.com/speed-is-a-feature-introducing-fwumious-wabbit-1cc9573ea7be"&gt;Fwumious Wabbit: really fast logistic regression (+more) in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jam1.re/blog/rust-for-game-modding"&gt;Rust for Modding Smash Ultimate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hobofan.com/blog/2020-11-10-reacty_yew/"&gt;reacty_yew: Generating Yew components from React components via Typescript type definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.servo.org/2020/11/17/servo-home/"&gt;Servo's New Home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/dog-fight-python-vs-golang-vs-rust-for-json-processing-33c1ffe15ab9"&gt;Dog Fight — Python VS Golang VS Rust for JSON Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/build-an-sms-alert-system-for-canada-covid-19-cases-over-the-weekend-with-rust-and-zero-cost-235bb59ec5d"&gt;Build an SMS Alert System over the weekend with Rust and Zero-Cost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/build-a-scalable-trading-bot-with-rust-over-the-weekend-9fd781940360"&gt;Build a Scalable Trading Bot With Rust Over the Weekend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.crowdstrike.com/blog/data-science-test-drive-of-rust-programming-language/"&gt;Oh No! My Data Science Is Getting Rust-y&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2011.06171"&gt;The Usability of Ownership&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/pemistahl/lingua-rs"&gt;lingua&lt;/a&gt;, a ngrams-based natural language detector.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/841"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gfx-rs/naga/issues/5"&gt;gfx-rs/naga - DirectX IR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;299 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-11-09..2020-11-16"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78566"&gt;enable LLVM Polly via llvm-args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78836"&gt;implement destructuring assignment for structs and slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79016"&gt;make &lt;code&gt;_&lt;/code&gt; an expression, to discard values in destructuring assignments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78950"&gt;add asm register information for SPIR-V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74754"&gt;add &lt;code&gt;#[cfg(panic = '...')]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78826"&gt;resolve: collapse &lt;code&gt;macro_rules&lt;/code&gt; scope chains on the fly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78966"&gt;never inline C variadics, cold functions, functions with incompatible attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78969"&gt;normalize function type during validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77990"&gt;eliminate some temporary vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78782"&gt;do not collect tokens for doc comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/609"&gt;chalk: variance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79049"&gt;lower intrinsics calls: forget, size_of, unreachable, wrapping_*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79058"&gt;move likely/unlikely argument outside of invisible unsafe block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75272"&gt;specialize &lt;code&gt;io::copy&lt;/code&gt; to use &lt;code&gt;copy_file_range&lt;/code&gt;, &lt;code&gt;splice&lt;/code&gt; or &lt;code&gt;sendfile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78857"&gt;improve &lt;code&gt;BinaryHeap&lt;/code&gt; performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78631"&gt;BTreeMap: fix pointer provenance rules in underfullness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79026"&gt;implement BTreeMap::retain and BTreeSet::retain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8837"&gt;cargo: improve performance of almost fresh builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4445"&gt;rustfmt: option to create groups for std, external crates, and other imports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-10.md"&gt;2020-11-10&lt;/a&gt;:
1 Regression, 2 Improvements, 2 mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A mixed week with improvements still outweighing regressions. Perhaps the biggest highlight was the move to compiling rustc crates &lt;a href="https://github.com/rust-lang/rust/pull/78201"&gt;with the initial-exec TLS model&lt;/a&gt; which results in fewer calls to &lt;code&gt;_tls_get_addr&lt;/code&gt; and thus faster compile times.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-10.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2841"&gt;RFC: -C export-executable-symbols&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78636"&gt;Add &lt;code&gt;PartialEq&amp;lt;char&amp;gt;&lt;/code&gt; for proc_macro::Punct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78634"&gt;Implement PartialEq for proc_macro::Ident == strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78608"&gt;Stabilize refcell_take&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78305"&gt;Stabilize alloc::Layout const functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77893"&gt;Impl Default for PhantomPinned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/76829"&gt;stabilize const_int_pow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/76226"&gt;Stabilize &lt;code&gt;IpAddr::is_ipv4&lt;/code&gt; and &lt;code&gt;is_ipv6&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72981"&gt;Stabilize the backtrace feature.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/64260"&gt;Tracking issue for methods converting &lt;code&gt;bool&lt;/code&gt; to &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3020"&gt;Allow specifying features of the implicit lib dependency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsybcpbxb/"&gt;November 18, Vancouver, BC, CA - Rust Study/Hack/Hang-out night - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcpbgc/"&gt;November 24, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-edi/events/273101770"&gt;November 26, Edinburgh, UK - Rust in the Polymesh Project - Rust Edinburgh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcpbjc/"&gt;November 26, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Tel-Aviv-Data-Science-ODSC/events/274650041/"&gt;November 26, Tel Aviv-Yafo, IL - Rust Machine Learning On-line Meetup - ODSC Tel Aviv Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/274623141/"&gt;December 1, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/274592167"&gt;December 8, Saarbücken, Saarland, DE - Meetup: 6u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/chainsafe/Blockchain-Developer-Rust-0d577a2636b84511a5d4efc69454585d"&gt;Software Engineer at ChainSafe Systems (Toronto, CA, Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.welcometothejungle.com/fr/companies/meilisearch/jobs/software-developer-rust_paris"&gt;Software Developer (Rust) at MeiliSearch (Paris, FR)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;p&gt;This time we have two quotes of the week:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i just spent 8h finding a mutability bug and now i wanna be a catgirl&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://twitter.com/castle_vanity/status/1327352639303135239"&gt;@castle_vanity on twitter&lt;/a&gt; reacting to a post depicting C++ programmers as muscle-laden bodybuilders and Rust programmers as catgirls&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/966"&gt;Maximilian Goisser&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The code people write is first a question to the compiler, and later a story for people changing that code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/jslo80/this_week_in_rust_364/gc2iuyo"&gt;Esteban Kuber on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/967"&gt;llogiq&lt;/a&gt; is mightily pleased with his suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/jx6vfl/this_week_in_rust_365/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 18 Nov 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-11-18:blog/2020/11/18/this-week-in-rust-365/</guid></item><item><title>This Week in Rust 364</title><link>https://this-week-in-rust.org/blog/2020/11/11/this-week-in-rust-364/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/11/11/exploring-pgo-for-the-rust-compiler"&gt;Exploring PGO for the Rust compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2020-10/"&gt;This Month in Rust OSDev (October 2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-015/"&gt;This Month in Rust GameDev #15 - October 2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/11/09/changelog-50.html"&gt;Rust-Analyzer Changelog #50&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://okteto.com/blog/getting-started-with-okteto-and-rust/"&gt;Develop &amp;amp; Debug Your Rust Application Top Of Kubernetes With OKteto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://siliconsprawl.com/2020/11/06/simd-ray-tracer.html"&gt;Rust Ray Tracer, an Update (and SIMD)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://siliconsprawl.com/2020/11/09/rust-emit-asm.html"&gt;Rust emit=asm Can Be Misleading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/monocodus/a-survey-into-static-analyzers-configurations-clippy-for-rust-part-1-5de50fd9326"&gt;A survey into static analyzers configurations: Clippy for Rust, part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thefuntastic.com/blog/why-rust-is-the-future-game-dev?"&gt;Why Rust is the Future of Game Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://omarabid.com/rust-high-level-language"&gt;Rust as a productive high-level language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2020/11/06/40-ms-bug.html"&gt;40 millisecond bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/est31/8d0465997ea920c5ba917cbbf80a822d"&gt;Postfix macros in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nickb.dev/blog/a-quick-tour-of-trade-offs-embedding-data-in-rust"&gt;A Quick Tour of Trade-offs Embedding Data in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ibraheem.ca/posts/why-devs-love-rust"&gt;Why Developers Love Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/9/"&gt;Make a Language - Part Nine: Function Calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.kdubovikov.ml/articles/rust/ui/weather-station-ui"&gt;Building a Weather Station UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.stephenmarz.com/2020/11/11/risc-v-os-using-rust-graphics/"&gt;Getting Graphical Output from our Custom RISC-V Operating System in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andrewhalle.github.io/build-your-own/gpg"&gt;Build your own: GPG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/charliefoxtrot/rpi-4-meets-flutter-and-rust-23ma"&gt;Rpi 4 meets Flutter and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rad_val_/aws-lambda-rust-292g"&gt;AWS Lambda + Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/elasticrash/orchestration-in-rust-549b"&gt;Orchestration in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rocket-tutorial-02-minimalist-api-2kl6"&gt;Rocket Tutorial 02: Minimalist API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/martichou/get-simple-io-stats-using-rust-throughput-47m4"&gt;Get simple IO stats using Rust (throughput, ...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/elshize/type-safe-discrete-simulation-in-rust-3n7d"&gt;Type-Safe Discrete Simulation in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/krowemoh/series/9524"&gt;A Gemini Client in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/est31/8d0465997ea920c5ba917cbbf80a822d"&gt;Postfix macros in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/processing-a-series-of-items-with-iterators-in-rust/"&gt;Processing a Series of Items with Iterators in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/compilation-of-active-directory-logs-using-rust/"&gt;Compilation of Active Directory Logs Using Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[FR] &lt;a href="https://jimskapt.github.io/rust-book-fr/"&gt;The Rust Programming Language (translated in French)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.guillaume-gomez.fr/articles/2020-11-11+New+doc+comment+handling+in+rustdoc"&gt;New doc comment handling in rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitfieldconsulting.com/golang/rust-vs-go"&gt;Rust vs Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pretzelhammer/rust-blog/blob/master/posts/too-many-brainfuck-compilers.md"&gt;Learn Assembly by Writing Entirely Too Many Brainf*ck Compilers in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/est31/postfix-macros"&gt;postfix-macros&lt;/a&gt;, a clever hack to allow postfix macros in stable Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/841"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/time-rs/time/issues/293"&gt;time-rs: The call to &lt;code&gt;localtime_r&lt;/code&gt; may be unsound&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;333 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-11-02..2020-11-09"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78748"&gt;Implement destructuring assignment for tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78638"&gt;reverse binding order in matches to allow the subbinding of copyable fields in bindings after &lt;code&gt;@&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78167"&gt;Fix unreachable sub-branch detection in or-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78607"&gt;Transform post order walk to an iterative approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78201"&gt;Compile rustc crates with the initial-exec TLS model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78811"&gt;Make some &lt;code&gt;std::io&lt;/code&gt; functions &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76227"&gt;Stabilize &lt;code&gt;Poll::is_ready&lt;/code&gt; and &lt;code&gt;is_pending&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76097"&gt;Stabilize &lt;code&gt;hint::spin_loop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78735"&gt;Simplify the implementation of &lt;code&gt;Cell::get_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2252"&gt;futures: Add &lt;code&gt;StreamExt::cycle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2245"&gt;futures: Add &lt;code&gt;TryStreamExt::try_buffered&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8823"&gt;cargo: Avoid some extra downloads with new feature resolver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-10.md"&gt;2020-11-10&lt;/a&gt;:
1 Regression, 2 Improvements, 2 mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A mixed week with improvements still outweighing regressions. Perhaps the biggest highlight was the move to compiling rustc crates &lt;a href="https://github.com/rust-lang/rust/pull/78201"&gt;with the initial-exec TLS model&lt;/a&gt; which results in fewer calls to &lt;code&gt;_tls_get_addr&lt;/code&gt; and thus faster compile times.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-10.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77872"&gt;Stabilize clamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/74860"&gt;[android] Add support for android's file descriptor ownership tagging to libstd.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/75180"&gt;Implement Error for &amp;amp;(impl Error)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72209"&gt;Add checking for no_mangle to unsafe_code lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/64260"&gt;Tracking issue for methods converting &lt;code&gt;bool&lt;/code&gt; to &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3013"&gt;User/ardavis/checked cfg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3016"&gt;add const-ub RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3014"&gt;Adds &lt;code&gt;must_not_await_lint&lt;/code&gt; RFC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcpbqb/"&gt;November 12, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/273813659"&gt;November 12, Washington, DC, US - Mid-month Rustful—How oso built a runtime reflection system for Rust - Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/273757338/"&gt;November 12, Lehi, UT, US - WASM, Rust, and the State of Async/Await - Utah Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsybcpbxb/"&gt;November 18, Vancouver, BC, CA - Rust Study/Hack/Hang-out night - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcpbgc/"&gt;November 24, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/BD023B950B"&gt;2 Backend engineers, Core Banking at Truelayer (Milan, IT)&lt;/a&gt;, &lt;a href="https://twitter.com/algo_luca/status/1324763252560191490"&gt;also contact Luca Palmieri&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;There are no bad programmers, only insufficiently advanced compilers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://twitter.com/ekuber/status/1319476290395664384"&gt;Esteban Kuber on twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/957"&gt;Nixon Enraght-Moony&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/jslo80/this_week_in_rust_364/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 11 Nov 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-11-11:blog/2020/11/11/this-week-in-rust-364/</guid></item><item><title>This Week in Rust 363</title><link>https://this-week-in-rust.org/blog/2020/11/04/this-week-in-rust-363/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No Rust Blog posts this week.&lt;/p&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/job17k/rib_newsletter_17_trick_or_trait/"&gt;RiB Newsletter #17 - Trick? Or Trait?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dimforge.com/blog/2020/11/01/this-month-in-dimforge/"&gt;This month in Dimforge #2 (October 2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/jkv5xu/these_weeks_in_actix_sepoct_20/"&gt;These Weeks in Actix | Sep-Oct '20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/11/02/changelog-49.html"&gt;Rust-Analyzer Changelog #49&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/11/02/changelog-134.html"&gt;IntelliJ Rust Changelog #134&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/clion/2020/10/intellij-rust-new-functionality-for-cargo-features/"&gt;IntelliJ Rust: New Functionality for Cargo Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.schichler.dev/semantic-ffi-bindings-in-rust-reactivating-the-borrow-checker-ckgxtoxo8057pwrs174dqhcsi"&gt;Semantic FFI Bindings in Rust - Reactivating the Borrow Checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ngr.yt/blog/2020-11-03-exception-safety-in-rust-using-transient-droppers-to-prevent-memory-leaks.html"&gt;Exception safety in Rust: using transient droppers to prevent memory leaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://christine.website/blog/wasmcloud-progress-domains-2020-10-31"&gt;Wasmcloud Progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tempesta-tech.com/blog/fast-programming-languages-c-c++-rust-assembly"&gt;Fast programming languages: C, C++, Rust, and Assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/rust-as-productive-as-kotlin/"&gt;For Complex Applications, Rust is as Productive as Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/frankmcsherry/blog/blob/master/posts/2020-06-09.md"&gt;Rust for Data-Intensive Computation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.tonari.no/rust-simple-hardware-project"&gt;Using Rust for a simple hardware project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gingerbill.org/article/2020/06/21/the-ownership-semantics-flaw/"&gt;The Fatal Flaw of Ownership Semantics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bjorn3.github.io/2020/11/01/fixing-rustc-bootstrap-with-cg_clif.html"&gt;Fixing bootstrap of rustc using cg_clif&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.turbo.fish/cargo-features/"&gt;Advanced Cargo [features] Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alastairreid.github.io/rust-testability/"&gt;Rust Design-for-Testability: a survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://levpaul.com/posts/rust-lesson-3-and-4/"&gt;Rust from a Gopher - Lessons 3 &amp;amp; 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rocket-tutorial-01-basics-4ph9"&gt;Rocket Tutorial 01: Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rocket-tutorial-01-basics-4ph9"&gt;Building an AWS Lambda extension with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/krowemoh/gopher-client-in-rust-02-core-client-anh"&gt;A Gopher Client in Rust - 02 Core Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/krowemoh/gopher-client-in-rust-03-extras-4o4d"&gt;A Gopher Client in Rust - 03 Bookmarks and Full Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexliesenfeld/rust-http-testing-with-httpmock-2mi0"&gt;Rust HTTP Testing with httpmock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.worthe-it.co.za/blog/2020-10-31-newtype-pattern-in-rust.html"&gt;The Newtype Pattern in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.therocode.net/2020/10/a-guide-to-rust-sdl2-emscripten"&gt;How to: Rust + SDL2 + OpenGL on the web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://christine.website/blog/minicompiler-lexing-2020-10-29"&gt;Minicompiler: Lexing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2020-11-01-zero-to-production-5-how-to-deploy-a-rust-application/"&gt;Continuous Deployment For Rust Applications (Zero To Production In Rust #5)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DE] &lt;a href="https://rust-lang-de.github.io/rustbook-de/"&gt;The Rust Programming Language (translated in German)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/FaSoPcyOqPE"&gt;(Live Coding) Audio adventures in Rust: UI with WASM, Yew, and WebView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Yb-QR3Vm3sk"&gt;How to build a multiplayer game - RustFest.Global Pre-Event (Video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/DxzIH1RrIxE"&gt;Current state of wasm with rust using an example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/MSi3E5Z8oRw"&gt;Understanding Rust Lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/osohq/oso"&gt;oso, an open-source policy engine for authorization written in Rust&lt;/a&gt;, released &lt;a href="https://docs.rs/oso/0.7.1/oso/"&gt;version 0.7.1 of their authorization library for Rust projects!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arrow.apache.org/blog/2020/10/27/rust-2.0.0-release/"&gt;Apache Arrow 2.0.0 Rust Highlights&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.wezm.net/v2/posts/2020/100-rust-binaries/"&gt;One Hundred Rust Binaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.darklang.com/why-dark-didnt-choose-rust/"&gt;Why Dark didn't choose Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/joj5e0/rust_gamedev_ecosystem_survey/"&gt;Rust GameDev Ecosystem Survey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/sonos/tract"&gt;tract&lt;/a&gt; from Sonos, a neural network inference library, written purely in Rust for models in ONNX, NNEF and TF formats.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/837"&gt;Benjamin Minixhofer&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;374 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-10-26..2020-11-02"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77975"&gt;add cg_clif as optional codegen backend&lt;/a&gt; (Woohoo!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78423"&gt;rustc_span: improve bounds checks in byte_pos_to_line_and_col&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78460"&gt;adjust turbofish help message for const generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75020"&gt;avoid complex diagnostics in snippets which contain newlines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78297"&gt;suggest calling await on method call and field access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77317"&gt;fix control flow check for breaking with diverging values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75671"&gt;uplift &lt;code&gt;temporary-cstring-as-ptr&lt;/code&gt; lint from clippy into rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78365"&gt;check object safety of generic constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/647"&gt;chalk: make max goal size for recursive solver configurable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78323"&gt;coherence check perf: iterate over the smaller list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75728"&gt;optimise align_offset for stride=1 further&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78491"&gt;inline &lt;code&gt;NonZeroN::from(n)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78621"&gt;inline Default::default() for atomics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78073"&gt;inline some functions in core::str&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78499"&gt;prevent &lt;code&gt;String::retain&lt;/code&gt; from creating non-utf8 strings when abusing panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78637"&gt;add &lt;code&gt;fetch_update&lt;/code&gt; methods to &lt;code&gt;AtomicBool&lt;/code&gt; and &lt;code&gt;AtomicPtr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76635"&gt;add &lt;code&gt;[T]::as_chunks&lt;/code&gt;(&lt;code&gt;_mut&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78446"&gt;fix &lt;code&gt;Box::into_unique&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/209"&gt;hashbrown: better branch likelyness on stable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2169"&gt;futures: add &lt;code&gt;WeakShared&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8814"&gt;cargo: add a future-compatibility warning on allowed feature name characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8799"&gt;cargo: new namespaced features implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-03.md"&gt;2020-11-03&lt;/a&gt;:
0 Regressions, 5 Improvements, 0 mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A number of improvements on various benchmarks. The most notable news this week
in compiler performance is the progress on instruction metric collection on a
per-query level; see &lt;a href="https://github.com/rust-lang/measureme/pull/143"&gt;measureme#143&lt;/a&gt; for the latest.&lt;/p&gt;
&lt;p&gt;Otherwise, this week was an excellent one for performance (though mostly on
stress tests and auto-generated test cases rather than commonly seen code).&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-03.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2048"&gt;RFC: Target extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78068"&gt;consider assignments of union field of ManuallyDrop type safe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/77841"&gt;repr(transparent) on generic type skips "exactly one non-zero-sized field" check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77691"&gt;Rename/Deprecate LayoutErr in favor of LayoutError&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/73394"&gt;Tracking Issue for raw_ref_macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72209"&gt;Add checking for no_mangle to unsafe_code lint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3013"&gt;Checking conditional compilation at compile time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustfest.global/"&gt;November 7 &amp;amp; 8, Global, RustFest Global&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrybcpbnb/"&gt;November 10, Seattle, WA, US - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/273949461/"&gt;November 10, Saarbücken, Saarland, DE - Meetup: 5u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcpbqb/"&gt;November 12, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/273813659"&gt;November 12, Washington, DC, US - Mid-month Rustful—How oso built a runtime reflection system for Rust - Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/273757338/"&gt;November 12, Lehi, UT, US - WASM, Rust, and the State of Async/Await - Utah Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/wayve/jobs/4881949002"&gt;Software Engineer (IoT/Robotics) at Wayve (London, UK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/chainsafe/Blockchain-Developer-Rust-0d577a2636b84511a5d4efc69454585d"&gt;Software Engineer at ChainSafe Systems (Toronto, Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://immunant.com/jobs"&gt;Senior Software Engineer - Rust at Immunant (Remote US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust at Kraken (Remote NA, SA, EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2442ee5c-56b6-4a73-a477-8cdda2b218d5"&gt;Rust Engineer, Desktop GUI - Cryptowatch at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4c864c8f-bde6-443d-b521-dd90df0e9105"&gt;Senior Backend Engineer - Rust at Kraken (Remote NA, SA, EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Full Stack Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4485f672-dc5f-4e49-a10b-2b0399e28a8d"&gt;Software Engineer - Trading Technology (Rust) at Kraken (Remote NA, SA, EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Like other languages Rust does have footguns. The difference is that we keep ours locked up in the unsafe.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://twitter.com/TedMielczarek/status/1322618223980892161"&gt;Ted Mielczarek on twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/956"&gt;Nikolai Vazquez&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/joxy7n/this_week_in_rust_363/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 04 Nov 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-11-04:blog/2020/11/04/this-week-in-rust-363/</guid></item></channel></rss>