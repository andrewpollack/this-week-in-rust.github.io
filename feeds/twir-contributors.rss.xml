<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/feeds/twir-contributors.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 17 Feb 2021 00:00:00 -0500</lastBuildDate><item><title>This Week in Rust 378</title><link>https://this-week-in-rust.org/blog/2021/02/17/this-week-in-rust-378/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html"&gt;Announcing Rust 1.50.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/02/15/changelog-141.html"&gt;IntelliJ Rust changelog #141&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/02/15/changelog-64.html"&gt;rust-analyzer changelog #64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://relm.antoyo.xyz/big-release/"&gt;A big release for relm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.liw.fi/posts/2021/02/14/xdg-base-dirs-rust/"&gt;The XDG base directory specification and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://state.smerity.com/smerity/state/01EYB6YQ5T2KFSC1PF55A3B8DG"&gt;Zero dependency images (of chaos) in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radekvit.medium.com/examples-of-declarative-style-in-rust-9fae89c0fea"&gt;Examples of declarative style in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/PoignardAzur/8038f5ed7dc8d00e3e9472aca57fb35c"&gt;Rust 2030 Christmas list: Better cfg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2021/02/14/for-the-love-of-macros.html"&gt;For the Love of Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fly.io/blog/the-tokio-1-x-upgrade/"&gt;The Tokio Upgrade from 0.2 to 1.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cfallin.org/blog/2021/01/22/cranelift-isel-2/"&gt;Cranelift, Part 2: Compiler Efficiency, CFGs, and a Branch Peephole Optimizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://anchor.fm/building-with-rust/episodes/Building-with-Rust-Luca-Palmieri-on-TrueLayer-and-Zero-to-Production-eq9rqs"&gt;Building with Rust: Luca Palmieri on TrueLayer and Zero to Production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://jamesmunns.com/podcast/008-yosh/"&gt;Chats with James 008 - Yoshua Wuyts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=C7BTIdkWreI&amp;amp;feature=youtu.be"&gt;Rust 1.50 Patch Review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ryhl.io/blog/actors-with-tokio/"&gt;Actors with Tokio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/tenable-techblog/building-a-microservice-with-rust-23a4de6e5e14"&gt;Building a microservice with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thatgeoguy.ca/blog/2021/02/15/rust-is-cool-enums/"&gt;Rust is cool - Enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jbarszczewski/rust-cli-game-of-life-tutorial-part-2-16j3"&gt;Rust CLI Game of Life tutorial - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jldec/calling-rust-from-a-cloudflare-worker-17b4"&gt;Calling Rust from a Cloudflare Worker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/vinted/validating-json-input-in-rust-web-services-5gp0"&gt;Validating JSON input with Rust web services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/joaoh82/what-would-sqlite-look-like-if-written-in-rust-part-1-2np4"&gt;What would SQLite look like if written in Rust? -- Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustyyato.github.io/type/system,type/families/2021/02/15/Type-Families-1.html"&gt;Generalizing over Generics in Rust (Part 1) - AKA Higher Kinded Types in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.turbo.fish/proc-macro-basics/"&gt;Procedural Macros: The Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogg.bekk.no/building-an-openstreetmap-app-in-rust-part-ii-933ca8d0c48a"&gt;Building an OpenStreetMap app in Rust, Part II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.novatec-gmbh.de/en/blog/look-ma-no-js-compiling-rust-to-webassembly/"&gt;Look, Ma! No JS! - Compiling Rust to WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dranikpg/simple-rays"&gt;Simple ray tracer written in Rust from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/short-circuit-sum-rust/"&gt;Short Circuit Sum in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/skeleton-and-principles-for-a-maintainable-test-suite/"&gt;Zero to Production in Rust, Part 7.1 - Skeleton And Principles For A Maintainable Test Suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/CCSS-Devclub-Rust-Workshop-dccad2c1119d4af7bf78f3d3b4797603"&gt;CCSS Devclub Rust Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/UEAg4qCALb8"&gt;Graphs in Rust: Let's Build a Maze!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Synerise/cleora"&gt;Cleora - an ultra fast graph embedding tool written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vertexclique.com/cost-based-query-optimizations/"&gt;Cost-based query optimizations in multithreaded environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lonami.dev/blog/woce-2/"&gt;Writing our own Cheat Engine: Exact Value scanning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/the-polyglot-programmer/what-would-sqlite-look-like-if-written-in-rust-part-1-4a84196c217d"&gt;What would SQLite look like if written in Rust? — Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;Despite having no nominations, this week's crate is &lt;a href="https://crates.io/crates/firestorm"&gt;firestorm&lt;/a&gt;, a fast intrusive flamegraph profiling library.&lt;/p&gt;
&lt;p&gt;llogiq is pretty pleased anyway with the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=69644"&gt;Fuchsia - netstack3: Support stable interface IDs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;340 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-02-01..2021-02-08"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81876"&gt;parser: fix panic in 'const impl' recovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81384"&gt;fix derived &lt;code&gt;PartialOrd&lt;/code&gt; operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81132"&gt;borrowck: refactor visited map to a bitset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81466"&gt;add suggest &lt;code&gt;mut&lt;/code&gt; method for loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1703"&gt;miri: Remove non-power-of-two SIMD vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/685"&gt;chalk: add Movability to Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81744"&gt;try &lt;code&gt;fast_reject::simplify_type&lt;/code&gt; in coherence before doing full check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81995"&gt;fix suggestion to introduce explicit lifetime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81990"&gt;make suggestion of changing mutability of arguments broader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81126"&gt;optimize &lt;code&gt;Vec::retain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81687"&gt;make &lt;code&gt;Vec::split_at_spare_mut&lt;/code&gt; public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81486"&gt;&lt;code&gt;BTreeMap&lt;/code&gt;: disentangle &lt;code&gt;Drop&lt;/code&gt; implementation from &lt;code&gt;IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81494"&gt;initialize &lt;code&gt;BTree&lt;/code&gt; nodes directly in the heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81012"&gt;stabilize the &lt;code&gt;partition_point&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80438"&gt;add &lt;code&gt;Box::into_inner&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdsimd/pull/62"&gt;stdsimd: add SIMD shuffles for &lt;code&gt;SimdType&lt;/code&gt;{&lt;code&gt;2&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;8&lt;/code&gt;, &lt;code&gt;16&lt;/code&gt;, &lt;code&gt;32&lt;/code&gt;, &lt;code&gt;64&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdsimd/pull/61"&gt;stdsimd: add bitmasks and simplify mask API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81356"&gt;libtest: allow multiple filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9133"&gt;cargo: change git dependencies to use &lt;code&gt;HEAD&lt;/code&gt; by default &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9169"&gt;cargo: emit warning on env variable case mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/3271"&gt;crates.io: add &lt;code&gt;COM0&lt;/code&gt; and &lt;code&gt;LPT0&lt;/code&gt; to the list of reserved crate names&lt;/a&gt; (Windows users rejoice)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6657"&gt;clippy: fix suggestions that need parens in &lt;code&gt;from_iter_instead_of_collect&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6700"&gt;clippy: fix &lt;code&gt;missing_panics_doc&lt;/code&gt; warning on &lt;code&gt;unreachable!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6697"&gt;clippy: fix &lt;code&gt;vec_init_then_push&lt;/code&gt; false positives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6696"&gt;clippy: downgrade &lt;code&gt;trivial_regex&lt;/code&gt; to nursery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6695"&gt;clippy: new lint: &lt;code&gt;bytes_nth&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;A mostly quiet week, though with an excellent improvement in bootstrap times, shaving off a couple percent off the total and 10% off of rustc_middle due to changes in the code being compiled.&lt;/p&gt;
&lt;p&gt;Triage done by @simulacrum. Revision range: &lt;a href="https://perf.rust-lang.org/?start=ea098255f74923d69ea234ee526df6b9cecc3b9b&amp;amp;end=f1c47c79fe8438ed241630f885797eebef3a6cab&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;ea09825..f1c47c7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 2 Improvements, 1 Mixed&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3014"&gt;Adds &lt;code&gt;must_not_suspend_lint&lt;/code&gt; RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3013"&gt;RFC: Checking conditional compilation at compile time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2944"&gt;RFC: add the Freeze trait to libcore/libstd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2708"&gt;Generic Pointer to Field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82078"&gt;Make char and u8 methods const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81514"&gt;Demote x86_64-rumprun-netbsd target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80595"&gt;&lt;code&gt;impl PartialEq&amp;lt;Punct&amp;gt; for char&lt;/code&gt;; symmetry for #78636&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80527"&gt;Make rustdoc lints a tool lint instead of built-in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79208"&gt;Stabilize &lt;code&gt;unsafe_op_in_unsafe_fn&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78880"&gt;Add &lt;code&gt;NotSupported&lt;/code&gt; to &lt;code&gt;std::io::ErrorKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78429"&gt;[librustdoc] Only split lang string on &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;&lt;/code&gt;, and &lt;code&gt;\t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/76894"&gt;Lint for unused borrows as part of &lt;code&gt;UNUSED_MUST_USE&lt;/code&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/74773"&gt;Tracking Issue for str_split_once&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/70516"&gt;Tracking Issue for ASCII methods on OsStr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/62633"&gt;Tracking issue for &lt;code&gt;Option::expect_none(msg)&lt;/code&gt; and &lt;code&gt;unwrap_none()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3074"&gt;Add named path bases to cargo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccdbxb/"&gt;February 18, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccdbfc/"&gt;February 23, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/276334977/"&gt;March 2, Dublin, IE - March Remote Meetup - Luca Palmieri - Rust Dublin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/276401469/"&gt;March 9, Saarbücken, Saarland, DE - Meetup: 9u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zfnd.org/blog/opening-core-engineer/"&gt;Rust Core Engineer at The Zcash Foundation (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zfnd.org/blog/open-position-cryptography-engineer/"&gt;Rust Cryptography Engineer at The Zcash Foundation (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/fuellabs/13b01903-490a-4497-b778-35434f4188cf"&gt;Senior Software Engineer [Rust] at Fuel (Toronto, ON, CA or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote) at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/5ec9958a-529c-4bae-89b3-0d1a104cbd81"&gt;Rust API SDET at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2442ee5c-56b6-4a73-a477-8cdda2b218d5"&gt;Rust Engineer, Desktop GUI - Cryptowatch at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4c864c8f-bde6-443d-b521-dd90df0e9105"&gt;Senior Backend Engineer - Rust - Core Backend at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Banking Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/1c6b290f-e430-430d-9b40-a258d07686b0"&gt;Site Reliability Engineer - Rust Core Backend at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4485f672-dc5f-4e49-a10b-2b0399e28a8d"&gt;Software Engineer - Trading Technology (Rust) at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team/Head-of-Developer-Relations/1e365b6a-9df0-5eec-9762-a4b25f913d23"&gt;Head of Developer Relations at Ockam (US, Mountain or Pacific Timezones)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://loanpass.io/careerPage.html"&gt;Lead Software Developer, Rust at BlockGen Corp (US &amp;amp; Canada remote only)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Have you seen someone juggle several items with one hand? That's the point of async. Blocking (non-async) it like writing - it requires constant work from each hand. If you want to write twice as fast you'll need two hands and write with both at the same time. That's multithreading. If you juggle, the moment the item leaves your hand and is in the air, you have it left with nothing to do. That's similar to network IO - you make a request and are just waiting for the server to respond. You could be doing something in the meantime, like catching another item and throwing it back up again. That's what "await" does - it says I threw and item into the air, so I want my current thread / hand to switch over to catch something else now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/lia5fu/why_async_rust/gn2q25e/"&gt;/u/OS6aDohpegavod4 on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1002"&gt;Jacob Pratt&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 17 Feb 2021 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2021-02-17:blog/2021/02/17/this-week-in-rust-378/</guid></item><item><title>This Week in Rust 377</title><link>https://this-week-in-rust.org/blog/2021/02/10/this-week-in-rust-377/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-02-08-hello-world/"&gt;Hello World!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/02/09/1.50.0-prerelease.html"&gt;1.50.0 pre-release testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-018/"&gt;This Month in Rust GameDev #18 - January 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2021-01/"&gt;This Month in Rust OSDev (January 2021)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/02/08/changelog-63.html"&gt;rust-analyzer Changelog #63&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yrashk.medium.com/launching-wasm-rs-a-collection-of-crates-a-community-4344d2ba75b3"&gt;Launching wasm.rs: a collection of crates, a community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.abetterinternet.org/post/memory-safe-tls-apache/"&gt;A Memory Safe TLS Module for the Apache HTTP Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lg0a7b/benchmarking_tokio_tasks_and_goroutines/"&gt;Benchmarking Tokio Tasks and Goroutines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2021/02/10/a-better-profiler.html"&gt;A Better Rust Profiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nyanpasu64.github.io/blog/an-unsafe-tour-of-rust-s-send-and-sync/"&gt;An unsafe tour of Rust's Send and Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nical.github.io/posts/etagere.html"&gt;Improving texture atlas allocation in WebRender&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msarmi9.github.io/posts/async-rust/"&gt;Async Rust: Futures, Tasks, Wakers; Oh My!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mmhaskell.com/rust"&gt;Rust for Haskell Programmers!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jbarszczewski/rust-cli-game-of-life-tutorial-part-1-57pp"&gt;Rust CLI Game of Life tutorial - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msirringhaus.github.io/Where-everything-went-wrong/"&gt;Where everything went wrong...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/oakes/4af1023b6c5162c6f8f0"&gt;Rust for Clojurists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ES] &lt;a href="https://blog.adrianistan.eu/formato-ron-rusty-object-notation"&gt;El formato RON: Rusty Object Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/Lh262L63asA"&gt;1Password Developer Fireside Chat: Introduction to Rust Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/tM2r9HD4ivQ"&gt;Dynamic vs Static Dispatch in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/congratulations-rustaceans-on-the-creation-of-the-rust-foundation/"&gt;Congratulations, Rustaceans, on the creation of the Rust Foundation!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudblogs.microsoft.com/opensource/2021/02/08/microsoft-joins-rust-foundation/"&gt;Microsoft joins Rust Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2021/02/google-joins-rust-foundation.html"&gt;Google joins the Rust Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mozilla.org/blog/2021/02/08/mozilla-welcomes-the-rust-foundation/"&gt;Mozilla Welcomes the Rust Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trusted-programming.github.io/2021-02-07/index.html"&gt;Trusted Programming - Our Rust Mission at Huawei&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lgccv5/ysk_vscodes_most_recent_update_fixed_a_quirk_in/"&gt;YSK: VSCode's most recent update fixed a quirk in Rust workflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daniel.haxx.se/blog/2021/02/09/curl-supports-rustls/"&gt;curl supports rustls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/artichoke/artichoke/blob/21045d8f1086c669dd428a3b5bdcc4a58e13acec/ARCHITECTURE.md"&gt;Architecting Artichoke Ruby: A Modular Ruby implementation written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/h-LoPr5553o"&gt;Interview with Ashley Williams, Rust Foundation Interim Executive Director (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/thread_io"&gt;threadIO&lt;/a&gt;, a crate that makes disk IO in a background thread easy and elegant.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/881"&gt;David Andersen&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;Fuchsia has several issues available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=34979"&gt;[netstack3] ARP: Add tests for ARP on a broadcast medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=48364"&gt;[netstack3] Migrate all transport protocols to trait associated types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=47454"&gt;[netstack3] Split IpProto into Ipv4Proto and Ipv6NextHeader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=47008"&gt;[net-types] Add common prefix length calculation for IP addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=21432"&gt;[netstack3] Make sure ICMP messages are not sent in response to non-initial fragment packets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=69355"&gt;[internet-checksum] Clarify documentation around odd byte lengths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.fuchsia.dev/p/fuchsia/issues/detail?id=50830"&gt;[netstack3] IP fragment reassembly vulnerable to FragmentSmack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;384 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-02-01..2021-02-08"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81455"&gt;add AArch64 big-endian and ILP32 targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81608"&gt;improve handling of spans around macro result parse errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80632"&gt;identify unreachable subpatterns more reliably&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80092"&gt;fix issues with move closures and mutability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81577"&gt;const_evaluatable: consider sub-expressions to be evaluatable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81556"&gt;introduce future-compatibility warning for forbidden lint groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81405"&gt;&lt;code&gt;Box&lt;/code&gt; the biggest &lt;code&gt;ast::ItemKind&lt;/code&gt; variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81779"&gt;improve error message for disallowed ptr-to-int casts in const eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81737"&gt;typeck: emit structured suggestions for tuple struct syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81735"&gt;faster few span methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81647"&gt;fix bug with &lt;code&gt;assert!()&lt;/code&gt; calling the wrong edition of &lt;code&gt;panic!()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81730"&gt;make &lt;code&gt;Allocator&lt;/code&gt; object-safe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81022"&gt;add Frames Iterator for Backtrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79015"&gt;add &lt;code&gt;Vec::extend_from_within&lt;/code&gt; method under &lt;code&gt;vec_extend_from_within&lt;/code&gt; feature gate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81610"&gt;&lt;code&gt;BTreeMap&lt;/code&gt;: make &lt;code&gt;Ord&lt;/code&gt; bound explicit, compile-test its absence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81599"&gt;implement &lt;code&gt;TrustedLen&lt;/code&gt; for &lt;code&gt;Fuse&amp;lt;I: TrustedLen&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79805"&gt;rename &lt;code&gt;Iterator::fold_first&lt;/code&gt; to &lt;code&gt;reduce&lt;/code&gt; and stabilize it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74304"&gt;stabilize the &lt;code&gt;Wake&lt;/code&gt; trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80011"&gt;stabilize &lt;code&gt;peekable_next_if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81745"&gt;stabilize poison API of &lt;code&gt;Once&lt;/code&gt;, rename &lt;code&gt;poisoned()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80962"&gt;stabilize remaining integer methods as &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2332"&gt;futures-rs: avoid &lt;code&gt;once_cell&lt;/code&gt; in static wakers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/235"&gt;hashbrown: implement &lt;code&gt;From&amp;lt;HashMap&amp;lt;T, ()&amp;gt;&amp;gt;&lt;/code&gt; for &lt;code&gt;HashSet&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9142"&gt;cargo: fix panic with doc collision orphan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9122"&gt;cargo: fix env/cfg set for &lt;code&gt;cargo test&lt;/code&gt; and &lt;code&gt;cargo run&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81675"&gt;make rustdoc respect &lt;code&gt;--error-format short&lt;/code&gt; in doctests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6682"&gt;clippy: fix &lt;code&gt;let_underscore_drop&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6659"&gt;clippy: fix &lt;code&gt;let_and_return&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6661"&gt;clippy: don't trigger &lt;code&gt;exhaustive_structs&lt;/code&gt; for structs with private fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6523"&gt;clippy: add new lint &lt;code&gt;missing_panics_doc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81817"&gt;compiletest: Add option to emit compiler stderr per bitwidth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No triage report this week&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3037"&gt;Rust 2021 Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2996"&gt;adds async stream rfc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2944"&gt;RFC: add the Freeze trait to libcore/libstd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2708"&gt;Generic Pointer to Field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81415"&gt;Allow leading | anywhere we allow or-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80595"&gt;&lt;code&gt;impl PartialEq&amp;lt;Punct&amp;gt; for char&lt;/code&gt;; symmetry for #78636&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80553"&gt;Add an impl of Error on &lt;code&gt;Arc&amp;lt;impl Error&amp;gt;&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78880"&gt;Add &lt;code&gt;NotSupported&lt;/code&gt; to &lt;code&gt;std::io::ErrorKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/62633"&gt;Tracking issue for &lt;code&gt;Option::expect_none(msg)&lt;/code&gt; and &lt;code&gt;unwrap_none()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3074"&gt;Add named path bases to cargo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/275569653"&gt;February 11, Washington, DC, US - Let's learn to Rust nice with others - Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/276272745/"&gt;February 11, San Diego, CA, US - February 2021 Tele-Meetup - San Diego Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsyccdbwb/"&gt;February 17, Vancouver, BC, CA - Rust Study/Hack/Hang-out night - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccdbxb/"&gt;February 18, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccdbfc/"&gt;February 23, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgryccdbpb/"&gt;February 11, Columbus, OH, US - Monthly Meeting - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/D07759DAF6/"&gt;Rust Backend Engineer at TrueLayer (London, UK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/F13E839E3B/"&gt;Rust Backend Engineer at TrueLayer (Milan, Italy)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/3B78A6F6F4/"&gt;Rust Technical Lead at TrueLayer (London, UK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/8D8D56C09E/"&gt;Rust Technical Lead at TrueLayer (Milan, Italy)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer (Rust &amp;amp; C++) at NZXT (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angel.co/company/jetasap/jobs/1178965-rust-software-engineer"&gt;Rust Software Engineer at JetASAP (Remote US or CA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/5ec9958a-529c-4bae-89b3-0d1a104cbd81"&gt;Rust API SDET at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2442ee5c-56b6-4a73-a477-8cdda2b218d5"&gt;Rust Engineer, Desktop GUI - Cryptowatch at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Banking Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4485f672-dc5f-4e49-a10b-2b0399e28a8d"&gt;Software Engineer - Trading Technology (Rust) at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The main theme of Rust &lt;em&gt;is not&lt;/em&gt; systems programming, speed, or memory safety - it's moving runtime problems to compile time. Everything else is incidental. This is an invaluable quality of any language, and is something Rust greatly excels at.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/leki5o/advantages_of_building_a_crud_web_application_in/gmfq2w9/"&gt;/u/OS6aDohpegavod4 on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1001"&gt;Chris&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lhe7yi/this_week_in_rust_377/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 10 Feb 2021 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2021-02-10:blog/2021/02/10/this-week-in-rust-377/</guid></item><item><title>This Week in Rust 376</title><link>https://this-week-in-rust.org/blog/2021/02/03/this-week-in-rust-376/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No official blog posts this week.&lt;/p&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lc3tir/rib_newsletter_20_old_fashioned_chill/"&gt;RiB Newsletter #20 - Old fashioned chill&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/02/01/changelog-62.html"&gt;rust-analyzer Changelog #62&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/02/01/changelog-140.html"&gt;IntelliJ Rust Changelog #140&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ericsink.com/entries/llama_rust_013.html"&gt;Llama Rust SDK preview 0.1.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2021/02/02/release-0.7.html"&gt;Gfx-rs Release of v0.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evrone.com/datanymizer"&gt;Open-sourcing Datanymizer: in-flight template-driven data anonymization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flott-motion.org/news/announcing-step-dir/"&gt;Announcing Step/Dir - Universal Stepper Motor Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flott-motion.org/news/announcing-ramp-maker/"&gt;Announcing RampMaker - Stepper Motor Acceleration Ramp Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/deislabs/krustlet/releases/tag/v0.6.0"&gt;Krustlet v0.6.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://robert.kra.hn/posts/2021-02-03_is-rust-fp/"&gt;Is Rust a Functional Programming Language?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cglab.ca/~abeinges/blah/rust-btree-case/"&gt;Rust Collections Case Study: BTreeMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2021/01/31/saving-some-allocations.html"&gt;Saving some allocations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.llvm.org/posts/2021-01-05-stack-clash-protection/"&gt;Bringing Stack Clash Protection to Clang/X86 - the Open Source Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deislabs.io/posts/introducing-krator/"&gt;Announcing Krator: Build Kubernetes Operators with state machines.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://depth-first.com/articles/2020/06/22/returning-rust-iterators/"&gt;Returning Rust Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.possiblerust.com/guide/how-to-read-rust-functions-part-1"&gt;How to Read Rust Functions, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventures.michaelfbryan.com/posts/parsing-pdfs-in-rust/?utm_source=reddit&amp;amp;utm_medium=social&amp;amp;utm_campaign=parsing-pdf-documents"&gt;Parsing PDF Documents in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://robert.kra.hn/posts/2021-02-01_cross-compile-rust/"&gt;Building and deploying Rust utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pwy.io/en/posts/learning-to-fly-pt2/"&gt;Learning to Fly: Let's create a simulation in Rust! (pt 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lazq0i/rust_made_my_open_source_project_1000x_faster/"&gt;Rust made my open source project 1000x faster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.drogue.io/introducing-drogue-device/"&gt;Introducing Drogue Device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.possiblerust.com/pattern/3-things-to-try-when-you-can-t-make-a-trait-object"&gt;3 Things to Try When You Can't Make A Trait Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radekvit.medium.com/making-concurrency-fearless-with-rust-for-c-developers-d5d8da50a452"&gt;Making concurrency fearless with Rust (for C++ developers)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javierviola.com/post/exploring-websocket-with-rust-and-tide/"&gt;Exploring WebSocket with Rust and Tide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/macros-in-rust-a-tutorial-with-examples/"&gt;Macros in Rust: A tutorial with examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PL] &lt;a href="https://postacnormalna.pl/crabbybird-5-obsluga-kolizji/"&gt;CrabbyBird #5 Obsługa kolizji&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://people.mpi-sws.org/~dreyer/papers/rustbelt/paper.pdf"&gt;RustBelt: Securing the Foundations of the Rust Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://davidtw.co/media/masters_dissertation.pdf"&gt;Polymorphisation: Improving Rust compilation times through intelligent monomorphisation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.abetterinternet.org/post/memory-safe-tls-apache/"&gt;A Memory Safe TLS Module for the Apache HTTP Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jamesmunns.com/podcast/006-bryan/"&gt;Chats with James: 006 - Bryan Cantrill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/blog/51/long-range-networking-with-lora-an-overview"&gt;Long range networking with LoRa: an overview featuring a Rust modem driver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/fancy-regex/fancy-regex"&gt;fancy-regex&lt;/a&gt; a regex implementation using regex for speed and backtracking for fancy features.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/877"&gt;Benjamin Minixhofer&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotenv-linter/dotenv-linter/issues"&gt;dotenv-linter has several good first issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/call-for-organisers/"&gt;Rust Berlin is searching for co-organizers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;323 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-01-25..2021-02-01"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79570"&gt;rustc: stabilize &lt;code&gt;-Zrun-dsymutil&lt;/code&gt; as &lt;code&gt;-Csplit-debuginfo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79591"&gt;point only at generic arguments when they are unexpected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81062"&gt;improve diagnostics for Precise Capture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81422"&gt;account for existing &lt;code&gt;_&lt;/code&gt; field pattern when suggesting &lt;code&gt;..&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81416"&gt;tweak suggestion for missing field in patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81440"&gt;visit only statements in always live locals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81470"&gt;avoid memory allocation when removing dead blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81055"&gt;make hitting the recursion limit in projection non-fatal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81453"&gt;&lt;code&gt;clashing_extern_declarations&lt;/code&gt;: use symbol interning to avoid string alloc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1686"&gt;miri: add random failures to &lt;code&gt;compare_exchange_weak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81335"&gt;trying to &lt;code&gt;Vec::shrink_to&lt;/code&gt; greater than capacity should be no-op&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80851"&gt;implement Rust 2021 panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80279"&gt;implement missing &lt;code&gt;AsMut&amp;lt;str&amp;gt;&lt;/code&gt; for &lt;code&gt;str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78044"&gt;implement &lt;code&gt;io::Seek&lt;/code&gt; for &lt;code&gt;io::Empty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78641"&gt;let &lt;code&gt;io::copy&lt;/code&gt; reuse &lt;code&gt;BufWriter&lt;/code&gt; buffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80945"&gt;add &lt;code&gt;Box::downcast()&lt;/code&gt; for &lt;code&gt;dyn Any + Send + Sync&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80876"&gt;add &lt;code&gt;unwrap_unchecked()&lt;/code&gt; methods for &lt;code&gt;Option&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79023"&gt;add &lt;code&gt;core::stream::Stream&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81048"&gt;stabilize &lt;code&gt;core::slice::fill_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80959"&gt;stabilize &lt;code&gt;unsigned_abs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80886"&gt;stabilize raw ref macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80470"&gt;stabilize by-value &lt;code&gt;[T; N]&lt;/code&gt; iterator &lt;code&gt;core::array::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80053"&gt;stabilise &lt;code&gt;cargo test -- --include-ignored&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79285"&gt;stabilize &lt;code&gt;Arc::&lt;/code&gt;{&lt;code&gt;increment&lt;/code&gt;, &lt;code&gt;decrement&lt;/code&gt;}&lt;code&gt;_strong_count&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70904"&gt;stabilize &lt;code&gt;Seek::stream_position&lt;/code&gt; (feature &lt;code&gt;seek_convenience&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81484"&gt;optimize decimal formatting of 128-bit integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81590"&gt;stabilize int_bits_const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/205"&gt;hashbrown: reduce the amount of llvm IR instantiated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81367"&gt;libtest: wait for test threads to exit after they report completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9108"&gt;cargo: impl warn for locked install without Cargo.lock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81563"&gt;rustdoc: improve docblock readability on small screen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;Another week dominated by rollups, most of which had relatively small changes
with unclear causes embedded. Overall no major changes in performance this week.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: 1483e67addd37d9bd20ba3b4613b678ee9ad4d68..
f6cb45ad01a4518f615926f39801996622f46179&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perf.rust-lang.org/?start=1483e67addd37d9bd20ba3b4613b678ee9ad4d68&amp;amp;end=f6cb45ad01a4518f615926f39801996622f46179&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 1 Improvements, 1 Mixed&lt;/p&gt;
&lt;p&gt;3 of them in rollups&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-02-02.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2580"&gt;RFC: Pointer metadata &amp;amp; VTable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81415"&gt;Allow leading | anywhere we allow or-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81356"&gt;libtest: allow multiple filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80962"&gt;Stabilize remaining integer methods as &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80553"&gt;Add an impl of Error on &lt;code&gt;Arc&amp;lt;impl Error&amp;gt;&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79078"&gt;expand/resolve: Turn &lt;code&gt;#[derive]&lt;/code&gt; into a regular macro attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/73831"&gt;Tracking Issue for &lt;code&gt;partition_point&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3071"&gt;consolidated usage of feature-name header field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3070"&gt;Use more common 'tests' module name over 'test' in examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccdbgb/"&gt;February 4, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Hungary-Meetup/events/275579644/"&gt;February 4, Budapest, HU - Rust meetup S03! - Rust Hungary Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/246726699/"&gt;February 7, Indianapolis, IN, US - Monthly Meetup - Indy.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccdbmb/"&gt;February 9, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/275720207/"&gt;February 9, Saarbücken, Saarland, DE - Meetup: 8u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccdbnb/"&gt;February 10, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgryccdbpb/"&gt;February 11, Columbus, OH, US - Monthly Meeting - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aleph-alpha.de/career/software-engineer-rust"&gt;Rust Software Engineer at Aleph Alpha (Heidelberg, Germany)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/signal/7aa1ff1f-bd43-4359-82c7-8703d8b842d9"&gt;Distributed Systems (Rust) Developer at Signal (Remote US Timezone)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.amd.com/job/Boxborough-3D-Driver-Development-Engineer-Tools-82766-Mass/709592800/"&gt;3D Driver Development Engineer - Rust tooling for GPUs at AMD (Boxborough, MA, USA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer (Rust &amp;amp; C++) at NZXT (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4c864c8f-bde6-443d-b521-dd90df0e9105"&gt;Senior Backend Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/1c6b290f-e430-430d-9b40-a258d07686b0"&gt;Core Backend - Developer Experience Engineer at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/5ec9958a-529c-4bae-89b3-0d1a104cbd81"&gt;Rust API SDET at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4485f672-dc5f-4e49-a10b-2b0399e28a8d"&gt;Software Engineer - Trading Technology (Rust) at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fluence.network/join.html"&gt;Several Positions at Fluence Labs (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;p&gt;This time we had two very good quotes, I could not decide, so here are both:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What I have been learning ... was not Rust in particular, but how to write sound software in general, and that in my opinion is the largest asset that the rust community tough me, through the language and tools that you developed.&lt;/p&gt;
&lt;p&gt;Under this prism, it was really easy for me to justify the step learning curve that Rust offers: I wanted to learn how to write sound software, writing sound software is really hard , and the Rust compiler is a really good teacher.&lt;/p&gt;
&lt;p&gt;[...]&lt;/p&gt;
&lt;p&gt;This ability to identify unsound code transcends Rust's language, and in my opinion is heavily under-represented in most cost-benefit analysis over learning Rust or not.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/thank-you-for-the-teaching-on-how-to-write-sound-software/54714"&gt;Jorge Leitao on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Having a fast language is not enough (ASM), and having a language with strong type guarantees neither (Haskell), and having a language with ease of use and portability also neither (Python/Java). Combine all of them together, and you get the best of all these worlds.&lt;/p&gt;
&lt;p&gt;Rust is not the best option for any coding philosophy, it’s the option that is currently the best at combining all these philosophies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/l7vvo9/writing_a_proposal_to_use_rust_at_work/gl9lfk8"&gt;/u/CalligrapherMinute77 on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/996"&gt;2e71828&lt;/a&gt; and &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/998"&gt;Rusty Shell&lt;/a&gt; for their respective suggestions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/lc8vn8/this_week_in_rust_376/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 03 Feb 2021 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2021-02-03:blog/2021/02/03/this-week-in-rust-376/</guid></item><item><title>This Week in Rust 375</title><link>https://this-week-in-rust.org/blog/2021/01/27/this-week-in-rust-375/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/01/26/ffi-unwind-longjmp.html"&gt;Rust &amp;amp; the case of the disappearing stack frames&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/01/25/changelog-61.html"&gt;rust-analyzer Changelog #61&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.guillaume-gomez.fr/articles/2021-01-22+Performance+improvement+on+front-end+generated+by+rustdoc"&gt;Performance improvement on front-end generated by rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bheisler.github.io/post/criterion-rs-0-3-4/"&gt;Criterion.rs v0.3.4 and Iai 0.1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/showcase/rusty-hermit/"&gt;The RustyHermit Unikernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yossarian.net/2021/01/21/Introducing-usb-ids-rs"&gt;Introducing usb-ids.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⚡️ &lt;a href="https://evrone.com/dotenv-linter-v300"&gt;Dotenv-linter v3.0.0: Overview&lt;/a&gt; 🦀&lt;/li&gt;
&lt;li&gt;🧮 &lt;a href="https://jeffa.io/an_auto-increment_crate_for_rust"&gt;An Auto-Increment Crate for Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.console.dev/porting-a-python-azure-serverless-function-to-rust/"&gt;Porting a serverless chatbot from Python to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/unsafe-rust-how-and-when-not-to-use-it/"&gt;Unsafe Rust: How and when (not) to use it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mark_saward/rust-and-go-department-directories-bla"&gt;Rust and Go department directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deaddabe.fr/blog/2021/01/27/parsing-real-world-data-with-rust-introducing-the-alias_all-attribute-in-serde/"&gt;Parsing real-world data with Rust: introducing the alias_all attribute in Serde&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://edgarluque.com/blog/wrapping-errors-in-rust"&gt;Wrapping Errors in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://laurocaetano.com/programming/2021/01/23/raft-leader-election-rust/"&gt;Implementing Raft's Leader Election in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dev_family/2048-wasm-45gc"&gt;2048 WASM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seanchen1991/implementing-an-lru-cache-in-rust-33pp"&gt;Implementing an LRU Cache in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/buinauskas/json-input-validation-in-warp-i5n"&gt;JSON input validation in Warp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/19/"&gt;Make A Language - Part Nineteen: Code Representations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/20/"&gt;Make A Language - Part Twenty: Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lemmy.ml/post/50089"&gt;How to optimise compilation times with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jibbow.com/posts/criterion-flamegraphs/"&gt;Automatic flamegraphs for benchmarks with Criterion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radim.xyz/project/yewban/"&gt;First time using Yew: A Go game board in just a few lines of Rust.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ES] &lt;a href="https://github.com/irvingfisica/iced_examples/blob/master/Life.md"&gt;El juego de la vida usando Rust y Iced&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.arewelearningyet.com/"&gt;Are we learning yet?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2021/01/21/win32-apis.aspx"&gt;Microsoft Opens Up Old Win32 APIs to C# and Rust, More Languages to Come&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/l4roqk/a_fix_for_the_llvm_noalias_bug_has_landed_in_time/"&gt;A fix for the LLVM noalias bug has landed in time for LLVM 12 branches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hisham.hm/2020/01/20/dynamic-type-systems-arent-even-simpler/"&gt;Dynamic type systems aren't even simpler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/l594zl/everywhere_i_go_i_miss_rusts_enums/"&gt;Everywhere I go, I miss Rust's `enum`s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/open-source-rust"&gt;Open-Source Rust: 24 Awesome Frameworks, Projects, and Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/mersinvald/aquamarine"&gt;aquamarine&lt;/a&gt; bringing you inline diagrams for your rustdocs.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/874"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821/350"&gt;Fuchsia has several open issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;299 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-01-18..2021-01-25"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81046"&gt;improve unknown external crate error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81236"&gt;gracefully handle loop labels missing leading &lt;code&gt;'&lt;/code&gt; in different positions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80065"&gt;improve diagnostics when parsing angle args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78578"&gt;permit mutable references in all const contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68828"&gt;prevent query cycles in the MIR inliner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81243"&gt;mir: improve &lt;code&gt;size_of&lt;/code&gt; handling when arg is unsized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75180"&gt;implement &lt;code&gt;Error&lt;/code&gt; for &lt;code&gt;&amp;amp;(impl Error)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80715"&gt;change branching in &lt;code&gt;iter.skip()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79705"&gt;&lt;code&gt;BufWriter&lt;/code&gt;: Provide &lt;code&gt;into_raw_parts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81169"&gt;fix soundness issue for &lt;code&gt;replace_range&lt;/code&gt; and &lt;code&gt;range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81170"&gt;avoid &lt;code&gt;hash_slice&lt;/code&gt; in &lt;code&gt;VecDeque&lt;/code&gt;'s &lt;code&gt;Hash&lt;/code&gt; implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81241"&gt;turn alloc's force_expr macro into a regular macro_rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/229"&gt;hashbrown: add &lt;code&gt;try_insert_no_grow&lt;/code&gt; method on &lt;code&gt;RawTable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9075"&gt;fix a bug in Cargo's cyclic dep graph detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9098"&gt;cargo: add some extra help to &lt;code&gt;cargo new&lt;/code&gt; and invalid package names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81302"&gt;rustdoc: fix rendering of stabilization version for trait implementors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6591"&gt;clippy: &lt;code&gt;manual_filter_map&lt;/code&gt; and &lt;code&gt;manual_find_map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6617"&gt;clippy: new lint: &lt;code&gt;exhaustive_enums&lt;/code&gt;, &lt;code&gt;exhaustive_structs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;This week continues a trend of relatively large rollups, which often contain
perf-sensitive PRs. We need to get better at marking PRs as rollup=never or
otherwise not including them, but it is unclear how precisely to go about doing
so. The tooling for testing individual PRs merged in rollups should also be
improved to work better in the next few days, though.&lt;/p&gt;
&lt;p&gt;Other than that, this week saw several regressions, most of which were not
easily explained. We are seeking feedback from PR authors and reviewers on
whether the results are expected and if anything can be done.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylevick&lt;/strong&gt; and &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=e05409a02c6e73a3dea6da98798468db2910ca59&amp;amp;end=1483e67addd37d9bd20ba3b4613b678ee9ad4d68&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;e05409a02c6e73a3dea6da98798468db2910ca59..1483e67addd37d9bd20ba3b4613b678ee9ad4d68&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 Regressions, 2 Improvements, 1 Mixed;
3 of them in rollups&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-01-26.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3028"&gt;Allow "artifact dependencies" on bin, cdylib, and staticlib crates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3037"&gt;Rust 2021 Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81198"&gt;Remove requirement that forces symmetric and transitive PartialEq impls to exist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81048"&gt;Stabilize &lt;code&gt;core::slice::fill_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80945"&gt;Add Box::downcast() for dyn Any + Send + Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80470"&gt;Stabilize by-value &lt;code&gt;[T; N]&lt;/code&gt; iterator &lt;code&gt;core::array::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80279"&gt;Implement missing &lt;code&gt;AsMut&amp;lt;str&amp;gt;&lt;/code&gt; for &lt;code&gt;str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80053"&gt;stabilise &lt;code&gt;cargo test -- --include-ignored&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80011"&gt;Stabilize &lt;code&gt;peekable_next_if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79570"&gt;rustc: Stabilize &lt;code&gt;-Zrun-dsymutil&lt;/code&gt; as &lt;code&gt;-Csplit-debuginfo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79285"&gt;Stabilize Arc::{increment,decrement}_strong_count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79078"&gt;expand/resolve: Turn &lt;code&gt;#[derive]&lt;/code&gt; into a regular macro attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78044"&gt;Implement io::Seek for io::Empty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/76904"&gt;Tracking Issue for &lt;code&gt;feature(int_bits_const): &amp;lt;integer&amp;gt;::BITS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/74442"&gt;Tracking Issue for &lt;code&gt;fmt::Arguments::as_str()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3067"&gt;Change visibility scoping rules for macro_rules macros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/275827557/"&gt;Februar 2, Dublin, IE - Rust Dublin Remote February Meetup - Rust Dublin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/275593411/"&gt;February 2, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/275352662/"&gt;February 2, Denver, CO, US - ML in Rust, implementing logistic and linear regression from scratch - Rust Denver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/275986420/"&gt;February 3, Johannesburg, ZA - Monthly Joburg Rust Chat! - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccdbgb/"&gt;February 4, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Hungary-Meetup/events/275579644/"&gt;February 4, Budapest, HU - Rust meetup S03! - Rust Hungary Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/246726699/"&gt;February 7, Indianapolis, IN, US - Monthly Meetup - Indy.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccdbmb/"&gt;February 9, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccdbnb/"&gt;February 10, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/seamusabshere/8022bd7c964570b105402dd4dddfcde4"&gt;Engineer or Manager - Rust at Faraday (Burlington, VT, US (and Boston, MA, US))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thegraph.com/jobs/rust-engineer"&gt;Rust Engineer at The Graph (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.workatastartup.com/jobs/41643"&gt;Rust Expert - Senior Software Engineer at Wasmer (San Francisco, CA, US or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/gnosis/jobs/4497327002?gh_src=addc4e802"&gt;Ethereum Core Developer (m/w/d) at Gnosis (Berlin, DE or A Coruña, ES, or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Describing Rust as a systems programming language in 2021 is like describing Microsoft as Windows or Google as search. Yes, Rust is equipped for systems programming, but its applicability is much wider.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://twitter.com/timClicks/status/1351247765851017216"&gt;Tim McNamara on twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/993"&gt;Nixon Enraght-Moony&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/l6pfp6/this_week_in_rust_375/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 27 Jan 2021 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2021-01-27:blog/2021/01/27/this-week-in-rust-375/</guid></item></channel></rss>