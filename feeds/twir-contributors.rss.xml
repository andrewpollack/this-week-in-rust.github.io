<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/feeds/twir-contributors.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 09 Dec 2020 00:00:00 -0500</lastBuildDate><item><title>This Week in Rust 368</title><link>https://this-week-in-rust.org/blog/2020/12/09/this-week-in-rust-368/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/12/07/the-foundation-conversation.html"&gt;The Foundation Conversation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-016/"&gt;This Month in Rust GameDev #16 - November 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k6cka7/rib_newsletter_18_on_to_the_ribbles/"&gt;RiB Newsletter #18 - On to the Ribbles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/12/07/changelog-54.html"&gt;Rust Analyzer Changelog #54&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-9/"&gt;Knurling-rs Changelog #9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/clion/2020/12/intellij-rust-updates-for-2020-3/"&gt;IntelliJ Rust: Updates for 2020.3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/monads-gats-nightly-rust/"&gt;Monads and GATs in Nightly Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fanf.dreamwidth.org/134024.html"&gt;Vanishing zeroes for geometric algebra in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.thomasheartman.com/posts/on-generics-and-associated-types"&gt;On Generics and Associated Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vector.dev/blog/adaptive-request-concurrency/"&gt;Adaptive Request Concurrency. Resilient observability at scale.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/rust-compression-libraries/"&gt;Rust compression libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.marcoieni.com/2020/12/rust-makes-cross-compilation-childs-play/"&gt;Rust makes cross compilation child's play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jmmv.dev/2020/12/builder-pattern-for-tests.html"&gt;Using the builder pattern to define test scenarios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/blog/2020/12/04/measuring-memory-usage-in-rust.html"&gt;Measuring Memory Usage in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tag1consulting.com/blog/saving-time-switching-users-async-support-goose"&gt;Saving time by switching users: Async support in Goose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evrone.com/rust-vs-c"&gt;Why Rust is meant to replace C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://subvisual.com/blog/posts/real-time-video-processing-with-rust-ffmpeg-opencv/"&gt;Real-time video processing with Rust, FFmpeg and OpenCV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/creativcoder/merge-k-sorted-arrays-in-rust-1b2f"&gt;Merge k sorted arrays in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/13/"&gt;Make A Language - Part Thirteen: Whitespace &amp;amp; Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jmmv.dev/2020/12/unit-testing-a-console-app.html"&gt;Unit-testing a console app (a text editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.drogue.io/rust-and-async/"&gt;Rust and Async (on embedded devices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/avoiding-duplicating-strings-rust/"&gt;Avoiding Duplicating Strings in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-custom-target-to-build-kernel-for-a-bare-metal-part-3/"&gt;OS in Rust: Custom target to build kernel for bare metal: Part-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-building-kernel-for-custom-target-part-4/"&gt;OS in Rust: Building kernel for custom target: Part-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/lLWchWTUFOQ"&gt;Introduction to Rust Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/EmbarkStudios/rust-gpu/releases/tag/v0.2"&gt;rust-gpu v0.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ibraheem.ca/posts/rust-interior-mutability-understanding-cell"&gt;Interior Mutability in Rust: Understanding The Cell Type&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/news/2020/12/cpp-rust-interop-cxx/"&gt;Safe Interoperability between Rust and C++ with CXX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2020/12/expanding-fuchsias-open-source-model.html"&gt;Expanding Fuchsia's open source model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k75tez/miri_can_now_detect_data_races/"&gt;Miri can now detect data races&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/not-a-seagull/breadx"&gt;breadx&lt;/a&gt;, a X-windows protocol implementation in 100% safe and mutex-free Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/851"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AaronErhardt/Triox/labels/good%20first%20issue"&gt;Triox - Good First Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/libssh2/libssh2/pull/517"&gt;libssh2 - Pull Request Needs Windows Reviewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;279 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-11-30..2020-12-07"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78684"&gt;add wasm32 support to inline asm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79509"&gt;improve attribute message error spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/659"&gt;chalk: always relate with Invariant to non-General inference vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79680"&gt;fix perf regression caused by match exhaustiveness split&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79623"&gt;pass around Symbols instead of Idents in doctree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79620"&gt;tweak diagnostics on shadowing lifetimes/labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78122"&gt;avoid panic_bounds_check in &lt;code&gt;fmt::write&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79650"&gt;fix incorrect &lt;code&gt;io::Take&lt;/code&gt;'s limit resulting from &lt;code&gt;io::copy&lt;/code&gt; specialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79600"&gt;&lt;code&gt;std::io&lt;/code&gt;: use sendfile for UnixStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8937"&gt;cargo: slightly optimize `cargo vendor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8725"&gt;cargo: add "--workspace" to update command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79539"&gt;rustdoc: JSON backend experimental impl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-08.md"&gt;2020-12-08&lt;/a&gt;:
0 Regressions, 2 Improvements, 1 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Triage done by @simulacrum.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-08.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3007"&gt;RFC: Plan to make core and std's panic identical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2992"&gt;RFC: Add &lt;code&gt;target_abi&lt;/code&gt; configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2859"&gt;added secret types rfc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79642"&gt;rustdoc: stabilise --default-theme command line option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79502"&gt;Implement &lt;code&gt;From&amp;lt;char&amp;gt;&lt;/code&gt; for u64 and u128.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79485"&gt;Stabilize &lt;code&gt;unsafe_cell_get_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79473"&gt;Move &lt;code&gt;{f32,f64}::clamp&lt;/code&gt; to core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79342"&gt;Stabilize all stable methods of &lt;code&gt;Ipv4Addr&lt;/code&gt;, &lt;code&gt;Ipv6Addr&lt;/code&gt; and &lt;code&gt;IpAddr&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79270"&gt;Acknowledge that &lt;code&gt;[CONST; N]&lt;/code&gt; is stable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79261"&gt;Deprecate atomic compare_and_swap method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79213"&gt;Stabilize &lt;code&gt;core::slice::fill&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/79188"&gt;Made matches! more useful by adding mapping support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79073"&gt;passes: prohibit invalid attrs on generic params&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79022"&gt;stabilize deque_range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/78367"&gt;Apply &lt;code&gt;unused_doc_comments&lt;/code&gt; lint to inner items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78242"&gt;Rename &lt;code&gt;overlapping_patterns&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78083"&gt;Stabilize or_insert_with_key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/77688"&gt;Add built-in implementations of &lt;code&gt;Default&lt;/code&gt; for function definition and… &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/74699"&gt;Mark &lt;code&gt;-1&lt;/code&gt; as an available niche for file descriptors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/74304"&gt;Stabilize the Wake trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/63514"&gt;Tracking issue for map_ok and map_err method for &lt;code&gt;Poll&amp;lt;Option&amp;lt;Result&amp;lt;T, E&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Community-Stuttgart/events/274892215/"&gt;December 10, Stuttgart, DE - Hack &amp;amp; Learn - Directions for 2021 - Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/274757235/"&gt;December 10, San Diego, CA, US - San Diego Rust December 2020 Tele-Meetup - San Diego Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/274460587"&gt;December 10, Washington, DC, US - How oso built a runtime reflection system for Rust—Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-%D0%B2-%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B5/events/274924961/"&gt;December 15, Russia - Russian Rust Online Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsybcqbvb/"&gt;December 16, Vancouver, BC, US - Are Results just Checked Exceptions? - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/273530244/"&gt;December 10, Provo, UT, US - Mob Programming: Add &lt;code&gt;--tree -d&lt;/code&gt; to &lt;code&gt;lsd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pathai.com/careers/?gh_jid=4983568002"&gt;Software Engineer, Systems at PathAI (Boston, MA, US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.welcometothejungle.com/fr/companies/meilisearch/jobs/software-developer-rust_paris"&gt;Software Developer (Rust) at MeiliSearch (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust at Kraken (Remote NA, SA, EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2442ee5c-56b6-4a73-a477-8cdda2b218d5"&gt;Rust Engineer, Desktop GUI - Cryptowatch at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4c864c8f-bde6-443d-b521-dd90df0e9105"&gt;Senior Backend Engineer - Rust at Kraken (Remote NA, SA, EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Banking Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4485f672-dc5f-4e49-a10b-2b0399e28a8d"&gt;Software Engineer - Trading Technology (Rust) at Kraken (Remote NA, SA, EMEA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/jobs/294502/rust-for-embedded-environments-ockam"&gt;Rust for Embedded Environments at Ockam (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/jobs/400828/messaging-protocol-architect-in-elixir-and-rust-ockam"&gt;Messaging protocol architect in Elixir (and Rust) at Ockam (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer (Rust &amp;amp; C++) at NZXT (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/Embedded-Firmware-Engineer-in-C-Rust-a9c741c539454ee7b8bbb969d8e90da2"&gt;Embedded Firmware Engineer in C &amp;amp; Rust at Astropad (Remote, US)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Writing rust for me is a gradual process of the compiler patiently guiding me towards the program I should have written in the first place, and at the end I take all the credit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://discord.com/channels/442252698964721669/448238009733742612/783395725991084074"&gt;@felixwatts on Discord&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/972"&gt;Joshua Nelson&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 09 Dec 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-12-09:blog/2020/12/09/this-week-in-rust-368/</guid></item><item><title>This Week in Rust 367</title><link>https://this-week-in-rust.org/blog/2020/12/02/this-week-in-rust-367/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No project updates this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/11/27/Rustup-1.23.0.html"&gt;Announcing Rustup 1.23.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dimforge.com/blog/2020/12/01/this-month-in-dimforge/"&gt;This Month in Rust Dimforge #3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/11/30/changelog-136.html"&gt;IntelliJ Rust Changelog #136&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/11/30/changelog-53.html"&gt;Rust Analyzer Changelog #53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-8/"&gt;Knurling-rs Changelog #8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kflansburg.com/posts/rust-continuous-delivery/"&gt;Rust Continuous Delivery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nicolas-hahn.com/2020/11/30/btreemap-with-capacity/"&gt;Why doesn't Rust's BTreeMap have a with_capacity() method?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.ibm.com/technologies/web-development/articles/why-webassembly-and-rust-together-improve-nodejs-performance/"&gt;Why using WebAssembly and Rust together improves Node.js performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ilyabylich.svbtle.com/lib-ruby-parser"&gt;lib-ruby-parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://whileydave.com/2020/11/30/understanding-partial-moves-in-rust/"&gt;Understanding Partial Moves in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/error-handling-is-hard/"&gt;Error Handling is Hard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkolaczk.github.io/benchmarking-cassandra-with-rust-streams/"&gt;Scalable Benchmarking with Rust Streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k3jy5g/i_rewrote_10k_lines_of_js_into_rust_over_the_last/"&gt;I rewrote 10k lines of JS into Rust over the last month. Here's a write up about it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hashrust.com/blog/references-in-rust/"&gt;References in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-building-kernel-for-custom-target-part-4/"&gt;OS in Rust: Building kernel for custom target: Part-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/bkolobara/writing-rust-the-elixir-way-2lm8"&gt;Writing Rust the Elixir way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stopa.io/post/222"&gt;Risp (in (Rust) (Lisp))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/fllstck/props-and-nested-components-with-yew-2l0d"&gt;Props and Nested Components with Yew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/stevepryde/using-selenium-with-rust-aca"&gt;Using Selenium with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rocket-tutorial-04-data-persistency-and-rocket-with-mongodb-e5j"&gt;Rocket Tutorial 04: Data Persistency and Rocket (with MongoDB)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://veykril.github.io/tlborm/"&gt;The Little Book of Rust Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://cfsamson.github.io/books-futures-explained/introduction.html"&gt;Futures Explained in 200 Lines of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.osohq.com/post/demo-building-runtime-reflection-system-for-rust"&gt;Demo: 🦀️ Building a runtime reflection system for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/oc8DWXsodzE"&gt;Sapling livestream 5 - Deleting Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nature.com/articles/d41586-020-03382-2"&gt;Why scientists are turning to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://initialcommit.com/blog/pijul-version-control-system"&gt;Pijul - The Mathematically Sound Version Control System Written In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zdnet.com/article/amazon-were-hiring-software-engineers-who-know-programming-language-rust/"&gt;Amazon: We're hiring software engineers who know programming language Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/tesselode/kira"&gt;kira&lt;/a&gt;, a library for expressive game audio with many bells and whistles (pardon the pun).&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/849"&gt;Alexis Bourget&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;289 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-11-23..2020-11-30"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79365"&gt;upgrade the coverage map to Version 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79287"&gt;allow using generic trait methods in &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79209"&gt;allow Trait inheritance with cycles on associated types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79511"&gt;do not visit &lt;code&gt;ForeignItemRef&lt;/code&gt; for HIR indexing and validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79216"&gt;only create &lt;code&gt;OnDiskCache&lt;/code&gt; in incremental compilation mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79338"&gt;cache pretty-print/retokenize result to avoid compile time blowup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76829"&gt;stabilize &lt;code&gt;const_int_pow&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/393"&gt;compiler-builtins: fix division on SPARC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75752"&gt;libtest: print the total time taken to execute a test suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79321"&gt;accept '!' in intra-doc links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79372"&gt;cleanup more of rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-bindgen/pull/1935"&gt;bindgen: struct_layout: fix field offset computation for packed(n) structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1617"&gt;miri: add simple data-race detector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6086"&gt;clippy: add &lt;code&gt;suspicious_operation_groupings&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-24.md"&gt;2020-11-24&lt;/a&gt;:
1 Regression, 2 Improvements, 2 mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week saw landing of &lt;a href="https://github.com/rust-lang/rust/pull/79237"&gt;#79237&lt;/a&gt; which by itself provides no wins but opens the door to support for split debuginfo on macOS. This'll eventually show huge wins as we can likely avoid re-collecting debuginfo while retaining support for lldb and Rust backtraces. &lt;a href="https://github.com/rust-lang/rust/issues/79361"&gt;#79361&lt;/a&gt; tracks the stabilization of the rustc flag, but the precise rollout to stable users is not yet 100% clear.&lt;/p&gt;
&lt;p&gt;Triage done by @jyn514 and @simulacrum.&lt;/p&gt;
&lt;p&gt;4 regressions, 4 improvements, 2 mixed results.
5 of them in rollups.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-24.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3007"&gt;RFC: Plan to make core and std's panic identical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2957"&gt;Stabilize Cargo's new feature resolver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78864"&gt;Use true previous lint level when detecting overriden forbids&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78367"&gt;Apply &lt;code&gt;unused_doc_comments&lt;/code&gt; lint to inner items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78363"&gt;remove this weird special case from promotion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3028"&gt;Allow "artifact dependencies" on bin, cdylib, and staticlib crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3027"&gt;Infallible promotion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/274734310/"&gt;December 2, Johannesburg, ZA - Monthly Joburg Rust Chat - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstrybcqbdb/"&gt;December 2, Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/274592167"&gt;December 8, Saarbücken, Saarland, DE - Meetup: 6u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Community-Stuttgart/events/274921745/"&gt;December 8, Stuttgart, DE - TALK: Running Multi-Module Heterogenous WASM Assemblies - Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrybcqblb/"&gt;December 8, Seattle, WA, US - Monthly meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Community-Stuttgart/events/274892215/"&gt;December 10, Stuttgart, DE - Hack &amp;amp; Learn - Directions for 2021 - Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/274757235/"&gt;December 10, San Diego, CA, US - San Diego Rust December 2020 Tele-Meetup - San Diego Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybcqbmb/"&gt;December 9, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/273530244/"&gt;December 10, Provo, UT, US - Mob Programming: Add &lt;code&gt;--tree -d&lt;/code&gt; to &lt;code&gt;lsd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876724/"&gt;December 7, Auckland, NZ - Rust AKL - Show and Tell + Introduction to RUst II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://dfinity.org/careers/"&gt;Several Engineering Positions - Dfinity - (San Francisco, Palo Alto, Zurich)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Let’s be clear: We understand that we are net beneficiaries of the exceptional work that others have done to make Rust thrive. AWS didn’t start Rust or make it the success that it is today, but we’d like to contribute to its future success.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://aws.amazon.com/blogs/opensource/why-aws-loves-rust-and-how-wed-like-to-help/"&gt;Matt Asay on the AWS Open Source blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/969"&gt;Alice Ryhl&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 02 Dec 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-12-02:blog/2020/12/02/this-week-in-rust-367/</guid></item><item><title>This Week in Rust 366</title><link>https://this-week-in-rust.org/blog/2020/11/25/this-week-in-rust-366/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/11/23/What-the-error-handling-project-group-is-working-on.html"&gt;What the Error Handling Project Group is Working On&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/11/23/changelog-52.html"&gt;Rust Analyzer Changelog #52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-7/"&gt;Knurling-rs Changelog #7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adsharma.github.io/flattools-11222020.html"&gt;FlatBuffer as serialization agnostic IDL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/egghead/wtf-is-rust-the-illustrated-notes-564p"&gt;WTF is Rust? The Illustrated Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arschles/first-lines-of-rust-ofe"&gt;First Lines of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nodebb.org/optimizing-benchpress/"&gt;Optimizing Benchpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lfcode.ca/blog/pwintln-uwu"&gt;pwintln uwu and other fun with elves and dynamic linkers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/titles/hwrust/hands-on-rust/"&gt;Hands-on Rust: Effective Learning through 2D Game Development and Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jaredwolff.com/cbor-for-embedded-c-and-rust/"&gt;CBOR IoT Data Serialization for Embedded C and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/fllstck/basic-interactions-with-yew-3pa3"&gt;Basic Interactions with Yew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/luzero/testing-your-crate-c-api-19nc"&gt;Testing your crate C-API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rocket-tutorial-03-part-ii-proper-testing-6h"&gt;Rocket Tutorial 03 part II: Proper Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pjam/select-syscall-in-rust-mm"&gt;Select Syscall in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iantayler.com/2020/11/22/fbsim-football-playing-ai-agents-in-rust/"&gt;FBSim: football-playing AI agents in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bheisler.github.io/post/recipe-manager-part-5-data-integrity/"&gt;Building a Recipe Manager - Part 5 - Data Integrity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jitter.company/blog/2020/11/23/bootstrapping-support-for-the-stm32wle-with-the-embedded-rust-ecosystem/"&gt;Bootstrapping support for the STM32WLE with the Embedded Rust ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nickwilcox.com/blog/recipe_swift_rust_callback/"&gt;Recipe for Calling Swift Closures from Asynchronous Rust Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/eLNAMEoKAAc"&gt;A Cool Generic Concurrency Primitive in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/d9lsT4kJo44"&gt;Creative coding in Rust: re-creating a retro screensaver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/2u362vR167c"&gt;(Live Coding) Audio adventures in Rust: Packaging Actix + React app as macOS bundle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=lL0PmeYWqiU&amp;amp;feature=youtu.be"&gt;Prototype (Rust tutorial) - Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.brainiumstudios.com/2020/11/24/cargo-mobile.html"&gt;cargo-mobile: Rust on mobile made easy!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rustfest.eu/rustfest-project-announcement"&gt;Welcoming the RustFest Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://advancedresearch.github.io/blog/2020-11-21-levenshtein-heuristic-in-poi"&gt;Levenshtein Heuristic in Poi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nw0.github.io/cheri-rust.pdf"&gt;Strengthening memory safety in Rust: exploring CHERI capabilities for a safe language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/why-aws-loves-rust-and-how-wed-like-to-help/#"&gt;Why AWS loves Rust, and how we'd like to help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/centrality/why-work-in-blockchain-journey-from-c-to-rust-developer-eddbc9ccdc3d"&gt;Why Work in Blockchain? - Journey from C++ to Rust Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/jxfhnp/flash_animations_live_forever_at_the_internet/"&gt;Flash Animations Live Forever at the Internet Archive [via ruffle.rs, a Flash emulator written in Rust compiled to WASM]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=meAz2RQMHvM"&gt;How to create an awesome Rust GitHub project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/cargo-intraconv"&gt;cargo-intraconv&lt;/a&gt;, a cargo subcommand to convert links in rust documentation to the newly stable intra-doc-links format.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/849"&gt;Alexis Bourget&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/c410-f3r/oapth/issues/5"&gt;oapth - Meta issue for &lt;code&gt;clean&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/iliekturtles/uom/issues/223"&gt;uom - Fix issues with uom CI process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;345 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-11-16..2020-11-23"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79192"&gt;never inline naked functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79072"&gt;fix exhaustiveness in case a byte string literal is used at slice type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78569"&gt;Arena: use specialization to avoid copying data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79002"&gt;add column number support to Backtrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78461"&gt;add support for custom allocators in &lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79186"&gt;change &lt;code&gt;slice::to_vec&lt;/code&gt; to not use &lt;code&gt;extend_from_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79039"&gt;tighten the bounds on atomic Ordering in &lt;code&gt;std::sys::unix::weak::Weak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79172"&gt;Add &lt;code&gt;#[cold]&lt;/code&gt; attribute to &lt;code&gt;std::process::abort&lt;/code&gt; and &lt;code&gt;alloc::alloc::handle_alloc_error&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77893"&gt;impl &lt;code&gt;Default&lt;/code&gt; for &lt;code&gt;PhantomPinned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79114"&gt;add &lt;code&gt;trailing_zeros&lt;/code&gt; and &lt;code&gt;leading_zeros&lt;/code&gt; to non zero types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76941"&gt;add &lt;code&gt;f&lt;/code&gt;{&lt;code&gt;32&lt;/code&gt;, &lt;code&gt;64&lt;/code&gt;}&lt;code&gt;::is_subnormal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79222"&gt;add &lt;code&gt;core::slice::fill_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74989"&gt;implement &lt;code&gt;Index&lt;/code&gt; and &lt;code&gt;IndexMut&lt;/code&gt; for arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79194"&gt;make &lt;code&gt;as&lt;/code&gt;{&lt;code&gt;_mut&lt;/code&gt;,}&lt;code&gt;_slice&lt;/code&gt; on &lt;code&gt;array::IntoIter&lt;/code&gt; public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78608"&gt;stabilize &lt;code&gt;refcell_take&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77872"&gt;stabilize &lt;code&gt;clamp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79299"&gt;stabilise &lt;code&gt;then&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76226"&gt;stabilize &lt;code&gt;IpAddr::is_ipv4&lt;/code&gt; and &lt;code&gt;is_ipv6&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78305"&gt;stabilize &lt;code&gt;alloc::Layout&lt;/code&gt; const functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2263"&gt;futures: stream: unzip operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8857"&gt;cargo: allow resolver="1" to explicitly use the old resolver behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78752"&gt;rustdoc: give a better error when rustdoc tests fail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-semverver/pull/138"&gt;semverver: speed compilation by using .rmeta over .rlib files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/measureme/pull/143"&gt;measureme: hardware performance counter support (via &lt;code&gt;rdpmc&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-24.md"&gt;2020-11-24&lt;/a&gt;:
1 Regression, 2 Improvements, 2 mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week saw landing of &lt;a href="https://github.com/rust-lang/rust/pull/79237"&gt;#79237&lt;/a&gt; which by itself provides no wins but opens the door to support for split debuginfo on macOS. This'll eventually show huge wins as we can likely avoid re-collecting debuginfo while retaining support for lldb and Rust backtraces. &lt;a href="https://github.com/rust-lang/rust/issues/79361"&gt;#79361&lt;/a&gt; tracks the stabilization of the rustc flag, but the precise rollout to stable users is not yet 100% clear.&lt;/p&gt;
&lt;p&gt;Triage done by @jyn514 and @simulacrum.&lt;/p&gt;
&lt;p&gt;4 regressions, 4 improvements, 2 mixed results.
5 of them in rollups.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-24.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No Tracking Issues or PRs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3022"&gt;Add a new syntax to declare that a trait must always be object-safe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-edi/events/273101770"&gt;November 26, Edinburgh, UK - Rust in the Polymesh Project - Rust Edinburgh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcpbjc/"&gt;November 26, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Tel-Aviv-Data-Science-ODSC/events/274650041/"&gt;November 26, Tel Aviv-Yafo, IL - Rust Machine Learning On-line Meetup - ODSC Tel Aviv Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/274623141/"&gt;December 1, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/273529335"&gt;December 1, Munich, DE - Rust Remote #4 (CEST) - Rust Munich Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/274734310/"&gt;December 2, Johannesburg, ZA - Monthly Joburg Rust Chat - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstrybcqbdb/"&gt;December 2, Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/274592167"&gt;December 8, Saarbücken, Saarland, DE - Meetup: 6u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybcqbmb/"&gt;December 9, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876724/"&gt;December 7, Auckland, NZ - Rust AKL - Show and Tell + Introduction to RUst II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/influxdb/jobs/2447843?gh_src=da842a8d1us"&gt;Senior Software Engineer, IOx at InfluxData (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I know noting about the compiler internals but it looks to me as if 90% of the time is spent pretty-printing LayoutError.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://github.com/rust-lang/rust/issues/75992#issuecomment-716622473"&gt;Vadzim Dambrouski on github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/968"&gt;mmmmib&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k17f0k/this_week_in_rust_366/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 25 Nov 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-11-25:blog/2020/11/25/this-week-in-rust-366/</guid></item><item><title>This Week in Rust 365</title><link>https://this-week-in-rust.org/blog/2020/11/18/this-week-in-rust-365/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/11/19/Rust-1.48.html"&gt;Announcing Rust 1.48.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/11/12/source-based-code-coverage.html"&gt;Source-based code coverage in nightly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/11/16/changelog-135.html"&gt;IntelliJ Rust Changelog #135&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/11/16/changelog-51.html"&gt;Rust-Analyzer Changelog #51&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-6/"&gt;Knurling-rs Changelog #6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ratysz.github.io/article/scheduling-1/"&gt;ECS Scheduler Thoughts, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tarquin-the-brave.github.io/blog/posts/generating-config-reference-rust-cli/"&gt;Generating a config file reference for CLI tools in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/tjtelan/rust-in-2021-5p6"&gt;Rust in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jam1.re/blog/anonymous-sum-types-for-rust-errors"&gt;Anonymous Sum Types for Rust Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prilik.com/blog/post/c-is-not-dependency-free/"&gt;The C Standard Library Is Not Dependency Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jack.wrenn.fyi/blog/private-trait-impls/"&gt;Scoped Trait Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freemasen.com//blog/sqlite-parser-pt-2/index.html"&gt;SQLite File Parser Pt. 2: The Header... continues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://levpaul.com/posts/rust-lesson-7-8-9/"&gt;Rust from a Gopher - Lessons 7, 8 &amp;amp; 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nitschinger.at/Writing-an-embedded-display-driver-in-Rust/"&gt;Writing an embedded display driver in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rocket-tutorial-03-proper-routing-4ch3"&gt;Rocket Tutorial 03: Proper routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/fllstck/intro-to-yew-a-rust-frontend-framework-20hb"&gt;Intro to Yew, a Rust Frontend Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/ownership-puzzle-rust-async-hyper/"&gt;An Ownership Puzzle with Rust, Async, and Hyper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/10/"&gt;Make A Language - Part Ten: Starting Again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/11/"&gt;Make A Language - Part Eleven: Refinements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-custom-target-to-build-kernel-for-a-bare-metal-part-3/"&gt;OS in Rust: Custom target to build kernel for a bare metal: Part-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://corbamico.github.io/2020/11/12/tetris-1/"&gt;Creating a Tetris Clone in Rust, with Bevy (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PL] &lt;a href="https://postacnormalna.pl/crabbybird-3-generowanie-swiata-gry-czesc-i/"&gt;CrabbyBird #3 Generowanie świata gry – cześć I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/h4RkCyJyXmM"&gt;Crust of Rust: Sorting Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/vmvq9jKBlGc"&gt;(Live Coding) Audio adventures in Rust: UI with Actix, WebView, and React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2020/11/16/big-picture.html"&gt;The Big Picture of gfx/wgpu ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.azabani.com/2020/11/15/xd.html"&gt;xd(1): hex-dumping tool with a ♥♪ code page 437 twist ♫♥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andraztori.medium.com/speed-is-a-feature-introducing-fwumious-wabbit-1cc9573ea7be"&gt;Fwumious Wabbit: really fast logistic regression (+more) in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jam1.re/blog/rust-for-game-modding"&gt;Rust for Modding Smash Ultimate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hobofan.com/blog/2020-11-10-reacty_yew/"&gt;reacty_yew: Generating Yew components from React components via Typescript type definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.servo.org/2020/11/17/servo-home/"&gt;Servo's New Home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/dog-fight-python-vs-golang-vs-rust-for-json-processing-33c1ffe15ab9"&gt;Dog Fight — Python VS Golang VS Rust for JSON Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/build-an-sms-alert-system-for-canada-covid-19-cases-over-the-weekend-with-rust-and-zero-cost-235bb59ec5d"&gt;Build an SMS Alert System over the weekend with Rust and Zero-Cost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/build-a-scalable-trading-bot-with-rust-over-the-weekend-9fd781940360"&gt;Build a Scalable Trading Bot With Rust Over the Weekend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.crowdstrike.com/blog/data-science-test-drive-of-rust-programming-language/"&gt;Oh No! My Data Science Is Getting Rust-y&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2011.06171"&gt;The Usability of Ownership&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/pemistahl/lingua-rs"&gt;lingua&lt;/a&gt;, a ngrams-based natural language detector.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/841"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gfx-rs/naga/issues/5"&gt;gfx-rs/naga - DirectX IR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;299 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-11-09..2020-11-16"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78566"&gt;enable LLVM Polly via llvm-args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78836"&gt;implement destructuring assignment for structs and slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79016"&gt;make &lt;code&gt;_&lt;/code&gt; an expression, to discard values in destructuring assignments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78950"&gt;add asm register information for SPIR-V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74754"&gt;add &lt;code&gt;#[cfg(panic = '...')]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78826"&gt;resolve: collapse &lt;code&gt;macro_rules&lt;/code&gt; scope chains on the fly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78966"&gt;never inline C variadics, cold functions, functions with incompatible attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78969"&gt;normalize function type during validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77990"&gt;eliminate some temporary vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78782"&gt;do not collect tokens for doc comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/609"&gt;chalk: variance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79049"&gt;lower intrinsics calls: forget, size_of, unreachable, wrapping_*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79058"&gt;move likely/unlikely argument outside of invisible unsafe block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75272"&gt;specialize &lt;code&gt;io::copy&lt;/code&gt; to use &lt;code&gt;copy_file_range&lt;/code&gt;, &lt;code&gt;splice&lt;/code&gt; or &lt;code&gt;sendfile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78857"&gt;improve &lt;code&gt;BinaryHeap&lt;/code&gt; performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78631"&gt;BTreeMap: fix pointer provenance rules in underfullness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79026"&gt;implement BTreeMap::retain and BTreeSet::retain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8837"&gt;cargo: improve performance of almost fresh builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4445"&gt;rustfmt: option to create groups for std, external crates, and other imports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-10.md"&gt;2020-11-10&lt;/a&gt;:
1 Regression, 2 Improvements, 2 mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A mixed week with improvements still outweighing regressions. Perhaps the biggest highlight was the move to compiling rustc crates &lt;a href="https://github.com/rust-lang/rust/pull/78201"&gt;with the initial-exec TLS model&lt;/a&gt; which results in fewer calls to &lt;code&gt;_tls_get_addr&lt;/code&gt; and thus faster compile times.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-11-10.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2841"&gt;RFC: -C export-executable-symbols&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78636"&gt;Add &lt;code&gt;PartialEq&amp;lt;char&amp;gt;&lt;/code&gt; for proc_macro::Punct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78634"&gt;Implement PartialEq for proc_macro::Ident == strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78608"&gt;Stabilize refcell_take&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78305"&gt;Stabilize alloc::Layout const functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77893"&gt;Impl Default for PhantomPinned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/76829"&gt;stabilize const_int_pow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/76226"&gt;Stabilize &lt;code&gt;IpAddr::is_ipv4&lt;/code&gt; and &lt;code&gt;is_ipv6&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72981"&gt;Stabilize the backtrace feature.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/64260"&gt;Tracking issue for methods converting &lt;code&gt;bool&lt;/code&gt; to &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3020"&gt;Allow specifying features of the implicit lib dependency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsybcpbxb/"&gt;November 18, Vancouver, BC, CA - Rust Study/Hack/Hang-out night - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcpbgc/"&gt;November 24, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-edi/events/273101770"&gt;November 26, Edinburgh, UK - Rust in the Polymesh Project - Rust Edinburgh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcpbjc/"&gt;November 26, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Tel-Aviv-Data-Science-ODSC/events/274650041/"&gt;November 26, Tel Aviv-Yafo, IL - Rust Machine Learning On-line Meetup - ODSC Tel Aviv Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/274623141/"&gt;December 1, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/274592167"&gt;December 8, Saarbücken, Saarland, DE - Meetup: 6u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/chainsafe/Blockchain-Developer-Rust-0d577a2636b84511a5d4efc69454585d"&gt;Software Engineer at ChainSafe Systems (Toronto, CA, Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.welcometothejungle.com/fr/companies/meilisearch/jobs/software-developer-rust_paris"&gt;Software Developer (Rust) at MeiliSearch (Paris, FR)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;p&gt;This time we have two quotes of the week:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i just spent 8h finding a mutability bug and now i wanna be a catgirl&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://twitter.com/castle_vanity/status/1327352639303135239"&gt;@castle_vanity on twitter&lt;/a&gt; reacting to a post depicting C++ programmers as muscle-laden bodybuilders and Rust programmers as catgirls&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/966"&gt;Maximilian Goisser&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The code people write is first a question to the compiler, and later a story for people changing that code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/jslo80/this_week_in_rust_364/gc2iuyo"&gt;Esteban Kuber on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/967"&gt;llogiq&lt;/a&gt; is mightily pleased with his suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/jx6vfl/this_week_in_rust_365/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 18 Nov 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-11-18:blog/2020/11/18/this-week-in-rust-365/</guid></item></channel></rss>