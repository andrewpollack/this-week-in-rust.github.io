<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/feeds/twir-contributors.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 16 Jun 2020 00:00:00 -0400</lastBuildDate><item><title>This Week in Rust 343</title><link>https://this-week-in-rust.org/blog/2020/06/16/this-week-in-rust-343/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://audio.rustacean-station.org/file/rustacean-station/twir-2020-06-16.mp3"&gt;this week's &lt;em&gt;This Week in Rust Podcast&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/06/10/event-lineup-update.html"&gt;2020 Event Lineup - Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/06/08/new-inline-asm.html"&gt;New inline assembly syntax available in nightly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rustfest.eu/announcing-rustfest-2020"&gt;Announcing RustFest Global 2020 ðŸŽ‰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustconf.com/"&gt;RustConf 2020 Registration is Open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://joeprevite.com/rust-lang-ecosystem"&gt;Understanding the Rust Ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/you-want-to-learn-rust-but-you-dont-know-where-to-start-fc826402d5ba"&gt;You Want to Learn Rust but You Donâ€™t Know Where to Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/awesome-rust-powered-command-line-utilities-b5359c38692"&gt;7 Awesome Rust-powered Command-line Utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/rust-powered-command-line-utilities-to-increase-your-productivity-eea03a4cf83a"&gt;Rust-Powered Command-Line Utilities to Increase Your Productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.halcyon.hr/posts/error-handling-in-rust/"&gt;Errors in Rust: A Deep Dive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2020/04/13/hyper-traps.html"&gt;Hyper Traps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blue42.net/code/rust/examples/embedded/nucleo-f30248/getting-started/post/"&gt;Getting Started With The STM32 Nucleo-F302R8 and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thenewstack.io/microsoft-rust-is-the-industrys-best-chance-at-safe-systems-programming/"&gt;Microsoft: Rust is the Industry's 'Best Chance' at Safe Systems Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tourofrust.com/chapter_7_en.html"&gt;Tour of Rust: Chapter 7 - Object Oriented Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/06/15/changelog-29.html"&gt;Rust Analyzer Changelog #29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ctz/rustls/blob/master/audit/TLS-01-report.pdf"&gt;Rustls Security Review &amp;amp; Audit Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shahinrostami.com/posts/programming/rust-notebooks/ndarray-index-arrays-and-mask-index-arrays/"&gt;NDArray Index Arrays and Mask Index Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/two-memory-bugs-from-ringbahn/"&gt;Two Memory Bugs From Ringbahn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sunshine-chain/dart-meets-rust-a-match-made-in-heaven-9f5"&gt;Dart Meets Rust: a match made in heaven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rhymu8354/c-developer-learning-rust-2oal"&gt;C++ Developer Learning Rust!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/steadbytes/container-with-most-water-3ige"&gt;Container with Most Water&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pingcap.com/blog/generics-and-compile-time-in-rust/"&gt;Generics and Compile-Time in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/scorsi/improve-the-performances-of-our-phoenix-app-with-rust-4d7a"&gt;Improve the performances of your Phoenix app with Rust: in both back and front&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kennykerr.ca/2020/06/09/improving-the-ide-for-rust-winrt/"&gt;Improving the IDE for Rust/WinRT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javednissar.ca/getting-involved-in-rust-open-source/"&gt;My Experiences with Rust Open Source Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rolisz.ro/2020/06/10/playing-codenames-with-rust/"&gt;Playing Codenames with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tim.mcnamara.nz/post/621040767010504704/spend-your-novelty-budget-on-rust"&gt;Spend your novelty budget on Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.kodewerx.org/2020/06/the-rust-compiler-isnt-slow-we-are.html"&gt;The Rust compiler isn't slow; we are.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seanchen1991/the-story-of-tail-call-optimizations-in-rust-35hf"&gt;The Story of Tail Call Optimizations in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://soundcloud.com/arewepodcastyet/awpy-05-tim-mcnamara-timclicks"&gt;AreWePodcastYet - Interview with Tim McNamara, author of Rust in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=SZKEzNL9als"&gt;Rust Notebooks (Jupyter and Evcxr) - Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/getditto/safer_ffi"&gt;safer_ffi&lt;/a&gt;, a library to help write safe FFI code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/780"&gt;Vlad Frolov&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/out-of-cheese-error/gooseberry/issues/3"&gt;gooseberry: Add related tags to each page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/out-of-cheese-error/gooseberry/blob/master/CONTRIBUTING.md"&gt;gooseberry: General contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/issues/29497#issuecomment-573353391"&gt;rust: &lt;code&gt;fs::remove_dir_all&lt;/code&gt; rarely succeeds for large directories on windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;354 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-06-08..2020-06-15"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69478"&gt;enable AVR as a Tier 3 target upstream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72655"&gt;enable LVI hardening for x86_64-fortanix-unknown-sgx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72799"&gt;add &lt;code&gt;-Z span-debug&lt;/code&gt; to allow for easier debugging of proc macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73139"&gt;add methods to go from a null-terminated &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; to a &lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71824"&gt;check for live drops in constants after drop elaboration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72598"&gt;display information about captured variable in &lt;code&gt;FnMut&lt;/code&gt; error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73005"&gt;don't create impl candidates when obligation contains errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73133"&gt;enforce unwind invariants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72389"&gt;explain move errors that occur due to method calls involving &lt;code&gt;self&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73033"&gt;fix &lt;code&gt;#[thread_local]&lt;/code&gt; statics as &lt;code&gt;asm!&lt;/code&gt; sym operands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72556"&gt;fix trait alias inherent impl resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73001"&gt;free &lt;code&gt;default()&lt;/code&gt; forwarding to &lt;code&gt;Default::default()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73169"&gt;handle assembler warnings properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72740"&gt;on recursive ADT, provide indirection structured suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73195"&gt;provide suggestion to convert numeric op LHS rather than unwrapping RHS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73066"&gt;querify whether a type has structural equality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71896"&gt;relate existential associated types with variance Invariant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73230"&gt;suggest including unused asm arguments in a comment to avoid error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73183"&gt;support proc macros in intra doc link resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73182"&gt;track span of function in method calls, and use this in &lt;code&gt;#[track_caller]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72707"&gt;use &lt;code&gt;min_specialization&lt;/code&gt; in the remaining rustc crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73138"&gt;use shorthand linker strip arguments in order to support MacOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73178"&gt;expand: more precise locations for expansion-time lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73331"&gt;extend network support for HermitCore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73277"&gt;fix caller_location intrinsic for Miri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72890"&gt;improper ctypes: normalize return types and transparent structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72897"&gt;normalize adt fields during structural match checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72789"&gt;resolve: do not suggest imports from the same module in which we are resolving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73353"&gt;structural_match: non-structural-match ty closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/494"&gt;chalk: add FnOnce trait, and provide impl for Function type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/481"&gt;chalk: model function ABI in the Rust IR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/513"&gt;chalk: recursive solver factoring and privacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/514"&gt;chalk: refactor ProgramClauseData to remove Implies variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/427"&gt;chalk: add &lt;code&gt;Unsize&lt;/code&gt; trait implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72879"&gt;miri: avoid tracking current location three times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72417"&gt;remove &lt;code&gt;RawVec::reserve_in_place&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72938"&gt;stabilize &lt;code&gt;Option::zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72584"&gt;stabilize &lt;code&gt;vec::Drain::as_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72583"&gt;impl &lt;code&gt;AsRef&amp;lt;[T]&amp;gt;&lt;/code&gt; for &lt;code&gt;vec::IntoIter&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73036"&gt;std: enable atomic.fence emission on wasm32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/868"&gt;stdarch: fix x86 extract_epi{8,16} functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72357"&gt;implement new gdb/lldb pretty-printers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8270"&gt;cargo: add environment variables to identify the binary and crate name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8344"&gt;cargo: allow passing a registry index url directly to &lt;code&gt;cargo install&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8358"&gt;cargo: fix doctests not running with &lt;code&gt;--target=HOST&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8267"&gt;cargo: support &lt;code&gt;{prefix}&lt;/code&gt; and &lt;code&gt;{lowerprefix}&lt;/code&gt; markers in &lt;code&gt;config.json&lt;/code&gt; &lt;code&gt;dl&lt;/code&gt; key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/2543"&gt;crates.io: allow configuring the application's domain name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/2564"&gt;crates.io: modifiers/highlight-syntax: Disable aggressive whitespace stripping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71842"&gt;doc: make impl block collapsible if it has an associated constant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/780"&gt;docs.rs: add compression for uploaded documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/834"&gt;docs.rs: limit the size of served files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/5279"&gt;clippy: macro use suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/5680"&gt;clippy: let_and_return: avoid "does not live long enough" errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4239"&gt;rustfmt: pick up comments between visibility modifier and item name&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020.md#2020-06-16"&gt;2020-06-16&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71756"&gt;add Windows system error codes that should map to &lt;code&gt;io::ErrorKind::TimedOut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71660"&gt;impl &lt;code&gt;PartialEq&amp;lt;Vec&amp;lt;B&amp;gt;&amp;gt; for &amp;amp;[A], &amp;amp;mut [A]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2944"&gt;RFC: add the Freeze trait to libcore/libstd&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Zurich/events/271020472/"&gt;June 18. Zurich, CH - Remote - Embedded Rust Update: probe.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.mozilla.org/events/gruppo-di-studio-di-rust-2/"&gt;June 18. Turin, IT - Remote - Rust Turin Study Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-edi/events/271129693/"&gt;June 25. Edinburgh, UK - Remote - Pirrigator - Growing Tomatoes Free From Memory Errors and Race Conditions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcjbhc/"&gt;June 25. Berlin, DE - Remote - Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybcjbwb/"&gt;June 17. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpybcjbdc/"&gt;June 18. Durham, NC - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/nppvrrybcjbnc/"&gt;June 30. Dallas, TX - Dallas Rust - Last Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/cloudflare/jobs/2209495?gh_jid=2209495"&gt;Software Engineer at Cloudflare, London, UK or Lisbon, PT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;It feels like being part of a village that learns to love the dragon it battles.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://news.ycombinator.com/item?id=23437950"&gt;turbinerneiter on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/892"&gt;blonk&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/hactqu/this_week_in_rust_343/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 16 Jun 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-06-16:blog/2020/06/16/this-week-in-rust-343/</guid></item><item><title>This Week in Rust 342</title><link>https://this-week-in-rust.org/blog/2020/06/10/this-week-in-rust-342/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://rustacean-station.org/episode/017-twir-341-342/"&gt;this week's &lt;em&gt;This Week in Rust Podcast&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/06/04/Rust-1.44.0.html"&gt;Announcing Rust 1.44.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustconf.com/"&gt;RustConf 2020 Registration is Open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://patriksvensson.se/2020/06/enumerating-monitors-in-rust-using-win32-api/"&gt;Enumerating monitors in Rust using Win32 API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bprog.github.io/rust_slack_bot/"&gt;Rust cli app integrated with slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.garrensmith.com/blogs/mini-couch-hack-week"&gt;Hack week: miniCouchDB in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2020-06-06-zero-to-production-1-setup-toolchain-ides-ci/"&gt;Zero To Production #1: toolchains, IDEs, CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hugodaniel.pt/posts/browser-tech-stack-2020/"&gt;From Rust to Svelte, what tech stack will I use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sachanganesh.com/programming/graph-tree-traversals-in-rust/"&gt;Graph &amp;amp; Tree Traversals in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zdnet.com/article/programming-languages-rust-enters-top-20-popularity-rankings-for-the-first-time/"&gt;Programming languages: Rust enters top 20 popularity rankings for the first time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guillaume-be.github.io/2020-05-30/sentence_piece"&gt;A Rust SentencePiece implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://people.gnome.org/~federico/blog/rust-things-i-miss-in-c.html"&gt;Rust Things I Miss in C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2020/06/02/rust-love.aspx?m=1"&gt;So What's Up with Microsoft's (and Everyone Else's) Love of Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.blog/2020/06/05/why-the-developers-who-use-rust-love-it-so-much/?cb=1"&gt;Why the developers who use Rust love it so much&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seanchen1991/the-story-of-tail-call-optimizations-in-rust-35hf"&gt;The Story of Tail Call Optimizations in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/codeprototype/taking-the-unhappy-path-with-result-option-unwrap-and-operator-in-rust-482b"&gt;Taking the Unhappy Path with Result, Option, unwrap and ? operator in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2020-05/"&gt;This Month in Rust OSDev (May 2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-010/"&gt;This Month in Rust GameDev #10 - May 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustsim.org/blog/2020/06/01/this-month-in-rustsim/"&gt;This month in rustsim #11 (April - May 2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustinblockchain.org/newsletters/2020-06-03-zk-rustups/"&gt;Rust in Blockchain Newsletter #12 - ZK-Rustups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2003.03296"&gt;Memory-Safety Challenge Considered Solved? An Empirical Study with All Rust CVEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://createlang.rs/"&gt;Creating Your Own Programming Language with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/06/08/changelog-28.html"&gt;rust-analyzer changelog #28&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kennykerr.ca/2020/06/05/getting-started-with-rust-winrt/"&gt;Getting started with Rust/WinRT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Chinese] &lt;a href="https://www.bilibili.com/read/cv4991161"&gt;Simple sorting algorithms in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Indonesian] &lt;a href="https://dev.to/rizki96/berbagai-alasan-melakukan-programming-dalam-rust-p67"&gt;Berbagai alasan melakukan Programming dalam Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[slides] &lt;a href="https://geigerkind.github.io/training_presentations/rust_in_15_minutes/presentation.html"&gt;Rust in 15 Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/tjH0Mye8U_A"&gt;Rust Web development | Boilerplate free with Rocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Dj8i3rM8FIQ"&gt;Educational Rust Live Coding - Building a web app - Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?time_continue=1&amp;amp;v=HZftwxCIXqE&amp;amp;feature=emb_logo"&gt;Iterators - Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.twitch.tv/occupy_paul_st"&gt;Browser computation with WebAssembly Live Stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Y5-ZgxfQvpc"&gt;Jonathan Teaches Jason Rust!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/drahnr/cargo-spellcheck"&gt;cargo-spellcheck&lt;/a&gt;, a cargo subcommand to spell-check your docs.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/777"&gt;Bernhard Schuster&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lambda-fairy/maud/issues/187"&gt;maud: Add an on-by-default "unstable" feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lambda-fairy/maud/issues/190"&gt;maud: Change all uses of Span::def_site to Span::mixed_site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lambda-fairy/maud/issues/167"&gt;maud: Document "Allow arbitrary attribute syntax in class and ID names"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lambda-fairy/maud/issues/191"&gt;maud: Migrate to the third-party &lt;code&gt;quote!&lt;/code&gt; macro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;350 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-06-01..2020-06-08"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72820"&gt;InstCombine: don't optimize &lt;code&gt;&amp;amp;mut *x&lt;/code&gt; into &lt;code&gt;x&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72799"&gt;add &lt;code&gt;-Z span-debug&lt;/code&gt; to allow for easier debugging of proc macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72807"&gt;avoid setting wrong obligation cause span of associated type mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72764"&gt;be more careful around &lt;code&gt;ty::Error&lt;/code&gt; in generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72776"&gt;fulfill: try using &lt;code&gt;SmallVec&lt;/code&gt; or &lt;code&gt;Box&lt;/code&gt; for &lt;code&gt;stalled_on&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72583"&gt;&lt;code&gt;impl AsRef&amp;lt;[T]&amp;gt; for vec::IntoIter&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/483"&gt;chalk: get ready for the first publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73001"&gt;free &lt;code&gt;default()&lt;/code&gt; forwarding to &lt;code&gt;Default::default()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72924"&gt;stabilize &lt;code&gt;std::io::Buf{Reader, Writer}::capacity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72891"&gt;add associated consts &lt;code&gt;MIN&lt;/code&gt;/&lt;code&gt;MAX&lt;/code&gt; for &lt;code&gt;Wrapping&amp;lt;Int&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71796"&gt;de-promote Duration::from_secs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/359"&gt;compiler-builtins: manually patch ret instruction for LVI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8270"&gt;cargo: add environment variables to identify the binary and crate name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8310"&gt;cargo: allow Windows dylibs without dll suffix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8321"&gt;cargo: better error message when passing in relative path to &lt;code&gt;Workspace::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8329"&gt;cargo: don't hash executable filenames on apple platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8267"&gt;cargo: support &lt;code&gt;{prefix}&lt;/code&gt; and &lt;code&gt;{lowerprefix}&lt;/code&gt; markers in &lt;code&gt;config.json&lt;/code&gt; &lt;code&gt;dl&lt;/code&gt; key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8297"&gt;cargo: warn if using hash in git URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8274"&gt;cargo: reset lockfile information between resolutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/2551"&gt;crates.io: fix issue where crates.io allowed the plus sign in crate names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/823"&gt;docs.rs: print a backtrace for crates which fail to build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4239"&gt;rustfmt: pick up comments between visibility modifier and item name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4233"&gt;rustfmt: preserve Markdown line breaks in inner and outer block doc comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4229"&gt;rustfmt: use rewrite buffer to determine if comment should be on a newline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4228"&gt;rustfmt: feat: conditionally allow unstable opts on stable/beta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020.md#2020-06-09"&gt;2020-06-09&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/73007"&gt;&lt;code&gt;impl ToSocketAddrs for (String, u16)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72938"&gt;Stabilize &lt;code&gt;Option::zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72584"&gt;Stabilize &lt;code&gt;vec::Drain::as_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72279"&gt;Add raw_ref macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71858"&gt;Print environment variables accessed by rustc as special comments into depinfo files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wroclaw/events/271034483/"&gt;June 10. Wroclaw, PL - Remote - Rust Wroclaw Meetup #20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcjbpb/"&gt;June 11. Berlin, DE - Remote - Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/270938860/"&gt;June 11. San Diego, CA, US - Remote - San Diego Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Zurich/events/271020472/"&gt;June 18. Zurich, CH - Remote - Embedded Rust Update: probe.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.mozilla.org/events/gruppo-di-studio-di-rust-2/"&gt;June 18. Turin, IT - Remote - Rust Turin Study Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrybcjbpb/"&gt;June 11. Columbus, OH, US - Columbus Rust Society Monthly Meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/269263282/"&gt;June 11. Lehi, UT, US - Utah Rust - Lightning Talks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybcjbwb/"&gt;June 17. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpybcjbdc/"&gt;June 18. Durham, NC - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://system76.com/careers#software-engineer-pop-os"&gt;Pop! OS Software Engineer at System76, Remote US-based&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vehicle.software/careers/"&gt;Software Engineer at Vehicle.Software&lt;/a&gt; (second listing on page)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;You don't declare lifetimes. Lifetimes come from the shape of your code, so to change what the lifetimes are, you must change the shape of the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://users.rust-lang.org/t/lifetime-of-a-returned-iterator/43732/2"&gt;Alice Ryhl on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/883"&gt;RustyYato&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/h0mt9k/this_week_in_rust_342/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 10 Jun 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-06-10:blog/2020/06/10/this-week-in-rust-342/</guid></item><item><title>This Week in Rust 341</title><link>https://this-week-in-rust.org/blog/2020/06/02/this-week-in-rust-341/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is no &lt;em&gt;This Week in Rust&lt;/em&gt; podcast this week, next week's episode will cover both this week and next week.&lt;/p&gt;
&lt;h1 id="we-stand-with-you"&gt;We Stand With You&lt;/h1&gt;
&lt;p&gt;Since our previous issue, there has been a lot of news about the civil
rights discourse in the United States, spawned by the murder of George Floyd
by a member of the Minneapolis Police Department. We stand with Black Lives
Matter and our Black siblings now and always.&lt;/p&gt;
&lt;p&gt;We believe this is not a matter of taking a political stance, but a matter
of supporting basic human rights and equality.&lt;/p&gt;
&lt;p&gt;We believe that Rustaceans have a duty to our community and to the rest of
the world to ensure that people feel comfortable and welcome wherever they
may be. In our own community, the Rust Code of Conduct explicitly states that
we intend to make everybody feel safe, but this does not just apply to us.&lt;/p&gt;
&lt;p&gt;Just as we support Rustaceans, we also support humanity as a whole. It is time
for social progress to be made. We support those risking their own well-being
to show support for George Floyd, Breonna Taylor, Ahmaud Aubery, and everyone
else who has faced injustice at the hands of members of the police. We stand
with the protesters hoping to make the world better. &lt;/p&gt;
&lt;p&gt;If you want to show your support,
&lt;a href="https://blacklivesmatters.carrd.co/"&gt;here is a website of curated resources&lt;/a&gt;.
We encourage you to speak out, as one more voice is one step closer to a
better world.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustconf.com/"&gt;RustConf 2020 Registration is Open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/05/27/contributor-survey.html"&gt;2020 Contributor Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html"&gt;A retrospective on the 2018 rust-lang.org redesign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://giordi91.github.io/post/disassemlbyrust1/"&gt;Rust Disassembly: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.hackeriet.no/fuzzing-sequoia/"&gt;Fuzzing Sequoia-PGP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kitsu.me/posts/2020_06_01_mutex_in_async_world"&gt;Mutex in async world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kitsu.me/posts/2020_05_24_custom_types_in_diesel"&gt;Custom types in Diesel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nickwilcox.com/blog/autovec2/"&gt;Auto-Vectorization for Newer Instruction Sets in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/tstellanova/81c963f556522447dd007a0c3a84ebc3"&gt;Current State of Embedded Rust for Flight Controllers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/gsldbi/3d_boids_swimming_along_in_perfect_harmony/"&gt;3D boids swimming along in perfect harmony; Implementing the boids flocking algorithm in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/coverage-marks/"&gt;Coverage Marks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/ringbahn/"&gt;Ringbahn: a safe, ergonomic API for io-uring in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/05/25/changelog-26.html"&gt;rust-analyzer changelog #26&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/20/5/rust-java"&gt;Why I'm enjoying learning Rust as a Java programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.elinvynia.com/posts/2020-05-26-contributing-to-rust.html"&gt;Contributing to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/get-a-look-on-key-rust-crates-for-webassembly/"&gt;Get a Look on Key Rust Crates for WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://insights.dice.com/2020/05/29/10-most-loved-programming-languages-rust-typescript-more/"&gt;10 Most Loved Programming Languages: Rust, TypeScript, and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://richardpatching.com/2020/05/22/creating-a-ruby-gem-with-rust.html"&gt;Creating a Ruby Gem with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/cognite/designing-the-rust-unleash-api-client-6809c95aa568"&gt;Designing the Rust Unleash API client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/how-to-build-a-websocket-server-with-rust/"&gt;How to build a WebSocket server with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/autodidaddict/invoking-functions-on-distributed-game-objects-37b1"&gt;Invoking Functions on Distributed Game Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.apnic.net/2020/06/02/ipv6-and-rust/"&gt;IPv6 and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2020/05/30/hi.html"&gt;Rust as a High Level Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jlkiri/sorting-algorithms-in-rust-1386"&gt;Sorting algorithms in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@polyglot_factotum/programming-servo-integrating-readablestream-1a7faebeeed7?source=friends_link&amp;amp;sk=e297efa0a9e9d59d59233f3ec7038b1c"&gt;Programming Servo: integrating streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oldmill.cz/2020-05-31-to-rust-or-not.html"&gt;To Rust or not to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Spanish] &lt;a href="https://dev.to/robertohuertasm/aprende-rust-en-espanol-1pea"&gt;Aprende Rust en espaÃ±ol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=qaykNPHJcyw"&gt;A Rust &amp;amp; Wasm tutorial on building Bitcoin infrastructure. Rust beginner-friendly!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=yozQ9C69pNs&amp;amp;feature=emb_logo"&gt;Crust of Rust: Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=rpilJV-eIVw&amp;amp;feature=emb_logo"&gt;Rust and Tell Berlin - May 2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/yamafaktory/jql"&gt;jql&lt;/a&gt;, a JSON Query Language CLI tool.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/775"&gt;Davy Duperron&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ruma/ruma-events/issues/105"&gt;ruma-events: Add predefined push notification rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruma/ruma-events/issues/81"&gt;ruma-events: Add helpers to construct the fallback for rich replies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruma/ruma-events/issues/104"&gt;ruma-events: Create a distinct type for PushCondition::RoomMemberCount::is&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alex-dukhno.github.io/2020-05-30-Writing-database-management-system-in-Rust.-When-the-flame-is-born-from-the-ashes/"&gt;Writing database management system in Rust. When the flame is born from the ashes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;442 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-05-25..2020-06-01"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71862"&gt;implement unsafe blocks in unsafe fn&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/2585-unsafe-block-in-unsafe-fn.html"&gt;#2585&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72506"&gt;exhaustiveness checking: work around type normalization issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72383"&gt;suggest using &lt;code&gt;std::mem::drop&lt;/code&gt; function instead of explicit destructor call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72270"&gt;add a lint against references to packed fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72807"&gt;avoid setting wrong obligation cause span of associated type mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72715"&gt;account for trailing comma when suggesting &lt;code&gt;where&lt;/code&gt; clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72677"&gt;fix diagnostics for &lt;code&gt;@ ..&lt;/code&gt; binding pattern in tuples and tuple structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/478"&gt;chalk: request hidden opaque types lazily&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1441"&gt;miri: synchronization primitive cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72683"&gt;&lt;code&gt;from_u32_unchecked&lt;/code&gt;: check validity, and fix UB in Wtf8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72568"&gt;implement &lt;code&gt;total_cmp&lt;/code&gt; for &lt;code&gt;f32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72499"&gt;override &lt;code&gt;Box::&amp;lt;[T]&amp;gt;::clone_from&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72162"&gt;add &lt;code&gt;Extend::&lt;/code&gt;{&lt;code&gt;extend_one&lt;/code&gt;, &lt;code&gt;extend_reserve&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71500"&gt;make pointer offset methods/intrinsics const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71095"&gt;&lt;code&gt;impl From&amp;lt;[T; N]&amp;gt; for Box&amp;lt;[T]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72288"&gt;stabilization of &lt;code&gt;weak-into-raw&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72533"&gt;resolve UB in Arc/Weak interaction, part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72466"&gt;stabilize &lt;code&gt;str_strip&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72413"&gt;&lt;code&gt;impl Step for char&lt;/code&gt; (make &lt;code&gt;Range*&amp;lt;char&amp;gt;&lt;/code&gt; iterable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72310"&gt;add &lt;code&gt;Peekable::next_if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72407"&gt;various minor improvements to &lt;code&gt;Ipv6Addr::Display&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72398"&gt;&lt;code&gt;SocketAddr&lt;/code&gt; and friends now correctly pad its content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72239"&gt;implement PartialOrd and Ord for SocketAddr*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71843"&gt;tweak and stabilize &lt;code&gt;Atomic&lt;/code&gt;N&lt;code&gt;::fetch_update&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72324"&gt;stabilize &lt;code&gt;Atomic&lt;/code&gt;N&lt;code&gt;::fetch_&lt;/code&gt;{&lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/856"&gt;stdarch: add 64 bit integer AVX512f comparisons and the intrinsics needed to test them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/861"&gt;stdarch: add 64 bit AVX512f le and ge comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libm/pull/244"&gt;libm: use macros for more division/array checks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;This is a new section containing the results of a weekly check on how rustc's
perf has changed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020.md#2020-06-02"&gt;2020-06-02&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2912"&gt;Transition to rust-analyzer as our official LSP (Language Server Protocol) implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72583"&gt;&lt;code&gt;impl AsRef&amp;lt;[T]&amp;gt;&lt;/code&gt; for &lt;code&gt;vec::IntoIter&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72279"&gt;Add raw_ref macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/68833"&gt;Tracking issue for &lt;code&gt;std::io::{BufReader, BufWriter}::capacity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2936"&gt;add lang-team Major Change Proposals as a "pre-RFC" step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2937"&gt;Unsafe statics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2939"&gt;Request for creating pipes with fd other than 0,1,2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/270827463/"&gt;June 3. Johannesburg, ZA - Remote - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876685/"&gt;June 8. Auckland, NZ - Remote - Rust AKL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrybcjbmb/"&gt;June 9. Seattle, WA - Remote - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/270938860/"&gt;June 11. San Diego, CA - Remote - San Diego Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/dtqwprybcjbfb/"&gt;June 3. Indianapolis, IN, US - Indy.rs Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrybcjbpb/"&gt;June 11. Columbus, OH, US - Columbus Rust Society Monthly Meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/269263282/"&gt;June 11. Lehi, UT, US - Utah Rust - Lightning Talks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://iota.bamboohr.com/jobs/view.php?id=105"&gt;Software Engineer - Rust - IOTA Foundation - Remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://polymath.bamboohr.com/jobs/view.php?id=96"&gt;Senior Rust Engineer - Polymath - Remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/37748BA121/"&gt;Rust Back End Engineer, Core Banking - TrueLayer - Milan, Italy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust enables belligerent refactoring â€“ making dramatic changes and then working with the compiler to bring the project back to a working state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://blog.knoldus.com/some-extensive-projects-working-with-rust"&gt;Pankaj Chaudhary on Knoldus Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/880"&gt;Maxim Vorobjov&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/gvwvep/this_week_in_rust_341/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 02 Jun 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-06-02:blog/2020/06/02/this-week-in-rust-341/</guid></item><item><title>This Week in Rust 340</title><link>https://this-week-in-rust.org/blog/2020/05/27/this-week-in-rust-340/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://rustacean-station.org/episode/016-twir-340/"&gt;this week's &lt;em&gt;This Week in Rust Podcast&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://seri.tools/blog/compiling-rust-for-legacy-windows/"&gt;Compiling Rust binaries for Windows 98 SE and more: a journey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2020-05-24-zero-to-production-0-foreword/"&gt;Zero To Production #0: Foreword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/some-extensive-projects-working-with-rust/"&gt;Some Extensive Projects Working with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.m-ou.se/writing-python-inside-rust-4/"&gt;Writing Python inside your Rust code â€” Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cetra3.github.io/blog/drawing-svg-graphs-rust/"&gt;Drawing SVG Graphics with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/cognite/designing-the-rust-unleash-api-client-6809c95aa568"&gt;Designing the Rust Unleash API Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gridbugs.org/conways-game-of-life-on-the-nes-in-rust/"&gt;Conway's Game of Life on the NES in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/how-to-organize-your-rust-tests/"&gt;How to organize your Rust tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rodarmor.com/blog/tour-de-just"&gt;Just: How I Organize Large Rust Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rubdos.be/corona/qt/rust/tokio/actix/2020/05/23/actix-qt.html"&gt;Integrating Qt events into Actix and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sergeyzenchenko/actix-web-in-docker-how-to-build-small-and-secure-images-2mjd"&gt;Actix-Web in Docker: How to build small and secure images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/angular-rust-webassembly-node-js-serverless-and-the-new-azure-static-web-apps-cnb"&gt;Angular, Rust, WebAssembly, Node.js, Serverless, and... the NEW Azure Static Web Apps!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chromium.org/Home/chromium-security/memory-safety"&gt;The Chromium project finds that around 70% of our serious security bugs are memory safety problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/vibhoothi/integration-of-av-metrics-into-rav1e-the-av1-encoder-5h8h"&gt;Integration of AV-Metrics Into rav1e, the AV1 Encoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mgattozzi.dev/oxidizing-the-technical-interview/"&gt;Oxidizing the technical interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tavianator.com/porting-k-d-forests-to-rust/"&gt;Porting K-D Forests to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sassman/rust-macro-rules-in-practice-40ne"&gt;Rust Macro Rules in Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://abramov.io/rust-dropping-things-in-another-thread"&gt;Rust: Dropping heavy things in another thread can make your code 10000 times faster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mgattozzi.dev/rusts-runtime/"&gt;Rust's Runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://anchor.fm/tech-exceptions/episodes/What-Microsoft-has-to-do-with-Rust--on-this-episode-with-Ryan-Levick-eec75h"&gt;Tech Except!ons: What Microsoft has to do with Rust? With Ryan Levick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [Russian] &lt;a href="https://www.youtube.com/watch?v=n3kyvMVck_M"&gt;Rust: Not as hard as you think - Meta/conf: Backend Meetup 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://tim.mcnamara.nz/post/618982870485172224/rust-iteration"&gt;3 Part Video for Beginners to Rust Programming on Iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=fh9WXPu0hw8"&gt;Bringing WebAssembly outside the web with WASI by Lin Clark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://mybuild.microsoft.com/sessions/61de34c5-b111-4ece-928f-541854875862?source=sessions"&gt;Microsoft's Safe Systems Programming Languages Effort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=CMB6AlE1QuI"&gt;Rust, WebAssembly, and the future of Serverless by Steve Klabnik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/gnzlbg/cargo-asm"&gt;cargo-asm&lt;/a&gt;, a cargo subcommand to show the resulting assembly of a function. Useful for performance work.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/772"&gt;Jay Oster&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/christianpoveda/pijama/issues?q=is%3Aissue+is%3Aopen+label%3AE-easy"&gt;pijama: easy issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kerollmops/mdbx-rs/issues/1"&gt;mdbx-rs: Add support for more compile time options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruma/ruma-events/issues/90"&gt;ruma: Replace impl_enum! with strum derives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/time-rs/time/issues/236"&gt;time-rs: Revamped parsing/formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/http-rs/http-types/issues/154"&gt;http-types: Request::query should match Tide's behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/http-rs/http-types/issues/155"&gt;http-types: Status should take TryInto&lt;StatusCode/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/http-rs/http-types/issues/156"&gt;http-types: Expose method shorthands for Request constructor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;359 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-05-18..2020-05-25"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67759"&gt;update to LLVM 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72397"&gt;llvm: expose tiny code model to users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72438"&gt;enable ARM TME (Transactional Memory Extensions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69171"&gt;implement new &lt;code&gt;asm!&lt;/code&gt; syntax&lt;/a&gt; from &lt;a href="https://github.com/rust-lang/rfcs/pull/2873"&gt;RFC #2873&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72325"&gt;always generated object code for &lt;code&gt;#![no_builtins]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72306"&gt;break tokens before checking if they are 'probably equal'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72308"&gt;emit a better diagnostic when function actually has a 'self' parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68717"&gt;stabilize fn-like proc macros in expression, pattern and statement positions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72256"&gt;use &lt;code&gt;once_cell&lt;/code&gt; crate instead of custom data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72205"&gt;simple NRVO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72362"&gt;remove ReScope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72153"&gt;exhaustively check &lt;code&gt;ty::Kind&lt;/code&gt; during structural match checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72269"&gt;move borrow-of-packed-field unsafety check out of loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72537"&gt;fix &lt;code&gt;InlineAsmOperand&lt;/code&gt; expresions being visited twice during liveness checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/459"&gt;chalk: cleanup crate structure and add features for SLG/recursive solvers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71923"&gt;check non-&lt;code&gt;Send&lt;/code&gt;/&lt;code&gt;Sync&lt;/code&gt; upvars captured by generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71599"&gt;support coercion between &lt;code&gt;FnDef&lt;/code&gt; and arg-less closure and vice versa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71973"&gt;more lazy normalization of constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1424"&gt;miri: prepare Dlsym system for dynamic symbols on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70705"&gt;use &lt;code&gt;T&lt;/code&gt;'s discriminant type in &lt;code&gt;mem::Discriminant&amp;lt;T&amp;gt;&lt;/code&gt; instead of &lt;code&gt;u64&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72502"&gt;fix discriminant type in generator transform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71447"&gt;&lt;code&gt;impl From&amp;lt;Cow&amp;gt;&lt;/code&gt; for &lt;code&gt;Box&lt;/code&gt;, &lt;code&gt;Rc&lt;/code&gt;, and &lt;code&gt;Arc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/159"&gt;another attempt to reduce &lt;code&gt;size_of&amp;lt;HashMap&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72227"&gt;set initial non-empty &lt;code&gt;Vec&lt;/code&gt; size to 4 instead of 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71854"&gt;make &lt;code&gt;std::char&lt;/code&gt; functions and constants associated to &lt;code&gt;char&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71886"&gt;stabilize &lt;code&gt;saturating_abs&lt;/code&gt; and &lt;code&gt;saturating_neg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71940"&gt;add &lt;code&gt;len&lt;/code&gt; and &lt;code&gt;slice_from_raw_parts&lt;/code&gt; to &lt;code&gt;NonNull&amp;lt;[T]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72399"&gt;add fast-path optimization for &lt;code&gt;Ipv4Addr::fmt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72446"&gt;&lt;code&gt;impl Ord for proc_macro::LineColumn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8022"&gt;cargo: try installing exact versions before updating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8248"&gt;cargo: automatically update &lt;code&gt;patch&lt;/code&gt;, and provide better errors if an update is not possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8246"&gt;cargo: add option to strip binaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4179"&gt;rustfmt: merge configs from parent directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4198"&gt;rustfmt: umprove error message when module resolution failed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4173"&gt;rustfmt: parse comma-separated branches in macro definitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved last week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/68833"&gt;Tracking issue for &lt;code&gt;std::io::{BufReader, BufWriter}::capacity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71095"&gt;impl &lt;code&gt;From&amp;lt;[T; N]&amp;gt;&lt;/code&gt; for &lt;code&gt;Box&amp;lt;[T]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72239"&gt;Implement PartialOrd and Ord for SocketAddr*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72324"&gt;Stabilize AtomicN::fetch_min and AtomicN::fetch_max&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72368"&gt;Resolve overflow behavior for RangeFrom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72413"&gt;impl Step for char (make &lt;code&gt;Range*&amp;lt;char&amp;gt;&lt;/code&gt; iterable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/72448"&gt;Stabilize core::panic::Location::caller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72466"&gt;Stabilize str_strip feature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Montreal/events/270635425"&gt;May 27. MontrÃ©al, QC, CA - Remote - RustMTL May 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wroclaw/events/270771184/"&gt;May 27. WrocÅ‚aw, PL - Remote - Rust WrocÅ‚aw Meetup #20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-London-User-Group/events/270526235/"&gt;May 27. London, UK - Remote - LDN Talks May 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-London-User-Group/events/270526235/"&gt;May 28. Berlin, DE - Remote - Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/270827463/"&gt;June 3. Johannesburg, ZA - Remote - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876685/"&gt;June 8. Auckland, NZ - Remote - Rust AKL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrybcjbmb/"&gt;June 9. Seattle, WA - Remote - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/dtqwprybcjbfb/"&gt;June 3. Indianapolis, IN, US - Indy.rs Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/37748BA121/"&gt;Rust Back End Engineer, Core Banking - TrueLayer - Milan, Italy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=233"&gt;Sr. SW Engineer (TW or Remote) - NZXT - Taipei, Taiwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elektron.se/rust-graphics-engineer/"&gt;Rust Graphics Engineer - Elektron - Gotheburg, Sweden&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Things that are programming patterns in C are types in Rust.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://users.rust-lang.org/t/how-has-learning-and-working-in-rust-influenced-how-you-think-about-writing-software/42836/3"&gt;Kornel LesiÅ„ski on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/876"&gt;trentj&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/grs1ql/this_week_in_rust_340/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 27 May 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-05-27:blog/2020/05/27/this-week-in-rust-340/</guid></item></channel></rss>