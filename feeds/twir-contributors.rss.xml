<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/feeds/twir-contributors.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 30 Sep 2020 00:00:00 -0400</lastBuildDate><item><title>This Week in Rust 358</title><link>https://this-week-in-rust.org/blog/2020/09/30/this-week-in-rust-358/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/emberian/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/09/29/Portable-SIMD-PG.html"&gt;Announcing the Portable SIMD Project Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/09/28/changelog-44.html"&gt;Rust Analyzer Changelog #44&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-2/"&gt;Knurling-rs Changelog #2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://matej.laitl.cz/bench-actix-rocket/"&gt;Benchmarking vol. 2: Pitting Actix against Rocket v0.4 and v0.5-dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aspenuwu.me/posts/rust-optimization.html"&gt;Optimization - Making Rust Code Go Brrrr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/revisiting-a-smaller-rust/"&gt;Revisiting a 'smaller Rust'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nbaksalyar.github.io/2020/05/19/rust-debug.html"&gt;A Future for Rust Debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitsbybrad.com/2020-09-29-learning-rust/"&gt;Learning Rust the Open Source Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/so-you-want-to-live-reload-rust"&gt;So you want to live-reload Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vojtechkral.github.io/blag/rust-drop-order/"&gt;Drop order in Rust: It's tricky&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-simple-rust"&gt;Learn Simple Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/whats-new-in-rust-1-46-0/"&gt;What‚Äôs new in Rust 1.46.0 about const_fn?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nickymeuleman/rust-expression-vs-statement-2h7g"&gt;Rust: expression vs statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@KevinHoffman/to-box-or-not-to-box-my-first-real-rust-refactor-db467119c4c7"&gt;To Box or not to Box -- My First Real Rust Refactor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ethanyidong/bevy-2-space-shooter-the-player-3e7d"&gt;Bevy #2: Space Shooter - The Player&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.florianreinhard.de/2020-08-16/cucumber-in-rust-beginners-tutorial/"&gt;Cucumber in Rust - Beginner's Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://edfloreshz.blog/data-types-in-rust"&gt;Data Types in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=wNzXj4eddDo&amp;amp;feature=youtu.be"&gt;Rust 101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-more-rust"&gt;Learn More Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2020-09-27-zero-to-production-4-are-we-observable-yet/"&gt;Are we observable yet? An introduction to Rust telemetry - Zero To Production #4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deislabs.io/posts/a-fistful-of-states/"&gt;A Fistful of States: More State Machine Patterns in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-an-executable-that-runs-on-bare-metal-part-1/"&gt;OS in Rust: An executable that runs on bare metal: Part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-an-executable-that-runs-on-bare-metal-part-2/"&gt;OS in Rust: An executable that runs on bare metal: Part-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/blog/post/2020/09/30/build-discord-bot-with-rust-and-serenity/"&gt;Build a Discord Bot with Rust and Serenity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coaxion.net/blog/2020/09/porting-ebu-r128-audio-loudness-analysis-from-c-to-rust-porting-details/"&gt;Porting EBU R128 audio loudness analysis from C to Rust ‚Äì Porting Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.osohq.com/post/rust-reflection-pt-1"&gt;Building a runtime reflection system for Rust ü¶ÄÔ∏è (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nitschinger.at/Rusty-PID-Porting-the-TSic-sensor-from-C-to-Rust/"&gt;Rusty-PID: Porting the TSic sensor from C to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rolisz.ro/2020/09/26/playing-codenames-in-rust-with-word-vectors/"&gt;Playing Codenames in Rust with word vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://willcrichton.net/notes/type-level-programming/"&gt;Type-level Programming in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sotrh.github.io/learn-wgpu/intermediate/tutorial13-threading/#threading-build-rs"&gt;Multi-threading with Wgpu and Rayon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.darrien.dev/posts/flicker-free-fireworks/"&gt;Flicker free fireworks (or how I accidentally rediscovered the regen buffer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/030-krustlet/"&gt;The Rustacean Station Podcast - WebAssembly on the Server with Krustlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=LvfCSnOM1Hs&amp;amp;feature=youtu.be"&gt;RIOT Summit 2020 - Safer &amp;amp; Simpler Embedded Programs with Rust on RIOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?time_continue=69&amp;amp;v=2vk9H9-O_pI&amp;amp;feature=emb_logo"&gt;One Day Build - Anachro SPI pt 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=NgdWeR1CvI8&amp;amp;feature=emb_logo"&gt;Rusty USB Gadgets Make Barking BeagleBones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/deislabs/krustlet/releases/tag/v0.5.0"&gt;Krustlet v0.5.0 Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/osohq/oso"&gt;oso, an open-source policy engine for authorization written in Rust&lt;/a&gt;, added &lt;a href="https://docs.rs/oso/0.6.0-alpha/oso/"&gt;a Rust library for implementing authorization for Rust projects!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mabez.dev/blog/posts/esp-rust-ecosystem/"&gt;Rust on the ESP32 &amp;amp; ESP8266 - Building an ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ralfj.de/blog/2020/09/28/miri.html"&gt;What (not so) recently happened in Miri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bjorn3.github.io/2020/09/28/progress-report-sep-2020.html"&gt;Progress report on rustc_codegen_cranelift (Sep 2020)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/supercharge-your-electron-apps-with-rust/"&gt;Supercharge your Electron apps with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/blog/2020/09/28/how-to-make-a-light-bulb.html"&gt;How to Make a üí°?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raphlinus.github.io/rust/druid/2020/09/25/principled-reactive-ui.html"&gt;Towards principled reactive UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/building-even-faster-interpreters-in-rust/"&gt;Building even faster interpreters in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=AMD-Hiring-Radeon-Rust"&gt;AMD Is Hiring To Work On New Radeon Driver Tooling Written In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rcvalle.blog/2020/09/16/rust-lang-exploit-mitigations/"&gt;Rust programming language exploit mitigations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.5snb.club/posts/2020/09/25/custom-literals-in-rust.html"&gt;Custom Literals in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="call-for-blog-posts"&gt;Call for Blog Posts&lt;/h1&gt;
&lt;p&gt;The Rust Core Team wants input from the community!
If you haven't already, &lt;a href="https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html"&gt;read the official blog&lt;/a&gt; and submit a blog post - it will show up here!
Here are the wonderful submissions since the call for blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raphlinus.github.io/rust/druid/2020/09/28/rust-2021.html"&gt;Rust 2021: GUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/j1ihax/rust_2021_maintain_dominance_on_the_web_easy/"&gt;Rust 2021: maintain dominance on the web, easy funding, easier learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/j06zc9/rust_2021_easier_to_integrate_into_existing/"&gt;Rust 2021: Easier to integrate into existing codebases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/izk75l/rust_2021_continue/"&gt;Rust 2021: Continue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raphlinus.github.io/rust/druid/2020/09/28/rust-2021.html"&gt;My Rust 2021 roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.carminecrystal.com/rust-2021-features-and-trait-bounds-in-macros.html"&gt;Rust 2021 | Features and Trait Bounds in Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swatinem.de/blog/rust-2021/"&gt;Rust 2021: Quality, frictionless tooling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jamesmcm.github.io/blog/2020/09/24/rust2021/#en"&gt;My Rust 2021 roadmap: crates, concision, and community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aldaronlau.com/rust-2021/"&gt;Rust 2021 Roadmap Wishlist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://popzxc.github.io/rust-2021"&gt;Rust in 2021: We've done a lot, more to be done&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://christian.amsuess.com/blog/website/2020-09-24_rust_2021/"&gt;Rust in 2021: Leveraging the Type System for Infallible Message Buffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.coderspirit.xyz/blog/2020/09/26/rust-2021/"&gt;Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.thomasheartman.com/posts/rust-2021"&gt;Rust 2021: Minor major improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beyermatthias.de/blog/2020/09/28/rust-2021/"&gt;Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog-dry.com/entry/2020/09/29/135738"&gt;My Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/fs-err"&gt;fs-err&lt;/a&gt;, a library to make filesystem errors usable.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/821"&gt;Emerentius&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/time-rs/time/issues/249"&gt;time-rs: support #![no_std] targets without global allocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/time-rs/time/issues/256"&gt;time-rs: OffsetDateTime::replace_time?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;370 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-09-21..2020-09-28"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76986"&gt;return values up to 128 bits in registers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76839"&gt;add &lt;code&gt;asm!&lt;/code&gt; support for MIPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76711"&gt;diagnostics: improve closure/generic parameter mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76846"&gt;avoiding unnecesary allocations at &lt;code&gt;rustc_errors&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76918"&gt;add fast path for match checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76928"&gt;cache types during normalization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76913"&gt;fix the performance regression of #76244&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76897"&gt;encode less metadata for proc-macro crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77126"&gt;invalidate local LLVM cache less often&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76899"&gt;introduce a new flag to enable experimental/unsound mir opts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76673"&gt;MIR pass to remove unneeded drops on types not needing drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76683"&gt;add optimization to avoid load of address&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77047"&gt;miri: more informative deallocation error messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1559"&gt;miri: add API for capturing backtrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77014"&gt;&lt;code&gt;DroplessArena&lt;/code&gt;: allocate objects from the end of memory chunk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76973"&gt;unstably allow &lt;code&gt;assume&lt;/code&gt; intrinsic in const contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77074"&gt;add &lt;code&gt;array::from_ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77055"&gt;add &lt;code&gt;#[track_caller]&lt;/code&gt; to more panicking &lt;code&gt;Cell&lt;/code&gt; functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76655"&gt;make some methods of &lt;code&gt;Pin&lt;/code&gt; unstably const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77083"&gt;revert &lt;code&gt;const_type_id&lt;/code&gt; stabilization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76967"&gt;revert adding &lt;code&gt;Atomic::from_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76965"&gt;add &lt;code&gt;cfg(target_has_atomic_equal_alignment)&lt;/code&gt; and use it for &lt;code&gt;Atomic::from_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77097"&gt;make &lt;code&gt;[].as_&lt;/code&gt;[&lt;code&gt;mut_&lt;/code&gt;]&lt;code&gt;ptr_range()&lt;/code&gt; (unstably) const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/log/pull/414"&gt;log: implement &lt;code&gt;Log&lt;/code&gt; for &lt;code&gt;Box&amp;lt;Log&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-09-28.md"&gt;2020-09-28&lt;/a&gt;:
0 Regressions, 1 Improvements, 3 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most significant changes this week came in response to regressions discussed in
last week's triage report. Curious readers may be interested in
&lt;a href="https://github.com/rust-lang/rust/issues/77058"&gt;#77058&lt;/a&gt;, in which the removal
of a single field from a struct caused a 25% decrease in wall-times for one
seemingly unrelated benchmark, or
&lt;a href="https://github.com/rust-lang/rust/issues/76986"&gt;#76986&lt;/a&gt;, an ABI change that
should be a pretty clear win but seems to have mixed results.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-09-28.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2909"&gt;Destructuring assignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2782"&gt;RFC: impl-only glob imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2730"&gt;Fetching cargo registry tokens from external processes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2524"&gt;RFC: Permit _ in type aliases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77111"&gt;Stabilize slice_ptr_range.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/76969"&gt;Make RawFd implement the RawFd traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/75377"&gt;Fix Debug implementations of some of the HashMap and BTreeMap iterator types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/55300"&gt;Tracking issue for slice_partition_at_index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2990"&gt;[RFC] A new stack-based vector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2991"&gt;RFC: Add &lt;code&gt;target&lt;/code&gt; configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2992"&gt;RFC: Add &lt;code&gt;target_abi&lt;/code&gt; configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2996"&gt;adds async stream rfc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcnbcb/"&gt;October 1. Berlin, DE - Berline.rs - Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/273455489/"&gt;October 7. Johannesburg, ZA - Johannesburg Rust Meetup - Monthly Joburg Rust Chat!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/273014329/"&gt;October 7. Dublin, IE - Rust Dublin - October Remote Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstrybcnbkb/"&gt;October 7. Indianapolis, IN, US - Indy.rs - Indy.rs - with Social Distancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Linz/events/271857253/"&gt;October 8. Linz, AT - Rust Linz - Rust Meetup Linz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/273486967/"&gt;October 8. San Diego, CA, US - San Diego Rust - San Diego Rust October 2020 Tele-Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Saar/events/273252813/"&gt;October 13. Saabr√ºcken, DE - Rust-Saar Meetup - &lt;code&gt;4u16&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustlab.it/agenda"&gt;October 12 - 18. RustLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876708/"&gt;October 4. Auckland, NZ - Rust AKL - Rust meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/268567961/"&gt;October 8. Lehi, UT - Utah Rust - The Blue Pill: Rust on Microcontrollers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.amd.com/job/Boxborough-3D-Driver-Development-Engineer-80489-Mass/677678000/"&gt;3D Driver Development Engineer - Rust tooling for GPUs at AMD (Boxborough, MA, USA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Egineer, Kraken Futures - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2442ee5c-56b6-4a73-a477-8cdda2b218d5"&gt;Rust Engineer, Desktop GUI - Cryptowatch at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4c864c8f-bde6-443d-b521-dd90df0e9105"&gt;Senior Backend Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/9d9cc4b5-ef5f-40bd-b785-9acf9164aa74"&gt;Backend / Quant Developer at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/jobs/view/2151145919/"&gt;Senior Software Engineer (New IDE Platform) at JetBrains (Amsterdam, NL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust has a curse (it has many, but this one is critical): inefficient code is generally visible. Experienced developers hate to notice that their code is inefficient. They will recoil at seeing &lt;code&gt;Arc&amp;lt;RefCell&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; , but won't bat an eye at using Python.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/failed-to-contribute-due-to-difficulty-in-understanding-rust/49148/6"&gt;Esteban Kuber on rust-users&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/945"&gt;Jon G St√∏dle&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/iu3ge0/this_week_in_rust_356/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 30 Sep 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-09-30:blog/2020/09/30/this-week-in-rust-358/</guid></item><item><title>This Week in Rust 357</title><link>https://this-week-in-rust.org/blog/2020/09/23/this-week-in-rust-357/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/emberian/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/09/21/Scheduling-2021-Roadmap.html"&gt;Call for 2021 Roadmap Blogs Ending Soon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/09/18/error-handling-wg-announcement.html"&gt;Announcing the Error Handling Project Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/09/17/stabilizing-intra-doc-links.html"&gt;Intra-doc links close to stabilization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/09/21/changelog-131.html"&gt;IntelliJ Rust Changelog #131&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/09/21/changelog-43.html"&gt;Rust Analyzer Changelog #43&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-1/"&gt;Knurling-rs Changelog #1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://coaxion.net/blog/2020/09/porting-ebu-r128-audio-loudness-analysis-from-c-to-rust/"&gt;Porting EBU R128 audio loudness analysis from C to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://willcrichton.net/notes/types-over-strings/"&gt;Types Over Strings: Extensible Architectures in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io//2020/09/20/why-not-rust.html"&gt;Why Not Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cryptologie.net/article/505/why-not-rust-for-security/"&gt;Why not rust for security?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codecs.multimedia.cx/2020/09/why-rust-is-not-a-mature-programming-language/"&gt;Why Rust is not a mature programming language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.brandonsmith.ninja/blog/favorite-rust-function"&gt;My Favorite Rust Signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ceronman.com/2020/09/17/is-rust-a-functional-language-in-disguise/"&gt;Is Rust a Functional Language in Disguise?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/async-iteration/"&gt;Async Iteration Semantics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cfallin.org/blog/2020/09/18/cranelift-isel-1/"&gt;A New Backend for Cranelift, Part 1: Instruction Selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2020/09/20/throw-away-code.html"&gt;Throw-away code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jean.manguy.eu/post/i-started-to-learn-rust/"&gt;I started to learn Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rdambrosio016.github.io/rust/2020/09/18/pure-ast-based-linting-sucks.html"&gt;Pure AST based linting sucks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/blog/42/potential-improvements-for-rust-embedded-abstractions"&gt;Potential improvements for Rust embedded abstractions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-standard-rust"&gt;Learn Standard Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://christine.website/blog/TLDR-rust-2020-09-19"&gt;TL;DR Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://edfloreshz.blog/variables-and-mutability"&gt;Variables And Mutability In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustlabs.kubedaily.com/Beginners/README.html"&gt;Rust For Beginners Workshop Track&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/omg-wtf-rs-resources-to-help-you-get-started-with-rust/"&gt;Learning Rust: OMG WTF RS ‚Äì resources to help you get started with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sam3d/write-your-own-rust-compiler-plugin-in-only-10-lines-4df4"&gt;Write your own Rust compiler plugin in only 10 lines!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/virtualkirill/optional-arguments-in-rust-1e9g"&gt;Optional arguments in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@bkuliyev/implementation-of-binary-search-tree-in-rust-ce7ce479b505"&gt;Implementation of Binary Search Tree in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[FR] &lt;a href="https://medium.com/@nunes.nelson4/le-concept-de-propri%C3%A9taire-ou-ownership-en-rust-c96d43c3375d"&gt;Le concept de ‚Äúpropri√©taire‚Äù ou ‚Äúownership‚Äù en Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[TH] &lt;a href="https://dev.to/wingyplus/rustler-101-ferris-say-3jj6"&gt;Rustler 101: Ferris Say&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-more-rust"&gt;Learn More Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hole.tuziwo.info/dyn-iterator.html"&gt;Dynamic Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lowlvl.org/"&gt;Low-Level Academy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@xnuter/writing-a-modern-http-s-tunnel-in-rust-56e70d898700"&gt;Writing an HTTP(S) Tunnel in Rust with tokio.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.drogue.io/yak-hole-of-tls/"&gt;Down the Yak Hole of TLS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/imaculate3/that-s-so-rusty-metaprogramming-49mj"&gt;That's so Rusty: Metaprogramming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ethanyidong/the-bevy-engine-1-4k4k"&gt;The Bevy Game Engine #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alabulei1/high-performance-and-safe-ai-as-a-service-in-node-js-43lg"&gt;Face Detection in Node.js with Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/3jW_vxGmxt0"&gt;FLTK Rust: Using FLTK on Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/holochain/unpacking-the-new-holochain-f54da3ca99b7"&gt;Announcing and Unpacking the New Holochain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rustfest.eu/cfp-extension-new-speaker-perks"&gt;Extended CfP deadline &amp;amp; new speaker perks!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sharksforarms.dev/posts/neovim-rust/"&gt;Neovim and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yjdoc2/how-i-stopped-worrying-and-started-coding-in-rust-52b"&gt;How I stopped worrying and started coding in Rust ü¶ÄÔ∏è&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owenlynch.org/posts/2020-09-16-haskells-children/"&gt;Haskell's Children&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nikhilism.com/post/2020/bazel-persistent-worker-rust/"&gt;A Bazel Persistent Worker for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sbaronda.com/2020/09/20/esxi-binaries-with-rust/"&gt;ESXi Binaries with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://astonbitecode.github.io/blog/post/j4rs_javafx_support/"&gt;j4rs: JavaFX support (WIP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lupyuen.github.io/pinetime-rust-riot/articles/watch_face"&gt;Porting PineTime Watch Face from C to Rust On RIOT with LVGL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[JP] &lt;a href="https://medium.com/nttlabs/rust-async-runtime-877b516d934d"&gt;Rust„ÅÆasync„Åßgoroutine„ÅÆÈÄüÂ∫¶„Å´Âãù„Å§&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="call-for-blog-posts"&gt;Call for Blog Posts&lt;/h1&gt;
&lt;p&gt;The Rust Core Team wants input from the community!
If you haven't already, &lt;a href="https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html"&gt;read the official blog&lt;/a&gt; and submit a blog post - it will show up here!
Here are the wonderful submissions since the call for blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2020/09/21/ethics.html"&gt;Rust 2021 - Ethical Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://estada.ch/2020/9/23/my-rust-2021-wishlist-for-the-2021-roadmap/"&gt;My Rust 2021 Wishlist for the 2021 Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nindalf.com/posts/rust-2021/"&gt;Rust 2021: Lower the barriers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://longfangsong.github.io/2020/09/07/Rust-2021-Request-for-a-better-patch-in-cargo/"&gt;Request for a better [patch] in cargo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://haurchefant.fr/posts/what-i-wish-for-rust2021/"&gt;What I wish for #Rust2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncameron.org/blog/rust-in-2021/"&gt;Rust in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/mark-i-m/57b51099e02f2d1fb4d4a4bf08e92965"&gt;Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mbuffett.com/posts/rust-less-error-handling/"&gt;As a hobbyist rust developer, I want to think less about error handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/pickfire/3bcceeacf0bae22dd9f03c5053a976e3"&gt;Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ridiculousfish.com/blog/posts/least-favorite-rust-type.html"&gt;My Least Favorite Rust Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sam-vente.com/blog/my-rust-2021-wishlist/index.html"&gt;My wish list for Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/imd8b8/my_rust_2021_roadmap/"&gt;My Rust 2021 roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://therealprof.github.io/blog/roadmap-2021-arbitrary-size-primitives/"&gt;Rust Roadmap 2021: Allowing for arbitrary size integer primitives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://therealprof.github.io/blog/roadmap-2021-usable-dev-mode/"&gt;Rust Roadmap 2021: Adding a useful dev mode and making it the default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jyn514.github.io/2020/09/05/Rust-in-2021.html"&gt;Rust in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mgrech.dev/whats-stopping-me-from-using-rust/"&gt;What's Stopping Me From Using Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pastebin.com/d6jaxh7n"&gt;Pastebin submission&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=24368077"&gt;Hacker News submission&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/cargo-about"&gt;cargo-about&lt;/a&gt;, a handy cargo subcommand to list the dependencies and their licenses!&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/820"&gt;Jimuazu&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;373 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-09-14..2020-09-21"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76843"&gt;let user see the full type of type-length limit error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76940"&gt;don't allow implementing trait directly on &lt;code&gt;type-alias-impl-trait&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76749"&gt;give &lt;em&gt;even better&lt;/em&gt; suggestion when matching a const range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76694"&gt;introduce a &lt;code&gt;PartitioningCx&lt;/code&gt; struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76048"&gt;initial support for &lt;code&gt;riscv32gc_unknown_linux_gnu&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75304"&gt;note when a a move/borrow error is caused by a deref coercion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75119"&gt;new MIR optimization pass to reduce branches on match of tuples of enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73595"&gt;improve diagnostics for lifetime after &lt;code&gt;&amp;amp;mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72632"&gt;implement a generic Destination Propagation optimization on MIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1557"&gt;miri: support non-rlib extern files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76525"&gt;add &lt;code&gt;as_str()&lt;/code&gt; to &lt;code&gt;string::Drain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76335"&gt;make all methods of &lt;code&gt;Duration&lt;/code&gt; unstably const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76310"&gt;add &lt;code&gt;[T; N]: TryFrom&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76136"&gt;stabilize some &lt;code&gt;Result&lt;/code&gt; methods as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76135"&gt;stabilize some &lt;code&gt;Option&lt;/code&gt; methods as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75974"&gt;avoid useless &lt;code&gt;sift_down&lt;/code&gt; when &lt;code&gt;std::collections::binary_heap::PeekMut&lt;/code&gt; is never mutably dereferenced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2212"&gt;futures: implement &lt;code&gt;try_take_while&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6046"&gt;clippy: change the criteria of &lt;code&gt;interior_mutable_const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-09-21.md"&gt;2020-09-21&lt;/a&gt;:
  2 Regressions, 5 Improvements, 4 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This was the first week of semi-automated perf triage, and thank goodness:
There was a lot going on. Most regressions are either quite small or already
have a fix published.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rust/issues/72412"&gt;#72412&lt;/a&gt; is probably the most
interesting case. It fixes a pathological problem involving nested closures by
adding cycle detection to what seems to be a relatively hot part of the code.
As a result, most users will see a slight &lt;a href="https://perf.rust-lang.org/compare.html?start=2c69266c0697b0c0b34abea62cba1a1d3c59c90c&amp;amp;end=fdc3405c20122fd0f077f5a77addabc873f20e4c&amp;amp;stat=task-clock"&gt;compile-time
regression&lt;/a&gt;
for their crates.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-09-21.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2977"&gt;[RFC]: Portable SIMD Libs Project Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2965"&gt;Establish a new error handling project group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2706"&gt;Get type of an arbitrary expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2702"&gt;Add generalized arity tuples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76969"&gt;Make RawFd implement the RawFd traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76199"&gt;Permit uninhabited enums to cast into ints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76119"&gt;Stabilize move_ref_pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76107"&gt;Write manifest for MAJOR.MINOR channel to enable rustup convenience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/75454"&gt;Explicitly document the size guarantees that Option makes.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/74430"&gt;Stabilize intra-doc links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/74194"&gt;Add PartialEq impls for Vec &amp;lt;-&amp;gt; slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/issues/73631"&gt;target-feature 1.1: should closures inherit target-feature annotations?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/71274"&gt;might_permit_raw_init: also check aggregate fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2988"&gt;Stable Rustdoc URLs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcmbmc/"&gt;September 29. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcnbcb/"&gt;October 1. Berlin, DE - Berline.rs - Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876708/"&gt;October 5. Auckland, NZ - Rust AKL - Rust meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust at Kraken (London, UK, EU)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/9d9cc4b5-ef5f-40bd-b785-9acf9164aa74"&gt;Backend / Quant Developer at Kraken (Remote EU)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.jobs/en/jobs/1273617/senior-software-development-engineer-aws-ec2"&gt;Senior Software Development Engineer - AWS EC2 at Amazon (Arlington, VA, US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.parity.io/apply/?gh_jid=4170712003"&gt;Wasm Compiler Engineer at Parity (Berlin, DE, London, UK, Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes you don't &lt;em&gt;want&lt;/em&gt; the code to compile. The compiler's job is often to tell you that your code doesn't compile, rather than trying to find some meaning that allows compiling your code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/pre-rfc-returning-automatically-generating-impl-trait/13090/11"&gt;Josh Triplett on rust-internals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/943"&gt;Jacob Pratt&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/iu3ge0/this_week_in_rust_356/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 23 Sep 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-09-23:blog/2020/09/23/this-week-in-rust-357/</guid></item><item><title>This Week in Rust 356</title><link>https://this-week-in-rust.org/blog/2020/09/16/this-week-in-rust-356/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/emberian/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/09/10/survey-launch.html"&gt;Launching the 2020 State of Rust Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/09/14/wg-prio-call-for-contributors.html"&gt;A call for contributors from the WG-prioritization team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/09/14/changelog-42.html"&gt;Rust Analyzer Changelog #42&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tratt.net/laurie/blog/entries/which_parsing_approach.html"&gt;Which Parsing Approach?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io//blog/2020/09/16/challeging-LR-parsing.html"&gt;Challenging LR Parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matej.laitl.cz/bench-rust-kotlin-microservices/"&gt;What I Learnt from Benchmarking Http4k, Ktor (Kotlin) and Actix v2, v3 (Rust) Microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://samsieber.tech/posts/2020/09/registry-structure-influence/"&gt;No Namespaces in Rust is a Feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ianjk.com/devserver/"&gt;Building devserver: An Ultra-Tiny Rust Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jack.wrenn.fyi/blog/rustdocing-nalgebra/"&gt;Taming nalgebra's Rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amanjeev.com/blog/rust-in-science-and-ever-changing-requirements"&gt;Rust in Science and ever-changing requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mateuscosta.me/testing-between-java-and-rust"&gt;From @Test to #[test]: an essay about testing between Java and Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-standard-rust"&gt;Learn Standard Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://davidmaceachern.com/posts/collecting-data-from-an-api"&gt;Collecting Data from an API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiredforge.com/blog/sqlite-parser-pt-1/index.html"&gt;SQLite File Parser Pt. 1: The Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jamesmcm.github.io/blog/2020/07/25/intro-dod/"&gt;An introduction to Data Oriented Design with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.codecentric.de/en/2020/09/rust-for-java-developers/"&gt;Rust for Java developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://belmoussaoui.com/article/13-oxidizing-portals"&gt;Oxidizing portals with zbus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-more-rust"&gt;Learn More Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dpbriggs.ca/blog/Implementing-Method-Calls-In-x7"&gt;Implementing Records in x7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/tjtelan/let-s-build-a-single-binary-grpc-server-client-with-rust-in-2020-part-4-3k9f"&gt;Let's build a single binary gRPC server-client with Rust in 2020 - Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/3/"&gt;Make A Language - Part Three: Defining variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexliesenfeld.com/posts/2020/rust-http-testing-with-httpmock/"&gt;Rust HTTP Testing with httpmock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.eldruin.com/ccs811-indoor-air-quality-sensor-driver-in-rust/"&gt;Announcing the CCS811 indoor air quality sensor driver&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/SubscriberLink/830902/b751810a99460a39/"&gt;OpenPGP in Rust: the Sequoia project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dotxlem/assemblylift-v0-2-preview-rpc-based-io-modules-2d38"&gt;AssemblyLift v0.2 preview: RPC-based IO modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://paper.dropbox.com/published/Announcing-Actix-Web-v3.0-QOXXb1lXgTubzXHzUq9ONY5"&gt;Announcing Actix Web v3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io//2020/09/13/your-language-sucks.html"&gt;Your Language Sucks, It Doesn't Matter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tiobe.com/tiobe-index/"&gt;Rust is #18 in the TIOBE Index for September 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shift.click/blog/github-actions-rust/"&gt;A Few Github Action "Recipes" for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vmm.dev/en/rust/krabs.md"&gt;Writing an x86 bootloader in Rust that can launch vmlinux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/ukVqQGbxM9A"&gt;GOTO 2020 - Next-Generation Programming: Rust &amp;amp; Elm - Richard Feldman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="call-for-blog-posts"&gt;Call for Blog Posts&lt;/h1&gt;
&lt;p&gt;The Rust Core Team wants input from the community!
If you haven't already, &lt;a href="https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html"&gt;read the official blog&lt;/a&gt; and submit a blog post - it will show up here!
Here are the wonderful submissions since the call for blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/09/12/rust-in-2021.html"&gt;Rust in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hsivonen.fi/rust2021/"&gt;Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/Byron/gitoxide"&gt;gitoxide&lt;/a&gt;, an idiomatic, modern, lean, fast, safe &amp;amp; pure Rust implementation of git.&lt;/p&gt;
&lt;p&gt;Thanks again to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/812"&gt;Vlad Frolov&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No issues were proposed for CfP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;336 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-09-07..2020-09-14"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76332"&gt;add rust-dev component to support rustc development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76658"&gt;properly encode spans with a dummy location and non-root &lt;code&gt;SyntaxContext&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75573"&gt;add &lt;code&gt;const_item_mutation&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75608"&gt;more structured suggestions for boxed trait objects instead of impl Trait on non-coerceable tail expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75611"&gt;add help note when using type in place of const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75585"&gt;do not promote &lt;code&gt;&amp;amp;mut&lt;/code&gt; of a non-ZST ever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/602"&gt;chalk: simplify lowering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76123"&gt;inliner: emit storage markers for introduced arg temporaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76308"&gt;enable the &lt;code&gt;SimplifyArmIdentity&lt;/code&gt; MIR optimization at &lt;code&gt;mir-opt-level=1&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75740"&gt;stabilize &lt;code&gt;doc_alias&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74328"&gt;stabilize &lt;code&gt;core::future::&lt;/code&gt;{&lt;code&gt;pending&lt;/code&gt;,&lt;code&gt;ready&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76114"&gt;add saturating methods for &lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75021"&gt;add &lt;code&gt;slice::array_chunks_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76530"&gt;eliminate mut reference UB in &lt;code&gt;Drop&lt;/code&gt; impl for &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73971"&gt;&lt;code&gt;BTreeMap&lt;/code&gt; mutable iterators should not take any reference to visited nodes during iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74437"&gt;&lt;code&gt;BTreeMap&lt;/code&gt;: move up reference to map's root from &lt;code&gt;NodeRef&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76458"&gt;add &lt;code&gt;drain_filter&lt;/code&gt; method to &lt;code&gt;HashMap&lt;/code&gt; and &lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/896"&gt;arch: AVX512F&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76484"&gt;add &lt;code&gt;MaybeUninit::assume_init_drop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76527"&gt;remove internal and unstable &lt;code&gt;MaybeUninit::UNINIT&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8701"&gt;cargo: fix non-determinism with new feature resolver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-09-15.md"&gt;2020-09-15&lt;/a&gt;:
  1 regression, 2 improvements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2963"&gt;eRFC: Add JSON backend to Rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2977"&gt;[RFC]: Portable SIMD Libs Project Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2706"&gt;Get type of an arbitrary expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2702"&gt;Add generalized arity tuples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76310"&gt;Add &lt;code&gt;[T; N]: TryFrom&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; (insta-stable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76275"&gt;Implementation of Write for some immutable ref structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76199"&gt;Permit uninhabited enums to cast into ints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76136"&gt;Stabilize some Result methods as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76135"&gt;Stabilize some Option methods as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76119"&gt;Stabilize move_ref_pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/75454"&gt;Explicitly document the size guarantees that Option makes.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/74430"&gt;Stabilize intra-doc links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/issues/73631"&gt;target-feature 1.1: should closures inherit target-feature annotations?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/71274"&gt;might_permit_raw_init: also check aggregate fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2985"&gt;rustdoc edit links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/gbzjxrybcmbvb/"&gt;September 16. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Linz/events/271857244/"&gt;September 17. Linz, AT - Rust Linz - Rust Meetup Linz - Meaghan Lewis on Rust, Embedded Rust with Roland Ruckerbauer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcmbwb/"&gt;September 17. Berlin, DE - Berline.rs - Berlin Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcmbmc/"&gt;September 29. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://payward.wd1.myworkdayjobs.com/en-US/Kraken_Careers/job/EMEA---Remote/Backend-Engineer---Rust_L-42"&gt;Backend Engineer - Rust at Kraken (Remote AMER or EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://payward.wd1.myworkdayjobs.com/en-US/Kraken_Careers/job/EMEA---Remote/Senior-Backend-Engineer---Rust--Remote-_R-17"&gt;Senior Backend Engineer - Rust at Kraken (Remote AMER or EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://payward.wd1.myworkdayjobs.com/en-US/Kraken_Careers/job/EMEA---Remote/Backend---Quant-Developer_L-3"&gt;Backend / Quant Developer at Kraken (Remote EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://payward.wd1.myworkdayjobs.com/en-US/Kraken_Careers/job/AMER---Remote/Backend-Engineer---Crypto-Payments_L-41"&gt;Backend Engineer - Crypto/Payments at Kraken (Remote AMER, APAC, EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://anixe.bamboohr.com/jobs/view.php?id=130"&gt;Rust Software Engineer - Backend at ANIXE (Wroc≈Çaw, PL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.purestake.com/about/careers/openings/?jobId=d2VA-4HA7Iw6&amp;amp;utm_content=138834881&amp;amp;utm_medium=social&amp;amp;utm_source=twitter&amp;amp;hss_channel=tw-1214659473123487744"&gt;Senior Blockchain Engineer at PureStake (Boston, MA, US or Madrid, ES, or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.indeed.com/viewjob?cmp=Georg-Fischer-Signet&amp;amp;t=Senior+Embedded+Software+Engineer&amp;amp;jk=8757fb7de3b1c160&amp;amp;q=georg+fischer&amp;amp;vjs=3"&gt;Senior Embedded Software Engineer at Georg Fischer (El Monte, CA, US)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;When you have a lifetime &lt;code&gt;&amp;lt;'a&amp;gt;&lt;/code&gt; on a struct, that lifetime denotes references to values stored &lt;em&gt;outside&lt;/em&gt; of the struct. If you try to store a reference that points inside the struct rather than outside, you will run into a compiler error when the compiler notices you &lt;strong&gt;lied&lt;/strong&gt; to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/how-to-resolve-error-e0499-cannot-borrow-as-mutable-more-than-once-at-a-time-in-this-case/48815/3"&gt;Alice Ryhl on rust-users&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/939"&gt;Tom Phinney&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/iu3ge0/this_week_in_rust_356/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 16 Sep 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-09-16:blog/2020/09/16/this-week-in-rust-356/</guid></item><item><title>This Week in Rust 355</title><link>https://this-week-in-rust.org/blog/2020/09/09/this-week-in-rust-355/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/emberian/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html"&gt;Planning the 2021 Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/09/07/changelog-41.html"&gt;Rust Analyzer Changelog #41&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/09/07/changelog-130.html"&gt;IntelliJ Rust Changelog #130&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-013/"&gt;This Month in Rust GameDev #13 - August 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2020-08/"&gt;This Month in Rust OSDev (August 2020)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jamesmcm.github.io/blog/2020/09/05/vopono/#en"&gt;Retrospective of my first useful Rust project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-standard-rust"&gt;Learn Standard Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[TR] &lt;a href="https://tourofrust.com/00_tr.html"&gt;Rust Turu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/a-half-hour-to-learn-rust"&gt;A half-hour to learn Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brunooliveira/rust-understanding-traits-1-45md"&gt;Rust - understanding traits 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/imaculate3/that-s-so-rusty-mutables-5b40"&gt;That's so Rusty: Mutables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=DMAnfOlhSpU"&gt;Choosing Rust - Intro to Rust and Ownership&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-more-rust"&gt;Learn More Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/linux-system-call-fork-in-rust/"&gt;Linux System Call &lt;code&gt;fork()&lt;/code&gt; in Rust &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/peeking-inside-a-rust-enum"&gt;Peeking inside a Rust enum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mozilla.org/nnethercote/2020/09/08/how-to-speed-up-the-rust-compiler-one-last-time/"&gt;How to speed up the Rust compiler one last time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.haiku-os.org/blog/nielx/2020-09-06_rust_on_haiku_the_case_of_the_disappearing_deceased_threads/"&gt;Rust on Haiku: the Case of the Disappearing Deceased Threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@glaubercosta_11125/c-vs-rust-an-async-thread-per-core-story-28c4b43c410c"&gt;C++ vs Rust: an async Thread-per-Core story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.digital-horror.com/twistrs/"&gt;Twistrs - Domain name enumeration library in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2020/09/03/performance-cheating.html"&gt;If you want performance, cheat!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.datalust.co/deserializing-json-really-fast/"&gt;Deserializing JSON really fast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://confused.ai/posts/intercepting-zoom-tls-encryption-bpf-uprobes"&gt;Intercepting Zoom's encrypted data with BPF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: This article uses methods that could be used illegally in many areas worldwide. Please do not use such methods illegally. The This Week in Rust team and the Rust project leadership are not responsible for any illegal activity by readers.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/0"&gt;Make A Language - Part Zero: Getting set up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/1"&gt;Make A Language - Part One: A basic parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/2"&gt;Make A Language - Part Two: Whitespace support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/tjtelan/let-s-build-a-single-binary-grpc-server-client-with-rust-in-2020-part-3-3fo8"&gt;Let's build a singl binary gRPC server-client with Rust in 2020 - Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/Measter/2108508ba25ebe3978a6c10a1e01b9ad"&gt;My Adventures in MMIO Abstraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prateeknischal.github.io/i-c-and-so-does-rust/"&gt;I C and .so does Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/http-status-codes-async-rust/"&gt;HTTP Status Codes With Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PL] &lt;a href="https://postacnormalna.pl/ruch-kamery/"&gt;CrabbyBird #2 Poruszanie kamerƒÖ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/VIZK14pnGcw"&gt;Using rust jni to call an external rust library in java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/HO-KMVXvXdA"&gt;1 - Basic Actix Web Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/p22KFotfMYg"&gt;2 - Creating the Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/tK7qt0igtZA"&gt;3 - Working with the Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/lxBxeKOZu3w"&gt;4 - Getting the links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alastairreid.github.io/why-not-both/"&gt;Rust testing or verifying: Why not both?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-sessions-introduction/"&gt;Learning Embedded Rust with Knurling-rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.marcoieni.com/2020/09/create-an-amazing-rust-github-project-in-no-time/"&gt;Create an amazing Rust GitHub project in no time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncameron.org/blog/leaving-the-rust-core-team/"&gt;Leaving the Rust core team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bobweb.co/article/threadripper-meets-rustc"&gt;Threadripper meets rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://people.mpi-sws.org/~jung/thesis.html"&gt;Understanding and Evolving the Rust Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.aloni.org/posts/path-trimming-in-rust-nightly/"&gt;Path Trimming in Nightly Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evrone.com/steve-klabnik-interview"&gt;Steve Klabnik Interview - "Rust isn't afraid to be imperfect as long as we ship something useful"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Dhghomon/programming_at_40/blob/master/README.md"&gt;On finally learning to program at the age of 40&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/1r094Uzz7A0"&gt;Iota Identity-Diff Macro - Live Stream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/pandaman64/serde-query/"&gt;serde-query&lt;/a&gt;, an efficient query language for Serde.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/810"&gt;Vlad Frolov&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No issues were proposed for CfP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;332 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-08-31..2020-09-07"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76245"&gt;inliner: avoid query cycles when optimizing generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73996"&gt;diagnostics: shorten paths of unique symbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75082"&gt;add &lt;code&gt;-Z proc-macro-backtrace&lt;/code&gt; to allow showing proc-macro panics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75931"&gt;suggest &lt;code&gt;if let x = y&lt;/code&gt; when encountering &lt;code&gt;if x = y&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76067"&gt;MIR peephole optimize {Ne, Eq}(_1, false) into _1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1532"&gt;miri: move panic payload state from Machine to Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75529"&gt;eliminate some other bound checks when index comes from an enum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76160"&gt;improve recovery on malformed &lt;code&gt;format!&lt;/code&gt; call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70793"&gt;specialize some collection and iterator operations to run in-place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74559"&gt;stabilize &lt;code&gt;deque_make_contiguous&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75207"&gt;add &lt;code&gt;slice::check_range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75200"&gt;BTreeMap: introduce marker::ValMut and reserve Mut for unique access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76120"&gt;add &lt;code&gt;[T; N]::as_[mut_]slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74366"&gt;implement &lt;code&gt;Seek::stream_position()&lt;/code&gt; for &lt;code&gt;BufReader&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75994"&gt;&lt;code&gt;impl Rc::new_cyclic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76139"&gt;make &lt;code&gt;cow_is_borrowed&lt;/code&gt; methods const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/332"&gt;compiler-builtins: greatly improve division performance for u128 and other cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/890"&gt;stdarch: bye bye MMX!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/891"&gt;stdarch: AVX512&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2205"&gt;futures-rs: implement &lt;code&gt;FusedStream&lt;/code&gt; for &lt;code&gt;FuturesOrdered&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2206"&gt;futures-rs: fix UB due to missing &lt;code&gt;'static&lt;/code&gt; on &lt;code&gt;task::waker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/197"&gt;hashbrown: use the alloc crate on stable Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/200"&gt;hashbrown: remove &lt;code&gt;from_key_hashed_nocheck&lt;/code&gt;'s &lt;code&gt;Q: Hash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-09-08.md"&gt;2020-09-08&lt;/a&gt;:
  3 regressions, 0 improvements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few small compile-time regressions this week. The first was
&lt;a href="https://github.com/rust-lang/rust/pull/70793"&gt;#70793&lt;/a&gt;, which added some
specializations to the standard library in order to increase runtime
performance. The second was
&lt;a href="https://github.com/rust-lang/rust/pull/73996"&gt;#73996&lt;/a&gt;, which adds an option to
the diagnostics code to print only the names of types and traits when they are
unique instead of the whole path. The third was
&lt;a href="https://github.com/rust-lang/rust/pull/75200"&gt;#75200&lt;/a&gt;, which refactored part
of &lt;code&gt;BTreeMap&lt;/code&gt; to avoid aliasing mutable references.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2977"&gt;[RFC]: Portable SIMD Libs Project Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2965"&gt;Establish a new error handling project group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76310"&gt;Add &lt;code&gt;[T; N]: TryFrom&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; (insta-stable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76198"&gt;Make some Ordering methods const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76136"&gt;Stabilize some Result methods as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/76135"&gt;Stabilize some Option methods as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/75502"&gt;Use implicit (not explicit) rules for promotability by default in &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/pull/74989"&gt;Implement &lt;code&gt;Index&lt;/code&gt; and &lt;code&gt;IndexMut&lt;/code&gt; for arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge]&lt;a href="https://github.com/rust-lang/rust/issues/50146"&gt;Tracking issue for &lt;code&gt;#[doc(alias = "...")]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-NYC/events/272982073/"&gt;September 9. East Coast, US - Rust East Coast Virtual Talks + Q&amp;amp;A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-%D0%B2-%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B5/events/272798484/"&gt;September 11. Russia - Russian Rust Online Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/gbzjxrybcmbvb/"&gt;September 16. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Linz/events/271857244/"&gt;September 17. Linz, AT - Rust Linz - Rust Meetup Linz - Meaghan Lewis on Rust, Embedded Rust with Roland Ruckerbauer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcmbwb/"&gt;September 17. Berlin, DE - Berline.rs - Berlin Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybcmbmb/"&gt;September 9. Atlanta, GA, US - Rust Atlanta - Grab a beer with fellow Rustaceans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/268567961/"&gt;September 10. Lehi, UT, US - Utah Rust - The Blue Pill: Rust on Microcontrollers (Sept / Second Round)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;It's amazing how frequent such "rare edge cases" can be. Especially when there are millions of people using billions of files originating from God know what operating systems. Far better things are checked properly if one want robust code. As Rust uses do.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/disappointed-with-path/48148/5"&gt;ZiCog on rust-users&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/938"&gt;Edoardo Morandi&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ippv0q/this_week_in_rust_355/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 09 Sep 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-09-09:blog/2020/09/09/this-week-in-rust-355/</guid></item></channel></rss>