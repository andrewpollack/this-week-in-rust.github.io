<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/feeds/all-en.atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2018-08-21T00:00:00-04:00</updated><entry><title>This Week in Rust 248</title><link href="https://this-week-in-rust.org/blog/2018/08/21/this-week-in-rust-248/" rel="alternate"></link><updated>2018-08-21T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2018-08-21:blog/2018/08/21/this-week-in-rust-248/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/annoucning-rust-2018-preview-2/8218"&gt;Announcing Rust 2018 Preview 2&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/97mpt0/annoucning_rust_2018_preview_2/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncameron.org/blog/rls-1-0-release-candidate/"&gt;Announcing the RLS 1.0 release candidate&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/98gqsg/announcing_the_rls_10_release_candidate/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@shnatsel/how-rusts-standard-library-was-vulnerable-for-years-and-nobody-noticed-aebf0503c3d6"&gt;How Rust’s standard library was vulnerable for years and nobody noticed&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/988euh/how_rusts_standard_library_was_vulnerable_for/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scottjmaddox.github.io/Safe-partial-initialization-in-Rust/"&gt;Safe partial initialization in Rust&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/98nmge/safe_partial_initialization_in_rust/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raphlinus.github.io/programming/rust/2018/08/17/undefined-behavior.html"&gt;With undefined behavior, anything is possible&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/985id0/with_undefined_behavior_anything_is_possible/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html"&gt;Rust GraphQL webserver with Warp, Juniper, and MongoDB&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/97zlav/rust_graphql_webserver_with_warp_juniper_mongodb/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/anatomy-of-a-fetch-8872a5c843cd"&gt;Programming Servo: Anatomy of a fetch&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/986p56/programming_servo_anatomy_of_a_fetch/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2018/08/16/ask.html"&gt;Thanks for asking&lt;/a&gt;. An analysis of questions that are asked on r/rust subreddit. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/97ps8m/blog_thanks_for_asking/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustwasm.github.io/2018/08/14/this-week-in-rust-wasm-006.html"&gt;This week in Rust and WebAssembly 6&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/97ah4r/this_week_in_rust_and_webassembly_6/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;[podcast] &lt;a href="https://newrustacean.com/show_notes/news/rust_1_28/"&gt;New Rustacean news: Rust 1.28&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/98tkve/new_rustaceannews_rust_128/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/wasm-bindgen-futures"&gt;wasm-bindgen-futures&lt;/a&gt;, a crate to make ECMAScript futures and Rust futures interoperate. Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/438"&gt;Vikrant&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/98d3zk/call_for_help_building_a_distributed_filesystem/"&gt;Call for help building a distributed filesystem in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[easy] &lt;a href="https://github.com/rust-lang/rust/issues/50723"&gt;rustc: mark applicability of diagnostic suggestions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;157 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-08-13..2018-08-20"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51880"&gt;the Great Generics Generalisation: HIR Followup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51131"&gt;implement Unsized Rvalues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53233"&gt;add bare-metal aarch64 target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52972"&gt;&lt;code&gt;debug_assert&lt;/code&gt; to ensure that &lt;code&gt;from_raw_parts&lt;/code&gt; is only used properly aligned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53406"&gt;do not suggest conversion method that is already there&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53237"&gt;export WASM table by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53321"&gt;fix usage of &lt;code&gt;wasm_target_feature&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53293"&gt;syntax: enforce attribute grammar in the parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53085"&gt;move SmallVector and ThinVec out of libsyntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53335"&gt;resolve: crates only exist in the type namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52923"&gt;&lt;code&gt;#[feature(uniform_paths)]&lt;/code&gt;: allow &lt;code&gt;use x::y;&lt;/code&gt; to resolve through &lt;code&gt;self::x&lt;/code&gt;, not just &lt;code&gt;::x&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53324"&gt;&lt;code&gt;Self&lt;/code&gt; in type definitions&lt;/a&gt; (RFC &lt;a href="http://rust-lang.github.io/rfcs/2300-self-in-typedefs.html"&gt;#2300&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53239"&gt;rustc_codegen_llvm: restore the closure env alloca hack for LLVM 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53290"&gt;make LLVM emit assembly comments with &lt;code&gt;-Z asm-comments&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53288"&gt;unions are not always trivially dropable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53316"&gt;cause cycle err on inf trait normalization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53258"&gt;NLL: optimize reassignment immutable state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53383"&gt;speed up NLL with &lt;code&gt;HybridIdxSetBuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53304"&gt;&lt;code&gt;TokenStream::extend&lt;/code&gt;&lt;/a&gt; (awesome speedups!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53256"&gt;don't accept non-string literals for the format string in writeln&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/47562"&gt;add the identity function as core::convert::identity&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/2306-convert-id.html"&gt;#2306&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53208"&gt;don't panic on &lt;code&gt;std::env::vars()&lt;/code&gt; when env is null&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53377"&gt;use &lt;code&gt;target_pointer_width&lt;/code&gt; for &lt;code&gt;BACKTRACE_ELF_SIZE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52553"&gt;non-naive implementation of &lt;code&gt;VecDeque.append&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50911"&gt;stabilize &lt;code&gt;use_extern_macros&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2504"&gt;RFC 2504: Fix the Error trait&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2351"&gt;RFC 2351: Add &lt;code&gt;is_sorted&lt;/code&gt; to the standard library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2229"&gt;RFC 2229: Closures Capture Disjoint Fields&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/1892"&gt;RFC 1892: Deprecate uninitialized in favor of a new MaybeUninit type&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2306"&gt;RFC 2306: Add &lt;code&gt;pub fn identity&amp;lt;T&amp;gt;(x: T) -&amp;gt; T { x }&lt;/code&gt; to &lt;code&gt;core::convert&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://api.github.com/repos/rust-lang/rfcs/issues/2497"&gt;eRFC: if- and while-let-chains, take 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2521"&gt;Unify std::os::raw::c_void and libc::c_void via libcore&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://api.github.com/repos/rust-lang/rust/issues/53533"&gt;Add Error::source method per RFC 2504.&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://api.github.com/repos/rust-lang/rust/issues/52963"&gt;Tracking issue for integer types conversion to and from byte arrays&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://api.github.com/repos/rust-lang/rust/issues/49602"&gt;Tracking Issue for Iterator::find_map&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://api.github.com/repos/rust-lang/rust/issues/34981"&gt;Allow all literals in attributes (Tracking Issue for RFC #1559)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/41686"&gt;Tracking issue for RFC#1685: Deprecate anonymous parameters&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://api.github.com/repos/rust-lang/rust/issues/52580"&gt;Define non-panicking UTF encoding methods on &lt;code&gt;char&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://api.github.com/repos/rust-lang/rfcs/issues/2526"&gt;Support underscores as constant names&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.github.com/repos/rust-lang/rfcs/issues/2524"&gt;RFC: Permit _ in type aliases&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-content"&gt;Aug 28. Rust Community Content Subteam Meeting at #rust-content on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Aug 29. Rust Events Team Meeting in Telegram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Aug 29. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Sep  5. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="africa"&gt;Africa&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Nairobi/events/253950971/"&gt;Aug 25. Nairobi, KE - Rustbridge Workshop at GirlsCode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/cpblrnyxmbgb/"&gt;Sep  4. Johannesburg, ZA - Monthly Meetup of the Johannesburg Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-TLV/events/253408497/"&gt;Sep 2. Tel Aviv, IL - Cargo, Production and N00bing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Belgium-Rust-user-group/events/249899651/"&gt;Sep  4. Brussels, BE - #3 futures/async/tokio &amp;amp;&amp;amp; Gotham-rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/253541000/"&gt;Sep  5. Berlin, DE - Berlin Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxlbjc/"&gt;Aug 26. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpyxlbkc/"&gt;Aug 27. Durham, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Chicago-Rust-Meetup/events/253621611/"&gt;Aug 28. Chicago, US - Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmyxlblc/"&gt;Aug 28. Dallas, US - Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxmbdb/"&gt;Sep  2. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/mffbtpyxmbhb/"&gt;Sep  5. Indianapolis, US - Indy.rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/cbcmbqyxmbhb/"&gt;Sep  5. Atlanta, US - Grab a beer with fellow Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxmbhb/"&gt;Sep  5. Vancouver, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="south-america"&gt;South America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Uruguay/events/253617627/"&gt;Aug 23. Montevideo, UY - Rust meetup Montevideo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Uruguay/events/253617627/"&gt;Sep  3. Montevideo, UY - Rust meetup - WebAssembly&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tenx.workable.com/jobs/689268"&gt;Software Engineer - Blockchain at TenX, Sydney, AU&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I made a thing to test building every possible Rust program...eventually.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/98v0td/i_made_a_thing_to_test_building_every_possible/"&gt;zowch on /r/rust&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/Flavsditz"&gt;Flavsditz&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://old.reddit.com/r/rust/comments/999jbu/this_week_in_rust_248/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 247</title><link href="https://this-week-in-rust.org/blog/2018/08/14/this-week-in-rust-247/" rel="alternate"></link><updated>2018-08-14T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2018-08-14:blog/2018/08/14/this-week-in-rust-247/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2018/08/08/survey.html"&gt;Launching the 2018 State of Rust Survey&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ManishEarth/status/1027676698068713473"&gt;Discord's new game store makes extensive use of Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vfoley.xyz/rust-compile-speed-tips/"&gt;How to alleviate the pain of Rust compile times&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/"&gt;Never patterns, exhaustive matching, and uninhabited types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2018/08/10/dota2-macos-performance.html"&gt;Benchmarking gfx-portability versus MoltenVK and OpenGL with Dota2 on Mac&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@carllerche/tower-web-a-new-web-framework-for-rust-e2912856851b"&gt;Tower Web — A new web framework for Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bheisler.github.io/post/state-of-gpgpu-in-rust/"&gt;The state of GPGPU in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md"&gt;The Xi text engine CRDT&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-lang-nursery.github.io/wg-net/2018/08/09/going-live.html"&gt;The WG-Net vision for Rust 2018&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/the-embedded-working-group-newsletter-9/8185"&gt;The Embedded WG newsletter 9&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2018/08/14/gsoc.html"&gt;DX11 backend for gfx-rs - GSoC 2018 report&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/lukaslueg/macro_railroad"&gt;macro_railroad&lt;/a&gt;, a library to create neat syntax diagrams for &lt;code&gt;macro_rules!&lt;/code&gt; declarative macros. Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/436"&gt;kornel&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[easy] &lt;a href="https://github.com/rust-lang/rust/issues/50723"&gt;rustc: mark applicability of diagnostic suggestions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang-nursery/wg-net/issues/44"&gt;WG-Net: Call For Example Web Projects&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;102 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-08-06..2018-08-13"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53179"&gt;whitelist wasm32 simd128 target feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53270"&gt;fix a few regressions from enabling macro modularization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53053"&gt;resolve: support custom attributes when macro modularization is enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51990"&gt;Place unions, pointer casts and pointer derefs behind extra feature gates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53283"&gt;suggest float for integer literals where a float was expected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53183"&gt;suggest missing comma in macro call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52788"&gt;add help message for missing &lt;code&gt;IndexMut&lt;/code&gt; impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52644"&gt;add errors for unknown, stable and duplicate feature attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52397"&gt;suggest comma when writing &lt;code&gt;println!("{}" a);&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53051"&gt;emit error for pattern arguments in trait methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53100"&gt;fix improper_ctypes lint for individual foreign items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53088"&gt;NLL: use span of the closure args in free region errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53031"&gt;apply some fixes to cross-language LTO (especially when targeting MSVC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51007"&gt;Un-name globals with private linkage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53161"&gt;avoid many allocations for &lt;code&gt;CString&lt;/code&gt;s during codegen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53025"&gt;change &lt;code&gt;assert!&lt;/code&gt; to &lt;code&gt;debug_assert!&lt;/code&gt; in &lt;code&gt;visit_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53019"&gt;don't &lt;code&gt;collect()&lt;/code&gt; when &lt;code&gt;size_hint&lt;/code&gt; is useless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52872"&gt;make IpvXAddr::new const fns and the well known addresses associated constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53060"&gt;change rustdoc style so fully qualified name does not overlap src link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/1436"&gt;crates.io: add crate size on the crate detail page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2504"&gt;Fix the Error trait&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2351"&gt;Add &lt;code&gt;is_sorted&lt;/code&gt; to the standard library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2306"&gt;Add &lt;code&gt;pub fn identity&amp;lt;T&amp;gt;(x: T) -&amp;gt; T { x }&lt;/code&gt; to core::convert&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2497"&gt;if- and while-let-chains, take 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/1892"&gt;Deprecate uninitialized in favor of a new MaybeUninit type&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2305"&gt;Introduce panic_thin, a fmtless alternative to panic_fmt&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2291"&gt;Add std::mem::zero&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/53125"&gt;(Modules) Tracking issue for the &lt;code&gt;mod.rs&lt;/code&gt; changes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/53027"&gt;Allow to check if sync::Once is already initialized&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/34981"&gt;Allow all literals in attributes (Tracking Issue for RFC #1559)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/49602"&gt;Tracking Issue for Iterator::find_map&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/52580"&gt;Define non-panicking UTF encoding methods on &lt;code&gt;char&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2521"&gt;Unify std::os::raw::c_void and libc::c_void via libcore&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2522"&gt;Generalized Type Ascription&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2523"&gt;#[cfg(accessible(..) / version = ".." / nightly)]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Aug 22. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-content"&gt;Aug 28. Rust Community Content Subteam Meeting at #rust-content on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Aug 29. Rust Events Team Meeting in Telegram&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mad-rs/events/253751178/"&gt;Aug 18. Chennai, IN - Rust Monthly Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Cambridge-Rust-Meetup/events/pzwshpyxlbvb/"&gt;Aug 16. Cambridge, GB - Cambridge Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/253062831/"&gt;Aug 22. Berlin, DE - Berlin Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Portland-Solana-Blockchain-Meetup/events/253180468/"&gt;Aug 16. Portland, US - Meetup w/ Zcash, ParityTech, Solana | Why Use Rust For Blockchain Development&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://rustconf.com/"&gt;Aug 17. Portland, US - RustConf 2018&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxlbzb/"&gt;Aug 19. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxlblb/"&gt;Aug 22. Vancouver, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxlbjc/"&gt;Aug 26. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpyxlbkc/"&gt;Aug 27. Durham, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Chicago-Rust-Meetup/events/253621611/"&gt;Aug 28. Chicago, US - Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmyxlblc/"&gt;Aug 28. Dallas, US - Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://paritytech.io/jobs/"&gt;Rust/Core Developer at Parity Technologies, Berlin&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Fearless concurrency includes fearless refactoring.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/parallel-problems-to-showcase-rust-features/19365/6"&gt;cuviper at rust-users&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/u/juleskers"&gt;Jules Kerssemakers&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/Flavsditz"&gt;Flavsditz&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 246</title><link href="https://this-week-in-rust.org/blog/2018/08/07/this-week-in-rust-246/" rel="alternate"></link><updated>2018-08-07T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2018-08-07:blog/2018/08/07/this-week-in-rust-246/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;🎈🎉 &lt;a href="https://blog.rust-lang.org/2018/08/02/Rust-1.28.html"&gt;Announcing Rust 1.28&lt;/a&gt;. 🎉🎈&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seanmonstar.com/post/176530511587/warp"&gt;warp: a new web framework for Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://misoraclette.github.io/2018/08/04/data_manipulation.html"&gt;Data manipulation in Rust (Part 1: nalgebra)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dend.ro/rust-and-the-case-of-the-redundant-comparison/"&gt;Rust and the case of the redundant comparison&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lukaskalbertodt.github.io/2018/08/03/solving-the-generalized-streaming-iterator-problem-without-gats.html"&gt;Solving the generalized streaming iterator problem without GATs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html"&gt;Stacked borrows: An aliasing model for Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amethyst.rs/blog/release-0-8/"&gt;Amethyst game engine: New tutorial and huge feature update&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mozilla.org/l10n/2018/08/03/intl_pluralrules-a-rust-crate-for-handling-plural-forms-with-cldr-plural-rules/"&gt;&lt;code&gt;intl_pluralrules&lt;/code&gt; - A new crate for CLDR plural rules&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2018/08/04/improve.html"&gt;Notes on two PRs that slightly improve Rust's performance&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@polyglot_factotum/rust-concurrency-patterns-no-context-no-cancel-no-leak-b6c1ec2dafa5"&gt;Rust concurrency patterns: No context, no cancel, no leaks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packages.debian.org/sid/ripgrep"&gt;ripgrep is now packaged in Debian&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustwasm.github.io/2018/08/01/this-week-in-rust-wasm-005.html"&gt;This week in Rust and WebAssembly 5&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/2018-edition-end-of-week-post-2018-08-04/8123"&gt;2018 Edition end of week post (2018-08-04)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/seanmonstar/warp"&gt;warp&lt;/a&gt;, a fast, composable web framework. Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/428"&gt;Willi Kappler&lt;/a&gt; for suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pingcap.com/blog/adding-built-in-functions-to-tikv/"&gt;How to land your first Rust pull request in TiKV&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[easy] &lt;a href="https://github.com/lfairy/maud/issues/143"&gt;Maud: Update benchmarks&lt;/a&gt;. Maud is an HTML template engine for Rust.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821/202"&gt;atom-language-rust: Help with PR reviews&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821/203"&gt;intl_pluralrules: Seeking crate review&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustaceans.org/findwork/starters"&gt;Get started with these beginner-friendly issues&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;165 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-07-23..2018-07-31"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52847"&gt;don't commit thread stack on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51657"&gt;implement a self profiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52983"&gt;update LLVM submodule to 7.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52799"&gt;use &lt;code&gt;BitVector&lt;/code&gt; for global sets of &lt;code&gt;AttrId&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52888"&gt;use suggestions for shell format arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52954"&gt;async can begin expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52234"&gt;resolve: modularize crate-local &lt;code&gt;#[macro_export] macro_rules&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52930"&gt;resolve: record single-segment extern crate import resolutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53001"&gt;privacy: fix an ICE in &lt;code&gt;path_is_private_type&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52712"&gt;reintroduce &lt;code&gt;Undef&lt;/code&gt; and properly check constant value sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52787"&gt;enable RISCV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/llvm/pull/123"&gt;aarch64 fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52975"&gt;NLL migration in the 2018 edition needs two-phase borrows too!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52973"&gt;NLL mentions lifetimes that are not included in printed span(s)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52782"&gt;NLL: dangly paths for box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53115"&gt;NLL: disable some nice region errors in NLL mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52991"&gt;NLL: avoid computing liveness for locals that escape into statics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52959"&gt;NLL: use smaller spans for errors involving closure captures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52948"&gt;NLL: better Diagnostic When "Later" means "A Future Loop Iteration"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52883"&gt;include lifetime in mutability suggestion in NLL messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52834"&gt;NLL: allow conflicting borrows of promoted length zero arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52810"&gt;NLL: Don't make "fake" match variables mutable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53045"&gt;fix NLL migration mode so that reports region errors when necessary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52904"&gt;NLL: sort diagnostics by span&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52206"&gt;slices: fix ZST slice iterators making up pointers; debug_assert alignment in from_raw_parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52968"&gt;App-lint-cability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5824"&gt;add more diagnostics to smooth edition transition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52854"&gt;fix memrchr in MIRI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52823"&gt;&lt;code&gt;invalid_const_promotion&lt;/code&gt;: check if we get the right signal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52732"&gt;remove unstable and deprecated APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52850"&gt;revert "Stabilize to_bytes and from_bytes for integers."&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51919"&gt;provide &lt;code&gt;{to,from}_{ne,le,be}_bytes&lt;/code&gt; functions on integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51609"&gt;treat gc=No characters as numeric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50267"&gt;implement inner deref for &lt;code&gt;Option&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52939"&gt;make &lt;code&gt;io::Read::read_to_end&lt;/code&gt; consider &lt;code&gt;io::Take::limit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52908"&gt;use &lt;code&gt;SetLenOnDrop&lt;/code&gt; in &lt;code&gt;Vec::truncate()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52870"&gt;Implement Unpin for FutureObj and LocalFutureObj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52890"&gt;reexport tests without polluting namespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5861"&gt;cargo: fix the edition build scripts are compiled with&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5811"&gt;cargo: use listed dependency name for feature names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5862"&gt;cargo fully capture rustc and rustdoc output when &lt;code&gt;-Zcompile-progress&lt;/code&gt; is passed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5831"&gt;cargo can silently fix some bad lockfiles (use &lt;code&gt;--locked&lt;/code&gt; to disable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53003"&gt;rustdoc: stabilize &lt;code&gt;--color&lt;/code&gt; and &lt;code&gt;--error-format&lt;/code&gt; options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53002"&gt;rustdoc: make &lt;code&gt;everybody_loops&lt;/code&gt; preserve item declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52990"&gt;fix ICE when rustdoc encounters certain usages of HRTBs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/44493"&gt;Tracking issue for RFC 2093: Infer &lt;code&gt;T: 'x&lt;/code&gt; outlives requirements on structs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/52910"&gt;Calculate capacity when collecting into Option and Result&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/51610"&gt;Undeprecate &lt;code&gt;thread::sleep_ms&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2515"&gt;Permit impl Trait in type aliases&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2514"&gt;Union initialization and Drop&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2517"&gt;Project-based Examples for Cargo Projects&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-content"&gt;Aug 14. Rust Community Content Subteam Meeting at #rust-content on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Aug 15. Rust Events Team Meeting in Telegram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Aug 15. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Aug 22. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Rhein-Main/events/253311151"&gt;Aug 10. Frankfurt, DE - Rhein-Main Rust Meetup (with Special Guest)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Cambridge-Rust-Meetup/events/pzwshpyxlbvb/"&gt;Aug 16. Cambridge, GB - Cambridge Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxlbqb/"&gt;Aug 12. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/pkggvpyxlbrb/"&gt;Aug 13. Seattle, US - Monthly Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/oc-rust/events/253565445/"&gt;Aug 15. Orange County, US - Rust Foreign Function Interface (FFI) Development&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://rustconf.com/"&gt;Aug 17. Portland, US - RustConf 2018&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxlbzb/"&gt;Aug 19. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/253062831/"&gt;Aug 22. Berlin, DE - OpenTechSchool - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxlblb/"&gt;Aug 22. Vancouver, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/92e67g/commure_healthcare_software_startup_hiring_rust/"&gt;Rust Engineer at Commure, Inc. (San Francisco, Boston, Montreal)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;We put in a lot of work to make upgrades painless; for example, we run a tool (called “crater”) before each Rust release that downloads every package on crates.io and attempts to build their code and run their tests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://blog.rust-lang.org/2018/07/27/what-is-rust-2018.html"&gt;Rust Blog: What is Rust 2018&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/u/azriel91"&gt;azriel91&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 245</title><link href="https://this-week-in-rust.org/blog/2018/07/31/this-week-in-rust-245/" rel="alternate"></link><updated>2018-07-31T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2018-07-31:blog/2018/07/31/this-week-in-rust-245/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2018/07/27/what-is-rust-2018.html"&gt;What is Rust 2018&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustwasm.github.io/2018/07/26/announcing-the-js-sys-crate.html"&gt;Announcing the js-sys crate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://old.reddit.com/r/rust/comments/92abkg/rust_and_opengl_from_scratch_a_blog_post_series/"&gt;Learn how to build OpenGL renderer with Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html"&gt;A snapshot of Rust's popularity in July 2018&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html"&gt;Pointers are complicated, or: What's in a byte&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aturon.github.io/2018/07/25/cargo-version-selection/"&gt;Version selection in Cargo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://timryan.org/2018/07/27/cross-compiling-linux-binaries-from-macos.html"&gt;A "rustup target" example: Using a Mac to cross-compile Linux binaries&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@polyglot_factotum/rust-concurrency-patterns-natural-born-pipelines-4d599e7612fc"&gt;Rust concurrency patterns: Natural born pipelines&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://maciejkula.github.io/2018/07/27/recommending-books-with-rust/"&gt;Build a sequence-based recommender system in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/programming-servo-how-to-match-b76c43f76fe6"&gt;Programming Servo: How to match&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/my-experience-with-rust-2018/"&gt;My experience with the Rust 2018 preview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@robert.balicki_2494/writing-a-front-end-webassembly-framework-in-rust-lessons-learned-7cc48ed27d96"&gt;Writing a front-end WebAssembly framework in Rust: lessons learned&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/2018-edition-end-of-week-post-2018-07-27/8078"&gt;2018 edition end of week post (2018-07-27)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/the-embedded-working-group-newsletter-8/8089"&gt;The Embedded WG newsletter 8&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/rust-2018-release-schedule-and-extended-beta/8076"&gt;Rust 2018 release schedule and extended beta&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/NerdyPepper/taizen"&gt;Taizen&lt;/a&gt;, a wikipedia browser for your terminal. Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/419"&gt;nasa42&lt;/a&gt; for suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/help-test-out-the-2018-module-system-changes/8047"&gt;Help test out the 2018 module system changes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/exercism-io-needs-mentors/19222"&gt;exercism.io needs Rust mentors&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Keats/jsonwebtoken/issues/21"&gt;jsonwebtoken: Add ES* family&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustaceans.org/findwork/starters"&gt;Get started with these beginner-friendly issues&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;158 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-07-23..2018-07-31"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52673"&gt;try to fix an ICE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52571"&gt;abort if a promoted fails to be const evaluable and its runtime checks didn't trigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52645"&gt;allow declaring existential types inside blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52546"&gt;do not overwrite child def-id in place but rather remove/insert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52654"&gt;format linker args in a way that works for gcc and ld&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52618"&gt;rustc: implement tokenization of nested items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52566"&gt;buffer NLL errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52617"&gt;don't match on region kinds when reporting NLL errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52648"&gt;NLL: improve the "fully elaborated type" case in region errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52678"&gt;NLL: use better spans in some errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52733"&gt;NLL: make temp for each candidate in &lt;code&gt;match&lt;/code&gt; arm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52830"&gt;NLL: fix some things for bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52740"&gt;suggest underscore when using dashes in crate name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52702"&gt;suggest fix when encountering different mutability from impl to trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51361"&gt;do a basic sanity check for all constant values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52722"&gt;tweak the raw_identifiers lints in 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52711"&gt;change ManuallyDrop&lt;T&gt; to a lang item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52637"&gt;don't use NonNull::dangling as sentinel value in Rc, Arc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52391"&gt;add unaligned volatile intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52402"&gt;&lt;code&gt;impl PartialEq+Eq for BuildHasherDefault&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52674"&gt;&lt;code&gt;impl Executor for Box&amp;lt;E: Executor&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52721"&gt;&lt;code&gt;impl std::ops::Try for std::task::Poll&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52759"&gt;&lt;code&gt;impl Send &amp;amp; Sync for JoinHandle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52744"&gt;make &lt;code&gt;memrchr&lt;/code&gt; use &lt;code&gt;align_offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52656"&gt;stablize Redox Unix Sockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52805"&gt;don't &lt;code&gt;format!()&lt;/code&gt; string literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5828"&gt;&lt;code&gt;cargo -Zcompile-progress&lt;/code&gt;: use the target name in the progress bar when building a test/binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52751"&gt;rustdoc: rework how default passes are chosen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2229"&gt;Closures Capture Disjoint Fields&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/41022"&gt;Tracking issue for &lt;code&gt;:vis&lt;/code&gt; macro matcher&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/44493"&gt;Tracking issue for RFC 2093: Infer &lt;code&gt;T: 'x&lt;/code&gt; outlives requirements on structs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/48589"&gt;Tracking issue for RFC 2151, Raw Identifiers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/41263"&gt;Tracking issue for &lt;code&gt;ToOwned::clone_into&lt;/code&gt; (&lt;code&gt;toowned_clone_into&lt;/code&gt;)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/52910"&gt;Calculate capacity when collecting into Option and Result&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2509"&gt;Teach &lt;code&gt;concat!()&lt;/code&gt; to join &lt;code&gt;[u8]&lt;/code&gt; and byte &lt;code&gt;str&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Aug  8. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-content"&gt;Aug 14. Rust Community Content Subteam Meeting at #rust-content on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Aug 15. Rust Events Team Meeting in Telegram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Aug 15. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="africa"&gt;Africa&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/cpblrnyxlbkb/"&gt;Aug  7. Johannesburg, ZA - Monthly Meetup of the Johannesburg Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Berlin/events/252872742/"&gt;Aug  8. Berlin, DE - Binding to Rust from everything&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/xkdlvpyxlblb/"&gt;Aug  8. Berlin, DE - OpenTechSchool - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Rhein-Main/events/253311151"&gt;Aug 10. Frankfurt, DE - Rhein-Main Rust Meetup (with Special Guest)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Cambridge-Rust-Meetup/events/pzwshpyxlbvb/"&gt;Aug 16. Cambridge, GB - Cambridge Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxlbhb/"&gt;Aug  5. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxlblb/"&gt;Aug  8. Vancouver, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/252742624"&gt;Aug  9. Arlington, US - Rust DC - Mid-month Rustful&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dbcfrpyxlbmb/"&gt;Aug  9. Columbus, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utahrust/events/252760018/"&gt;Aug  9. Lehi, UT - Utah Rust - Monthly Meeting #3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxlbqb/"&gt;Aug 12. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/pkggvpyxlbrb/"&gt;Aug 13. Seattle, US - Monthly Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://rustconf.com/"&gt;Aug 17. Portland, US - RustConf 2018&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/92e67g/commure_healthcare_software_startup_hiring_rust/"&gt;Rust Engineer at Commure, Inc. (San Francisco, Boston, Montreal)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is more restrictive, indeed. But only in the sense that a car with seatbelts is more restrictive than one without: both reach the same top speed, but only one of them will save you in a bad day 😊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/which-language-gives-users-more-control-c-or-rust/19034/8"&gt;Felix91gr on rust-users&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/u/juleskers"&gt;Jules Kerssemakers&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary></entry></feed>