<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/feeds/all-en.atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2021-04-21T00:00:00-04:00</updated><entry><title>This Week in Rust 387</title><link href="https://this-week-in-rust.org/blog/2021/04/21/this-week-in-rust-387/" rel="alternate"></link><updated>2021-04-21T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-04-21:blog/2021/04/21/this-week-in-rust-387/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No papers/research projects this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/04/15/compiler-team-april-steering-cycle.html"&gt;Rust Compiler April Steering Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/04/17/lang-team-apr-update.html"&gt;Lang team April update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/04/20/jsha-rustdoc-member.html"&gt;Jacob Hoffman-Andrews joins the Rustdoc team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-04-15-introducing-jane-lusby/"&gt;Introducing Jane Lusby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-04-15-introducing-shane-miller/"&gt;Introducing Shane Miller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/04/19/changelog-73.html"&gt;rust-analyzer Changelog #73&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-23/"&gt;Knurling-rs changelog #23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ballistacompute.org/thisweek/2021/04/18/this-week-in-ballista-11/"&gt;This Week in Ballista #11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2021-04-welcome-alice"&gt;Welcoming Alice Ryhl as the first paid Tokio contributor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zellij.dev/news/beta/"&gt;Zellij: a Rusty terminal multiplexer releases a beta version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nrxus.github.io/faux/blog/landing-v-0-1.html"&gt;faux: a struct mocking library - landing v0.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://diziet.dreamwidth.org/8121.html"&gt;Otter - a game server for arbitrary board games&lt;/a&gt;.  It is mainly &lt;a href="https://www.chiark.greenend.org.uk/~ianmdlvl/otter/docs/build.html"&gt;written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/033-rust-1.50-1.51/"&gt;What's New in Rust 1.50 and 1.51&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blainehansen.me/post/red-blue-functions-are-actually-good/"&gt;Red &amp;amp; blue functions are actually a good thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.temporal.io/blog/why-rust-powers-core-sdk/"&gt;Why Rust powers Temporal's new Core SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.simonclark.dev/2020/08/10/optimizing-sudoku-solver.html"&gt;Optimizing a sudoku solver in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daveshawley.medium.com/my-journey-to-understand-rust-lang-28e4cf808b12"&gt;My journey to understand rust-lang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://christine.website/blog/dev-printerfact-2021-04-17"&gt;How I Implemented /dev/printerfact in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gal.hagever.com/posts/why-fnm-was-rewritten-in-rust/"&gt;Why fnm was rewritten in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dbanty/running-graphql-on-lambda-with-rust-1lak"&gt;Running GraphQL on Lambda with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://myrrlyn.net/blog/bitvec/alias-detection"&gt;Runtime Alias Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/whats-in-the-box"&gt;What's in the box?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/vLYit_HHPaY"&gt;An Overview of the Embedded Rust Ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/perimeterx/late-night-confessions-building-a-website-using-rust-rocket-diesel-and-askama-part-1-aeccade43252"&gt;Late Night Confessions — Building a Website Using Rust, Rocket, Diesel, and Askama - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pretzelhammer/rust-blog/blob/master/posts/tour-of-rusts-standard-library-traits.md"&gt;Tour of Rust's Standard Library Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hamatti.org/posts/learning-rust-3-crates-io-publishing-your-package/"&gt;Learning Rust #3: crates.io &amp;amp; publishing your package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://heroiclabs.com/blog/tutorials/rust-fishgame/"&gt;Making an online multiplayer game in Rust with Nakama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rvanderlaan/creating-a-sleek-masonry-gallery-with-react-and-webassembly-17p2"&gt;Creating a Sleek Masonry Gallery with React and WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ecorax.net/macro-bunker-2/"&gt;The GPIO war: macro bunkers for typestate explosions (2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://timmmm.github.io/std-embedded-rust/index.html"&gt;Using &lt;code&gt;std&lt;/code&gt; in embedded Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/rust-and-tui-building-a-command-line-interface-in-rust/"&gt;Rust and TUI: Building a command-line interface in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/NwYY00paiH0"&gt;Rust: Serde: Working with untyped JSON values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://bugzmanov.github.io/nes_ebook/index.html"&gt;Writing NES Emulator in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fnordig.de/2021/04/16/rustc-ios-and-an-m1/"&gt;rustc, iOS and an M1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tectalk.co/microsoft-previews-rust-for-windows/"&gt;Microsoft Previews Rust For Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.abetterinternet.org/post/preparing-rustls-for-wider-adoption/"&gt;Preparing Rustls for Wider Adoption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://areweyeetyet.rs/"&gt;Are We Yeet Yet?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lupyuen.github.io/articles/rust"&gt;Run Rust RISC-V Firmware with BL602 IoT SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/vvZA9n3e5pc"&gt;Stanford Seminar - The Soul of a New Machine: Rethinking the Computer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/jjpe/deltoid"&gt;deltoid&lt;/a&gt;, another crate for delta-compressing Rust data structures.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/904"&gt;Joey Ezechiëls&lt;/a&gt; for the nomination&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No calls for participation this week&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;292 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-04-12..2021-04-19"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84113"&gt;detect when suggested paths enter extern crates more rigorously&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84274"&gt;don't set fast-math for the SIMD operations we set it for previously&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83948"&gt;add lint &lt;code&gt;deref_nullptr&lt;/code&gt; detecting when a null ptr is dereferenced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84313"&gt;fix suggestion for unsized function parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84228"&gt;suggest to borrow after failing to cast from &lt;code&gt;T&lt;/code&gt; to &lt;code&gt;*const/mut T&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83799"&gt;stabilize &lt;code&gt;non-ascii-idents&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84086"&gt;stabilize &lt;code&gt;is_subnormal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84084"&gt;stabilize &lt;code&gt;duration_zero&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84082"&gt;stabilize &lt;code&gt;nonzero_leading_trailing_zeros&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82992"&gt;stabilize &lt;code&gt;bufreader_seek_relative&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84121"&gt;stabilize &lt;code&gt;BTree&lt;/code&gt;{&lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;}&lt;code&gt;::retain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84291"&gt;fix aliasing violations in &lt;code&gt;thread_local_const_init&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84177"&gt;fix &lt;code&gt;join_paths&lt;/code&gt; error display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84209"&gt;merge same condition branch in vec &lt;code&gt;spec_extend&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84145/files"&gt;improve &lt;code&gt;vecdeque_binary_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/regex/pull/760"&gt;regex: shrink size of &lt;code&gt;Inst&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9348"&gt;cargo: don't re-use rustc cache when &lt;code&gt;RUSTC_WRAPPER&lt;/code&gt; changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7074"&gt;clippy: split &lt;code&gt;is_diagnostic_assoc_item&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7093"&gt;clippy: fix &lt;code&gt;single_match&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7067"&gt;clippy: fix a false negative on &lt;code&gt;needless_return&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7076"&gt;clippy: fix a false positive in &lt;code&gt;missing_const_for_fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7064"&gt;clippy: fix false positive in &lt;code&gt;wrong_self_convention&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6568"&gt;clippy: fix &lt;code&gt;redundant_pattern_matching&lt;/code&gt; drop order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7108"&gt;clippy: un-double &lt;code&gt;return&lt;/code&gt; on &lt;code&gt;try_err&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;Another quiet week with very small changes to compiler performance.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=5258a74c887f8ae14717e1f98b652b470877ce4e&amp;amp;end=6df26f897cffb2d86880544bb451c6b5f8509b2d&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;5258a74..6df26f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 0 Improvements, 1 Mixed&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3058"&gt;try_trait_v2: A new design for the ? desugaring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3101"&gt;RFC: Reserved prefixes in the 2021 edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3016"&gt;add const-ub RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2803"&gt;Target tier policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2594"&gt;RFC: Custom DSTs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2593"&gt;Enum variant types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84147"&gt;Cautiously add IntoIterator for arrays by value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84120"&gt;Stabilize Duration::MAX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84111"&gt;Stabilize &lt;code&gt;impl From&amp;lt;[(K, V); N]&lt;/code&gt;&amp;gt; for HashMap`&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84072"&gt;Allow setting &lt;code&gt;target_family&lt;/code&gt; to multiple values, and implement &lt;code&gt;target_family="wasm"&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/83994"&gt;Exiting a process calls exit() which isn’t thread-safe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83386"&gt;Stabilize &lt;code&gt;:pat_param&lt;/code&gt; but leave :pat2021 gated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83312"&gt;parser: Remove support for inner attributes on non-block expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83213"&gt;Update BARE_TRAIT_OBJECT and ELLIPSIS_INCLUSIVE_RANGE_PATTERNS to errors in Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81656"&gt;Tracking Issue for vec_extend_from_within&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/79885"&gt;Tracking Issue for 'ordering helpers'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/77101"&gt;Tracking issue for array::from_ref and array::from_mut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/75294"&gt;Tracking Issue for {HashMap,BTreeMap}::into_{keys,values}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/59414"&gt;Tracking issue for x86 bittest intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsyccgbcc/"&gt;April 21, Vancouver, BC, CA - Rust Study/Hack/Hang-out night - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Berlin/events/277590271"&gt;April 27, Berlin, DE - Rust and Tell - Rust Berlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-London-User-Group/events/277520645/"&gt;April 27, London, UK - LDN Virtual Talks Apr 2021 - Red Badger Takeover - Rust London User Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccgbkc/"&gt;April 27, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/discussions/1303"&gt;April 28, Online - Ockam Open Source Community Call - Live coding walkthrough of building end-to-end encrypted communication in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/277402612/"&gt;May 4, Buffalo, NY, US - Buffalo Rust User Group, Tues May 4th - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/ru-RU/Rust-%D0%B2-%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B5/events/277259838/"&gt;April 21, Moscow, RU - Monthly Meetup - Rust Moscow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Grover GmbH&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://grnh.se/15fcbda73us"&gt;Software Engineer - Risk &amp;amp; Data, Rust &amp;amp; Python (Berlin or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Massa Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://massa.network/#jobs"&gt;Rust Blockchain Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Instaclustr&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.seek.com.au/job/52021829"&gt;Software Engineer (Canberra, AU)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Subspace Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/subspacelabs/7f6a654b-60a8-4740-aa19-36b9f7a9e624?lever-origin=applied&amp;amp;lever-source%5B%5D=Twitter"&gt;Core Protocol Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Senior Software Engineer, Visualization&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/paige/jobs/5217029002"&gt;Senior Software Engineer, Visualization (Remote, DE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Luminovo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://luminovo.jobs.personio.de/job/357453"&gt;(Senior) Software Engineer - Rust (Remote, CEST timezone)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;We feel that Rust is now ready to join C as a practical language for implementing the [Linux] kernel. It can help us reduce the number of potential bugs and security vulnerabilities in privileged code while playing nicely with the core kernel and preserving its performance characteristics.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://security.googleblog.com/2021/04/rust-in-linux-kernel.html"&gt;Wedson Almeida Filho on the Google Security Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1040"&gt;Jacob Pratt&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 386</title><link href="https://this-week-in-rust.org/blog/2021/04/14/this-week-in-rust-386/" rel="alternate"></link><updated>2021-04-14T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-04-14:blog/2021/04/14/this-week-in-rust-386/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No papers/research projects this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/04/14/async-vision-doc-shiny-future.html"&gt;Brainstorming Async Rust's Shiny Future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-04-08-introducing-florian-gilcher/"&gt;Introducing Florian Gilcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-04-08-introducing-peixin-hou/"&gt;Introducing Peixin Hou&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/news/020/"&gt;This Month in Rust GameDev #20 - March 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bjorn3.github.io/2021/04/13/progress-report-april-2021.html"&gt;Progress report on rustc_codegen_cranelift (April 2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/rust/2021/04/08/intellij-rust-updates-for-2021-1/"&gt;IntelliJ Rust: Updates for 2021.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/04/12/changelog-145.html"&gt;IntelliJ Rust Changelog #145&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/04/12/changelog-72.html"&gt;rust-analyzer Changelog #72&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mo63t3/ballista_has_been_donated_to_the_apache_arrow/"&gt;Ballista has been donated to the Apache Arrow project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-in-production-meilisearch"&gt;Rust in Production: MeiliSearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gregoryszorc.com/blog/2021/04/13/rust-is-for-professionals/"&gt;Rust is for Professionals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://morestina.net/blog/1686/rust-async-is-colored"&gt;Rust async is colored, and that's not a big deal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.esciencecenter.nl/using-rust-for-scientific-numerical-applications-learning-from-past-experiences-798665d9f9f0"&gt;Using Rust for Scientific Numerical applications: Learning from Past Experiences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ecton/plaintdb-serves-another-milestone-reached-kl3"&gt;PlaintDB Servers - another milestone reached&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/tangramvision/why-rust-for-robots-4nmd"&gt;Why Rust for Robots?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dimforge.com/blog/2021/04/12/integrating-const-generics-to-nalgebra/"&gt;Integrating const-generics to nalgebra 0.26&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[podcast] &lt;a href="https://anchor.fm/building-with-rust/episodes/Building-with-Rust-Tim-McNamara-on-Rust-in-Action-eugoal/a-a1ptlh"&gt;Building with Rust: Tim McNamara on Rust in Action&lt;/a&gt; &lt;a href="https://github.com/seanchen1991/building-with-rust/blob/main/transcripts/002.md"&gt;[transcript]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/tree/develop/documentation/guides/rust/get-started#readme"&gt;Build an End-to-End Encrypted messaging app in rust, with the Ockam crate, in this step by step guide.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kas-gui.github.io/blog/easy-cast.html"&gt;Introducing easy-cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.brandons.me/blog/why-rust-strings-seem-hard"&gt;Why Rust strings seem hard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://loige.co/rust-shenanigans-return-type-polymorphism/"&gt;Rust shenanigans: return type polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.usejournal.com/a-detailed-guide-to-writing-your-first-neovim-plugin-in-rust-a81604c606b1"&gt;Writing Neovim plugins in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aloso.github.io/2021/04/12/linked-list.html"&gt;A zero-overhead linked list in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vortexa.com/insight/integrating-rust-into-python"&gt;Integrating Rust into Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/transienterror/setting-up-a-grpc-protobuf-server-with-tonic-218e"&gt;Setting Up a gRPC Protobuf Server With Tonic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/abhirockzz/getting-started-with-kafka-and-rust-part-2-354f"&gt;Getting started with Kafka and Rust: Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tglman.com/posts/rust_lib_error_management.html"&gt;Rust lib error management, multiple enum approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gendignoux.com/blog/2021/04/08/rust-async-streams-futures-part2.html"&gt;Asynchronous streams in Rust (part 2) - Cancelling expired requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/rogertorres/series/12179"&gt;Engaging Warp: REST API with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] [series] &lt;a href="https://blog.budshome.com/budshome/gou-jian-rust-yi-bu-graphql-fu-wu-:ji-yu-tide-+-async-graphql-+-mongodb(1)--qi-bu-ji-crate-xuan-ze"&gt;Build GraphQL services based on Async Rust using tide + async-graphql + mongodb (基于 Async Rust 构建 GraphQL 服务，使用 tide + async-graphql + mongodb) - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/e0n9v565HR4"&gt;Flocking Boids in Rust: With Piston vs Tetra vs Amethyst vs Bevy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.techrepublic.com/article/rust-not-firefox-is-mozillas-greatest-industry-contribution/"&gt;Rust, not Firefox, is Mozilla's greatest industry contribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zdnet.com/article/awss-shane-miller-to-head-the-newly-created-rust-foundation/"&gt;AWS's Shane Miller to head the newly created Rust Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lkml.org/lkml/2021/4/14/1023"&gt;[RFC] Rust support for Linux kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://secret.club/2021/04/09/std-clamp.html"&gt;A look at LLVM - comparing clamp implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mmz1sg/tokiouring_design_proposal/"&gt;Tokio-uring design proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arstechnica.com/gadgets/2021/04/google-is-now-writing-low-level-android-code-in-rust/"&gt;Google is now writing low-level Android code in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2021/04/rust-in-linux-kernel.html"&gt;Rust in the Linux kernel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://docs.rs/dipa"&gt;dipa&lt;/a&gt;, a crate to derive delta-encoding for Rust data structures.&lt;/p&gt;
&lt;p&gt;Despite a lack of nominations, llogiq is very pleased with his choice.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;329 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-04-05..2021-04-12"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81234"&gt;allow specifying alignment for functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82497"&gt;fix handling of &lt;code&gt;--output-format json&lt;/code&gt; flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84055"&gt;don't tell users to use a nightly flag on the stable channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84014"&gt;improve trait/impl method discrepancy errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83952"&gt;account for &lt;code&gt;ExprKind::Block&lt;/code&gt; when suggesting .into() and deref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81922"&gt;let &lt;code&gt;#[allow(unstable_name_collisions)]&lt;/code&gt; work for things other than function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84068"&gt;add &lt;code&gt;bad_asm_style&lt;/code&gt; to &lt;code&gt;HardwiredLints&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83941"&gt;improve debuginfo for closures and async functions on Windows MSVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83916"&gt;use &lt;code&gt;AnonConst&lt;/code&gt; for &lt;code&gt;asm!&lt;/code&gt; constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83821"&gt;add &lt;code&gt;FromIterator&lt;/code&gt; and &lt;code&gt;IntoIterator&lt;/code&gt; impls for &lt;code&gt;ThinVec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83476"&gt;add &lt;code&gt;strong_count&lt;/code&gt; mutation methods to &lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83932"&gt;use a &lt;code&gt;SmallVec&lt;/code&gt; in &lt;code&gt;impl_or_trait_item&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82483"&gt;use &lt;code&gt;FromStr&lt;/code&gt; trait for number option parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81942"&gt;reduce threads spawned by ui-tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83019"&gt;core: disable &lt;code&gt;ptr::swap_nonoverlapping_one&lt;/code&gt;'s block optimization on SPIR-V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81047"&gt;stabilize &lt;code&gt;cmp_min_max_by&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81938"&gt;stabilize &lt;code&gt;peekable_peek_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84090"&gt;stabilize &lt;code&gt;duration_saturating_ops&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84085"&gt;stabilize &lt;code&gt;atomic_fetch_update&lt;/code&gt; methods on &lt;code&gt;AtomicBool&lt;/code&gt; and &lt;code&gt;AtomicPtr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83920"&gt;fix &lt;code&gt;HashMap&lt;/code&gt;/&lt;code&gt;HashSet&lt;/code&gt; LLDB pretty-printer after hashbrown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2342"&gt;futures: move &lt;code&gt;try_fold&lt;/code&gt;, &lt;code&gt;try_for_each&lt;/code&gt;, and &lt;code&gt;try_for_each_concurrent&lt;/code&gt; to &lt;code&gt;StreamExt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2379"&gt;futures: add &lt;code&gt;stream::Peekable::&lt;/code&gt;{&lt;code&gt;next_if&lt;/code&gt;, &lt;code&gt;next_if_eq&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84034"&gt;fix perf regression in &lt;code&gt;rustdoc::bare_urls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83849"&gt;rustdoc: cleanup handling of associated items for intra-doc links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83835"&gt;rustdoc: sort search index items for compression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83833"&gt;rustdoc: store intra-doc links in Cache instead of on items directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83828"&gt;rustdoc: use &lt;code&gt;ThinVec&lt;/code&gt; in a few places&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83992"&gt;rustdoc: merge idents when generating source content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6905"&gt;clippy: fix false positive in &lt;code&gt;single_component_path_imports&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6982"&gt;clippy: fix &lt;code&gt;explicit_into_iter_loop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7036"&gt;clippy: consider mutability on &lt;code&gt;useless_vec&lt;/code&gt; suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7029"&gt;clippy: fix &lt;code&gt;missing_panics_doc&lt;/code&gt; not detecting &lt;code&gt;assert_eq!&lt;/code&gt; and &lt;code&gt;assert_ne!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;A very quiet week overall.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=d32238532138485c80db4f2cd596372bce214e00&amp;amp;end=5258a74c887f8ae14717e1f98b652b470877ce4e&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;d322385..5258a74&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 0 Improvements, 0 Mixed&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2841"&gt;RFC: -C export-executable-symbols&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3101"&gt;RFC: Reserved prefixes in the 2021 edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3058"&gt;try_trait_v2: A new design for the ? desugaring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3016"&gt;add const-ub RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2803"&gt;Target tier policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2594"&gt;RFC: Custom DSTs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84147"&gt;Cautiously add IntoIterator for arrays by value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84120"&gt;Stabilize Duration::MAX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84111"&gt;Stabilize &lt;code&gt;impl From&amp;lt;[(K, V); N]&amp;gt; for HashMap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84072"&gt;Allow setting &lt;code&gt;target_family&lt;/code&gt; to multiple values, and implement &lt;code&gt;target_family="wasm"&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83386"&gt;Stabilize pat2015 but leave :pat2021 gated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83213"&gt;Update BARE_TRAIT_OBJECT and ELLIPSIS_INCLUSIVE_RANGE_PATTERNS to errors in Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/79885"&gt;Tracking Issue for 'ordering helpers'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/77101"&gt;Tracking issue for array::from_ref and array::from_mut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/59414"&gt;Tracking issue for x86 bittest intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/55467"&gt;Tracking issue for RFC 2457, "Allow non-ASCII identifiers"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3107"&gt;&lt;code&gt;#[derive(Default)]&lt;/code&gt; on enums with a &lt;code&gt;#[default]&lt;/code&gt; attribute #3107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3106"&gt;Add :value macro capture designator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/ntvrgsyccgblb"&gt;April 20, Washington, DC, US - The Rust Borrow Checker—A Deep Dive - Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsyccgbcc/"&gt;April 21, Vancouver, BC, CA - Rust Study/Hack/Hang-out night - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccgbkc/"&gt;April 27, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccgbsb/"&gt;April 14, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wellington/events/277270667"&gt;April 19, Wellington, NZ - IGNITION: What is Rust and why should I care? Rust at work &amp;amp; at play - Rust Wellington&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/ru-RU/Rust-%D0%B2-%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B5/events/277259838/"&gt;April 21, Moscow, RU - Monthly Meetup - Rust Moscow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Slight&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slight.co/jobs/software-engineer-core"&gt;Software Engineer - Core Team, Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken?team=Engineering"&gt;Several Rust Engineering Positions are Available (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;What I actually value on a daily basis in [rust is]
I can call code written by other people without unpleasant surprises.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;async fn verify_signature(token: &amp;amp;Jwt) -&amp;gt; Result&amp;lt;Claims, VerificationError&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Looking at a code snippet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I know my JWT token won't be mutated, just accessed ( &lt;code&gt;&amp;amp;&lt;/code&gt; );&lt;/li&gt;
&lt;li&gt;I know the function will probably perform some kind of I/O ( &lt;code&gt;async&lt;/code&gt; );&lt;/li&gt;
&lt;li&gt;I know that the function might fail ( &lt;code&gt;Result&lt;/code&gt; );&lt;/li&gt;
&lt;li&gt;I know its failure modes ( &lt;code&gt;VerificationError&lt;/code&gt; ).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://twitter.com/algo_luca/status/1380928103019597827"&gt;Luca Palmieri on Twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1031"&gt;Nixon Enraght-Moony&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mr4eg0/this_week_in_rust_386/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 385</title><link href="https://this-week-in-rust.org/blog/2021/04/07/this-week-in-rust-385/" rel="alternate"></link><updated>2021-04-07T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-04-07:blog/2021/04/07/this-week-in-rust-385/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No papers/research projects this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/04/03/core-team-updates.html"&gt;Core Team updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-04-08-introducing-peixin-hou/"&gt;Introducing Peixin Hou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-04-08-introducing-florian-gilcher/"&gt;Introducing Florian Gilcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2021-03/"&gt;This Month in Rust OSDev (March 2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mhmfu9/rib_newsletter_22_a_few_tweaks/"&gt;RiB Newsletter #22 - A few tweaks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thephilbert.io/2021/04/02/gcc-rust-monthly-report-4-march-2021/"&gt;GCC Rust Monthly Report #4 March 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mjxbaz/mrustc_upgrade_rustc_1390/"&gt;mrustc upgrade: rustc 1.39.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/04/05/changelog-71.html"&gt;rust-analyzer Changelog #71&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mess.org/2021/03/26/Left-Recursive-PEG-Parser-Generator/"&gt;A new Left Recursive PEG Parser Generator for rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flott-motion.org/news/last-month-in-flott-april-2021/"&gt;Last Month in Flott (Motion Control Toolkit in Rust) - April 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/rust/2021/04/08/intellij-rust-updates-for-2021-1/"&gt;Recent updates in IntelliJ Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bevyengine.org/news/bevy-0-5/"&gt;Bevy 0.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://uazu.github.io/blog/20210406.html"&gt;Interfacing a low-level actor system to Rust async/await, part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manishearth.github.io/blog/2021/04/05/a-tour-of-safe-tracing-gc-designs-in-rust/"&gt;A Tour of Safe Tracing GC Designs in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackernoon.com/how-i-used-rust-lunatic-to-build-a-telnet-chat-server-with-webassembly-rb3l33cg"&gt;How I Used Rust + Lunatic to Build a TelNet Chat Server with WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2021/04/eliminating-data-races-in-firefox-a-technical-report/"&gt;Eliminating Data Races in Firefox - A Technical Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sunfishcode.online/first-class-io/"&gt;First-class IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.gentoo.org/mgorny/2021/02/19/the-modern-packagers-security-nightmare/"&gt;The modern packager's security nightmare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkolaczk.github.io/disk-access-ordering/"&gt;Ordering Requests to Accelerate I/O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/an-essay-of-checked-exceptions-in-rust/57769"&gt;An essay of checked exceptions in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yossarian.net/2021/02/28/Weird-architectures-werent-supported-to-begin-with"&gt;Weird architectures weren't supported to begin with&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/KEQIWqSq42k"&gt;I tried learning OpenGL in 7 days - using Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/blog/2021/03/python-client/"&gt;How we built our Python Client that's mostly Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kas-gui.github.io/tutorials/hello.html"&gt;Hello world with KAS GUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/rust-small-docker-image/"&gt;How to create small Docker images for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pavel.cool/rust/rust-kubernetes-operators/"&gt;Oxidizing the Kubernetes Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/blog/2021/04/node-bindgen-tuples/"&gt;Sending tuples from Node to Rust and back&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/abhirockzz/getting-started-with-kafka-and-rust-part-1-4hkb"&gt;Getting started with Kafka and Rust: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seanchen1991/a-beginner-s-guide-to-handling-errors-in-rust-40k2"&gt;A Beginner's Guide to Handling Errors in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://project-oak.github.io/rust-verification-tools/using-seahorn/"&gt;Using Seahorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gendignoux.com/blog/2021/04/01/rust-async-streams-futures-part1.html"&gt;Asynchronous streams in Rust (part 1) - Futures, buffering and mysterious compilation error messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://medium.com/the-polyglot-programmer/what-would-sqlite-look-like-if-written-in-rust-part-3-edd2eefda473"&gt;What would SQLite look like if written in Rust? — Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=YNSg7g46Hso"&gt;Return a value from a function in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/rMGWeSjctlY"&gt;Crust of Rust: Atomics and Memory Ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/FNcXf-4CLH0"&gt;Async/Await in Rust: Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/zjAe-uvKMJ4"&gt;OpenVehicleDiag Rust live coding with Macchina's A0!!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [series] &lt;a href="https://youtube.com/playlist?list=PLfllocyHVgsRwLkTAhG0E-2QxCf-ozBkk"&gt;Easy Rust - learn to program in Rust with simple English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/e-tony/best-of-ml-rust"&gt;best-of-ml-rust: A ranked list of awesome machine learning Rust libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2021/04/rust-in-android-platform.html"&gt;Rust in the Android platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mify2o/david_tolnay_thank_you/"&gt;David Tolnay - thank you&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2021/04/02/my-shiny-future/"&gt;My "shiny future"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/rs_pbrt"&gt;rs-pbrt&lt;/a&gt;, a counterpart to the PBRT book's (3rd edition) C++ code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/900"&gt;Jan Walter&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotenv-linter/dotenv-linter/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;dotenv-linter has several good first issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;313 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-03-29..2021-04-05"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83771"&gt;fix stack overflow detection on FreeBSD 11.1+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83853"&gt;disallow the use of high byte registes as operands on &lt;code&gt;x86_64&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82907"&gt;resolve/expand: cache intermediate results of &lt;code&gt;#[derive]&lt;/code&gt; expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83726"&gt;panic early when &lt;code&gt;TrustedLen&lt;/code&gt; indicates a &lt;code&gt;length &amp;gt; usize::MAX&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83667"&gt;suggest &lt;code&gt;box&lt;/code&gt;/&lt;code&gt;pin&lt;/code&gt;/&lt;code&gt;arc&lt;/code&gt;ing receiver on method calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83666"&gt;run LLVM coverage instrumentation passes before optimization passes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83663"&gt;simplify logical operations CFG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83839"&gt;remove unneeded type resolving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83605"&gt;unaligned_references: &lt;code&gt;align(N)&lt;/code&gt; fields in &lt;code&gt;packed(N)&lt;/code&gt; structs are fine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83406"&gt;prevent very long compilation runtimes in &lt;code&gt;LateBoundRegionNameCollector&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83357"&gt;reduce the impact of &lt;code&gt;Vec::reserve&lt;/code&gt; calls that do not cause any allocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83267"&gt;BTree: no longer search arrays twice to check &lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82780"&gt;stream the dep-graph to a file instead of storing it in-memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81619"&gt;implement &lt;code&gt;SourceIterator&lt;/code&gt; and &lt;code&gt;InPlaceIterable&lt;/code&gt; for &lt;code&gt;ResultShunt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83819"&gt;optimize jumps in &lt;code&gt;PartialOrd::le&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83609"&gt;&lt;code&gt;ffi::c_str&lt;/code&gt; removed bound checks on &lt;code&gt;as_bytes&lt;/code&gt;, &lt;code&gt;to_bytes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82331"&gt;added &lt;code&gt;as_slice&lt;/code&gt; method to &lt;code&gt;BinaryHeap&lt;/code&gt; collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83858"&gt;use &lt;code&gt;#[inline(always)]&lt;/code&gt; on trivial &lt;code&gt;UnsafeCell&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83831"&gt;add &lt;code&gt;#[inline]&lt;/code&gt; to &lt;code&gt;IpAddr&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83652"&gt;disallow octal format in Ipv4 string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82487"&gt;constify methods of &lt;code&gt;std::net::SocketAddr&lt;/code&gt;, &lt;code&gt;SocketAddrV4&lt;/code&gt; and &lt;code&gt;SocketAddrV6&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83571"&gt;constify some slice methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdsimd/pull/87"&gt;stdsimd: add saturating abs/neg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/254"&gt;hashbrown: make &lt;code&gt;RawTable::insert_no_grow&lt;/code&gt; unsafe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9302"&gt;cargo: add cargo config subcommand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83681"&gt;rustdoc: only look at blanket impls in &lt;code&gt;get_blanket_impls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83478"&gt;rustdoc: add unstable option to only emit shared/crate-specific files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82864"&gt;rustdoc: don't enter an &lt;code&gt;infer_ctxt&lt;/code&gt; in &lt;code&gt;get_blanket_impls&lt;/code&gt; for impls that aren't blanket impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83793"&gt;rustdoc: highlight macros more efficiently&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7001"&gt;clippy: add &lt;code&gt;non_octal_unix_permissions&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6976"&gt;clippy: don't lint &lt;code&gt;manual_map&lt;/code&gt; in const functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6706"&gt;clippy: new Lint: &lt;code&gt;needless_for_each&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6463"&gt;clippy: new Lint: &lt;code&gt;branches_sharing_code&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6342"&gt;clippy: lint: &lt;code&gt;filter(Option::is_some).map(Option::unwrap)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7026"&gt;clippy: remove author requirement for &lt;code&gt;cargo_common_metadata&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7030"&gt;Clippy going dark: adding a dark theme to Clippy's lint list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/3409"&gt;crates.io: topologically sort &lt;code&gt;db-dump.tar.gz&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82347"&gt;parallelize tidy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;A pretty major week for &lt;a href="https://perf.rust-lang.org/?start=4896450e7e0a522486b4d3a8d360ac4e1d2072a0&amp;amp;end=d32238532138485c80db4f2cd596372bce214e00&amp;amp;absolute=false&amp;amp;stat=max-rss"&gt;memory usage improvements&lt;/a&gt; with an average of ~20% gains on memory usage for
release builds, and 5% on check builds, due to an update in the default allocator
used (to a more recent jemalloc). Wall time performance remained largely unchanged over this week.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=4896450e7e0a522486b4d3a8d360ac4e1d2072a0&amp;amp;end=d32238532138485c80db4f2cd596372bce214e00&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;4896450e..d32238&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 4 Improvements, 0 Mixed&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3086"&gt;RFC: Declarative macro metavariable expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2584"&gt;RFC: Structural Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2498"&gt;Hygiene opt-out (escaping) for declarative macros 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2393"&gt;RFC: Delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2353"&gt;RFC: &lt;code&gt;#[derive_no_bound(..)]&lt;/code&gt; and &lt;code&gt;#[derive_field_bound(..)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2320"&gt;RFC: Eager Macro Expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3058"&gt;try_trait_v2: A new design for the &lt;code&gt;?&lt;/code&gt; desugaring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83707"&gt;Remove &lt;code&gt;T: Debug&lt;/code&gt; bound on UnsafeCell Debug impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82918"&gt;Turn old edition lint (anonymous-parameters) into warn-by-default on 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81764"&gt;Stabilize &lt;code&gt;rustdoc::bare_urls&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/79288"&gt;Tracking issue: fNN::is_subnormal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/79143"&gt;Tracking Issue for feature(nonzero_leading_trailing_zeros)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/79025"&gt;Tracking Issue for &lt;code&gt;{BTreeMap,BTreeSet}::retain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/78729"&gt;Tracking Issue for &lt;code&gt;#![feature(const_cell_into_inner)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/78639"&gt;Tracking Issue for &lt;code&gt;atomic_fetch_update&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/78271"&gt;Tracking Issue for feature: "option_insert"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/76416"&gt;Tracking Issue for &lt;code&gt;Duration&lt;/code&gt; saturating operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/73544"&gt;Tracking Issue for &lt;code&gt;Duration::{zero, is_zero} (#![feature(duration_zero)])&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/27778"&gt;Tracking issue for FixedSizeArray trait&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3101"&gt;RFC: Reserved prefixes in the 2021 edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/277133126/"&gt;April 7, Johannesburg, ZA - Monthly Joburg Rust Chat! - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstryccgbkb/"&gt;April 7, Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/276801410/"&gt;April 12, Denver, CO, US - Building Delightful CLI Tools in Rust by Chuck Pierce - Rust Denver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccgbrb/"&gt;April 13, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/276873622/"&gt;April 13, Saarbrücken, Saarland, DE - &lt;strong&gt;Rust Saar&lt;/strong&gt; 10u16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/ntvrgsyccgblb"&gt;April 20, Washington, DC, US - The Rust Borrow Checker—A Deep Dive - Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgryccgblb/"&gt;April 8, Columbus, OH, US - Monthly Meetup - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccgbsb/"&gt;April 14, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wellington/events/277270667"&gt;April 19, Wellington, NZ - IGNITION: What is Rust and why should I care? Rust at work &amp;amp; at play - Rust Wellington&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;IOTA Foundation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://iota.bamboohr.com/jobs/view.php?id=143&amp;amp;source=other"&gt;IOTA Identity Software Engineer - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Parity Technologies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://grnh.se/9aec49883us"&gt;Blockchain Developer - Cross Chain Messaging (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.parity.io/jobs/"&gt;Numerous other Rust engineering openings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Microsoft&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://careers.microsoft.com/us/en/job/960784/Senior-Software-Engineer"&gt;Azure IoT Senior Software Engineer (remote possible within U.S.)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Junior developers should also apply but relocation to Redmond is necessary in that case.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Wallaroo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wallaroo.breezy.hr/p/30939dc4e5c7-software-engineer"&gt;Software Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;p&gt;Sadly there was no quote nominated for this week.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mmvkrl/this_week_in_rust_385/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 384</title><link href="https://this-week-in-rust.org/blog/2021/03/31/this-week-in-rust-384/" rel="alternate"></link><updated>2021-03-31T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-03-31:blog/2021/03/31/this-week-in-rust-384/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html"&gt;Announcing Rust 1.51.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-03-25-introducing-mark-rousskov/"&gt;Introducing Mark Rousskov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-03-25-introducing-nell-shamrell-harrington/"&gt;Introducing Nell Shamrell-Harrington&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/03/29/changelog-70.html"&gt;rust-analyzer changelog #70&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/03/29/changelog-144.html"&gt;IntelliJ Rust Changelog #144&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-financial-update/"&gt;Knurling-rs Financial Update and Call for Funding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam"&gt;Ockam | End-to-end encrypted messaging and mutual authentication between distributed applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deno.com/blog/the-deno-company"&gt;Announcing the Deno Company&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.vortexa.com/insight/using-rust-to-corrode-insane-python-run-times"&gt;Using Rust to corrode insane Python run-times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/the-current-state-of-rust-web-frameworks/"&gt;The current state of Rust web frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://plv.mpi-sws.org/rustbelt/ghostcell/"&gt;GhostCell: Separating Permissions from Data in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2021/03/28/const-generic-slipstreem.html"&gt;Using const generics in slipstream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://robinmoussu.gitlab.io/blog/post/2021-03-25_rust_iterators_tips_and_tricks/"&gt;Rust iterators tips and tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/pin-and-suffering"&gt;Pin and suffering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jaredwolff.com/embedding-rust-into-zephyr-using-cbindgen/"&gt;Embedding Rust Into Zephyr Firmware using C-bindgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doma.dev/blog/parsing-stuff-in-rust/"&gt;Parser combinators in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.adamchalmers.com/grids-2/"&gt;Grids in Rust, part 2: const generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/senyeezus/ergonomic-error-handling-with-rust-13bj"&gt;Ergonomic error handling with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dandyvica/implementing-sha2-256-512-algorithm-with-rust-const-generics-5ap"&gt;Implementing SHA2 (256/512) algorithm with Rust const generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ignaciojvig/analisando-alocacoes-de-memoria-em-rust-utilizando-gnu-debugger-34kb"&gt;Analisando alocações de memória em Rust utilizando GNU Debugger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/test-embedded-app/"&gt;Testing an embedded application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mkhan45.github.io/2021/03/28/Using-const-generics-to-model-an-electronics-graph.html"&gt;Using Const Generics To Model An Electronics Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aloso.github.io/2021/03/28/module-system.html"&gt;Rust's Module System Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/basman/series/11934"&gt;Working with the trust-dns-resolver crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/BPt987BRdDw"&gt;Safer Rust: Program Verification with Creusot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arstechnica.com/gadgets/2021/03/linus-torvalds-weighs-in-on-rust-language-in-the-linux-kernel/"&gt;Linus Torvalds weighs in on Rust language in the Linux kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mgh9n9/ownership_concept_diagram/"&gt;Ownership Concept Diagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/http-rs/tide-acme"&gt;tide-acme&lt;/a&gt;, a crate for automatic HTTPS certification using Let's Encrypt for Tide.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/894"&gt;Josh Triplett&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://umccr.org/blog/aws-bioinformatics-rust/"&gt;AWS Rust lambdas and Bioinformatics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/darpi-rs/darpi"&gt;darpi-rs/darpi is looking for users and contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/RoaringBitmap/roaring-rs/pull/92"&gt;RoaringBitmap/roaring-rs seeks a review of this Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;327 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-03-22..2021-03-29"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83307"&gt;coverage bug fixes and optimization support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83488"&gt;ban custom inner attributes in expressions and statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83424"&gt;&lt;code&gt;GenericParam&lt;/code&gt; does not need to be a HIR owner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83177"&gt;remove assignments to ZST places instead of marking ZST return place as unused&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83050"&gt;run analyses before thir-tree dumps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82980"&gt;import small cold functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75384"&gt;implement &lt;code&gt;feature(const_generics_defaults)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83041"&gt;stabilize &lt;code&gt;debug_non_exhaustive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83273"&gt;simplify encoder and decoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83185"&gt;remove (lots of) dead code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79846"&gt;use &lt;code&gt;TrustedRandomAccess&lt;/code&gt; for in-place iterators where possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81354"&gt;instruct LLVM that &lt;code&gt;binary_search&lt;/code&gt; returns a valid index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80771"&gt;make &lt;code&gt;NonNull::as_ref&lt;/code&gt; (and friends) return refs with unbound lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82917"&gt;add function &lt;code&gt;core::iter::zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82565"&gt;revert reverting of stabilizing &lt;code&gt;integer::BITS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83245"&gt;generalize and inline &lt;code&gt;slice::fill&lt;/code&gt; specializations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83421"&gt;add &lt;code&gt;Result::into_err&lt;/code&gt; where the Ok variant is the never type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83349"&gt;remove &lt;code&gt;Option::&lt;/code&gt;{&lt;code&gt;unwrap_none&lt;/code&gt;, &lt;code&gt;expect_none&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2380"&gt;futures: add &lt;code&gt;AsyncSeekExt::stream_position&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9298"&gt;cargo: default macOS targets to unpacked debuginfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83051"&gt;rustdoc: sidebar trait items order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/1322"&gt;docs.rs: stop displaying and serving authorship information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;A somewhat negative weak for performance where regressions outweigh improvements. Sadly, a lot of the regressions don't seem very straight-forward to understand, and so more investigation will be necessary.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=9b6339e4b9747d473270baa42e77e1d2fff39bf4&amp;amp;end=4896450e7e0a522486b4d3a8d360ac4e1d2072a0&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;9b6339e4..4896450&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 2 Improvements, 3 Mixed&lt;/p&gt;
&lt;p&gt;2 of them in rollups&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3086"&gt;RFC: Declarative macro metavariable expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3098"&gt;Raw Keywords&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83476"&gt;Add strong_count mutation methods to Rc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82918"&gt;Turn old edition lint (anonymous-parameters) into warn-by-default on 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81942"&gt;reduce threads spawned by ui-tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81938"&gt;Stabilize &lt;code&gt;peekable_peek_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81764"&gt;Stabilize &lt;code&gt;rustdoc::bare_urls&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81507"&gt;Adding diesel to the cargotest suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81047"&gt;Stabilize &lt;code&gt;cmp_min_max_by&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80080"&gt;Allow qualified paths in struct construction (both expressions and patterns)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/55467"&gt;Tracking issue for RFC 2457, "Allow non-ASCII identifiers"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3100"&gt;RFC: Add a standard trait for getting many &amp;amp;mut to places&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3099"&gt;RFC: &lt;code&gt;cargo&lt;/code&gt;-&lt;code&gt;miri&lt;/code&gt; integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3098"&gt;Raw Keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3097"&gt;rustdoc URL conflict resolution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccgbcb/"&gt;April 1, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/276717867/"&gt;April 6, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/277133126/"&gt;April 7, Johannesburg, ZA - Monthly Joburg Rust Chat! - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstryccgbkb/"&gt;April 7, Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccgbrb/"&gt;April 13, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgryccgblb/"&gt;April 8, Columbus, OH, US - Monthly Meetup - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccgbsb/"&gt;April 14, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;e.ventures&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://old.reddit.com/r/rust/comments/mfstaz/official_rrust_whos_hiring_thread_for_jobseekers/gspq9v1/"&gt;Rust backend engineer (Remote, the Americas)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Wallaroo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wallaroo.breezy.hr/p/30939dc4e5c7-software-engineer"&gt;Software Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team#open-roles"&gt;Hiring for several Rust positions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Despite all the negative aspects, I must say that I do generally really like the poll-based approach that Rust is taking. Most of the problems encountered are encountered not because of mistakes, but because no other language really has pushed this principle this far. Programming language design is first and foremost an “artistic” activity, not a technical one, and anticipating the consequences of design choices is almost impossible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://tomaka.medium.com/a-look-back-at-asynchronous-rust-d54d63934a1c"&gt;tomaka on medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1028"&gt;Michael Howell&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mhkhmw/this_week_in_rust_384/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry></feed>