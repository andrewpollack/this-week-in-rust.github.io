<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/feeds/all-en.atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2022-01-05T00:00:00-05:00</updated><entry><title>This Week in Rust 424</title><link href="https://this-week-in-rust.org/blog/2022/01/05/this-week-in-rust-424/" rel="alternate"></link><published>2022-01-05T00:00:00-05:00</published><updated>2022-01-05T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2022-01-05:/blog/2022/01/05/this-week-in-rust-424/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustnigeria.curated.co/issues/1#start"&gt;Rust Nigeria #1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/blog/2021/12/30/2021-recap.html"&gt;rust-analyzer in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io//thisweek/2022/01/03/changelog-110.html"&gt;rust-analyzer changelog #110&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dimforge.com/blog/2022/01/02/the-year-2021-in-dimforge/"&gt;The year 2021 in Dimforge and our objectives for 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0018/"&gt;This week in Fluvio #18: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sea-ql.org/SeaORM/blog/2022-01-01-whats-new-in-0.5.0"&gt;What's new in SeaORM 0.5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncameron.org/blog/ezio/"&gt;Ezio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2022-01-03.html"&gt;SixtyFPS (GUI crate): Changelog for 3rd of January 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dioxuslabs.com/blog/introducing-dioxus/"&gt;Introducing Dioxus v0.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/snafu-0-7-released/69766"&gt;SNAFU 0.7 Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seanmonstar.com/post/672473147126300672/hyper-ish-2021-in-review"&gt;hyper-ish 2021 in review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fnordig.de/2021/12/17/glean-in-2021/"&gt;This Week in Glean: Glean in 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kaylynn.gay/blog/post/rust_ranges_and_suffering"&gt;Ranges and suffering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/why-is-my-rust-build-so-slow"&gt;Why is my Rust build so slow?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vmm.dev/en/rust/spinlock.md"&gt;Implementing Spinlock for RISC-V OS in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ilyabylich.svbtle.com/writing-bindings-upside-down"&gt;Writing bindings upside down&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2021/12/30/review.html"&gt;Rust 2021 – Looking Back and Forth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkolaczk.github.io/server-slower-than-a-laptop/"&gt;How a Single Line of Code Made a 24-core Server Slower Than a Laptop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thecodedmessage.com/posts/async-colors/"&gt;In Defense of Async: Function Colors Are Rusty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nnethercote.github.io/2022/01/05/rust-and-valgrind.html"&gt;Rust and Valgrind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sunfishcode.online/port-std-to-rustix/"&gt;Porting Rust's std to rustix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pngquant.org/rust.html"&gt;Improved portability and performance 🦀&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.oberien.de/2022/01/04/thoughts-on-return-break-continue.html"&gt;Thoughts on return, break and continue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cantortrading.fi/rust_decimal_str/"&gt;Parsing Decimals 4 times faster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tiemoko.com/blog/diff-fuzz/"&gt;Beyond the Borrow Checker: Differential Fuzzing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/series/dont-shell-out"&gt;Don't shell out!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://federicoterzi.com/blog/12-rust-tips-and-tricks-you-might-not-know-yet/"&gt;12 Rust Tips and Tricks you might not know yet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dawchihliou.github.io/articles/indexing-strings-in-rust-and-typescript"&gt;Indexing Strings in Rust and TypeScript: A Case Study of String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tiemoko.com/slides/SafeAndPortableDataStructureDesign_CodeAndSupply_Dec2021.pdf"&gt;Safe &amp;amp;&amp;amp; Portable Data Structure Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.singleton.io/posts/2022-01-02-raytracing-with-rust/"&gt;The joy of building a ray tracer, for fun, in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/session-based-authentication-in-rust/"&gt;An Introduction To Session-based Authentication In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/profiling-linkers"&gt;Profiling linkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://diziet.dreamwidth.org/10559.html"&gt;Debian's approach to Rust - Dependency handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/nine-rules-for-writing-python-extensions-in-rust-d35ea3a4ec29?sk=f8d808d5f414154fdb811e4137011437"&gt;Nine Rules for Writing Python Extensions in Rust &amp;amp; Rayon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashrust.com/blog/why-rust-enums-are-so-cool/"&gt;Why Rust enums are so cool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DE] &lt;a href="https://www.heise.de/hintergrund/Auf-Nummer-sicher-Sicheres-Programmieren-mit-Rust-6302125.html"&gt;Auf Nummer sicher: Sicheres Programmieren mit Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://www.youtube.com/watch?v=ZweInbMBsa4"&gt;Let's build a voice journal in Rust | Ep. 1: audio I/O, SQlite, CLI args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://www.youtube.com/watch?v=o_alVYMBBco"&gt;Rust Embedded for STM32 Microcontrollers - Intro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.infinyon.com/blog/2021/12/smartmodule-params/"&gt;Fluvio SmartModules with user-defined parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Audio] &lt;a href="https://rustacean-station.org/episode/052-daniel-teberian/"&gt;LibertyOS with Daniel Teberian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Video] &lt;a href="https://www.youtube.com/watch?v=VVKDGnWc2DA"&gt;Web api benchmarking: Rust (Axum) vs Rust (Warp)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Video] &lt;a href="https://www.youtube.com/watch?v=3TuPG_9WIZw"&gt;Adding while statements to Rena&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/fltk"&gt;fltk-rs&lt;/a&gt;, a crate with bindings to the &lt;a href="https://github.com/fltk/fltk"&gt;FLTK&lt;/a&gt; GUI toolkit.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/999"&gt;Mark Summerfield&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;230 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-12-27..2022-01-03"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91125"&gt;allow loading LLVM plugins with both legacy and new pass manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92402"&gt;suggest &lt;code&gt;while let x = y&lt;/code&gt; when encountering &lt;code&gt;while x = y&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89336"&gt;refactor variance diagnostics to work with more types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90383"&gt;extend check for &lt;code&gt;UnsafeCell&lt;/code&gt; in consts to cover unions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92118"&gt;parse and suggest moving where clauses after equals for type aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90586"&gt;relax &lt;code&gt;priv-in-pub&lt;/code&gt; lint on generic bounds and where clauses of trait impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90637"&gt;perf: store liveness in interval sets for region inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92338"&gt;add &lt;code&gt;try_reserve&lt;/code&gt; and &lt;code&gt;try_reserve_exact&lt;/code&gt; for &lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92066"&gt;support &lt;code&gt;\[x; n\]&lt;/code&gt; expressions in &lt;code&gt;concat_bytes!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/portable-simd/pull/219"&gt;std-simd: impl &lt;code&gt;std::simd::StdFloat&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92395"&gt;rustdoc: use &lt;code&gt;ThinVec&lt;/code&gt; for &lt;code&gt;GenericArgs&lt;/code&gt; bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8179"&gt;clippy: extend &lt;code&gt;unused_io_amount&lt;/code&gt; to cover async io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8127"&gt;clippy: fix &lt;code&gt;enum_variants&lt;/code&gt; false positive on prefixes that are not camel-case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8187"&gt;clippy: fixed issues with &lt;code&gt;to_radians&lt;/code&gt; and &lt;code&gt;to_degrees&lt;/code&gt; lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8183"&gt;clippy: limit the &lt;code&gt;identity_op&lt;/code&gt; lint to integral operands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8204"&gt;clippy: &lt;code&gt;erasing_op&lt;/code&gt; lint ignored when operation &lt;code&gt;Output&lt;/code&gt; type is different from the type of constant &lt;code&gt;0&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8182"&gt;clippy: perf: cache test item names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8193"&gt;clippy: fix &lt;code&gt;redundant_closure&lt;/code&gt; fp with &lt;code&gt;Rc&amp;lt;F&amp;gt;&lt;/code&gt;/&lt;code&gt;Arc&amp;lt;F&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8208"&gt;clippy: &lt;code&gt;wrong_self_convention&lt;/code&gt;: match &lt;code&gt;SelfKind::No&lt;/code&gt; more restrictively&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5158"&gt;rustfmt: do not flatten match arm block with leading attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5142"&gt;rustfmt: improve out of line module resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5156"&gt;rustfmt: support parsing of asm! args&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;It was a relatively calm, but good week overall. Most of the gains were improvements to rustdoc running times.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=e91ad5fc62bdee4a29c18baa5fad2ca42fc91bf4&amp;amp;end=2b681ac06b1a6b7ea39525e59363ffee0d1a68e5&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;e91ad5..2b681a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 6 Improvements, 1 Mixed; 0 of them in rollups
38 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2022-01-04.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3212"&gt;Amend RFC 3107 to change feature name, fix grammatical error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No new RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/62370"&gt;Tracking issue for Box::into_pin (feature box_into_pin)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89926"&gt;make Instant::{duration_since, elapsed, sub} saturating and remove workarounds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No new RFCs were published this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 1/5/2022 - 2/2/2022 🦀&lt;/p&gt;
&lt;h3&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsydccbhb/"&gt;January 5, 2022 | Indianapolis, IN, US | &lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt; | Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/282667031/"&gt;January 6, 2022 | Cardiff, UK | &lt;strong&gt;Rust Book Study Session - Automated Tests &amp;amp; Building a Command Line Program&lt;/strong&gt; | Rust and C++ Cardiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/282344613/"&gt;January 6, 2022 | Nürnberg, DE | &lt;strong&gt;Rust Nürnberg online #8&lt;/strong&gt;| Rust Nuremberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;January 8, 2022 | Various cities | &lt;strong&gt;Rust GameDev Monthly Meetup&lt;/strong&gt; | Rust GameDev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/vqtjcsydccbpb/"&gt;January 11, 2022 | Dallas, TX, US | &lt;strong&gt;Second Tuesday Meetup&lt;/strong&gt;| Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Los-Gatos-Rust-Reading-Group/events/282813296"&gt;January 11, 2022 | Los Gatos, CA, US | &lt;strong&gt;Book #24 - Rust for Rustaceans - Chapter 2&lt;/strong&gt; | Los Gatos Reading Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrydccbpb/"&gt;January 11, 2022 | Seattle, WA, US | &lt;strong&gt;Monthly meetup&lt;/strong&gt; | Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/zvxcsrydccbqb/"&gt;January 12, 2022 | Boulder, CO, US | &lt;strong&gt;Monthly Meetup&lt;/strong&gt; | Boulder Elixir and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Developing-Embedded-Systems-in-Rhein-Main/events/282321009"&gt;January 12, 2022 | Frankfurt, DE | &lt;strong&gt;Rust for bare-metal embedded systems&lt;/strong&gt; | Developing Embedded Systems in Rhein-Main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/282580016/"&gt;January 12, 2022 | Los Angeles, CA, US | &lt;strong&gt;Live Coding Session - Mob Programming a Rust Code Kata [Virtual] Jan. 2022&lt;/strong&gt; | Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/gjrtqsydccbqb/"&gt;January 12, 2022 | Stuttgart, DE | &lt;strong&gt;Rust-Meetup&lt;/strong&gt; | Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Charlottesville-Rust-Meetup/events/282990814"&gt;January 13, 2022 | Charlottesville, VA, US | &lt;strong&gt;Higher kinded polymorphism&lt;/strong&gt; | Charlottesville Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/meetup-group-bxuhnetv/events/282770888"&gt;January 13, 2022 | Minneapolis, MN, US | &lt;strong&gt;Safe Systems Programming in Rust: The Promise and the Challenge&lt;/strong&gt; | Software Engineering Reading Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/283032744"&gt;January 13, 2022 | San Diego, CA, US | &lt;strong&gt;San Diego Rust Rust January 2022 Tele-Meetup&lt;/strong&gt; | San Diego Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/pl-PL/Rust-Warsaw/events/282879405/"&gt;January 13, 2022 | Warsaw, PL | &lt;strong&gt;Rust Warsaw #4&lt;/strong&gt; | Rust Warsaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/vdhxgsydccbxb/"&gt;January 18, 2022 | Washington, DC, US| &lt;strong&gt;Mid-month Rustful&lt;/strong&gt; | Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/nwcmpsydccbzb"&gt;January 19, 2022 | Vancouver, BC, CA | &lt;strong&gt;Rust Study/Hack/Hang-out night&lt;/strong&gt; | Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrydccbhc/"&gt;January 25, 2022 | Dallas, TX, US | &lt;strong&gt;Last Tuesday Meetup&lt;/strong&gt; | Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/282545254"&gt;January 27, 2022 | Stuttgart, DE | &lt;strong&gt;Rust-Meetup&lt;/strong&gt; | Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/283011769"&gt;February 1, 2022 | Buffalo, NY, US | &lt;strong&gt;First Tuesdays: Buffalo Rust User Group&lt;/strong&gt; | Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/282756864/"&gt;January 6, 2022 | Austin, TX, US | &lt;strong&gt;Rust Lunch&lt;/strong&gt; | Rust ATX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsydccbqb/"&gt;January 12, 2022 | Atlanta, GA, US | &lt;strong&gt;Grab a beer with fellow Rustaceans&lt;/strong&gt; | Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrydccbrb/"&gt;January 13, 2022 | Columbus, OH, US | &lt;strong&gt;Monthly Meeting&lt;/strong&gt; | Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Dreamsolution&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dreamsolution.nl/2021-12-30-vacature-rust-developer.html"&gt;Rust Developer (Delft, NL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dusk&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dusk.network/pages/rust-developer-vacancy"&gt;Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/ockam"&gt;Multiple Rust Development Positions Available (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Estuary&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.estuary.dev/about/#careers"&gt;Multiple Rust Development Positions Available (Remote, New York, NY, US, or Columbus, OH, US&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Rust Engineer - Banking (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I performed an extremely scientific poll on twitter, and determined this is not how it's pronounced&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Well, it really is &lt;code&gt;Vec&amp;lt;T, A&amp;gt;&lt;/code&gt;, pronounced Veck-tah. 😛&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Look, I moved away from Boston to avoid this sort of thing 😄.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://github.com/rust-lang/rust/pull/92463#discussion_r777059401"&gt;the8472 &amp;amp; Thom Chiovoloni on github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1159"&gt;Josh Triplett&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/rx2xok/this_week_in_rust_424/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 423</title><link href="https://this-week-in-rust.org/blog/2021/12/29/this-week-in-rust-423/" rel="alternate"></link><published>2021-12-29T00:00:00-05:00</published><updated>2021-12-29T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-12-29:/blog/2021/12/29/this-week-in-rust-423/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.utam0k.jp/en/blog/2021/12/27/youki_first_release/"&gt;Hello, youki! (low-level container runtime written in Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nushell.sh/blog/2021-12-28-nushell_0_42.html"&gt;Nushell 0.42&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2021/12/25/this-year.html"&gt;This Year in Wgpu - 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/blog/2021-in-review.html"&gt;SixtyFPS (GUI crate): 2021 in Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.khonsulabs.com/t/bonsaidb-december-update-finishing-up-alpha-1/88"&gt;BonsaiDb December Update: Finishing up alpha 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://napi.rs/blog/announce-v2"&gt;NAPI-RS 2.0 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-embedded.org/this-year-in-embedded-rust-2021/"&gt;This Year in Embedded Rust: 2021 Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/12/27/changelog-109.html"&gt;Rust Analyzer Changelog #108&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Byron/gitoxide/discussions/285"&gt;End of year 2021: 20 months of Gitoxide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weekly.databend.rs/2021-12-29-databend-weekly/"&gt;This week in Databend #22: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Research&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2112.12693"&gt;Deadlock-free asynchronous message reordering in Rust with multiparty session types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jam1.re/blog/thoughts-on-contexts-and-capabilities-in-rust"&gt;Thoughts on Context and Capabilities in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrisdone.com/posts/rust/"&gt;My negative views on Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://garrellco.com/?p=1"&gt;Learning Rust – Why now?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/050-rust-1.56-1.57/"&gt;What's New in Rust 1.56 and 1.57&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/051-brenden-matthews/"&gt;Code Like a Pro in Rust with Brenden Matthews&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://caiiiycuk.medium.com/vange-rs-webassembly-in-rust-498e2f960a04"&gt;Vange-rs: WebAssembly in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://notes.eatonphil.com/lua-in-rust.html"&gt;Writing a minimal Lua implementation with a virtual machine from scratch in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://robamu.github.io/post/rust-ecosystem/"&gt;Bringing Rust to Space - Setting up a Rust ecosystem for the VA108XX MCU family&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://engineering.avast.io/scala-and-rust-interoperability-via-jni/"&gt;Scala and Rust interoperability via JNI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mateusfreira.github.io/@mateusfreira-writing-a-prometheus-exporter-in-rust-from-idea-to-grafana-chart/"&gt;Writing a prometheus exporter in rust from idea to grafana chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://haibane-tenshi.github.io/rust-contexts/"&gt;Futuristic Rust: context emulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexliesenfeld.com/mocking-http-services-in-rust"&gt;Mocking HTTP Services in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bexxmodd.com/log/llvm-infrastrucutre-and-rust/7"&gt;LLVM Infrastructure and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sbelzile/making-games-in-rust-part-6-generating-a-map-4aic"&gt;Making Games in Rust - Part 6 - Generating a Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.turbo.fish/proc-macro-parsing/"&gt;Procedural Macros: Parsing custom syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/a-data-pipeline-for-go-trains-delay-analysis-ml-in-action-with-rust-b294e80eede9"&gt;A Data Pipeline for Go Trains Delay Analysis — ML in Action with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/playlist?list=PLBNbqulT6FWw9C39_WIT_dcCIj1AdxiAy"&gt;Tetris in Rust from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=969j0qnJGi8"&gt;Rust Modules - Explained Like I'm 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=zHpDGeJU7no"&gt;I'm learning Rust - Enums, patterns, and traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[FR] [video] &lt;a href="https://www.youtube.com/watch?v=jnLbY7RIH54&amp;amp;list=PLuNjeTqaNojpuaqVboF1vmCRbn1an6sXg&amp;amp;index=5"&gt;Parlons peu, parlons Rust!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] &lt;a href="https://zhuanlan.zhihu.com/p/451184900"&gt;Rust性能评估与调优实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt;, a smarter &lt;code&gt;cd&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/993"&gt;Ajeet D'Souza&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;188 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-12-20..2021-12-27"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1945"&gt;miri: provide slightly better notes when tracking a pointer tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92110"&gt;backport LLVM changes to disable deferred inlining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91544"&gt;fix duplicate derive clone suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92139"&gt;perf: change &lt;code&gt;Backtrace::enabled&lt;/code&gt; atomic from &lt;code&gt;SeqCst&lt;/code&gt; to &lt;code&gt;Relaxed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91844"&gt;perf: eliminate &lt;code&gt;ObligationCauseData&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92149"&gt;fix bad caching of &lt;code&gt;~const Drop&lt;/code&gt; bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92226"&gt;constify &lt;code&gt;core::intrinsics::black_box&lt;/code&gt; and &lt;code&gt;core::hint::black_box&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91823"&gt;make &lt;code&gt;PTR::as_ref&lt;/code&gt; and similar methods &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92220"&gt;RawVec: don't recompute capacity after allocating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88858"&gt;allow reverse iteration of lowercase'd/uppercase'd chars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90345"&gt;stabilise &lt;code&gt;entry_insert&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91770"&gt;suggest adding &lt;code&gt;#[cfg(test)]&lt;/code&gt; to a test module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10224"&gt;cargo: make levenshtein distance case insensitive.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8144"&gt;clippy: add suggestion for &lt;code&gt;neg_multiply&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8133"&gt;clippy: fix &lt;code&gt;iter_skip_next&lt;/code&gt; false positives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8163"&gt;clippy: improve &lt;code&gt;unwrap_or_else_default&lt;/code&gt; when handling &lt;code&gt;unwrap_or_else(XXX::new)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8165"&gt;clippy: fix &lt;code&gt;shadow_reuse&lt;/code&gt; false negative for if let bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8167"&gt;clippy: fix an ICE on unwrapping a None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8170"&gt;clippy: new lint: &lt;code&gt;init-numbered-fields&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5150"&gt;rustfmt: fix static async closure qualifier order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5152"&gt;rustfmt: retain qualified path when rewriting struct literal expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;Relatively quiet week, mostly rustdoc improvements.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=3d57c61a9e04dcd3df633f41142009d6dcad4399&amp;amp;end=e91ad5fc62bdee4a29c18baa5fad2ca42fc91bf4&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;3d57c61a..e91ad5fc62&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 1 Improvements, 6 Mixed; 0 of them in rollups&lt;/p&gt;
&lt;p&gt;26 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-12-28.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3208"&gt;Amend RFC 2996 to replace &lt;code&gt;Stream&lt;/code&gt; with  &lt;code&gt;AsyncIterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No new RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84083"&gt;Clarify the guarantees that ThreadId does and doesn't make.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/92034"&gt;Remove effect of &lt;code&gt;#[no_link]&lt;/code&gt; attribute on name resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/87096"&gt;Tracking Issue for Stdin::lines, Stdin::split forwarder methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/63168"&gt;Tracking issue for Result::cloned, Result::cloned_err, Result::copied, Result::copied_err&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/91593"&gt;Remove unnecessary bounds for some Hash{Map,Set} methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No new RFCs were published this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 12/29/2021 - 1/31/2022 🦀&lt;/p&gt;
&lt;h3&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsydccbhb/"&gt;January 5, 2022 | Indianapolis, IN, US | &lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt; | Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/282667031/"&gt;January 6, 2022 | Cardiff, UK | &lt;strong&gt;Rust Book Study Session - Automated Tests &amp;amp; Building a Command Line Program&lt;/strong&gt; | Rust and C++ Cardiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/282344613/"&gt;January 6, 2022 | Nürnberg, DE | &lt;strong&gt;Rust Nürnberg online #8&lt;/strong&gt;| Rust Nuremberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;January 8, 2022 | Various cities | &lt;strong&gt;Rust GameDev Monthly Meetup&lt;/strong&gt; | Rust GameDev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/vqtjcsydccbpb/"&gt;January 11, 2022 | Dallas, TX, US | &lt;strong&gt;Second Tuesday Meetup&lt;/strong&gt;| Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrydccbpb/"&gt;January 11, 2022 | Seattle, WA, US | &lt;strong&gt;Monthly meetup&lt;/strong&gt; | Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/zvxcsrydccbqb/"&gt;January 12, 2022 | Boulder, CO, US | &lt;strong&gt;Monthly Meetup&lt;/strong&gt; | Boulder Elixir and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/282580016/"&gt;January 12, 2022 | Los Angeles, CA, US | &lt;strong&gt;Live Coding Session - Mob Programming a Rust Code Kata [Virtual] Jan. 2022&lt;/strong&gt; | Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/gjrtqsydccbqb/"&gt;January 12, 2022 | Stuttgart, DE | &lt;strong&gt;Rust-Meetup&lt;/strong&gt; | Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/pl-PL/Rust-Warsaw/events/282879405/"&gt;January 13, 2022 | Warsaw, PL | &lt;strong&gt;Rust Warsaw #4&lt;/strong&gt; | Rust Warsaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/vdhxgsydccbxb/"&gt;January 18, 2022 | Washington, DC, US| &lt;strong&gt;Mid-month Rustful&lt;/strong&gt; | Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/nwcmpsydccbzb"&gt;January 19, 2022 | Vancouver, BC, CA | &lt;strong&gt;Rust Study/Hack/Hang-out night&lt;/strong&gt; |Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrydccbhc/"&gt;January 25, 2022 | Dallas, TX, US | &lt;strong&gt;Last Tuesday Meetup&lt;/strong&gt; | Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/282756864/"&gt;January 6, 2022 | Austin, TX, US | &lt;strong&gt;Rust Lunch&lt;/strong&gt; | Rust ATX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsydccbqb/"&gt;January 12, 2022 | Atlanta, GA, US | &lt;strong&gt;Grab a beer with fellow Rustaceans&lt;/strong&gt; | Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrydccbrb/"&gt;January 13, 2022 | Columbus, OH, US | &lt;strong&gt;Monthly Meeting&lt;/strong&gt; | Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The Daily Edit&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dailyedit/jobs/blob/master/rust.md"&gt;Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Spruce&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spruce-systems.breezy.hr/p/9fb3b149dc01-software-engineer-backend"&gt;Software Engineer, Backend (New York, NY, US or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spruce-systems.breezy.hr/p/495dc657fb6e-engineering-manager"&gt;Engineering Manager (New York, NY, US or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Parity Technologies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://grnh.se/a5a5c0a33us"&gt;Rust Core Engineer - Solidity Compiler (Solang)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://grnh.se/dddd76283us"&gt;Core Runtime Engineer - Substrate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.parity.io/jobs"&gt;Multiple other Rust / Blockchain Engineering positions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;One reason we keep certain things as hard errors rather than lints: it establishes a baseline
that you can safely assume about other people's code, since it can't be turned off. And as a
result, that baseline can become part of people's mental model of Rust itself, rather than
something that might or might not be true in any given codebase.&lt;/p&gt;
&lt;p&gt;We have to take care to not use that lightly, because that places work on all users of Rust to
maintain code to that baseline. But there are cases where we do. We don't allow using one integer
type where another was expected. We don't allow certain operations outside an unsafe block. ...&lt;/p&gt;
&lt;p&gt;I think the standard we should apply is asking whether something is part of the baseline that
people should be able to assume about all Rust code, and if that's worth the tradeoff of requiring
that baseline of all Rust users.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://internals.rust-lang.org/t/lack-of-mut-in-bindings-as-a-deny-by-default-lint/15818/8"&gt;Josh Triplett on rust-internals&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1153"&gt;Josh Triplett&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/rrh9fj/this_week_in_rust_423/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 422</title><link href="https://this-week-in-rust.org/blog/2021/12/22/this-week-in-rust-422/" rel="alternate"></link><published>2021-12-22T00:00:00-05:00</published><updated>2021-12-22T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-12-22:/blog/2021/12/22/this-week-in-rust-422/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2021/12/17/follow-up-on-the-moderation-issue.html"&gt;Follow-up on the moderation issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/posts/2021-12-15-take-the-state-of-rust-survey/"&gt;Take the State of Rust Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/posts/2021-12-20-member-spotlight-spectral/"&gt;Member Spotlight: Spectral&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zellij.dev/news/multiplayer-sessions/"&gt;Zellij 0.23.0 released with new collaboration features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-12-20.html"&gt;SixtyFPS (GUI crate): Changelog for 19th of December 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/black-hat-rust-paypal-apple-pay-google-pay/"&gt;You can now buy Black Hat Rust with PayPal, Apple Pay &amp;amp; Google Pay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weekly.databend.rs/2021-12-22-databend-weekly/"&gt;This week in Databend #21: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0017/"&gt;This week in Fluvio #17: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2021-12-announcing-tokio-console"&gt;Announcing Tokio Console 0.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io//thisweek/2021/12/20/changelog-108.html"&gt;Rust Analyzer Changelog #108&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/12/20/changelog-162.html"&gt;IntelliJ Rust Changelog #162&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thephilbert.io/2021/12/20/gcc-rust-in-2021/"&gt;GCC Rust in 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tmandry.gitlab.io/blog/posts/2021-12-21-context-capabilities/"&gt;Contexts and capabilities in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thenewwazoo.github.io/whining.html"&gt;Stop Whining about Rust Hype - A Pro-Rust Rant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.reverberate.org/2021/12/18/thread-safety-cpp-rust.html"&gt;Thread Safety in C++ and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-in-production-astropad"&gt;Rust in Production: Astropad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://era.co/blog/unbuffered-io-slows-rust-programs"&gt;Unbuffered I/O Can Make Your Rust Programs Much Slower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=1UtklNrB8XA&amp;amp;t=1619s"&gt;Safe &amp;amp;&amp;amp; Portable Data Structure Design (10 minute lightning talk)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://noserve.rs/rust-lambdas-macos/"&gt;Cross-compiling Rust Lambdas on macOS without Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://depth-first.com/articles/2021/12/16/a-beginners-guide-to-parsing-in-rust/"&gt;A Beginner's Guide to Parsing in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://briankung.dev/2021/12/07/building-a-cedict-parser-in-rust-with-nom/"&gt;Building a CEDICT parser in Rust with Nom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DE] &lt;a href="https://www.heise.de/hintergrund/Ferris-Talk-4-Asynchrone-Programmierung-in-Rust-6299096.html"&gt;Ferris Talk #4: Asynchrone Programmierung in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] &lt;a href="https://folyd.com/blog/rust-pin-advanced/"&gt;「Pin 三部曲」第二部之 《Rust Pin 进阶》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdzWAX_N7rkJlVza73hZuNDCZIzKtinGJv6OjcdfdOpJ5w6Ww/viewform"&gt;TypeVille Call for Papers (ends 9th of January 2022)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/embarkstudios/homegrown-rendering-with-rust-1e39068e56a7"&gt;Homegrown rendering with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://www.se-radio.net/2021/12/episode-490-tim-mcnamara-on-rust-2021-edition/"&gt;SE-Radio: Tim McNamara on Rust 2021 Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=zC-r1jzVwh4"&gt;Web api benchmarking: Rust (Warp) vs Rust (actix-web)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PT] &lt;a href="https://github.com/luisvonmuller/Esta-Semana-Em-Rust/blob/main/%23420.md"&gt;Olá e seja bem vindo a outra edição de esta semana em: Rust! #420 (08/12/2021). 🌟&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/EmbarkStudios/kajiya"&gt;kajiya&lt;/a&gt;, an experimental real-time global illumination renderer made with Rust and Vulkan.&lt;/p&gt;
&lt;p&gt;llogiq is pretty pleased with himself for this suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/diesel-rs/diesel/pull/2996"&gt;diesel-rs - Documentation improvements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;340 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-12-13..2021-12-20"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91932"&gt;add user seed to &lt;code&gt;-Z randomize-layout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91516"&gt;improve suggestion to change struct field to &lt;code&gt;&amp;amp;mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91820"&gt;suggest to specify a target triple when lang item is missing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90939"&gt;tweak errors coming from &lt;code&gt;for&lt;/code&gt;-loop, &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;.await&lt;/code&gt; desugaring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91818"&gt;show the unused type for &lt;code&gt;unused_results&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91597"&gt;recover on invalid operators &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91660"&gt;perf: manually implement &lt;code&gt;Hash&lt;/code&gt; for &lt;code&gt;DefId&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92042"&gt;enable &lt;code&gt;#[thread_local]&lt;/code&gt; for all windows-msvc targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/301"&gt;add entry_ref API to HashMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91529"&gt;add &lt;code&gt;BinaryHeap::try_reserve&lt;/code&gt; and &lt;code&gt;BinaryHeap::try_reserve_exact&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91947"&gt;add &lt;code&gt;io::Error::other&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91837"&gt;avoid sorting in hash map stable hashing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91928"&gt;constify (most) &lt;code&gt;Option&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91918"&gt;constify &lt;code&gt;bool::then&lt;/code&gt;{,&lt;code&gt;_some&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91851"&gt;make &lt;code&gt;MaybeUninit::zeroed&lt;/code&gt; &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91439"&gt;mark defaulted &lt;code&gt;PartialEq&lt;/code&gt;/&lt;code&gt;PartialOrd&lt;/code&gt; methods as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91527"&gt;optimize &lt;code&gt;vec::retain&lt;/code&gt; performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91752"&gt;readd &lt;code&gt;track_caller&lt;/code&gt; to &lt;code&gt;Result::from_residual&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90521"&gt;stabilize &lt;code&gt;destructuring_assignment&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91881"&gt;stabilize &lt;code&gt;iter::zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91728"&gt;stabilize &lt;code&gt;asm!&lt;/code&gt; and &lt;code&gt;global_asm!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92020"&gt;remove &lt;code&gt;P: Unpin&lt;/code&gt; bound on &lt;code&gt;impl Stream for Pin&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2495"&gt;futures: add &lt;code&gt;StreamExt::count&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2527"&gt;futures: limit &lt;code&gt;FuturesUnordered&lt;/code&gt; max value of &lt;code&gt;yield_every&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10188"&gt;cargo: detect filesystem loop during walking the projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10193"&gt;cargo: display alias target on 'cargo help &lt;alias&gt;`&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91905"&gt;rustdoc: fix source code page sidebar on mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7978"&gt;clippy: add &lt;code&gt;unnecessary_to_owned&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8146"&gt;clippy: don't emit &lt;code&gt;return_self_not_must_use&lt;/code&gt; lint if &lt;code&gt;Self&lt;/code&gt; already is marked as &lt;code&gt;#[must_use]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8143"&gt;clippy: ensure that &lt;code&gt;return_self_not_must_use&lt;/code&gt; is not emitted if the method already has &lt;code&gt;#[must_use]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8138"&gt;clippy: fix &lt;code&gt;SAFETY&lt;/code&gt; comment tag casing in &lt;code&gt;undocumented_unsafe_blocks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5090"&gt;rustfmt: prevent duplicate comma when formatting struct pattern with ".."&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;Unfortunately a change introduced in &lt;a href="https://github.com/rust-lang/rust/pull/89836"&gt;rust-lang/rust#89836&lt;/a&gt; has made performance across different compiler artifacts much more variable by embedding compiler version information (including a git commit hash) in demangled symbol names. This means that even if two compiler artifacts are built from the same exact source code (with only the git commit changed), the compiler will have slightly different performance characteristics. This makes comparisons across pull requests virtually impossible. &lt;/p&gt;
&lt;p&gt;The compiler team is still deciding what to do to handle this, but in the mean time, performance testing is largely broken. This issue is currently being tracked in&lt;a href="https://github.com/rust-lang/rustc-perf/issues/1126"&gt;rust-lang/rustc-perf#1126&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=404c8471aba60c2d837fa728e7c729a0f52d5830&amp;amp;end=3d57c61a9e04dcd3df633f41142009d6dcad4399&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;404c847..3d57c61&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 2 Improvements, 23 Mixed; 9 of them in rollups
38 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-12-21.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3184"&gt;Thread local Cell methods.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No new RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/90625"&gt;Add UnwindSafe to Once&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88858"&gt;Allow reverse iteration of lowercase'd/uppercase'd chars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No new RFCs were published this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 12/22/2021 - 1/15/2022 🦀&lt;/p&gt;
&lt;h3&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/ttjjqsyccqbfc/"&gt;December 23, 2021 | Stuttgart, DE | &lt;strong&gt;Rust-Meetup&lt;/strong&gt; | Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccqblc/"&gt;December 28, 2021 | Dallas, TX, US | &lt;strong&gt;Dallas Rust - Last Tuesday&lt;/strong&gt; | Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsydccbhb/"&gt;January 5, 2022 | Indianapolis, IN, US | &lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt; | Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/282344613/"&gt;January 6, 2022 | Nürnberg, DE | &lt;strong&gt;Rust Nürnberg online #8&lt;/strong&gt;| Rust Nuremberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;January 8, 2022 | Various cities | &lt;strong&gt;Rust GameDev Monthly Meetup&lt;/strong&gt; | Rust GameDev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrydccbpb/"&gt;January 11, 2022 | Seattle, WA, US | &lt;strong&gt;Monthly meetup&lt;/strong&gt; | Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/zvxcsrydccbqb/"&gt;January 12, 2022 | Boulder, CO, US | &lt;strong&gt;Monthly Meetup&lt;/strong&gt; | Boulder Elixir and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/282580016/"&gt;January 12, 2022 | Los Angeles, CA, US | &lt;strong&gt;Live Coding Session - Mob Programming a Rust Code Kata [Virtual] Jan. 2022&lt;/strong&gt; | Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/gjrtqsydccbqb/"&gt;January 12, 2022 | Stuttgart, DE | &lt;strong&gt;Rust-Meetup&lt;/strong&gt; | Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/282756864/"&gt;January 6, 2022 | Austin, TX, US | &lt;strong&gt;Rust Lunch&lt;/strong&gt; | Rust ATX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsydccbqb/"&gt;January 12, 2022 | Atlanta, GA, US | &lt;strong&gt;Grab a beer with fellow Rustaceans&lt;/strong&gt; | Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrydccbrb/"&gt;January 13, 2022 | Columbus, OH, US | &lt;strong&gt;Monthly Meeting&lt;/strong&gt; | Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Astropad&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://astropad.com/software-engineering-manager/"&gt;Software Engineering Manager (Remote North America time zones)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Timescale&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/timescale/jobs/5542785002"&gt;Senior Rust/C/C++ Engineer, Database Toolkit (Remote (UTC-8 to UTC-5)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tangram&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tangram.dev/jobs"&gt;Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Rust Engineer - Banking (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Parity Technologies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://grnh.se/a5a5c0a33us"&gt;Rust Core Engineer - Solidity Compiler (Solang) (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://grnh.se/cb272e3b3us"&gt;Rust Core Engineer - Smart Contract Platform (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.parity.io/jobs"&gt;Multiple other Rust / Blockchain Engineering positions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Important crab-related diagnostics improvement shipping in nightly
&lt;a href="https://twitter.com/rustlang"&gt;@rustlang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error: Ferris cannot be used as an identifier
--&amp;gt; src/main.rs:2:9
  |
2 |     let 🦀 = 123;
  |         ^^ help: try using their name instead: `ferris`
3 |
4 |     for i in 0..🦀 {
  |&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://twitter.com/m_ou_se/status/1471077145258647554"&gt;Mara Bos on twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1147"&gt;Julian Wollersberger&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/rmirzk/this_week_in_rust_422/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 421</title><link href="https://this-week-in-rust.org/blog/2021/12/15/this-week-in-rust-421/" rel="alternate"></link><published>2021-12-15T00:00:00-05:00</published><updated>2021-12-15T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-12-15:/blog/2021/12/15/this-week-in-rust-421/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/12/08/survey-launch.html"&gt;Launching the 2021 State of Rust Survey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/posts/2021-12-13-member-spotlight-automata/"&gt;Member Spotlight: Automata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wasmweekly.news/issue-161/"&gt;WebAssembly Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/news/028/"&gt;This Month in Rust GameDev #28 - November 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/12/13/changelog-107.html"&gt;Rust Analyzer Changelog #107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bytecodealliance.org/articles/cranelift-progress-2021"&gt;Cranelift Progress Report: A Look Back at 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lore.kernel.org/lkml/20211206140313.5653-1-ojeda@kernel.org/"&gt;Rust for Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rsadsb.github.io/v0.4.0.html"&gt;Announcing rsadsb v0.4.0: View Airplanes in the sky with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-12-13.html"&gt;SixtyFPS (GUI crate): Changelog for 12th of December 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.guillaume-gomez.fr/articles/2021-12-14+sysinfo%3A+version+0.22+and+FreeBSD+support"&gt;sysinfo: version 0.22 and FreeBSD support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/rbvmib/announcing_the_grafana_plugin_sdk_for_rust/"&gt;Announcing the Grafana Plugin SDK for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/reo75u/enzyme_towards_stateoftheart_autodiff_in_rust/"&gt;Announcing Enzyme for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weekly.databend.rs/2021-12-15-databend-weekly/"&gt;This week in Databend #20: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0016/"&gt;This week in Fluvio #16: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://orhun.dev/blog/git-cliff-0.5.0/"&gt;git-cliff 0.5.0 (changelog generator)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.ysndr.de/posts/essays/2021-12-12-rust-for-iot/"&gt;Rust as a platform for IoT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://madsravn.dk/posts/using-liquid-rust-with-serde"&gt;https://madsravn.dk/posts/using-liquid-rust-with-serde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.unwoundstack.com/blog/rust-error-handling.html"&gt;Rust Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dystroy.org/blog/how-not-to-learn-rust/"&gt;How not to learn Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/049-lily-mara/"&gt;Refactoring to Rust with Lily Mara&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=WaTEjSHFMbY"&gt;Talking about the Rust Programming Language with Luca Palmieri&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nnethercote.github.io/2021/12/08/a-brutally-effective-hash-function-in-rust.html"&gt;A brutally effective hash function in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aidancully.blogspot.com/2021/12/less-painful-linear-types.html"&gt;Less Painful Linear Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ctprods.cyprientaque.com/blog/a-rust-api-pattern-actix"&gt;A Rust Api pattern (Actix)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nickb.dev/blog/authoring-a-simd-enhanced-wasm-library-with-rust"&gt;Authoring a SIMD enhanced Wasm library with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://21-lessons.com/getting-better-insights-into-your-rust-applications/"&gt;Getting better insights into your Rust applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vinted.engineering/2021/02/15/validating-json-input-in-rust-web-services/"&gt;Validating JSON input in Rust web services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=yIkUWT4QXCA"&gt;Building a networked Web and Native app with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://www.youtube.com/watch?v=FGi8evJFdnw"&gt;rg3d - live game development #4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/concordium/the-devx-initiative-sponsorship-program-goals-and-principles-e640063eeaa7"&gt;The DevX Initiative Sponsorship Program: Goals and Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://relay.dev/blog/2021/12/08/introducing-the-new-relay-compiler/"&gt;Introducing the new Relay compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DE] &lt;a href="https://www.heise.de/news/Linux-Kernel-Rust-Entwicklung-schreitet-mit-neuer-Edition-voran-6287775.html"&gt;Linux-Kernel: Rust-Entwicklung schreitet mit neuer Edition voran&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/efg"&gt;efg&lt;/a&gt;, a proc macro to allow boolean expression like syntax for &lt;code&gt;#[cfg]&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/991"&gt;farnbams&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2358"&gt;Change no_main feature on ockam_macros to an argument&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2357"&gt;Reduce the features that the ockam_macros crate requires from syn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;315 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-12-06..2021-12-13"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91643"&gt;asm: allow using r9 (ARM) and x18 (AArch64) if they are not reserved by the current target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83174"&gt;suggest using a temporary variable to fix borrowck errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91503"&gt;tweak "call this function" suggestion to have smaller span&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91769"&gt;tweak assoc type obligation spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91815"&gt;better span for unexpected normalization failure in CTFE engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91718"&gt;give more help in the unaligned_references lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91245"&gt;suggest casting between &lt;code&gt;i&lt;/code&gt;/&lt;code&gt;u32&lt;/code&gt; and &lt;code&gt;char&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91337"&gt;add a suggestion if &lt;code&gt;macro_rules&lt;/code&gt; is misspelled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91353"&gt;avoid cloning refcounted types during folding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90423"&gt;deduplicate projection sub-obligations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91764"&gt;do not ICE when suggesting elided lifetimes on non-existent spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91531"&gt;do not add &lt;code&gt;;&lt;/code&gt; to expected tokens list when it's wrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91634"&gt;do not attempt to suggest help for overly malformed struct/function call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91476"&gt;improve 'cannot contain emoji' error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91548"&gt;add &lt;code&gt;spin_loop&lt;/code&gt; hint for RISC-V architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91512"&gt;override &lt;code&gt;Iterator::advance&lt;/code&gt;(&lt;code&gt;_back&lt;/code&gt;)&lt;code&gt;_by&lt;/code&gt; for &lt;code&gt;array::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85013"&gt;replace dominators algorithm with simple Lengauer-Tarjan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91127"&gt;add &lt;code&gt;&amp;lt;*{const|mut} T&amp;gt;::{to|from}_bits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91341"&gt;add &lt;code&gt;array::IntoIter::&lt;/code&gt;{&lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;from_raw_parts&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91515"&gt;add &lt;code&gt;rsplit_array&lt;/code&gt; variants to slices and arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90741"&gt;make &lt;code&gt;Option::cloned&lt;/code&gt; &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91824"&gt;make &lt;code&gt;(*mut T)::write_bytes&lt;/code&gt; &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90270"&gt;make &lt;code&gt;Borrow&lt;/code&gt; and &lt;code&gt;BorrowMut&lt;/code&gt; impls &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91806"&gt;make &lt;code&gt;Unique&lt;/code&gt;s methods &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90081"&gt;make &lt;code&gt;intrinsics::write_bytes&lt;/code&gt; &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91086"&gt;implement &lt;code&gt;TryFrom&amp;lt;&amp;amp;'_ mut [T]&amp;gt;&lt;/code&gt; for &lt;code&gt;[T; N]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91645"&gt;implement &lt;code&gt;core::future::join!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87599"&gt;implement concat_bytes!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81156"&gt;provide the &lt;code&gt;ReadBuf&lt;/code&gt; abstraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90207"&gt;stabilise &lt;code&gt;feature(const_generics_defaults)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91091"&gt;stabilize &lt;code&gt;ControlFlow::&lt;/code&gt;{&lt;code&gt;is_break&lt;/code&gt;, &lt;code&gt;is_continue&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91855"&gt;stabilize &lt;code&gt;const_cstr_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10191"&gt;cargo: improve I/O error message for fingerprint of build script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/91682"&gt;rustdoc: show type layout for type aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8071"&gt;clippy: add new lint to warn when &lt;code&gt;#[must_use]&lt;/code&gt; attribute should be used on a method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8080"&gt;clippy: fix FP on &lt;code&gt;question_mark&lt;/code&gt; if returned object is not local&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8100"&gt;clippy: fix &lt;code&gt;blocks_in_if_conditions&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8086"&gt;clippy: fix bad suggestion on &lt;code&gt;option_if_let_else&lt;/code&gt; when there is complex subpat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/8030"&gt;clippy: ignore associated types in traits when considering type complexity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;This week's report started with 6 regressions; after eliminating truly obvious noise, we are left with just 2 minor regressions. Of the cases that regressed, I think the only interesting one is keccak (regressed by 1.73% in PR #91549). But don't be too depressed: keccak was also improved up to 23% by PR #85013 (!); thanks to @&lt;strong&gt;simulacrum&lt;/strong&gt; for that PR.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=e2116acae59654bfab2a9729a024f3e2fd6d4b02&amp;amp;end=404c8471aba60c2d837fa728e7c729a0f52d5830&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;e2116a..404c847&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 5 Improvements, 3 Mixed; 1 of them in rollups
48 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-12-14.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3208"&gt;Amend RFC 2996 to replace Stream with AsyncIterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3184"&gt;Thread local Cell methods.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/91714"&gt;Make rustdoc --passes and rustdoc --no-defaults have no effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89926"&gt;make Instant::{duration_since, elapsed, sub} saturating and remove workarounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/44524"&gt;Tracking issue for RFC 2115: In-band lifetime bindings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No new RFCs were published this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 12/15/2021 - 1/15/2022 🦀&lt;/p&gt;
&lt;h3&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/282313169/"&gt;December 15, 2021 | Cardiff, UK | &lt;strong&gt;Rust Book Study Session - Error Handling &amp;amp; Generic Types, Traits, and Lifetimes&lt;/strong&gt; | Rust and C++ Cardiff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Linz/events/282559064/"&gt;December 16, 2021 | Linz, AT | &lt;strong&gt;Rust Meetup Linz - 17th Edition&lt;/strong&gt; | Rust Linz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-meetup.ir"&gt;December 17, 2021 | Various cities, IR | &lt;strong&gt;The Third Rust Iran online meetup&lt;/strong&gt; | Rust Iran Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/nwcmpsyccqbtb/"&gt;December 18, 2021 | Vancouver, BC, CA | &lt;strong&gt;Your Rust Web Development Toolset&lt;/strong&gt; | Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Los-Gatos-Rust-Reading-Group/events/282687733/"&gt;December 21, 2021 | Los Gatos, CA, US | &lt;strong&gt;Book #24 - Rust for Rustaceans - Chapter 1 (session 3)&lt;/strong&gt; | Los Gatos Reading Group&lt;/a&gt; | &lt;a href="https://www.meetup.com/the-south-padre-island-reading-group/events/282687761/"&gt;Alternative Link (South Padre Island, TX Reading Group)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/vdhxgsyccqbcc/"&gt;December 21, 2021 | Washington, DC, US | &lt;strong&gt;Mid-month Rustful&lt;/strong&gt; | Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/ttjjqsyccqbfc/"&gt;December 23, 2021 | Stuttgart, DE | &lt;strong&gt;Rust-Meetup&lt;/strong&gt; | Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccqblc/"&gt;December 28, 2021 | Dallas, TX, US | &lt;strong&gt;Dallas Rust - Last Tuesday&lt;/strong&gt; | Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsydccbhb/"&gt;January 5, 2022 | Indianapolis, IN, US | &lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt; | Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/282344613/"&gt;January 6, 2022 | Nürnberg, DE | &lt;strong&gt;Rust Nürnberg online #8&lt;/strong&gt;| Rust Nuremberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;January 8, 2022 | Various cities | &lt;strong&gt;Rust GameDev Monthly Meetup&lt;/strong&gt; | Rust GameDev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrydccbpb/"&gt;January 11, 2022 | Seattle, WA, US | &lt;strong&gt;Monthly meetup&lt;/strong&gt; | Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/zvxcsrydccbqb/"&gt;January 12, 2022 | Boulder, CO, US | &lt;strong&gt;Monthly Meetup&lt;/strong&gt; | Boulder Elixir and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/282580016/"&gt;January 12, 2022 | Los Angeles, CA, US | &lt;strong&gt;Live Coding Session - Mob Programming a Rust Code Kata [Virtual] Jan. 2022&lt;/strong&gt; | Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/gjrtqsydccbqb/"&gt;January 12, 2022 | Stuttgart, DE | &lt;strong&gt;Rust-Meetup&lt;/strong&gt; | Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/282472182"&gt;December 16, 2021 | Austin, TX, US | &lt;strong&gt;Rust Lunch&lt;/strong&gt; | Rust ATX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsydccbqb/"&gt;January 12, 2022 | Atlanta, GA, US | &lt;strong&gt;Grab a beer with fellow Rustaceans&lt;/strong&gt; | Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrydccbrb/"&gt;January 13, 2022 | Columbus, OH, US | &lt;strong&gt;Monthly Meeting&lt;/strong&gt; | Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Rust Engineer - Banking (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This is safer than you may think, because those who need async tend to know it themselves and
don't ask "should I use async" question. In other words, asking itself is a signal that answer is
no. MITM proxy case was a rare exception.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/examples-of-high-performance-rust-multi-thread-network-app-w-o-async/68513/4"&gt;Seo Sanghyeon on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1146"&gt;Zeroexcuses&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/rhgfiw/this_week_in_rust_421/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry></feed>