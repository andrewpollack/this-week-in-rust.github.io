<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/feeds/all-en.atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2023-05-24T00:00:00-04:00</updated><entry><title>This Week in Rust 496</title><link href="https://this-week-in-rust.org/blog/2023/05/24/this-week-in-rust-496/" rel="alternate"></link><published>2023-05-24T00:00:00-04:00</published><updated>2023-05-24T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2023-05-24:/blog/2023/05/24/this-week-in-rust-496/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/voliva/solving-the-floating-point-precision-problem-with-floats-4369"&gt;Solving the "floating point precision" problem with... floats?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GyulyVGC/sniffnet/releases/tag/v1.2.0"&gt;Sniffnet v1.2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bevyengine.org/news/bevy-webgpu/"&gt;Bevy + WebGPU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2023/05/22/changelog-182.html"&gt;rust-analyzer changelog #182&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mgrachev/update-informer/releases/tag/v1.0.0"&gt;Update-informer v1.0.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/pavex-progress-report-04/"&gt;Pavex, a new Rust web framework - #4: Performance is a feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://quickwit.io/blog/whichlang-language-detection-library"&gt;Opensourcing Whichlang, a fast language detection library for Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pkolaczk.github.io/memory-consumption-of-async/"&gt;How Much Memory Do You Need to Run 1 Million Concurrent Tasks?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2023/05/open-sourcing-our-rust-crate-audits.html"&gt;Open sourcing our Rust crate audits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://floxdev.com/blog/rust-nix-parallels"&gt;Rust &amp;amp; Nix: Parallels in Complexity Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/david-hewitt/"&gt;PyO3 with David Hewitt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://swatinem.de/blog/magic-scope-guards/"&gt;The magic of scope guards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/mocking-rust-mockall-alternatives"&gt;Mocking in Rust: Mockall and alternatives - LogRocket Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bazhenov.me/posts/rust-stream-vbyte-varint-decoding/"&gt;Compress-a-Palooza: Unpacking 5 Billion Varints in only 4 Billion CPU Cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2023/05/21/resilient-ll-parsing-tutorial.html"&gt;Resilient LL Parsing Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/esp32-embedded-rust-at-the-hal-timer-ultrasonic-distance-measurement"&gt;ESP32 Embedded Rust at the HAL: Timer Ultrasonic Distance Measurement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashrust.com/blog/a-guide-to-closures-in-rust/"&gt;A guide to closures in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developerlife.com/2023/02/20/guide-to-nom-parsing/"&gt;Guide to parsing with nom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=45ShXM9hwJc"&gt;N-Queens Puzzle (PART 2) - Rust - Codurance Screenkata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="research"&gt;&lt;a class="toclink" href="#research"&gt;Research&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=k-izcFCHN2o"&gt;Nico Lehmann, Flux: Liquid Types for Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustconf.com/schedule"&gt;RustConf 2023 Schedule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/quickwit-oss/whichlang"&gt;whichlang&lt;/a&gt;, a fast no-dependencies OSS natural language detector.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1199"&gt;Brian Kung&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hecatia-elegua/bilge/issues/11"&gt;bilge - Allow others to define their own &lt;code&gt;-Bits&lt;/code&gt; derives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1256"&gt;Hyperswitch - Implement &lt;code&gt;CardsInfoInterface&lt;/code&gt; for &lt;code&gt;MockDb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1257"&gt;Hyperswitch - Implement &lt;code&gt;DisputeInterface&lt;/code&gt; for &lt;code&gt;MockDb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1242"&gt;Hyperswitch - Unite payment intent and setup intent in stripe compatibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;314 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-05-15..2023-05-22"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111697"&gt;CFI: fix &lt;code&gt;encode_ty&lt;/code&gt;: unexpected &lt;code&gt;Param(B/#1)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111610"&gt;&lt;code&gt;diagnostic&lt;/code&gt;: wrap parens for ref impl trait param&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110493"&gt;resolve: only disambiguate binding key during define&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111771"&gt;add &lt;code&gt;--remote-time&lt;/code&gt; flag to curl for bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111654"&gt;add a conversion from &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to &lt;code&gt;&amp;amp;mut UnsafeCell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/109773"&gt;add creation time support to &lt;code&gt;FileTimes&lt;/code&gt; on apple and windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111649"&gt;add derive for &lt;code&gt;core::marker::ConstParamTy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105750"&gt;always fall back to PartialEq when a constant in a pattern is not recursively structural-eq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111652"&gt;better diagnostic for &lt;code&gt;use Self::..&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111630"&gt;debug format &lt;code&gt;Const&lt;/code&gt;'s less verbosely&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111054"&gt;do not recover when parsing stmt in cfg-eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110930"&gt;don't expect normalization to succeed in &lt;code&gt;elaborate_drops&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111424"&gt;don't inline functions with unsized args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111696"&gt;don't skip inference for type in &lt;code&gt;offset_of!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111810"&gt;don't use inner macro in &lt;code&gt;marker_impls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111491"&gt;dont check &lt;code&gt;must_use&lt;/code&gt; on nested &lt;code&gt;impl Future&lt;/code&gt; from fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111573"&gt;erase &lt;code&gt;ReError&lt;/code&gt; properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111661"&gt;erase regions of type in &lt;code&gt;offset_of!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111695"&gt;exclude inherent projections from some alias type &lt;code&gt;match&lt;/code&gt;es&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111641"&gt;fix dependency tracking for debugger visualizers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111715"&gt;fix doc comment for &lt;code&gt;ConstParamTy&lt;/code&gt; derive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111634"&gt;fix duplicate &lt;code&gt;arcinner_layout_for_value_layout&lt;/code&gt; calls when using the uninit &lt;code&gt;Arc&lt;/code&gt; constructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111675"&gt;fix local libs not included when printing native static libs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111745"&gt;fix overflow in error emitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111754"&gt;fix recursion depth handling after confirmation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111762"&gt;fix: emit error when fragment is &lt;code&gt;MethodReceiverExpr&lt;/code&gt; and items is empty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111472"&gt;get current target config from &lt;code&gt;--print=cfg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111708"&gt;give a more useful location for where a &lt;code&gt;span_bug&lt;/code&gt; was delayed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111612"&gt;give better error when collecting into &lt;code&gt;&amp;amp;[T]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111533"&gt;handle error body in generator layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111743"&gt;improve cgu merging debug output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111731"&gt;keep only the trait when emitting the error for &lt;code&gt;MyTrait + 'a&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111556"&gt;merge return place with other locals in CopyProp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111746"&gt;merge some query impl modules into one&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111625"&gt;move &lt;code&gt;rustc_middle/src/ty/query.rs&lt;/code&gt; to &lt;code&gt;rustc_middle/src/query/plumbing.rs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111345"&gt;only depend on &lt;code&gt;CFG_VERSION&lt;/code&gt; in &lt;code&gt;rustc_interface&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111781"&gt;optimize &lt;code&gt;next_chunk&lt;/code&gt; impls for Filter and FilterMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111596"&gt;process current bucket instead of parent's bucket when starting loop for dominators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111449"&gt;recover &lt;code&gt;impl&amp;lt;T ?Sized&amp;gt;&lt;/code&gt; correctly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111756"&gt;rename &lt;code&gt;{drop,forget}_{copy,ref}&lt;/code&gt; lints to more consistent naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111808"&gt;replace &lt;code&gt;QueryStruct&lt;/code&gt; with arrays local to &lt;code&gt;rustc_query_impl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/108938"&gt;shorten backtraces for queries in ICEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111590"&gt;shorten even more panic temporary lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111168"&gt;specialize &lt;code&gt;ToString&lt;/code&gt; implementation for &lt;code&gt;fmt::Arguments&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/108062"&gt;specialize query execution for incremental and non-incremental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110605"&gt;support PGO on custom project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110884"&gt;support RISC-V unaligned-scalar-mem target feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111602"&gt;suppress "erroneous constant used" for constants tainted by errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111488"&gt;use error term in projection if missing associated item in new solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/526"&gt;add the weak-intrinsics feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111043"&gt;stabilize feature &lt;code&gt;cstr_is_empty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111044"&gt;stabilize feature &lt;code&gt;nonzero_negation_ops&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111453"&gt;constify &lt;code&gt;slice_as_chunks&lt;/code&gt; (unstable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111646"&gt;use code with reliable branchless code-gen for &lt;code&gt;slice::sort&lt;/code&gt; merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111524"&gt;&lt;code&gt;ascii::Char&lt;/code&gt;-ify the escaping code in core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/430"&gt;hashbrown: add NEON backend for RawTable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/417"&gt;hashbrown: add support for allocator-api2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/regex/pull/996"&gt;regex syntax: fix overflow for big counted repetitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12148"&gt;cargo: &lt;code&gt;lints&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12165"&gt;cargo: pass &lt;code&gt;-C debuginfo&lt;/code&gt; after weakening if explicitly set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/107680"&gt;rustdoc: hide repr attribute from doc of types without guaranteed repr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111824"&gt;rustdoc: include strikethrough in item summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111642"&gt;rustdoc: Only keep impl blocks from bodies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10763"&gt;clippy: add &lt;code&gt;minimal_cfg_condition&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10478"&gt;clippy: &lt;code&gt;SpanlessEq&lt;/code&gt; improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10811"&gt;clippy: &lt;code&gt;match_wild_err_arm&lt;/code&gt;: do not lint in const contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10753"&gt;clippy: &lt;code&gt;redundant_pattern_matching&lt;/code&gt;: check for single-arm match&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10725"&gt;clippy: &lt;code&gt;dbg_macro&lt;/code&gt;: don't remove &lt;code&gt;dbg!&lt;/code&gt; in arbitrary expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10798"&gt;clippy: don't suggest unnameable types in &lt;code&gt;box_default&lt;/code&gt;, &lt;code&gt;let_underscore_untyped&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10777"&gt;clippy: enhance &lt;code&gt;needless_collect&lt;/code&gt;: lint in method/function arguments that take an &lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10682"&gt;clippy: fix &lt;code&gt;invalid_regex&lt;/code&gt; not recognizing new syntax introduced after regex-1.8.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10337"&gt;clippy: fix some suggestions generated by the &lt;code&gt;option_if_let_else&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10775"&gt;clippy: ignoring &lt;code&gt;let_underscore_untyped&lt;/code&gt; warnings in code from proc macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10674"&gt;clippy: rename &lt;code&gt;integer_arithmetic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14855"&gt;rust-analyzer: consider block impls in &lt;code&gt;lookup_impl_assoc_item_for_trait_ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14820"&gt;rust-analyzer: expand &lt;code&gt;format_args!&lt;/code&gt; with more details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14789"&gt;rust-analyzer: add &lt;code&gt;moved-out-of-ref&lt;/code&gt; diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14812"&gt;rust-analyzer: highlight used trait assoc items when cursor is on trait import or trait bound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14811"&gt;rust-analyzer: render hover actions for closure captures and sig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14837"&gt;rust-analyzer: support C string literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14863"&gt;rust-analyzer: consider all tokens in macro expr when analyzing locals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14848"&gt;rust-analyzer: fix &lt;code&gt;preorder_expr&lt;/code&gt; skipping the &lt;code&gt;else&lt;/code&gt; block of let-else statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14825"&gt;rust-analyzer: fix evaluating negation for floating point types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14851"&gt;rust-analyzer: handle match scrutinee in closure captures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14872"&gt;rust-analyzer: introduce new type var when expectation for ref pat is not ref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14818"&gt;rust-analyzer: place type inlay hints after the item and without left-padding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14828"&gt;rust-analyzer: process &lt;code&gt;macro_use&lt;/code&gt; prelude in semantic scope resolver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There were a few regressions, but most were expected, and one in particular (PR&lt;/p&gt;
&lt;h1 id="111807-is-expected-yield-gains-in-object-code-performance-at-the-expense-of-a"&gt;&lt;a class="toclink" href="#111807-is-expected-yield-gains-in-object-code-performance-at-the-expense-of-a"&gt;111807) is expected yield gains in object code performance at the expense of a&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;slight compile-time hit. There are a couple PR's that need future followup,
namely PRs #111364 and #111524.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=3ea9ad532474343426e564b997891e459cda89a6&amp;amp;end=cda5becc27cbc7106646fbc40aacea5e7896d954&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;3ea9ad53..cda5becc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3 Regressions, 2 Improvements, 5 Mixed; 2 of them in rollups
51 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2023-05-23.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3424"&gt;eRFC: single-file packages ("cargo script") integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/111235"&gt;Stabilize inline asm for LoongArch64&lt;/a&gt; (editor's note: "&lt;a href="https://en.wikipedia.org/wiki/Loongson#LoongArch"&gt;LoongArch&lt;/a&gt;" is not a typo)&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/111543"&gt;Uplift &lt;code&gt;clippy::invalid_utf8_in_unchecked&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/111567"&gt;Uplift &lt;code&gt;clippy::cast_ref_to_mut&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/111530"&gt;Uplift &lt;code&gt;clippy::undropped_manually_drops&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/110166"&gt;Make pointer_structural_match normal and warn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/110702"&gt;[mir-opt] SimplifyLocals should also clean up debuginfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/103291"&gt;Remove structural match from &lt;code&gt;TypeId&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/108630"&gt;Fix docs for &lt;code&gt;alloc::realloc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3435"&gt;RFC: &lt;code&gt;#[export]&lt;/code&gt; (dynamically linked crates)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3434"&gt;Generic Futures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-05-24 - 2023-06-21 ðŸ¦€&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-25 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/293384348"&gt;&lt;strong&gt;Practical Monads&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (Ciudad de MÃ©xico, MX) | &lt;a href="https://www.meetup.com/rust-mx/"&gt;Rust MX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-mx/events/293332410"&gt;&lt;strong&gt;Proyecto "Taller de Rust"&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (Karlsruhe, DE) | &lt;a href="https://www.meetup.com/the-karlsruhe-functional-programmers-meetup-group/"&gt;The Karlsruhe Functional Programmers Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/the-karlsruhe-functional-programmers-meetup-group/events/293349464"&gt;&lt;strong&gt;Stammtisch (gemeinsam mit der C++ UG KA) - various topics, from C++ to Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (Raleigh, NC, US) | &lt;a href="https://www.meetup.com/triangle-bitdevs/"&gt;Triangle BitDevs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-bitdevs/events/293547054"&gt;&lt;strong&gt;Rust for Bitcoiners&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (San Francisco, CA, US) | &lt;a href="https://www.meetup.com/data-ai-online/"&gt;Data + AI Online Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/data-ai-online/events/293432877"&gt;&lt;strong&gt;D3L2: Discussing Rust, Ballista, Ray SQL, DataFusion with Andy Grove&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-30 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallas-rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/293014934"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-31 | Virtual (Chicago, IL, US) | &lt;a href="https://www.meetup.com/chicago-healthcare-tech-and-ai/"&gt;Chicago Healthcare Cloud Technology Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/chicago-healthcare-tech-and-ai/events/293278396/?chapterContext=true&amp;amp;regToRsvp=true&amp;amp;isFromReg=true"&gt;&lt;strong&gt;Rust for Mission-Critical AI: A Journey into Healthcare's Safest Language&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-06 | Virtual (Austin, TX, US) | &lt;a href="https://www.meetup.com/webassembly-and-wasmedge/"&gt;WebAssembly and WasmEdge&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/webassembly-and-wasmedge/events/293014949"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting - Run Rust Warp in WasmEdge -- Alan, Poon Yong Quan&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-06 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/293485509"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-06 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/293296995"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-07 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/293309294"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-07 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/rust-community-stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/293616568"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-08 | Virtual (NÃ¼rnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/289732649"&gt;&lt;strong&gt;Rust NÃ¼rnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-13 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallas-rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/293014938"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-20 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;Berline.rs / OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/293485510"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-20 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/jkxsctyfcjbbc/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-21 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/292763484"&gt;&lt;strong&gt;Rust Study/Hack/Hang-out&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-25 | Amsterdam, NL | &lt;a href="https://www.meetup.com/frontend-developer-meetup-amsterdam/"&gt;Frontend Developer Meetup Amsterdam&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/frontend-developer-meetup-amsterdam/events/293272364"&gt;&lt;strong&gt;Svelte Frontend Meetup (signup required) - Building a Svelte-Rust app using Tauri&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-10 | Kuala Lumpur, MY | &lt;a href="https://t.me/golangmalaysia"&gt;GoLang Malaysia&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forms.gle/2fvbCG77HXCkWLfe6"&gt;&lt;strong&gt;Rust Workshop/Hack and Learn Malaysia June 2023&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://t.me/+dF46Fly4A_BjOTJl"&gt;Event updates Telegram&lt;/a&gt; | &lt;a href="https://t.me/golangmalaysia"&gt;Event group chat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-24 | Lyon, FR | &lt;a href="https://www.meetup.com/fr-FR/rust-lyon/"&gt;Rust Lyon&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/fr-FR/rust-lyon/events/293322211"&gt;&lt;strong&gt;Rust Lyon Meetup #4&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Barcelona, ES | &lt;a href="https://www.meetup.com/c-programmer-meetup/"&gt;C++ Programmer Meetup.&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/c-programmer-meetup/events/292816507"&gt;&lt;strong&gt;Rust for C++ Developers.&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Copenhagen, DK | &lt;a href="https://www.meetup.com/copenhagen-rust-community/"&gt;Copenhagen Rust Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/copenhagen-rust-community/events/293293863"&gt;&lt;strong&gt;Rust metup #36 at Adapt Agency!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Paris, FR | &lt;a href="https://www.meetup.com/rust-paris/"&gt;Rust Paris&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-paris/events/293191172"&gt;&lt;strong&gt;Rust Paris meetup #59&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-30 | Barcelona, ES | &lt;a href="https://www.meetup.com/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bcnrust/events/293363107"&gt;&lt;strong&gt;10th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-03 | Plovidv, BG | &lt;a href="https://aerorust.org"&gt;AeroRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://space-conference-plovdiv.eventbrite.com"&gt;&lt;strong&gt;Space Conference - Plovdiv&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-04 | Plovidv, BG | &lt;a href="https://aerorust.org"&gt;AeroRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forms.gle/rnFx5wCbrYA9qN7m6"&gt;&lt;strong&gt;Space Conference : Nanosatellite embedded workshop&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-08 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/292865970/"&gt;&lt;strong&gt;Rust Aarhus meetup #2 sponsored by BRÃ˜LSTÃ†RK&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-08 | Zurich, CH | &lt;a href="https://www.meetup.com/de-DE/rust-zurich/"&gt;Rust Zurich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/rust-zurich/events/293322792/"&gt;&lt;strong&gt;Unsafe, Miri, SIMD - June Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-30 | Canberra, ACT, AU | &lt;a href="https://www.meetup.com/rust-canberra/"&gt;Canberra Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-canberra/events/292717772/"&gt;&lt;strong&gt;May Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/12tehic/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I guess the nicest example of this phenomenon is shared mutability. Programmers have been arguing for decades whether it is sharing xor mutability that causes memory safety bugs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"It's threads!" â€“ shouted JavaScript and Python, and JS remained single-threaded, and Python introduced the GIL.&lt;/li&gt;
&lt;li&gt;"It's mutability!" â€“ screamed Haskell and Erlang, and they made (almost) everything immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then along came Rust, and said: "you are fools! You can have both sharing and mutability in the same language, as long as you isolate them from each other."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://users.rust-lang.org/t/is-copy-on-enums-ok/94128/12"&gt;H2CO3 on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1425"&gt;Jacob Pratt&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="REDDIT_LINK_HERE"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 495</title><link href="https://this-week-in-rust.org/blog/2023/05/17/this-week-in-rust-495/" rel="alternate"></link><published>2023-05-17T00:00:00-04:00</published><updated>2023-05-17T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2023-05-17:/blog/2023/05/17/this-week-in-rust-495/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="newsletters"&gt;&lt;a class="toclink" href="#newsletters"&gt;Newsletters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/launchpad"&gt;Shuttle Launchpad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2023-04/"&gt;This Month in Rust OSDev: April 2023&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/rust/2023/05/05/new-in-intellij-rust-for-2023-1-part-2/"&gt;New in IntelliJ Rust for 2023.1 (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2023/05/15/changelog-181.html"&gt;rust-analyzer changelog #181&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fujiapple852/trippy/releases/tag/0.8.0"&gt;Trippy (Network diagnostic tool) - 0.8.0 release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.orhun.dev/blazingly-fast-file-sharing/"&gt;Taking Rust to the Cloud: Blazingly Fast File Sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hecatia-elegua.github.io/blog/no-more-bit-fiddling/"&gt;no more bit fiddling - introducing bilge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ochagavia.nl/blog/you-are-holding-it-wrong/"&gt;You are holding it wrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hegdenu.net/posts/task-scheduled-time-in-console/"&gt;Task scheduled time in tokio-console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mcyoung.xyz/2023/05/11/sam-closures/"&gt;Single Abstract Method Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swatinem.de/blog/locking-war-story/"&gt;A locking war story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tim.mcnamara.nz/post/717515899722137600/big-bet-on-rust"&gt;Now is the time to bet big on Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2023/05/09/giving-lending-and-async-closures/"&gt;Giving, lending, and async closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=9Q4yNlbfiYk"&gt;RustNL 2023 Conference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=2cGM1fEbWJQ"&gt;Qdrant vector search in Rust | Arnaud Gourlay @ Rust Meetup Linz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/orson-peters/"&gt;Glidesort with Orson Peters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/john-nunley/"&gt;smol with John Nunley&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developerlife.com/2022/03/02/rust-grep-cli-app/"&gt;Build a simple grep CLI app in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=HS8-1Obn87M"&gt;Topological Sort: The Hidden Gem of Graph Algorithms in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/qdrant/qdrant"&gt;Qdrant&lt;/a&gt;, an open source production ready vector database/similarity search engine written in Rust. There are APIs available for &lt;a href="https://github.com/qdrant/rust-client"&gt;Rust&lt;/a&gt;, Python, Javascript/Typescript and Go.&lt;/p&gt;
&lt;p&gt;llogiq is overjoyed with his suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/4928"&gt;Ockam - Add new CLI command to show available environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/4762"&gt;Ockam - Update CLI documentation forÂ &lt;code&gt;project&lt;/code&gt;Â commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/4918"&gt;Ockam - Allow binary messages inÂ &lt;code&gt;ockam message send&lt;/code&gt;Â CLI command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/avhz/RustQuant/issues"&gt;RustQuant - call for participants in project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1189"&gt;Hyperswitch - Implement &lt;code&gt;CardsInfoInterface&lt;/code&gt; for &lt;code&gt;MockDb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1190"&gt;Hyperswitch - Implement &lt;code&gt;DisputeInterface&lt;/code&gt; for &lt;code&gt;MockDb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1191"&gt;Hyperswitch - Implement &lt;code&gt;EphemeralKeyInterface&lt;/code&gt; for &lt;code&gt;MockDb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;326 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-05-08..2023-05-15"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111096"&gt;add support for &lt;code&gt;cfg(overflow_checks)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111375"&gt;CFI: fix SIGILL reached via trait objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/92048"&gt;add midpoint function for all integers and floating numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111374"&gt;align unsized locals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111517"&gt;allow mutating function args through &lt;code&gt;&amp;amp;raw const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111463"&gt;better diagnostics for &lt;code&gt;env!&lt;/code&gt; where variable contains escape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111477"&gt;better diagnostics for &lt;code&gt;impl&amp;lt;..&amp;gt; impl Trait for Type&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111494"&gt;encode &lt;code&gt;VariantIdx&lt;/code&gt; so we can decode ADT variants in the right order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110747"&gt;encode types in SMIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111088"&gt;fix the &lt;code&gt;FileEncoder&lt;/code&gt; buffer size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106285"&gt;implement SSA-based reference propagation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110694"&gt;implement builtin # syntax and use it for &lt;code&gt;offset_of!(...)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111460"&gt;improve suggestion for &lt;code&gt;self: Box&amp;lt;self&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/107586"&gt;introduce &lt;code&gt;DynSend&lt;/code&gt; and &lt;code&gt;DynSync&lt;/code&gt; auto trait for parallel compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111381"&gt;keep encoding attributes for closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111252"&gt;min specialization improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111451"&gt;note user-facing types of coercion failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111444"&gt;only warn single-use lifetime when the binders match&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110454"&gt;require impl Trait in associated types to appear in method signatures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111120"&gt;suggest let for possible binding with ty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106560"&gt;support linking to rust dylib with --crate-type staticlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111410"&gt;switch to &lt;code&gt;EarlyBinder&lt;/code&gt; for &lt;code&gt;thir_abstract_const&lt;/code&gt; query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110583"&gt;tweak "make mut" spans when assigning to locals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110504"&gt;tweak borrow suggestion span&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/109732"&gt;uplift &lt;code&gt;clippy::{drop,forget}_{ref,copy}&lt;/code&gt; lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111432"&gt;use &lt;code&gt;visit_assign&lt;/code&gt; to detect SSA locals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111492"&gt;use by ref TokenTree iterator to avoid a few clones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/108638"&gt;use dynamic dispatch for queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106038"&gt;use implied bounds when checking opaque types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111448"&gt;use proper impl self type for alias impl in rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111440"&gt;allow MIR debuginfo to point to a variable's address&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111587"&gt;custom MIR: Support &lt;code&gt;Rvalue::CopyForDeref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2890"&gt;miri: add &lt;code&gt;./miri run-dep&lt;/code&gt; for running a file with test dependencies available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2896"&gt;miri: cargo-miri: fix forwarding arguments to cargo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2894"&gt;miri: implement SIMD ptr casts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2895"&gt;miri: support array return types in &lt;code&gt;simd_bitmask&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111396"&gt;reduce BitSet size used in &lt;code&gt;Borrows&lt;/code&gt; dataflow analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111560"&gt;simplify &lt;code&gt;find_width_of_character_at_span&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111395"&gt;simplify the implementation of iterators over slices of ZSTs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97320"&gt;stabilize &lt;code&gt;const_ptr_read&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/108273"&gt;stabilize const &lt;code&gt;slice::split_at&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111296"&gt;always const-evaluate the GCD in &lt;code&gt;slice::align_to_offsets&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110770"&gt;limit lifetime of &lt;code&gt;format_args!()&lt;/code&gt; with inlined args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/108196"&gt;implement &lt;code&gt;AsHandle&lt;/code&gt;/&lt;code&gt;AsSocket&lt;/code&gt; for &lt;code&gt;Arc&lt;/code&gt;/&lt;code&gt;Rc&lt;/code&gt;/&lt;code&gt;Box&lt;/code&gt; on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104134"&gt;shorten lifetime of panic temporaries in &lt;code&gt;panic_fmt&lt;/code&gt; case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110152"&gt;start using &lt;code&gt;windows sys&lt;/code&gt; for Windows FFI bindings in std&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12135"&gt;cargo: fix &lt;code&gt;check_for_file_and_add&lt;/code&gt;'s check for conflict file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12130"&gt;cargo: fix dep/feat syntax with hidden implicit optional dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12136"&gt;cargo: remove useless drop of copy type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12116"&gt;cargo: semver: note that it is not a breaking change to make an unsafe function safe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10768"&gt;clippy: &lt;code&gt;[arithmetic_side_effects]&lt;/code&gt; Consider referenced allowed or hard-coded types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10766"&gt;clippy: &lt;code&gt;needless_bool&lt;/code&gt;: do not simplify code if it loses comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10751"&gt;clippy: add configuration options to &lt;code&gt;--explain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10769"&gt;clippy: add lint &lt;code&gt;manual_next_back&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10778"&gt;clippy: don't emit &lt;code&gt;clippy::useless_conversion&lt;/code&gt; on type aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10727"&gt;clippy: extend &lt;code&gt;trait_duplication_in_bounds&lt;/code&gt; to cover trait objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10691"&gt;clippy: warn on empty line outer &lt;code&gt;AttrKind::DocComment&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14777"&gt;rust-analyzer: add basic support for &lt;code&gt;augmentsSyntaxTokens&lt;/code&gt; and non-standard semantic token config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14808"&gt;rust-analyzer: add metrics for unevaluated constants, failed mir bodies, and failed data layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14800"&gt;rust-analyzer: expand more single ident macro calls upon item collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14775"&gt;rust-analyzer: add &lt;code&gt;#[doc(alias(..))]-based&lt;/code&gt; method completions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14795"&gt;rust-analyzer: add macro modifier for highlighting tokens in macro calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14797"&gt;rust-analyzer: fix perf regression from symbol index refactor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14801"&gt;rust-analyzer: fix process-changes duplicating change events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14781"&gt;rust-analyzer: introduce macro sub-namespaces and &lt;code&gt;macro_use&lt;/code&gt; prelude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14747"&gt;rust-analyzer: more APIs for &lt;code&gt;la_arena::IdxRange&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14799"&gt;rust-analyzer: remove root component from patched Windows UNC path prefix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14794"&gt;rust-analyzer: restructure InlayHint, no longer derive properties from its kind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14809"&gt;rust-analyzer: support &lt;code&gt;#[macro_use(name, ...)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The last two weeks mostly have small changes across a number of benchmarks, no
widespread large regressions or improvements.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=a368898de758e1b8def6c9060044a5b40eb79e84&amp;amp;end=3ea9ad532474343426e564b997891e459cda89a6&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;a368898d..3ea9ad532&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6 Regressions, 3 Improvements, 4 Mixed; 2 of them in rollups
90 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2023-05-16.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3127"&gt;New rustc and Cargo options to allow path sanitisation by default&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3368"&gt;The &lt;code&gt;#[diagnostic]&lt;/code&gt; attribute namespace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/109698"&gt;Allow limited access to &lt;code&gt;OsStr&lt;/code&gt; bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/106655"&gt;Tracking Issue for &lt;code&gt;#![feature(offset_of)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/111193"&gt;Tracking Issue for the x86 &lt;code&gt;ud2&lt;/code&gt; intrinsic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/99587"&gt;Document memory orderings of &lt;code&gt;thread::{park, unpark}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/86161"&gt;Tracking Issue for &lt;code&gt;BuildHasher::hash_one&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/88989"&gt;Tracking Issue for #![feature(unix_chown)]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No New or Updated RFCs were created this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-05-17 - 2023-06-14 ðŸ¦€&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-17 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/292847157/"&gt;&lt;strong&gt;Rust Atomics and Locks Book Club Chapter 2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-17 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/lqkkctyfchbwb/"&gt;&lt;strong&gt;Spin and Kata Containers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-18 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/rust-community-stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/qtvtvsyfchbxb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-20 | Virtual + In person (Singapore, SG) | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/zcgndtyfchbbc/"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-23 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/293302808"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/293384348"&gt;&lt;strong&gt;Practical Monads&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (Ciudad de MÃ©xico, MX) | &lt;a href="https://www.meetup.com/rust-mx/"&gt;Rust MX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-mx/events/293332410"&gt;&lt;strong&gt;Proyecto "Taller de Rust"&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (Karlsruhe, DE) | &lt;a href="https://www.meetup.com/the-karlsruhe-functional-programmers-meetup-group/"&gt;The Karlsruhe Functional Programmers Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/the-karlsruhe-functional-programmers-meetup-group/events/293349464"&gt;&lt;strong&gt;Stammtisch (gemeinsam mit der C++ UG KA) - various topics, from C++ to Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (San Francisco, CA, US) | &lt;a href="https://www.meetup.com/data-ai-online/"&gt;Data + AI Online Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/data-ai-online/events/293432877"&gt;&lt;strong&gt;D3L2: Discussing Rust, Ballista, Ray SQL, DataFusion with Andy Grove&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-30 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallas-rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/293014934"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-31 | Virtual (Chicago, IL, US) | &lt;a href="https://www.meetup.com/chicago-healthcare-tech-and-ai/"&gt;Chicago Healthcare Cloud Technology Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/chicago-healthcare-tech-and-ai/events/293278396/?chapterContext=true&amp;amp;regToRsvp=true&amp;amp;isFromReg=true"&gt;&lt;strong&gt;Rust for Mission-Critical AI: A Journey into Healthcare's Safest Language&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-06 | Virtual (Austin, TX, US) | &lt;a href="https://www.meetup.com/webassembly-and-wasmedge/"&gt;WebAssembly and WasmEdge&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/webassembly-and-wasmedge/events/293014949"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting - Run Rust Warp in WasmEdge -- Alan, Poon Yong Quan&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-06 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/293485509"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-06 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/293296995"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-07 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/293309294"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-08 | Virtual (NÃ¼rnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/289732649"&gt;&lt;strong&gt;Rust NÃ¼rnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-13 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallas-rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/293014938"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-18 | Seoul, KR | &lt;a href="https://www.meetup.com/seoul-substrate-blockchain-meetup/"&gt;Seoul Substrate Blockchain Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seoul-substrate-blockchain-meetup/events/293016466"&gt;&lt;strong&gt;Seoul Substrate Meetup - ìµœì‹  cyprography - Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-20 | Singapore, SG | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/zcgndtyfchbbc/"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Amsterdam, NL | &lt;a href="https://www.meetup.com/frontend-developer-meetup-amsterdam/"&gt;Frontend Developer Meetup Amsterdam&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/frontend-developer-meetup-amsterdam/events/293272364"&gt;&lt;strong&gt;Svelte Frontend Meetup (signup required) - Building a Svelte-Rust app using Tauri&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-10 | Kuala Lumpur, MY | &lt;a href="https://t.me/golangmalaysia"&gt;GoLang Malaysia&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forms.gle/2fvbCG77HXCkWLfe6"&gt;&lt;strong&gt;Rust Workshop/Hack and Learn Malaysia June 2023&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://t.me/+dF46Fly4A_BjOTJl"&gt;Event updates Telegram&lt;/a&gt; | &lt;a href="https://t.me/golangmalaysia"&gt;Event group chat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-19 | Stuttgart, DE | &lt;a href="https://www.meetup.com/rust-community-stuttgart"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/pdhvctyfchbzb/"&gt;&lt;strong&gt;OnSite Meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-23 | Paris, FR | &lt;a href="https://www.meetup.com/kaibee/"&gt;KaÃ¯bee&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/kaibee/events/293169086"&gt;&lt;strong&gt;Atelier Axum &amp;amp; Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-24 | Lyon, FR | &lt;a href="https://www.meetup.com/fr-FR/rust-lyon/"&gt;Rust Lyon&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/fr-FR/rust-lyon/events/293322211"&gt;&lt;strong&gt;Rust Lyon Meetup #4&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Barcelona, ES | &lt;a href="https://www.meetup.com/c-programmer-meetup/"&gt;C++ Programmer Meetup.&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/c-programmer-meetup/events/292816507"&gt;&lt;strong&gt;Rust for C++ Developers.&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Copenhagen, DK | &lt;a href="https://www.meetup.com/copenhagen-rust-community/"&gt;Copenhagen Rust Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/copenhagen-rust-community/events/293293863"&gt;&lt;strong&gt;Rust metup #36 at Adapt Agency!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Paris, FR | &lt;a href="https://www.meetup.com/rust-paris/"&gt;Rust Paris&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-paris/events/293191172"&gt;&lt;strong&gt;Rust Paris meetup #59&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-30 | Barcelona, ES | &lt;a href="https://www.meetup.com/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bcnrust/events/293363107"&gt;&lt;strong&gt;10th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-03 | Plovidv, BG | &lt;a href="https://aerorust.org"&gt;AeroRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://space-conference-plovdiv.eventbrite.com"&gt;&lt;strong&gt;Space Conference - Plovdiv&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-04 | Plovidv, BG | &lt;a href="https://aerorust.org"&gt;AeroRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forms.gle/rnFx5wCbrYA9qN7m6"&gt;&lt;strong&gt;Space Conference : Nanosatellite embedded workshop&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-08 | Zurich, CH | &lt;a href="https://www.meetup.com/de-DE/rust-zurich/"&gt;Rust Zurich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/rust-zurich/events/293322792/"&gt;&lt;strong&gt;Unsafe, Miri, SIMD - June Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-17 | New York, NY, US | &lt;a href="https://www.meetup.com/rust-nyc/"&gt;Rust NYC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-nyc/events/293316694"&gt;&lt;strong&gt;Too many unit tests: A tale of macros and BigDecimals&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-30 | Canberra, ACT, AU | &lt;a href="https://www.meetup.com/rust-canberra/"&gt;Canberra Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-canberra/events/292717772/"&gt;&lt;strong&gt;May Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/12tehic/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;That's one of the great things about Rust: sometimes you can do something really dumb and get away with it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://www.youtube.com/live/9Q4yNlbfiYk?feature=share&amp;amp;t=1441"&gt;Rik Arends at RustNL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1414"&gt;Josh Triplett&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/13kokdl/this_week_in_rust_495/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 494</title><link href="https://this-week-in-rust.org/blog/2023/05/10/this-week-in-rust-494/" rel="alternate"></link><published>2023-05-10T00:00:00-04:00</published><updated>2023-05-10T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2023-05-10:/blog/2023/05/10/this-week-in-rust-494/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2023/05/09/api-token-scopes.html"&gt;API token scopes for crates.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2023/05/09/Updating-musl-targets.html"&gt;Updating Rust's Linux musl targets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;&lt;a class="toclink" href="#newsletters"&gt;Newsletters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustmagazine.org/issue-3/"&gt;Rust Magazine: Issue 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unterwaditzer.net/2023/rust-test-parametrization.html"&gt;A guide to test parametrization in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/iterator-generator/"&gt;Iterator, Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://predr.ag/blog/breaking-semver-in-rust-by-adding-private-type-or-import/"&gt;Breaking semver in Rust by adding a private type, or by adding an import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/wiki/Ask-not-what-the-compiler-can-do-for-you"&gt;Ask not what the compiler can do for you&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://michellelim.dev/writing/measure-time-spent-in-app/"&gt;How We Built Our Own Time-Tracking Algorithm for a Rust app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/esp32-embedded-rust-at-the-hal-uart-serial-communication?ref=twitter-share"&gt;ESP32 Embedded Rust at the HAL: UART Serial Communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developerlife.com/2022/02/24/rust-non-binary-tree/"&gt;Build a non-binary tree that is thread safe using Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ohadravid.github.io/posts/2023-05-coherence-and-errors/"&gt;Coherence in Rust (feat. rustc sources)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/NSqN2r0h8DE"&gt;Beginner's guide to Rust's Result, "?" and Try/FromResidual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/EF3Z4jdD1EQ"&gt;Crust of Rust: std::collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ES] [video] &lt;a href="https://youtu.be/6icd5wwsvF8"&gt;IntroducciÃ³n a Rust en EspaÃ±ol, Parte 2: Todo sobre variables, let, mut, scopes, tipos y mÃ¡s.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.meilisearch.com/dynamic-virtual-address-management/"&gt;How Rust-based search engine Meilisearch uses dynamic virtual address management to scale indexes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wayofthecrab.com/episodes/001/"&gt;The Way of the Crab Podcast, Epside 1: Hello, World!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ochagavia.nl/blog/hangman-over-quic/"&gt;Hangman over QUIC (using Rust and Quinn)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/dlhn"&gt;dlhn&lt;/a&gt;, a serde-compatible serialization format geared for performance.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1193"&gt;Shogo Otake&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/StaffEngineer/velo/issues/93"&gt;velo - Implement simple bevy-markdown renderer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/4662"&gt;ockam - &lt;code&gt;#[ockam::node]&lt;/code&gt;Â macro doesn't handle returned errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/build-trust/ockam/issues/4885"&gt;ockam - Make clap command asynchronously wait for the changes to take place&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1109"&gt;Hyperswitch - move connector config to a separate file&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1115"&gt;Hyperswitch - Implement &lt;code&gt;ReverseLookupInterface&lt;/code&gt; for &lt;code&gt;MockDb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1116"&gt;Hyperswitch - Implement &lt;code&gt;EventInterface&lt;/code&gt; for &lt;code&gt;MockDb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calls for Proposals&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Open calls for submissions to conferences and meetups.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.papercall.io/eurorust-2023"&gt;EuroRust Call for Speakers (By 2023-06-11)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;386 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-05-01..2023-05-08"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/108801"&gt;implement &lt;code&gt;c"foo"&lt;/code&gt; literals&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/3348-c-str-literal.html"&gt;#3348&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111203"&gt;output LLVM optimization remark kind in &lt;code&gt;-Cremark&lt;/code&gt; output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110638"&gt;STD support for PSVita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/109421"&gt;add &lt;code&gt;force&lt;/code&gt; option for &lt;code&gt;--extern&lt;/code&gt; flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111146"&gt;&lt;code&gt;rustc_middle&lt;/code&gt;: Fix &lt;code&gt;opt_item_ident&lt;/code&gt; for non-local def ids&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110830"&gt;add FreeBSD cpuset support to &lt;code&gt;std::thread::available_concurrency&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105354"&gt;add deployment-target --print flag for Apple targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111230"&gt;add hint for &lt;code&gt;=&amp;lt;&lt;/code&gt; as &lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104872"&gt;avoid alignment mismatch between ABI and layout for unions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111289"&gt;check arguments length in trivial diagnostic lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111100"&gt;check array type of repeat exprs is wf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110824"&gt;constProp into &lt;code&gt;PlaceElem::Index&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111127"&gt;constify slice flatten method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111103"&gt;correctly recurse when expanding anon consts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111167"&gt;debuginfo: split method declaration and definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111007"&gt;disable nrvo mir opt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110982"&gt;do not recurse into const generic args when resolving self lifetime elision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111062"&gt;don't bail out early when checking invalid &lt;code&gt;repr&lt;/code&gt; attr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111211"&gt;don't compute trait super bounds unless they're positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/109521"&gt;don't validate constants in const propagation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111300"&gt;emit &lt;code&gt;while_true&lt;/code&gt; lint spanning the entire loop condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106621"&gt;enable &lt;code&gt;rust_2018_idioms&lt;/code&gt; lint group for doctests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111039"&gt;encode def span for foreign return-position &lt;code&gt;impl Trait&lt;/code&gt; in trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/109729"&gt;ensure test library issues json string line-by-line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111274"&gt;expand the LLVM coverage of &lt;code&gt;--print target-cpus&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110859"&gt;explicitly reject negative and reservation drop impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110512"&gt;fix elaboration with associated type bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110827"&gt;fix lifetime suggestion for type aliases with objects in them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111354"&gt;fix miscompilation when calling default methods on &lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111056"&gt;fix some suggestions where a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; is expected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110985"&gt;fix spans in LLVM-generated inline asm errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111246"&gt;forbid escaping bound vars in combine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111262"&gt;further normalize msvc-non-utf8-ouput&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97594"&gt;implement &lt;code&gt;tuple&amp;lt;-&amp;gt;array&lt;/code&gt; convertions via &lt;code&gt;From&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110791"&gt;implement negative bounds for internal testing purposes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110943"&gt;interpret: fail more gracefully on uninit unsized locals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/109410"&gt;introduce &lt;code&gt;AliasKind::Inherent&lt;/code&gt; for inherent associated types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111038"&gt;leave promoteds untainted by errors when borrowck fails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110826"&gt;make PlaceMention a non-mutating use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110297"&gt;make &lt;code&gt;(try_)subst_and_normalize_erasing_regions&lt;/code&gt; take &lt;code&gt;EarlyBinder&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111265"&gt;make &lt;code&gt;generics_of has_self&lt;/code&gt; on RPITITs delegate to the opaque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111028"&gt;make some simple queries no longer cache on disk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110846"&gt;optimize builder sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104070"&gt;prevent aborting guard from aborting the process in a forced unwind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110773"&gt;reduce MIR dump file count for MIR-opt tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105076"&gt;refactor &lt;code&gt;core::char::EscapeDefault&lt;/code&gt; and co. structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110954"&gt;reject borrows of projections in ConstProp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110806"&gt;replace &lt;code&gt;tcx.mk_trait_ref&lt;/code&gt; with &lt;code&gt;TraitRef::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111118"&gt;suggest &lt;code&gt;struct&lt;/code&gt; when we get colon in fileds in &lt;code&gt;enum&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111161"&gt;support return-type bounds on associated methods from supertraits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110955"&gt;uplift &lt;code&gt;clippy::clone_double_ref&lt;/code&gt; as &lt;code&gt;suspicious_double_ref_op&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110577"&gt;use fulfillment to check &lt;code&gt;Drop&lt;/code&gt; impl compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2869"&gt;miri: avoid interpreting code that has lint errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2876"&gt;miri: clearer variable names in &lt;code&gt;data_race&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2867"&gt;miri: simplify event selection in TB diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111082"&gt;box AssertKind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/108668"&gt;stabilize &lt;code&gt;debugger_visualizer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/109677"&gt;stabilize raw-dylib, &lt;code&gt;link_ordinal, import_name_type&lt;/code&gt; and -Cdlltool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106075"&gt;partial stabilisation of &lt;code&gt;c_unwind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111125"&gt;inline SocketAddr methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110093"&gt;add 64-bit &lt;code&gt;time_t&lt;/code&gt; support on 32-bit glibc Linux to &lt;code&gt;set_times&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111057"&gt;make sure the implementation of &lt;code&gt;TcpStream::as_raw_fd&lt;/code&gt; is fully inlined&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111009"&gt;add &lt;code&gt;ascii::Char&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111113"&gt;&lt;code&gt;assume&lt;/code&gt; the runtime range of &lt;code&gt;align_offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111238"&gt;&lt;code&gt;btree_map: Cursor{,Mut}::peek_prev&lt;/code&gt; must agree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111186"&gt;add &lt;code&gt;is_positive&lt;/code&gt; method for signed non-zero integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111222"&gt;constify &lt;code&gt;[u8]::is_ascii&lt;/code&gt; (unstably)&lt;/a&gt;&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/103056"&gt;fix &lt;code&gt;checked_{add,sub}_duration&lt;/code&gt; incorrectly returning &lt;code&gt;None&lt;/code&gt; when &lt;code&gt;other&lt;/code&gt; has more than &lt;code&gt;i64::MAX&lt;/code&gt; seconds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/107978"&gt;correctly convert an NT path to a Win32 path in &lt;code&gt;read_link&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110651"&gt;libtest: include test output in junit xml reports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/387"&gt;hashbrown: mark &lt;code&gt;RawTable::data_start&lt;/code&gt; NonNull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/428"&gt;hashbrown: special case &lt;code&gt;clear()&lt;/code&gt; on empty tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/11978"&gt;cargo: metadata: add &lt;code&gt;workspace_default_members&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12083"&gt;cargo: do not try an exponential number of package names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12067"&gt;cargo: remove repeated definite articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/11840"&gt;cargo: support for shallow clones and fetches with &lt;code&gt;gitoxide&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110780"&gt;rustdoc-search: add slices and arrays to index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110371"&gt;rustdoc: restructure type search engine to pick-and-use IDs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10730"&gt;clippy: &lt;code&gt;imprecise_flops&lt;/code&gt;: Globally ignore &lt;code&gt;#[no_std]&lt;/code&gt; crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10584"&gt;clippy: &lt;code&gt;wildcard_imports&lt;/code&gt; ignore &lt;code&gt;test.rs&lt;/code&gt; files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10716"&gt;clippy: add lint to detect construction of unit &lt;code&gt;struct&lt;/code&gt; using &lt;code&gt;default&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10761"&gt;clippy: ignore &lt;code&gt;borrow_deref_ref&lt;/code&gt; warnings in code from procedural macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10752"&gt;clippy: ignore expressions from macros in &lt;code&gt;default_constructed_unit_structs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10736"&gt;clippy: initial &lt;code&gt;clippy::ref_patterns&lt;/code&gt; implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14758"&gt;rust-analyzer: add config for disabling hover memory layout data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14742"&gt;rust-analyzer: closure capture inlay hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/11557"&gt;rust-analyzer: creating rust dependencies tree explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14749"&gt;rust-analyzer: define problem matcher for panics in VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14725"&gt;rust-analyzer: emit function bodies in expanding builtin derives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14732"&gt;rust-analyzer: fix pattern type mismatches for bindings, enable pattern type mismatch diagnostics again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14711"&gt;rust-analyzer: highlight closure captures when cursor is on pipe or move keyword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14738"&gt;rust-analyzer: fix body lowering not using block def maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14705"&gt;rust-analyzer: fix some mir related bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14707"&gt;rust-analyzer: generate delegate methods filters out functions that already exist on the struct's impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14713"&gt;rust-analyzer: ide: do not highlight escapes in raw strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14714"&gt;rust-analyzer: ide: exclude sized in go-to actions in hover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14750"&gt;rust-analyzer: ignore impls with &lt;code&gt;#[rustc_reservation_impl]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14727"&gt;rust-analyzer: lazy evaluate consts in &lt;code&gt;path_to_const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14712"&gt;rust-analyzer: only pass unstable flags to cargo metadata from extra args config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14739"&gt;rust-analyzer: parse bare dyn types with leading lifetime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14748"&gt;rust-analyzer: show type alias layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14745"&gt;rust-analyzer: sort rust dependencies in vscode tree view&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3389"&gt;Add a &lt;code&gt;[lints]&lt;/code&gt; table to &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3127"&gt;New rustc and Cargo options to allow path sanitisation by default&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/107707"&gt;Remove misleading target feature aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/110141"&gt;expand: Change how &lt;code&gt;#![cfg(FALSE)]&lt;/code&gt; behaves on crate root&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/110100"&gt;do not allow inference in &lt;code&gt;predicate_must_hold&lt;/code&gt; (alternative approach)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/101158"&gt;Tracking Issue for slice::split_at in const context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/108196"&gt;Implement &lt;code&gt;AsHandle&lt;/code&gt;/&lt;code&gt;AsSocket&lt;/code&gt; for &lt;code&gt;Arc&lt;/code&gt;/&lt;code&gt;Rc&lt;/code&gt;/&lt;code&gt;Box&lt;/code&gt; on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3430"&gt;RFC: Unix socket ancillary data v2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-05-10 - 2023-06-07 ðŸ¦€&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-10 | Virtual (Boulder, CO, US) | &lt;a href="https://www.meetup.com/boulder-elixir-rust/"&gt;Boulder Elixir and Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/292464903"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-11 | Virtual (NÃ¼rnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/gmkpctyfchbpb/"&gt;&lt;strong&gt;Rust NÃ¼rnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-11 | Virtual (South Pasadena, CA, US) | &lt;a href="https://www.meetup.com/thursday-go/"&gt;Pasadena Thursday Go / Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/thursday-go/events/293338004"&gt;&lt;strong&gt;Weekly study group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-13 | Virtual | &lt;a href="https://discord.gg/yNtPTb2"&gt;Rust GameDev&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discord.gg/yNtPTb2"&gt;&lt;strong&gt;Rust GameDev Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-13 | Virtual + In person (Singapore, SG) | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/zcgndtyfchbrb/"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-16 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/jkxsctyfchbvb/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-17 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/292847157/"&gt;&lt;strong&gt;Rust Atomics and Locks Book Club Chapter 2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-17 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/lqkkctyfchbwb/"&gt;&lt;strong&gt;Spin and Kata Containers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-18 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/rust-community-stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/qtvtvsyfchbxb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-20 | Virtual + In person (Singapore, SG) | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/zcgndtyfchbbc/"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-23 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/293302808"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/293384348"&gt;&lt;strong&gt;Practical Monads&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (Ciudad de MÃ©xico, MX) | &lt;a href="https://www.meetup.com/rust-mx/"&gt;Rust MX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-mx/events/293332410"&gt;&lt;strong&gt;Proyecto "Taller de Rust"&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (Karlsruhe, DE) | &lt;a href="https://www.meetup.com/the-karlsruhe-functional-programmers-meetup-group/"&gt;The Karlsruhe Functional Programmers Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/the-karlsruhe-functional-programmers-meetup-group/events/293349464"&gt;&lt;strong&gt;Stammtisch (gemeinsam mit der C++ UG KA) - various topics, from C++ to Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Virtual (San Francisco, CA, US) | &lt;a href="https://www.meetup.com/data-ai-online/"&gt;Data + AI Online Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/data-ai-online/events/293432877"&gt;&lt;strong&gt;D3L2: Discussing Rust, Ballista, Ray SQL, DataFusion with Andy Grove&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-30 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallas-rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/293014934"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-31 | Virtual (Chicago, IL, US) | &lt;a href="https://www.meetup.com/chicago-healthcare-tech-and-ai/"&gt;Chicago Healthcare Cloud Technology Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/chicago-healthcare-tech-and-ai/events/293278396/?chapterContext=true&amp;amp;regToRsvp=true&amp;amp;isFromReg=true"&gt;&lt;strong&gt;Rust for Mission-Critical AI: A Journey into Healthcare's Safest Language&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-06 | Virtual (Austin, TX, US) | &lt;a href="https://www.meetup.com/webassembly-and-wasmedge/"&gt;WebAssembly and WasmEdge&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/webassembly-and-wasmedge/events/293014949"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting - Run Rust Warp in WasmEdge -- Alan, Poon Yong Quan&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-06 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/293296995"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-06-07 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/293309294"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-13 | Singapore, SG | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/zcgndtyfchbrb/"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-18 | Seoul, KR | &lt;a href="https://www.meetup.com/seoul-substrate-blockchain-meetup/"&gt;Seoul Substrate Blockchain Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seoul-substrate-blockchain-meetup/events/293016466"&gt;**&lt;em&gt;Seoul Substrate Meetup - ìµœì‹  cyprography - Rust&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-20 | Singapore, SG | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/zcgndtyfchbbc/"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Amsterdam, NL | &lt;a href="https://www.meetup.com/frontend-developer-meetup-amsterdam/"&gt;Frontend Developer Meetup Amsterdam&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/frontend-developer-meetup-amsterdam/events/293272364"&gt;&lt;strong&gt;Svelte Frontend Meetup (signup required) - Building a Svelte-Rust app using Tauri&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-10 | Amsterdam, NL | &lt;a href="https://rustnl.org/"&gt;RustNL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://2023.rustnl.org/"&gt;&lt;strong&gt;RustNL 2023&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-19 | Stuttgart, DE | &lt;a href="https://www.meetup.com/rust-community-stuttgart"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/pdhvctyfchbzb/"&gt;&lt;strong&gt;OnSite Meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-23 | Paris, FR | &lt;a href="https://www.meetup.com/kaibee/"&gt;KaÃ¯bee&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/kaibee/events/293169086"&gt;&lt;strong&gt;Atelier Axum &amp;amp; Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-24 | Lyon, FR | &lt;a href="https://www.meetup.com/fr-FR/rust-lyon/"&gt;Rust Lyon&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/fr-FR/rust-lyon/events/293322211"&gt;&lt;strong&gt;Rust Lyon Meetup #4&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Barcelona, ES | &lt;a href="https://www.meetup.com/c-programmer-meetup/"&gt;C++ Programmer Meetup.&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/c-programmer-meetup/events/292816507"&gt;&lt;strong&gt;Rust for C++ Developers.&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Copenhagen, DK | &lt;a href="https://www.meetup.com/copenhagen-rust-community/"&gt;Copenhagen Rust Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/copenhagen-rust-community/events/293293863"&gt;&lt;strong&gt;Rust metup #36 at Adapt Agency!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Paris, FR | &lt;a href="https://www.meetup.com/rust-paris/"&gt;Rust Paris&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-paris/events/293191172"&gt;&lt;strong&gt;Rust Paris meetup #59&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-30 | Barcelona, ES | &lt;a href="https://www.meetup.com/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bcnrust/events/293363107"&gt;&lt;strong&gt;10th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-11 | Lehi, UT, US | &lt;a href="https://www.meetup.com/utah-rust/"&gt;Utah Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/rrwbctyfchbpb/"&gt;&lt;strong&gt;Interesting Title and Food!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-16 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/vwljctyfchbvb/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-17 | New York, NY, US | &lt;a href="https://www.meetup.com/rust-nyc/"&gt;Rust NYC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-nyc/events/293316694"&gt;&lt;strong&gt;Too many unit tests: A tale of macros and BigDecimals&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-30 | Canberra, ACT, AU | &lt;a href="https://www.meetup.com/rust-canberra/"&gt;Canberra Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-canberra/events/292717772/"&gt;&lt;strong&gt;May Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/12tehic/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks to all for the very helpful responses. "The Book" says &lt;em&gt;The community is very welcoming and happy to answer studentsâ€™ questions&lt;/em&gt; "; I expected that to be just marketing, but I was wrong."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://users.rust-lang.org/t/w-why-is-it-called-unit/93521/8"&gt;Daryl Lee on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1413"&gt;evann&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/13ehxq8/this_week_in_rust_494/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry><entry><title>This Week in Rust 493</title><link href="https://this-week-in-rust.org/blog/2023/05/03/this-week-in-rust-493/" rel="alternate"></link><published>2023-05-03T00:00:00-04:00</published><updated>2023-05-03T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2023-05-03:/blog/2023/05/03/this-week-in-rust-493/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2023/05/03/stabilizing-async-fn-in-trait.html"&gt;Stabilizing async fn in traits in 2023&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2023/05/01/cargo-postmortem.html"&gt;Postmortem Analysis in Cargo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="foundation"&gt;&lt;a class="toclink" href="#foundation"&gt;Foundation&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/welcoming-software-engineer-tobias-bieniek-to-the-rust-foundation-team/"&gt;Welcoming Software Engineer Tobias Bieniek to the Rust Foundation Team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/q1-2023-recap-from-rebecca-rumbul/"&gt;Q1 2023 Recap from Rebecca Rumbul&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;&lt;a class="toclink" href="#newsletters"&gt;Newsletters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/news/044/"&gt;This Month in Rust GameDev #44 - March 2023&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mabez.dev/blog/posts/esp-rust-28-04-2023/"&gt;Rust on Espressif chips - 28-04-2023&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2023/05/01/changelog-179.html"&gt;rust-analyzer changelog #179&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-cliff.org/blog/git-cliff-1.2.0"&gt;git-cliff 1.2.0 released (Highly Customizable Changelog Generator)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fornjot.app/blog/weekly-release/2023-w18/"&gt;Fornjot (code-first CAD in Rust) - Weekly Release - Inching Along&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/cargo-px/"&gt;Going beyond build.rs: introducing cargo-px&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://soasis.org/posts/a-mirror-for-rust-a-plan-for-generic-compile-time-introspection-in-rust/"&gt;A Mirror for Rust: Compile-Time Reflection Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncameron.org/blog/some-thoughts-on-open-collaboration/"&gt;Some thoughts on open collaboration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@adetaylor/the-case-for-stabilizing-arbitrary-self-types-b07bab22bb45"&gt;The case for stabilizing arbitrary_self_types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seanmonstar.com/post/715784167270596608/coe-surpise-hyper-cve"&gt;Report on Surprise hyper CVE from 2023-04-11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=1WHJqz0CHBw"&gt;Frontend in Rust with Yew and WebAssembly: Intro and Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=z-0-bbc80JM"&gt;Rust Data Modelling WITHOUT OOP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=KECu_piSM5s"&gt;Introduction to Rust programming on bare metal hardware by Mike Kefeder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=XKODaZgKcnE"&gt;Writing Performant Concurrent Data Structures by Adrian Alic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=cP7uy97uU4A"&gt;sett: data encryption and transfer made easy(ier) by Jaroslaw Surkont, Christian Ribeaud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=5NHYNFM4XUA"&gt;N-Queens Puzzle (PART 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ES] [video] &lt;a href="https://www.youtube.com/watch?v=dDX-MMFD8YI&amp;amp;list=PLP3JrIiWQArVUYA2Mt8S_jVvRq_SElVWB"&gt;01 Taller de Rust (lenguaje) en espaÃ±ol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/tobie-jamie-morgan/"&gt;SurrealDB with Tobie and Jamie Morgan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/jonathan-pallant/"&gt;Rust Embedded WG with Jonathan Pallant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hezmatt.org/~mpalmer/blog/2023/04/30/dev-dependencies-and-rusts-unused_crate_dependencies.html"&gt;dev-dependencies and Rust's unused_crate_dependencies lint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quickwit.io/blog/quickwit-actor-framework"&gt;Efficient indexing with Quickwit Rust actor framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://model-checking.github.io/kani-verifier-blog/2023/05/01/writing-code-with-chatgpt-improve-it-with-kani.html"&gt;Writing Code with ChatGPT? Improve it with Kani&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bazhenov.me/posts/faster-binary-search-in-rust/"&gt;Fast(er) binary search in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ntietz.com/blog/rust-shadowing-idiomatic/"&gt;Rust allows redeclaring local variables to great benefit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://planetscale.com/blog/build-a-rust-api-with-rocket-diesel-mysql"&gt;Build a Rust API with Rocket, Diesel, and MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getcode.substack.com/p/fun-and-hackable-tensors-in-rust"&gt;Fun and Hackable Tensors in Rust, From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://affanshahid.dev/posts/learning-game-dev-bevy-1/"&gt;Learning Game Dev - Building a platformer with Bevy #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bertptrs.nl/2023/04/27/how-does-async-rust-work.html"&gt;How does async Rust work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://monadical.com/posts/shades-of-rust-gui-library-list.html"&gt;50 Shades of Rust, or emerging Rust GUIs in a WASM world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/esp32-embedded-rust-at-the-hal-button-controlled-blinking-by-timer-polling"&gt;ESP32 Embedded Rust at the HAL: Button-Controlled Blinking by Timer Polling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developerlife.com/2022/03/12/rust-tokio/"&gt;Write code using async/await in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.arunma.com/2023/05/01/build-your-own-hyperloglog/"&gt;What is HyperLogLog and how to build yours in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="research"&gt;&lt;a class="toclink" href="#research"&gt;Research&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hal.science/hal-03827702v2/"&gt;Specifying and Verifying Higher-order Rust Iterators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theregister.com/2023/04/27/microsoft_windows_rust/"&gt;Microsoft is rewriting core Windows libraries in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/untitaker/script-macro"&gt;script-macro&lt;/a&gt;, an experimental way of writing simple proc-macros inline.&lt;/p&gt;
&lt;p&gt;Thanks you to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1192"&gt;Markus Unterwaditzer&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1035"&gt;Hyperswitch - Fix panic case on &lt;code&gt;RedisPoolConnection&lt;/code&gt; close&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1039"&gt;Hyperswitch - Use proxy exclusion instead of a separate proxied client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/1042"&gt;Hyperswitch - replace manual implementation using &lt;code&gt;from_str&lt;/code&gt; function of strum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/4662"&gt;Ockam - &lt;code&gt;#[ockam::node]&lt;/code&gt;Â macro doesn't handle returned errorsÂ 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/4777"&gt;Ockam - Update CLI documentation forÂ &lt;code&gt;identity&lt;/code&gt;Â commandsÂ 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/4744"&gt;Ockam - Add some regression tests for output files: identity, credential, etc...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calls for Proposals&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Open calls for submissions to conferences and meetups.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sessionize.com/p99-conf-2023/"&gt;P99 CONF Call for Speakers (By 2023-05-12)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustlab.it/call-for-proposals"&gt;RustLab Call for Proposals (By 2023-05-26)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are an event organizer and would like to have your Call for Proposals listed here, please submit a &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;390 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-04-24..2023-05-01"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/101069"&gt;add loongarch64 asm! support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110614"&gt;clear response values for overflow in new solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110671"&gt;consider polarity in new solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110984"&gt;do not resolve anonymous lifetimes in consts to be static&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110957"&gt;fix an ICE in conflict error diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110973"&gt;improve error notes for packed &lt;code&gt;struct&lt;/code&gt; reference diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/108106"&gt;improve niche placement by trying two strategies and picking the better result&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110932"&gt;include source error for LoadLibraryExW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110822"&gt;lower &lt;code&gt;intrinsics::offset&lt;/code&gt; to &lt;code&gt;mir::BinOp::Offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110958"&gt;make sure that some stdlib method signatures aren't accidental refinements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111026"&gt;only cache typeck results if it's the typeck root&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110877"&gt;provide better type hints when a type doesn't support a binary operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/109611"&gt;remove &lt;code&gt;QueryEngine&lt;/code&gt; trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110893"&gt;remove inline const deadcode in typeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110634"&gt;rewrite MemDecoder around pointers not a slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110944"&gt;share &lt;code&gt;BinOp::Offset&lt;/code&gt; between CTFE and Miri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110814"&gt;sprinkle some &lt;code&gt;#[inline]&lt;/code&gt; in &lt;code&gt;rustc_data_structures::tagged_ptr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110550"&gt;suggest deref on comparison binop RHS even if type is not Copy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110837"&gt;use MIR's &lt;code&gt;Offset&lt;/code&gt; for pointer &lt;code&gt;add&lt;/code&gt; too&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110811"&gt;use &lt;code&gt;?0&lt;/code&gt; notation for ty/ct/int/float/region vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2857"&gt;miri: fix endianess handling in &lt;code&gt;eventfd::write&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2854"&gt;miri: hide backtrace from stderr files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2828"&gt;miri: tree Borrows: improved diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110587"&gt;fix &lt;code&gt;std&lt;/code&gt; compilation error for wasi+atomics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111010"&gt;make &lt;code&gt;mem::replace&lt;/code&gt; simpler in codegen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106152"&gt;add &lt;code&gt;LazyCell::into_inner&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110389"&gt;add shortcut for Grisu3 algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/103406"&gt;loosen &lt;code&gt;From&amp;lt;&amp;amp;[T]&amp;gt; for Box&amp;lt;[T]&amp;gt;&lt;/code&gt; bound to &lt;code&gt;T: Clone&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/103093"&gt;add support for allocators in &lt;code&gt;LinkedList&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/427"&gt;hashbrown: remove lifetime on &lt;code&gt;RawIterHash&lt;/code&gt;, for more flexibility &amp;amp; to match &lt;code&gt;RawIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12043"&gt;cargo: add &lt;code&gt;-Zmsrv-policy&lt;/code&gt; feature flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12029"&gt;cargo: apply &lt;code&gt;[env]&lt;/code&gt; to target info discovery rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12036"&gt;cargo: warn instead of error in &lt;code&gt;cargo package&lt;/code&gt; on empty &lt;code&gt;readme&lt;/code&gt; or &lt;code&gt;license-file&lt;/code&gt; in manifest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105848"&gt;rustdoc: add a new lint for broken inline code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110631"&gt;rustdoc: catch and don't blow up on impl Trait cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10647"&gt;clippy: new lint: &lt;code&gt;manual_while_let_some&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10656"&gt;clippy: add configuration for &lt;code&gt;semicolon_block&lt;/code&gt; lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10665"&gt;clippy: don't apply &lt;code&gt;string_lit_as_bytes&lt;/code&gt; if in macro expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10719"&gt;clippy: fix &lt;code&gt;items_after_test_module&lt;/code&gt;: Ignore imported modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14690"&gt;rust-analyzer: add hover for closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14659"&gt;rust-analyzer: deduplicate crates when extending crate graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14686"&gt;rust-analyzer: don't wavy-underline iterator chains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14671"&gt;rust-analyzer: fix proc-macro-srv path config not working&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14678"&gt;rust-analyzer: fix restart server button trying to start instead of restart the server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14654"&gt;rust-analyzer: fix status command panicking when additional LRU caches are set up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14651"&gt;rust-analyzer: fix vscode workspaces not working properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14689"&gt;rust-analyzer: force InitializeParams windows path drives to uppercase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14667"&gt;rust-analyzer: handle nested types in &lt;code&gt;unwrap_result_return_type&lt;/code&gt; assist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14475"&gt;rust-analyzer: handle dev-dependency cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/14658"&gt;rust-analyzer: remove proc-macro server command from the rust-analyzer binary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This week the good outweighed the bad. In particular, we had three different PRs
that made improvements to a wide range of benchmarks. Special call out to PR
&lt;a href="https://github.com/rust-lang/rust/pull/111026"&gt;#111026&lt;/a&gt;,
which yielded 3% to 8% improvement for incremental compile times on a large set
of benchmarks, by avoiding unnecessary caching in the type checker.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c&amp;amp;end=a368898de758e1b8def6c9060044a5b40eb79e84&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;fdeef3ed..a368898d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2023-05-02.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3389"&gt;Add a &lt;code&gt;[lints]&lt;/code&gt; table to &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/102443"&gt;Tracking Issue for negation methods on &lt;code&gt;NonZeroI*&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/102444"&gt;Tracking Issue for CStr::is_empty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="approved-major-change-proposals-mcp"&gt;&lt;a class="toclink" href="#approved-major-change-proposals-mcp"&gt;&lt;a href="https://forge.rust-lang.org/compiler/mcp.html"&gt;Approved Major Change Proposals (MCP)&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[major change accepted] &lt;a href="https://github.com/rust-lang/compiler-team/issues/611#issuecomment-1506929616"&gt;Integrate Enzyme into nightly rustc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3428"&gt;RFC: Partial Mutability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3426"&gt;RFC: Partial Types (v2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3425"&gt;Return position impl Trait in traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3424"&gt;eRFC: single-file packages ("cargo script") integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-05-03 - 2023-05-31 ðŸ¦€&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-03 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsyfchbfb/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-03 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/rust-community-stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/dvvtvsyfchbfb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-04 | Virtual (Raleigh, NC, US) | &lt;a href="https://www.meetup.com/triangle-bitdevs/"&gt;Triangle BitDevs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-bitdevs/events/293192076"&gt;&lt;strong&gt;Rust for Bitcoiners&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-06 | Virtual + In person (Singapore, SG) | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/293226754"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-08 | Virtual + In person (Melbourne, VIC, AU) | &lt;a href="https://www.meetup.com/rust-melbourne/"&gt;Rust Melbourne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-melbourne/events/293092724/"&gt;&lt;strong&gt;(Hybrid - virtual &amp;amp; in person) May 2023 Rust Melbourne Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-09 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;Open Tech School Berlin | Berline.rs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/292649057"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-09 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallas-rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/vndgwsyfchbmb/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-10 | Virtual (Boulder, CO, US) | &lt;a href="https://www.meetup.com/boulder-elixir-rust/"&gt;Boulder Elixir and Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/292464903"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-11 | Virtual (NÃ¼rnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/gmkpctyfchbpb/"&gt;&lt;strong&gt;Rust NÃ¼rnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-13 | Virtual | &lt;a href="https://discord.gg/yNtPTb2"&gt;Rust GameDev&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discord.gg/yNtPTb2"&gt;&lt;strong&gt;Rust GameDev Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-13 | Virtual + In person (Singapore, SG) | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/zcgndtyfchbrb/"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-16 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/jkxsctyfchbvb/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-17 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/292847157/"&gt;&lt;strong&gt;Rust Atomics and Locks Book Club Chapter 2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-17 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/lqkkctyfchbwb/"&gt;&lt;strong&gt;Spin and Kata Containers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-18 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/rust-community-stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/qtvtvsyfchbxb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-20 | Virtual + In person (Singapore, SG) | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/zcgndtyfchbbc/"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-30 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallas-rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/293014934"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-31 | Virtual (Chicago, IL, US) | &lt;a href="https://www.meetup.com/chicago-healthcare-tech-and-ai/"&gt;Chicago Healthcare Cloud Technology Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/chicago-healthcare-tech-and-ai/events/293278396/?chapterContext=true&amp;amp;regToRsvp=true&amp;amp;isFromReg=true"&gt;&lt;strong&gt;Rust for Mission-Critical AI: A Journey into Healthcare's Safest Language&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-06 | Kyoto, JP | &lt;a href="https://www.meetup.com/kansai-rust/"&gt;Kansai Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/kansai-rust/events/293010553/"&gt;&lt;strong&gt;Rust Talk: Vec, arrays, and slices&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2023-05-06 | Singapore, SG | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/293226754"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-13 | Singapore, SG | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/zcgndtyfchbrb/"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-20 | Singapore, SG | &lt;a href="https://www.meetup.com/web3devc/"&gt;Web3Dev.Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/web3devc/events/zcgndtyfchbbc/"&gt;&lt;strong&gt;[Hybrid] You'll Never Rust Alone - Rust Study Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-10 | Amsterdam, NL | &lt;a href="https://rustnl.org/"&gt;RustNL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://2023.rustnl.org/"&gt;&lt;strong&gt;RustNL 2023&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-19 | Stuttgart, DE | &lt;a href="https://www.meetup.com/rust-community-stuttgart"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/pdhvctyfchbzb/"&gt;&lt;strong&gt;OnSite Meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-23 | Paris, FR | &lt;a href="https://www.meetup.com/kaibee/"&gt;KaÃ¯bee&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/kaibee/events/293169086"&gt;&lt;strong&gt;Atelier Axum &amp;amp; Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-25 | Paris, FR | &lt;a href="https://www.meetup.com/rust-paris/"&gt;Rust Paris&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-paris/events/293191172"&gt;&lt;strong&gt;Rust Paris meetup #59&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-03 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/293007744/"&gt;&lt;strong&gt;Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-04 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/mv-rust-meetup/"&gt;Mountain View Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mv-rust-meetup/events/293132433/"&gt;&lt;strong&gt;Rust Meetup at Hacker Dojo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-11 | Lehi, UT, US | &lt;a href="https://www.meetup.com/utah-rust/"&gt;Utah Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/rrwbctyfchbpb/"&gt;&lt;strong&gt;Interesting Title and Food!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-16 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/vwljctyfchbvb/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-05-03 | Christchurch, NZ | &lt;a href="https://www.meetup.com/christchurch-rustlang-meetup-group/"&gt;Christchurch Rust Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/christchurch-rustlang-meetup-group/events/292993051/"&gt;&lt;strong&gt;Christchurch Rust meetup meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-05-08 | Melbourne, VIC, AU | &lt;a href="https://www.meetup.com/rust-melbourne/"&gt;Rust Melbourne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-melbourne/events/293244529/"&gt;&lt;strong&gt;(Hybrid - virtual &amp;amp; in person) May 2023 Rust Melbourne Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/12tehic/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Since it hasn't been said before, there is an important distinction that needs to be addressed. For anyone who has been doing embedded work for any length of time and hasn't yet been exposed to Rust, the only thing that can really be said is that the language is entirely unlike everything you've experienced before. There is just nothing comparable, and the only way to rationalize questions like &lt;em&gt;why use Rust at all&lt;/em&gt; is to put some honest effort into learning and using it.&lt;/p&gt;
&lt;p&gt;Hearing things like "it's a bit like C++ except it's memory safe and thread safe, and it's actually practical to build kernels with it" will not sound convincing. You have to see it to believe it.&lt;/p&gt;
&lt;p&gt;It's as if you've spent an entire career writing assembly, and one day you hear something or other about a brand-new programming language claiming to be a "portable assembler" called C. It sounds too good to be true. And then the years pass, and all of the mystery and disbelief gives way to obviousness and precision engineering. That's sort of how it is when going from C to Rust.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://users.rust-lang.org/t/concerns-about-embedded-real-time-linux-using-rust/91416/12"&gt;Jay Oster&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1411"&gt;Michael Bryan&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/137dm6c/this_week_in_rust_493/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</content><category term="This Week in Rust"></category></entry></feed>