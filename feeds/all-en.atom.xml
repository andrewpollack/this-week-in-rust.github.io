<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/feeds/all-en.atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2020-06-02T00:00:00-04:00</updated><entry><title>This Week in Rust 341</title><link href="https://this-week-in-rust.org/blog/2020/06/02/this-week-in-rust-341/" rel="alternate"></link><updated>2020-06-02T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-06-02:blog/2020/06/02/this-week-in-rust-341/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is no &lt;em&gt;This Week in Rust&lt;/em&gt; podcast this week, next week's episode will cover both this week and next week.&lt;/p&gt;
&lt;h1 id="we-stand-with-you"&gt;We Stand With You&lt;/h1&gt;
&lt;p&gt;Since our previous issue, there has been a lot of news about the civil
rights discourse in the United States, spawned by the murder of George Floyd
by a member of the Minneapolis Police Department. We stand with Black Lives
Matter and our Black siblings now and always.&lt;/p&gt;
&lt;p&gt;We believe this is not a matter of taking a political stance, but a matter
of supporting basic human rights and equality.&lt;/p&gt;
&lt;p&gt;We believe that Rustaceans have a duty to our community and to the rest of
the world to ensure that people feel comfortable and welcome wherever they
may be. In our own community, the Rust Code of Conduct explicitly states that
we intend to make everybody feel safe, but this does not just apply to us.&lt;/p&gt;
&lt;p&gt;Just as we support Rustaceans, we also support humanity as a whole. It is time
for social progress to be made. We support those risking their own well-being
to show support for George Floyd, Breonna Taylor, Ahmaud Aubery, and everyone
else who has faced injustice at the hands of members of the police. We stand
with the protesters hoping to make the world better. &lt;/p&gt;
&lt;p&gt;If you want to show your support,
&lt;a href="https://blacklivesmatters.carrd.co/"&gt;here is a website of curated resources&lt;/a&gt;.
We encourage you to speak out, as one more voice is one step closer to a
better world.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustconf.com/"&gt;RustConf 2020 Registration is Open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/05/27/contributor-survey.html"&gt;2020 Contributor Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html"&gt;A retrospective on the 2018 rust-lang.org redesign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://giordi91.github.io/post/disassemlbyrust1/"&gt;Rust Disassembly: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.hackeriet.no/fuzzing-sequoia/"&gt;Fuzzing Sequoia-PGP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kitsu.me/posts/2020_06_01_mutex_in_async_world"&gt;Mutex in async world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kitsu.me/posts/2020_05_24_custom_types_in_diesel"&gt;Custom types in Diesel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nickwilcox.com/blog/autovec2/"&gt;Auto-Vectorization for Newer Instruction Sets in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/tstellanova/81c963f556522447dd007a0c3a84ebc3"&gt;Current State of Embedded Rust for Flight Controllers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/gsldbi/3d_boids_swimming_along_in_perfect_harmony/"&gt;3D boids swimming along in perfect harmony; Implementing the boids flocking algorithm in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/coverage-marks/"&gt;Coverage Marks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/ringbahn/"&gt;Ringbahn: a safe, ergonomic API for io-uring in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/05/25/changelog-26.html"&gt;rust-analyzer changelog #26&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/20/5/rust-java"&gt;Why I'm enjoying learning Rust as a Java programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.elinvynia.com/posts/2020-05-26-contributing-to-rust.html"&gt;Contributing to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/get-a-look-on-key-rust-crates-for-webassembly/"&gt;Get a Look on Key Rust Crates for WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://insights.dice.com/2020/05/29/10-most-loved-programming-languages-rust-typescript-more/"&gt;10 Most Loved Programming Languages: Rust, TypeScript, and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://richardpatching.com/2020/05/22/creating-a-ruby-gem-with-rust.html"&gt;Creating a Ruby Gem with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/cognite/designing-the-rust-unleash-api-client-6809c95aa568"&gt;Designing the Rust Unleash API client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/how-to-build-a-websocket-server-with-rust/"&gt;How to build a WebSocket server with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/autodidaddict/invoking-functions-on-distributed-game-objects-37b1"&gt;Invoking Functions on Distributed Game Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.apnic.net/2020/06/02/ipv6-and-rust/"&gt;IPv6 and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2020/05/30/hi.html"&gt;Rust as a High Level Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jlkiri/sorting-algorithms-in-rust-1386"&gt;Sorting algorithms in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@polyglot_factotum/programming-servo-integrating-readablestream-1a7faebeeed7?source=friends_link&amp;amp;sk=e297efa0a9e9d59d59233f3ec7038b1c"&gt;Programming Servo: integrating streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oldmill.cz/2020-05-31-to-rust-or-not.html"&gt;To Rust or not to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Spanish] &lt;a href="https://dev.to/robertohuertasm/aprende-rust-en-espanol-1pea"&gt;Aprende Rust en espa√±ol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=qaykNPHJcyw"&gt;A Rust &amp;amp; Wasm tutorial on building Bitcoin infrastructure. Rust beginner-friendly!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=yozQ9C69pNs&amp;amp;feature=emb_logo"&gt;Crust of Rust: Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=rpilJV-eIVw&amp;amp;feature=emb_logo"&gt;Rust and Tell Berlin - May 2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/yamafaktory/jql"&gt;jql&lt;/a&gt;, a JSON Query Language CLI tool.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/775"&gt;Davy Duperron&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ruma/ruma-events/issues/105"&gt;ruma-events: Add predefined push notification rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruma/ruma-events/issues/81"&gt;ruma-events: Add helpers to construct the fallback for rich replies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruma/ruma-events/issues/104"&gt;ruma-events: Create a distinct type for PushCondition::RoomMemberCount::is&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alex-dukhno.github.io/2020-05-30-Writing-database-management-system-in-Rust.-When-the-flame-is-born-from-the-ashes/"&gt;Writing database management system in Rust. When the flame is born from the ashes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;442 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-05-25..2020-06-01"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71862"&gt;implement unsafe blocks in unsafe fn&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/2585-unsafe-block-in-unsafe-fn.html"&gt;#2585&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72506"&gt;exhaustiveness checking: work around type normalization issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72383"&gt;suggest using &lt;code&gt;std::mem::drop&lt;/code&gt; function instead of explicit destructor call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72270"&gt;add a lint against references to packed fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72807"&gt;avoid setting wrong obligation cause span of associated type mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72715"&gt;account for trailing comma when suggesting &lt;code&gt;where&lt;/code&gt; clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72677"&gt;fix diagnostics for &lt;code&gt;@ ..&lt;/code&gt; binding pattern in tuples and tuple structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/478"&gt;chalk: request hidden opaque types lazily&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1441"&gt;miri: synchronization primitive cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72683"&gt;&lt;code&gt;from_u32_unchecked&lt;/code&gt;: check validity, and fix UB in Wtf8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72568"&gt;implement &lt;code&gt;total_cmp&lt;/code&gt; for &lt;code&gt;f32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72499"&gt;override &lt;code&gt;Box::&amp;lt;[T]&amp;gt;::clone_from&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72162"&gt;add &lt;code&gt;Extend::&lt;/code&gt;{&lt;code&gt;extend_one&lt;/code&gt;, &lt;code&gt;extend_reserve&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71500"&gt;make pointer offset methods/intrinsics const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71095"&gt;&lt;code&gt;impl From&amp;lt;[T; N]&amp;gt; for Box&amp;lt;[T]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72288"&gt;stabilization of &lt;code&gt;weak-into-raw&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72533"&gt;resolve UB in Arc/Weak interaction, part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72466"&gt;stabilize &lt;code&gt;str_strip&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72413"&gt;&lt;code&gt;impl Step for char&lt;/code&gt; (make &lt;code&gt;Range*&amp;lt;char&amp;gt;&lt;/code&gt; iterable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72310"&gt;add &lt;code&gt;Peekable::next_if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72407"&gt;various minor improvements to &lt;code&gt;Ipv6Addr::Display&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72398"&gt;&lt;code&gt;SocketAddr&lt;/code&gt; and friends now correctly pad its content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72239"&gt;implement PartialOrd and Ord for SocketAddr*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71843"&gt;tweak and stabilize &lt;code&gt;Atomic&lt;/code&gt;N&lt;code&gt;::fetch_update&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72324"&gt;stabilize &lt;code&gt;Atomic&lt;/code&gt;N&lt;code&gt;::fetch_&lt;/code&gt;{&lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/856"&gt;stdarch: add 64 bit integer AVX512f comparisons and the intrinsics needed to test them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/861"&gt;stdarch: add 64 bit AVX512f le and ge comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libm/pull/244"&gt;libm: use macros for more division/array checks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;This is a new section containing the results of a weekly check on how rustc's
perf has changed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020.md#2020-06-02"&gt;2020-06-02&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2912"&gt;Transition to rust-analyzer as our official LSP (Language Server Protocol) implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72583"&gt;&lt;code&gt;impl AsRef&amp;lt;[T]&amp;gt;&lt;/code&gt; for &lt;code&gt;vec::IntoIter&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72279"&gt;Add raw_ref macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/68833"&gt;Tracking issue for &lt;code&gt;std::io::{BufReader, BufWriter}::capacity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2936"&gt;add lang-team Major Change Proposals as a "pre-RFC" step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2937"&gt;Unsafe statics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2939"&gt;Request for creating pipes with fd other than 0,1,2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/270827463/"&gt;June 3. Johannesburg, ZA - Remote - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876685/"&gt;June 8. Auckland, NZ - Remote - Rust AKL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrybcjbmb/"&gt;June 9. Seattle, WA - Remote - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/270938860/"&gt;June 11. San Diego, CA - Remote - San Diego Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/dtqwprybcjbfb/"&gt;June 3. Indianapolis, IN, US - Indy.rs Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrybcjbpb/"&gt;June 11. Columbus, OH, US - Columbus Rust Society Monthly Meeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/269263282/"&gt;June 11. Lehi, UT, US - Utah Rust - Lightning Talks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://iota.bamboohr.com/jobs/view.php?id=105"&gt;Software Engineer - Rust - IOTA Foundation - Remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://polymath.bamboohr.com/jobs/view.php?id=96"&gt;Senior Rust Engineer - Polymath - Remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/37748BA121/"&gt;Rust Back End Engineer, Core Banking - TrueLayer - Milan, Italy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust enables belligerent refactoring ‚Äì making dramatic changes and then working with the compiler to bring the project back to a working state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://blog.knoldus.com/some-extensive-projects-working-with-rust"&gt;Pankaj Chaudhary on Knoldus Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/880"&gt;Maxim Vorobjov&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/gvwvep/this_week_in_rust_341/"&gt;Discuss on r/rust&lt;/a&gt;small&amp;gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 340</title><link href="https://this-week-in-rust.org/blog/2020/05/27/this-week-in-rust-340/" rel="alternate"></link><updated>2020-05-27T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-05-27:blog/2020/05/27/this-week-in-rust-340/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://rustacean-station.org/episode/016-twir-340/"&gt;this week's &lt;em&gt;This Week in Rust Podcast&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://seri.tools/blog/compiling-rust-for-legacy-windows/"&gt;Compiling Rust binaries for Windows 98 SE and more: a journey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2020-05-24-zero-to-production-0-foreword/"&gt;Zero To Production #0: Foreword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/some-extensive-projects-working-with-rust/"&gt;Some Extensive Projects Working with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.m-ou.se/writing-python-inside-rust-4/"&gt;Writing Python inside your Rust code ‚Äî Part 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cetra3.github.io/blog/drawing-svg-graphs-rust/"&gt;Drawing SVG Graphics with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/cognite/designing-the-rust-unleash-api-client-6809c95aa568"&gt;Designing the Rust Unleash API Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gridbugs.org/conways-game-of-life-on-the-nes-in-rust/"&gt;Conway's Game of Life on the NES in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/how-to-organize-your-rust-tests/"&gt;How to organize your Rust tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rodarmor.com/blog/tour-de-just"&gt;Just: How I Organize Large Rust Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rubdos.be/corona/qt/rust/tokio/actix/2020/05/23/actix-qt.html"&gt;Integrating Qt events into Actix and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sergeyzenchenko/actix-web-in-docker-how-to-build-small-and-secure-images-2mjd"&gt;Actix-Web in Docker: How to build small and secure images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/angular-rust-webassembly-node-js-serverless-and-the-new-azure-static-web-apps-cnb"&gt;Angular, Rust, WebAssembly, Node.js, Serverless, and... the NEW Azure Static Web Apps!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chromium.org/Home/chromium-security/memory-safety"&gt;The Chromium project finds that around 70% of our serious security bugs are memory safety problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/vibhoothi/integration-of-av-metrics-into-rav1e-the-av1-encoder-5h8h"&gt;Integration of AV-Metrics Into rav1e, the AV1 Encoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mgattozzi.dev/oxidizing-the-technical-interview/"&gt;Oxidizing the technical interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tavianator.com/porting-k-d-forests-to-rust/"&gt;Porting K-D Forests to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sassman/rust-macro-rules-in-practice-40ne"&gt;Rust Macro Rules in Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://abramov.io/rust-dropping-things-in-another-thread"&gt;Rust: Dropping heavy things in another thread can make your code 10000 times faster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mgattozzi.dev/rusts-runtime/"&gt;Rust's Runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://anchor.fm/tech-exceptions/episodes/What-Microsoft-has-to-do-with-Rust--on-this-episode-with-Ryan-Levick-eec75h"&gt;Tech Except!ons: What Microsoft has to do with Rust? With Ryan Levick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [Russian] &lt;a href="https://www.youtube.com/watch?v=n3kyvMVck_M"&gt;Rust: Not as hard as you think - Meta/conf: Backend Meetup 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://tim.mcnamara.nz/post/618982870485172224/rust-iteration"&gt;3 Part Video for Beginners to Rust Programming on Iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=fh9WXPu0hw8"&gt;Bringing WebAssembly outside the web with WASI by Lin Clark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://mybuild.microsoft.com/sessions/61de34c5-b111-4ece-928f-541854875862?source=sessions"&gt;Microsoft's Safe Systems Programming Languages Effort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=CMB6AlE1QuI"&gt;Rust, WebAssembly, and the future of Serverless by Steve Klabnik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/gnzlbg/cargo-asm"&gt;cargo-asm&lt;/a&gt;, a cargo subcommand to show the resulting assembly of a function. Useful for performance work.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/772"&gt;Jay Oster&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/christianpoveda/pijama/issues?q=is%3Aissue+is%3Aopen+label%3AE-easy"&gt;pijama: easy issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kerollmops/mdbx-rs/issues/1"&gt;mdbx-rs: Add support for more compile time options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruma/ruma-events/issues/90"&gt;ruma: Replace impl_enum! with strum derives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/time-rs/time/issues/236"&gt;time-rs: Revamped parsing/formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/http-rs/http-types/issues/154"&gt;http-types: Request::query should match Tide's behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/http-rs/http-types/issues/155"&gt;http-types: Status should take TryInto&lt;StatusCode/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/http-rs/http-types/issues/156"&gt;http-types: Expose method shorthands for Request constructor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;359 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-05-18..2020-05-25"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67759"&gt;update to LLVM 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72397"&gt;llvm: expose tiny code model to users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72438"&gt;enable ARM TME (Transactional Memory Extensions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69171"&gt;implement new &lt;code&gt;asm!&lt;/code&gt; syntax&lt;/a&gt; from &lt;a href="https://github.com/rust-lang/rfcs/pull/2873"&gt;RFC #2873&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72325"&gt;always generated object code for &lt;code&gt;#![no_builtins]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72306"&gt;break tokens before checking if they are 'probably equal'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72308"&gt;emit a better diagnostic when function actually has a 'self' parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68717"&gt;stabilize fn-like proc macros in expression, pattern and statement positions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72256"&gt;use &lt;code&gt;once_cell&lt;/code&gt; crate instead of custom data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72205"&gt;simple NRVO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72362"&gt;remove ReScope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72153"&gt;exhaustively check &lt;code&gt;ty::Kind&lt;/code&gt; during structural match checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72269"&gt;move borrow-of-packed-field unsafety check out of loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72537"&gt;fix &lt;code&gt;InlineAsmOperand&lt;/code&gt; expresions being visited twice during liveness checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/459"&gt;chalk: cleanup crate structure and add features for SLG/recursive solvers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71923"&gt;check non-&lt;code&gt;Send&lt;/code&gt;/&lt;code&gt;Sync&lt;/code&gt; upvars captured by generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71599"&gt;support coercion between &lt;code&gt;FnDef&lt;/code&gt; and arg-less closure and vice versa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71973"&gt;more lazy normalization of constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1424"&gt;miri: prepare Dlsym system for dynamic symbols on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70705"&gt;use &lt;code&gt;T&lt;/code&gt;'s discriminant type in &lt;code&gt;mem::Discriminant&amp;lt;T&amp;gt;&lt;/code&gt; instead of &lt;code&gt;u64&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72502"&gt;fix discriminant type in generator transform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71447"&gt;&lt;code&gt;impl From&amp;lt;Cow&amp;gt;&lt;/code&gt; for &lt;code&gt;Box&lt;/code&gt;, &lt;code&gt;Rc&lt;/code&gt;, and &lt;code&gt;Arc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/159"&gt;another attempt to reduce &lt;code&gt;size_of&amp;lt;HashMap&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72227"&gt;set initial non-empty &lt;code&gt;Vec&lt;/code&gt; size to 4 instead of 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71854"&gt;make &lt;code&gt;std::char&lt;/code&gt; functions and constants associated to &lt;code&gt;char&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71886"&gt;stabilize &lt;code&gt;saturating_abs&lt;/code&gt; and &lt;code&gt;saturating_neg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71940"&gt;add &lt;code&gt;len&lt;/code&gt; and &lt;code&gt;slice_from_raw_parts&lt;/code&gt; to &lt;code&gt;NonNull&amp;lt;[T]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72399"&gt;add fast-path optimization for &lt;code&gt;Ipv4Addr::fmt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72446"&gt;&lt;code&gt;impl Ord for proc_macro::LineColumn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8022"&gt;cargo: try installing exact versions before updating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8248"&gt;cargo: automatically update &lt;code&gt;patch&lt;/code&gt;, and provide better errors if an update is not possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8246"&gt;cargo: add option to strip binaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4179"&gt;rustfmt: merge configs from parent directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4198"&gt;rustfmt: umprove error message when module resolution failed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4173"&gt;rustfmt: parse comma-separated branches in macro definitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved last week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/68833"&gt;Tracking issue for &lt;code&gt;std::io::{BufReader, BufWriter}::capacity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71095"&gt;impl &lt;code&gt;From&amp;lt;[T; N]&amp;gt;&lt;/code&gt; for &lt;code&gt;Box&amp;lt;[T]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72239"&gt;Implement PartialOrd and Ord for SocketAddr*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72324"&gt;Stabilize AtomicN::fetch_min and AtomicN::fetch_max&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72368"&gt;Resolve overflow behavior for RangeFrom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72413"&gt;impl Step for char (make &lt;code&gt;Range*&amp;lt;char&amp;gt;&lt;/code&gt; iterable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/72448"&gt;Stabilize core::panic::Location::caller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72466"&gt;Stabilize str_strip feature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Montreal/events/270635425"&gt;May 27. Montr√©al, QC, CA - Remote - RustMTL May 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wroclaw/events/270771184/"&gt;May 27. Wroc≈Çaw, PL - Remote - Rust Wroc≈Çaw Meetup #20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-London-User-Group/events/270526235/"&gt;May 27. London, UK - Remote - LDN Talks May 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-London-User-Group/events/270526235/"&gt;May 28. Berlin, DE - Remote - Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/270827463/"&gt;June 3. Johannesburg, ZA - Remote - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876685/"&gt;June 8. Auckland, NZ - Remote - Rust AKL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrybcjbmb/"&gt;June 9. Seattle, WA - Remote - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/dtqwprybcjbfb/"&gt;June 3. Indianapolis, IN, US - Indy.rs Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/truelayer/j/37748BA121/"&gt;Rust Back End Engineer, Core Banking - TrueLayer - Milan, Italy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=233"&gt;Sr. SW Engineer (TW or Remote) - NZXT - Taipei, Taiwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elektron.se/rust-graphics-engineer/"&gt;Rust Graphics Engineer - Elektron - Gotheburg, Sweden&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Things that are programming patterns in C are types in Rust.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://users.rust-lang.org/t/how-has-learning-and-working-in-rust-influenced-how-you-think-about-writing-software/42836/3"&gt;Kornel Lesi≈Ñski on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/876"&gt;trentj&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/grs1ql/this_week_in_rust_340/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 339</title><link href="https://this-week-in-rust.org/blog/2020/05/19/this-week-in-rust-339/" rel="alternate"></link><updated>2020-05-19T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-05-19:blog/2020/05/19/this-week-in-rust-339/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Starting with this issue, there is now also a weekly &lt;em&gt;This Week in Rust Podcast&lt;/em&gt; highlighting a few of the stories from each issue. You can check out the very first episode on &lt;a href="https://rustacean-station.org/episode/015-twir-339/"&gt;The Rustacean Station&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/05/15/five-years-of-rust.html"&gt;Five Years of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nick.groenen.me/posts/rust-error-handling/"&gt;Structuring and handling errors in 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nickwilcox.github.io/blog/autovec/"&gt;Taking Advantage of Auto-Vectorization in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pksunkara.com/posts/state-of-routing-in-rust/"&gt;State of Web Routing in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mateuscosta.me/rust-releases-with-github-actions"&gt;Rust releases for single and multiple targets with GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jesselawson.org/rust/getting-started-with-rust-by-building-a-tiny-markdown-compiler/"&gt;Getting Started With Rust By Building A Tiny Markdown Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/potatostudios_/parcel-and-rust-a-wasm-romcom-545e"&gt;Parcel and Rust: A WASM Romcom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/citizen_stig/reading-temperature-sensor-in-rust-using-raspberry-pi-gpio-bhf"&gt;Reading temperature sensor in Rust using Raspberry Pi GPIO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/blog/2020/05/18/next-few-years.html"&gt;Rust Analyzer - Next Few Years&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/rust-closures-in-ffi/"&gt;Rust Closures in FFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@sojan.james/the-case-for-using-rust-for-automotive-software-19400779f126"&gt;The case for using Rust for Automotive Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jakobmeier.ch/blogging/Paddlers_4.html"&gt;Gamedev #4: Benefits of full-stack Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://osblog.stephenmarz.com/ch9.html"&gt;RISC-V OS using Rust Chapter 9: Block IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/paulkernfeld/global-data-in-rust"&gt;A Guide to Global Data in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/014-rust-1.42-1.43/"&gt;What's New in Rust 1.42 and 1.43&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=EzQ7YIIo1rY&amp;amp;feature=youtu.be"&gt;Jonathan Teaches Jason Rust!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.twitch.tv/videos/623988324"&gt;Educational Rust coding - Building a web app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=s8WMaVU3EBs&amp;amp;feature=youtu.be"&gt;Rust and C++ Cardiff Virtual Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/apply"&gt;apply&lt;/a&gt;, a tiny library for chaining free functions into method call chains.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/769"&gt;Trevor Spiteri&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/clap-rs/clap/issues/992"&gt;clap-rs: Subcommand bin_name on Windows contains ".exe" in the middle instead of at the end (or not at all)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Tloru/keikan/issues/1"&gt;keikan: Update Rendering Code to be PBR Compliant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Tloru/keikan/issues/2"&gt;keikan: Implementing Different Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;359 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-05-11..2020-05-18"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72062"&gt;add built in PSP target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72067"&gt;emit a warning when optimization fuel runs out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72047"&gt;literal error reporting cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72045"&gt;incomplete features can also be unsound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71872"&gt;be less aggressive with &lt;code&gt;DroplessArena&lt;/code&gt;/&lt;code&gt;TypedArena&lt;/code&gt; growth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72146"&gt;provide separate option for std debug asserts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69659"&gt;rework the &lt;code&gt;std::iter::Step&lt;/code&gt; trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72166"&gt;simpler slice &lt;code&gt;Iterator&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72013"&gt;make &lt;code&gt;RawVec::grow&lt;/code&gt; mostly non-generic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71662"&gt;implement &lt;code&gt;FromStr&lt;/code&gt; for &lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72143"&gt;make &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;must_use&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8236"&gt;cargo: ignore broken console output in some situations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8254"&gt;cargo: handle LTO with an rlib/cdylib crate type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8247"&gt;cargo: gracefully handle errors during a build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved last week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2912"&gt;Transition to rust-analyzer as our official LSP (Language Server Protocol) implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72324"&gt;Stabilize AtomicN::fetch_min and AtomicN::fetch_max&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72123"&gt;Stabilize process_set_argv0 feature for Unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71447"&gt;impl From &amp;lt;Cow&gt; for Box, Rc, and Arc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/41875"&gt;Tracking issue for non_static_type_id&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2930"&gt;RFC: Reading into uninitialized buffers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybchbbc/"&gt;May 20. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.mozilla.org/events/gruppo-di-studio-di-rust/"&gt;May 21. Turin, IT - Rust Turin Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/nppvrrybchbjc/"&gt;May 26. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Berlin/events/270319545/"&gt;May 26. Berlin, DE - Rust and Tell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Montreal/events/270635425"&gt;May 27. Montr√©al, QC, CA - Remote - RustMTL May 2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpybchbhc/"&gt;May 25. Durham, NC, US - Triangle Rustaceans - Project Night and Lightning Talks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The whole motivation behind exceptions is to allow one to write ones business logic, concentrate on what one likes to think ones program will do, without having lots of fiddly error checking and handling code obscuring that logic. Error situations are therefore swept under the carpet with "try" and kept out of sight with "catch".&lt;/p&gt;
&lt;p&gt;However in my world view failure is not exceptional, it is a common happening, it's too important to be hidden away. Therefor failure handling should be in ones face in the code you write. Certainly in the face of those that read it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://users.rust-lang.org/t/did-rust-make-the-right-choice-about-error-handling/41736/29"&gt;ZiCog on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/872"&gt;Lzutao&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/gmyv8h/this_week_in_rust_339/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 338</title><link href="https://this-week-in-rust.org/blog/2020/05/12/this-week-in-rust-338/" rel="alternate"></link><updated>2020-05-12T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-05-12:blog/2020/05/12/this-week-in-rust-338/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/05/07/Rust.1.43.1.html"&gt;Announcing Rust 1.43.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@polyglot_factotum/rust-concurrency-the-single-writer-principle-applied-aada2cdc6fb0?source=friends_link&amp;amp;sk=cafc8dcf8babf4ec95b1b62ccde7e54b"&gt;Rust concurrency: the single-writer principle.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2020-04/"&gt;This Month in Rust OSDev (April 2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/blog/2020/a-no-std-rust-binary/"&gt;A no_std Rust binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/io-uring/"&gt;Notes on io_uring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/stable-async-on-embedded/"&gt;no_std async/await - soon on stable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cad97/try-fn-without-special-casing-result-4m5b"&gt;"try fn" without special-casing Result &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://notes.iveselov.info/programming/time_it-a-case-study-in-rust-macros"&gt;time_it: A case study in Rust macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://conradludgate.com/posts/yew-css/"&gt;Dynamic stylesheets and Yew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jamesmcm.github.io/blog/2020/05/06/a-practical-introduction-to-async-programming-in-rust/#en"&gt;A practical introduction to async programming in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/rust-closures-in-ffi/"&gt;Rust Closures in FFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tarquin-the-brave.github.io/blog/posts/collecting-all-the-errors/"&gt;Collecting many errors from an iterator of Results&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://peppe.rs/posts/auto-currying_rust_functions/"&gt;Auto-currying Rust Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/citizen_stig/converting-bits-to-integers-in-rust-using-generics-2nfg"&gt;Converting bits to integers in Rust using generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.justanotherdot.com/posts/magnifying-glasses-for-rust-assembly.html"&gt;Magnifying Glasses for Rust Assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@bparli/more-rust-and-load-balancer-adventures-fad07f4fb095"&gt;More Rust and Load Balancer Adventures&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://digitalnk.com/blog/2020/05/08/porting-north-korean-dictionaries-with-rust/"&gt;Porting North Korean Dictionaries with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alastairreid.github.io/rust-verification-tools/"&gt;Rust verification tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2020-05-10-announcement-zero-to-production-in-rust/"&gt;Series Announcement - Zero to Production in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/bnjjj/what-i-learned-contributing-to-rust-analyzer-4c7e"&gt;What I Learned Contributing to Rust-Analyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.christianfscott.com/rust-chars-vs-go-runes/"&gt;What‚Äôs the difference between a Rust char and a Go rune?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.alopex.li/WritingAWaylandCompositorInRust"&gt;Writing A Wayland Compositor In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitshifter.github.io/2020/05/07/conditional-compilation-in-rust/"&gt;Yak shaving conditional compilation in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/oxidize-global-workshop-and-cfp-announcement/"&gt;Oxidize Global Workshop and CfP announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tarquin-the-brave.github.io/blog/posts/collecting-all-the-errors/"&gt;Collecting many errors from an iterator of Results&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.m-ou.se/writing-python-inside-rust-3/"&gt;Writing Python inside your Rust code - Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sjames.github.io/articles/2020-04-26-rust-ffi-asn1-codec/"&gt;Rust FFI - Building an ASN1 codec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/7v7ERnrC4fo"&gt;Building a simple GraphQL API with Actix and Juniper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=c-NyXKbqmQc"&gt;Named Field Init in C, C++20, Zig, Rust, &amp;amp; D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/pksunkara/cargo-workspaces"&gt;cargo-workspaces&lt;/a&gt;, a cargo subcommand to manage your cargo workspace.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/768"&gt;Pavan Kumar Sunkara&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jamesmcm/s3rename/issues/16"&gt;s3rename: Atomic renames and asynchronous destructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/mexus/sedregex/-/issues/4"&gt;sedregex: Add support for translation commands y/ and tr/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/clap-rs/clap/issues/1463"&gt;clap: Usage suggests help subcommand when using DisableHelpSubcommand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yaahc/displaydoc/issues/15"&gt;displaydoc: Add support for &lt;code&gt;thiserror&lt;/code&gt; attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/extrawurst/gitui/issues"&gt;GitUI is looking for contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;375 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-05-04..2020-05-11"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71269"&gt;Define UB in float-to-int casts to saturate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71970"&gt;Improve bitcode generation for Apple platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8192"&gt;Don't force rustc to do codegen for LTO builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71881"&gt;Correctly handle UEFI targets as Windows-like when emitting sections for LLVM bitcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/55617"&gt;Prevent compiler stack overflow for deeply recursive code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71846"&gt;resolve: Relax fresh binding disambiguation slightly to fix regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69406"&gt;upgrade chalk and use chalk-solve/chalk-ir/chalk-rust-ir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71587"&gt;Report cannot move errors in promoted MIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71508"&gt;Simplify the &lt;code&gt;tcx.alloc_map&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71894"&gt;Suggest removing semicolon in last expression only if it's type is known&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69530"&gt;Skip attempting to run &lt;code&gt;coerce_unsized&lt;/code&gt; on an inference variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69464"&gt;Unify the undo log of all snapshot types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71975"&gt;Reduce &lt;code&gt;TypedArena&lt;/code&gt; creations in &lt;code&gt;check_match&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71942"&gt;Shrink &lt;code&gt;LocalDecl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71878"&gt;Add &lt;code&gt;remove_current_as_list&lt;/code&gt; to &lt;code&gt;LinkedList&lt;/code&gt;'s &lt;code&gt;CursorMut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70733"&gt;Add &lt;code&gt;Arc::&lt;/code&gt;{&lt;code&gt;incr&lt;/code&gt;, &lt;code&gt;decr&lt;/code&gt;}&lt;code&gt;_strong_count&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69984"&gt;Add Option to Force Unwind Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71839"&gt;Make &lt;code&gt;BTreeMap::new&lt;/code&gt; and &lt;code&gt;BTreeSet::new&lt;/code&gt; const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71510"&gt;&lt;code&gt;Btreemap&lt;/code&gt; iter intertwined&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70834"&gt;Add &lt;code&gt;core::future::&lt;/code&gt;{&lt;code&gt;pending&lt;/code&gt;, &lt;code&gt;ready&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2128"&gt;futures: Refactor to reduce the amount of unsafe and duplicated code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8226"&gt;cargo: Update assertions in LTO calculations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8222"&gt;cargo: Try to remove secrets from http.debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8194"&gt;cargo features: allow activated_features_unverified to communicate not-present&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2585"&gt;RFC 2585: FC for unsafe blocks in unsafe fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2904"&gt;RFC 2904: Major Change Proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2906"&gt;RFC: Deduplicate Cargo workspace information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71886"&gt;Stablilize saturating_abs and saturating_neg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71843"&gt;Tweak and stabilize AtomicN::fetch_update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71447"&gt;impl From&lt;Cow&gt; for Box, Rc, and Arc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68717"&gt;Stabilize fn-like proc macros in expression, pattern and statement positions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/60728"&gt;Tracking issue for Weak::into_raw/from_raw &amp;amp; similar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: clone] &lt;a href="https://github.com/rust-lang/rust/issues/41875"&gt;Tracking issue for non_static_type_id&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2923"&gt;Do not warn about similar ASCII-only idents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2922"&gt;RFC - cargo templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Seattle-Rust-Meetup/"&gt;May 12. Seattle, WA, US - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/270394980/"&gt;May 14. San Diego, CA, US - San Diego Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybchbsb/"&gt;May 14, Berlin, DE - Berlin Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybchbbc/"&gt;May 20. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.mozilla.org/events/gruppo-di-studio-di-rust/"&gt;May 21. Turin, IT - Rust Turin Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/nppvrrybchbjc/"&gt;May 26. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/"&gt;May 13. Vancouver, BC, CA - Vancouver Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrybchbsb/"&gt;May 14. Columbus, OH, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpybchbhc/"&gt;May 25. Durham, NC, US - Triangle Rustaceans - Project Night and Lightning Talks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/246f7fd2-000a-4f61-8f53-b1cc783d51cb"&gt;Backend Engineer, Data Processing - Kraken - Remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Futures - Kraken - Remote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Ownership is purely conceptual: it is not something you can see in a disassembler.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://users.rust-lang.org/t/what-is-the-formal-definition-of-ownership/41984/7"&gt;Jay Oster on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/868"&gt;Daniel H-M&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/srikwit"&gt;srikwit&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/gikfuy/this_week_in_rust_338/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry></feed>