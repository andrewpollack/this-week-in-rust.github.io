<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/categories/this-week-in-rust/rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 07 Jul 2021 00:00:00 -0400</lastBuildDate><item><title>This Week in Rust 398</title><link>https://this-week-in-rust.org/blog/2021/07/07/this-week-in-rust-398/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/07/01/What-the-error-handling-project-group-is-working-towards.html"&gt;What the Error Handling Project Group is Working Towards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lore.kernel.org/lkml/20210704202756.29107-1-ojeda@kernel.org/"&gt;Linux Rust Support Patches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/07/05/changelog-150.html"&gt;Intellij Rust Changelog #150&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/07/05/changelog-84.html"&gt;Rust Analyzer Changelog #84&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thephilbert.io/2021/07/05/gcc-rust-monthly-report-7-june-2021/"&gt;GCC Rust Monthly Report #7 June 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/blog/post/2021/07/01/future-of-buck"&gt;The future of Buck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/NaxZR-LDc_g"&gt;ChainSafe's Rust implementation of Mina spec Community Spotlight (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/martinkavik/moonzoon-dev-news-5-chat-example-moonzoon-cloud-5de4"&gt;MoonZoon Dev News (5): Chat example, MoonZoon Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infinyon.com/blog/2021/06/introducing-fluvio/"&gt;Fluvio: The Programmable Data Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beyermatthias.de/butido-a-linux-package-building-tool-in-rust"&gt;butido - a Linux Package Building Tool in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-28/"&gt;Knurling-rs changelog #28&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Svetlitski/fcp"&gt;&lt;code&gt;fcp&lt;/code&gt; 0.2.0 released - A significantly faster alternative to &lt;code&gt;cp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sycamore-rs.netlify.app/news/announcing-v0.5.0"&gt;Announcing Sycamore v0.5.0 - SSR + Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tensorbase.io/thisweek/2021-07-07-tw_10/"&gt;This Week In TensorBase 10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-java-tutorials.netlify.app/blog/6-interfaces/"&gt;Walking through "The Java Tutorials" with Rust - 'What Is an Interface?' and specialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tinyverse.substack.com/p/rust-and-tinyverse"&gt;Rust and Tinyverse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cprimozic.net/blog/speeding-up-webcola-with-webassembly/"&gt;Speeding Up the Webcola Graph Viz Library with Rust + WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://diaries.vercel.app/posts/closure-traits-rust/"&gt;Rust closures: How a closure can implement more than one trait&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.frankel.ch/start-rust/5/"&gt;Rust on the front-end&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.koyeb.com/tutorials/deploy-a-rust-web-app-with-rocket"&gt;Deploy a Rust Web App With Rocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zmedley.com/tcp-proxy.html"&gt;A TCP Proxy in 30 lines of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.secondstate.io/articles/manage-webassembly-apps-in-wasmedge-using-docker-tools/"&gt;Manage WebAssembly Apps in WasmEdge Using Docker Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zhanghandong/rust-concept-clarification-deref-vs-asref-vs-borrow-vs-cow-13g6"&gt;Rust Concept Clarification: Deref vs AsRef vs Borrow vs Cow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/onesignal/thread-safety-and-learning-in-rust-1p83"&gt;Thread safety and Learning in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rogertorres/rest-api-wrapper-with-rust-mk4"&gt;REST API Wrapper with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=NEyUq5AVF2U"&gt;Building a Web Application with Rust - Part VII - Auth Middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=iEZAnmVX7yk"&gt;Building a Web Application with Rust - Part VIII - Containerization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Yb3vInxzKGE"&gt;Rust &amp;amp; Bevy Tutorial - Building a Game From Scratch (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=4DqP57BHaXI"&gt;Creating a Chat Server with async Rust and Tokio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=HrxwOUVzyDU"&gt;1Password Developer Fireside Chat: Dive into Async &amp;amp; Futures in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/Stranger6667/css-inline"&gt;css-inline&lt;/a&gt;, a crate to inline CSS into &lt;code&gt;style&lt;/code&gt; tags.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/931"&gt;Dmitry Dygalo&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Synth&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getsynth/synth/issues/29"&gt;Feature: Scheduler / Topological sorting namespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getsynth/synth/issues/30"&gt;Use parameterized Statements for Postgres export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getsynth/synth/issues/31"&gt;Feature: Doc template generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getsynth/synth/issues/32"&gt;XML export / import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getsynth/synth/issues/33"&gt;Feature: CSV import/export&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sycamore&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sycamore-rs/sycamore/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;Sycamore has some good first issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h2&gt;
&lt;p&gt;297 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-06-28..2021-07-05"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86009"&gt;make &lt;code&gt;ForceWarn&lt;/code&gt; a lint level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86475"&gt;change vtable memory representation to use &lt;code&gt;tcx&lt;/code&gt; allocated allocations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86255"&gt;support allocation failures when interpreting MIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86778"&gt;avoid byte to char position conversions in &lt;code&gt;is_multiline&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86358"&gt;fix pretty print for &lt;code&gt;loop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86282"&gt;pretty-print macro matchers instead of using source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86190"&gt;fix ICE when main is declared in an extern block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86866"&gt;ignore inference variables in certain queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86148"&gt;check the number of generic lifetime and const parameters of intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86728"&gt;check node kind to avoid ICE in &lt;code&gt;check_expr_return()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86571"&gt;deny using default function in impl const Trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86678"&gt;fix garbled suggestion for missing lifetime specifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86666"&gt;fix misleading "impl Trait" error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86810"&gt;alloc: &lt;code&gt;no_global_oom_handling&lt;/code&gt;: disable &lt;code&gt;new()&lt;/code&gt;s, &lt;code&gt;pin()&lt;/code&gt;s, etc.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86714"&gt;add linked list cursor end methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86213"&gt;stabilize &lt;code&gt;str::from_utf8_unchecked&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86858"&gt;stabilize &lt;code&gt;string_drain_as_str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86797"&gt;stabilize &lt;code&gt;Bound::cloned()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86794"&gt;stabilize &lt;code&gt;Seek::rewind()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85270"&gt;when using &lt;code&gt;process::Command&lt;/code&gt; on Windows, environment variable names must be case-preserving but case-insensitive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84029"&gt;add &lt;code&gt;track_path::path&lt;/code&gt; fn for usage in &lt;code&gt;proc_macro&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libm/pull/253"&gt;libm: optimize &lt;code&gt;round&lt;/code&gt; and &lt;code&gt;roundf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9644"&gt;cargo: adjust error message with &lt;code&gt;offline&lt;/code&gt; and &lt;code&gt;frozen&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7405"&gt;clippy: stabilize &lt;code&gt;cargo clippy --fix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7424"&gt;clippy: downgrade &lt;code&gt;nonstandard_macro_braces&lt;/code&gt; to nursery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7407"&gt;clippy: don't suggest &lt;code&gt;doc(hidden)&lt;/code&gt; or unstable variants in wildcard lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7431"&gt;clippy: fix emitting in nested (&lt;code&gt;proc_&lt;/code&gt;)&lt;code&gt;macro&lt;/code&gt;s for &lt;code&gt;nonstandard_macro_braces&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7426"&gt;clippy: fix &lt;code&gt;doc_markdown&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7316"&gt;clippy: new lint: &lt;code&gt;rc_mutex&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7243"&gt;clippy: new lint: &lt;code&gt;strlen_on_c_strings&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7400"&gt;clippy: new lint: &lt;code&gt;disallowed_script_idents&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A fairly mixed week with improvements and regressions mostly balancing themselves out. The highlight of this week is we have now started to adopt a new performance triage process which will label PRs that introduce performance regressions with the &lt;code&gt;perf-regression&lt;/code&gt; label. Authors and/or reviewers are expected to justify their performance regression either by a short summary of why the change is worth it despite the regression or by creating an issue to follow-up on the regression.&lt;/p&gt;
&lt;p&gt;We hope this process will lead to better compiler performance in the long term.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=5a7834050f3a0ebcd117b4ddf0bc1e8459594309&amp;amp;end=9a27044f42ace9eb652781b53f598e25d4e7e918&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;5a78340..9a27044&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 3 Improvements, 2 Mixed
1 of them in rollups&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-07-06.md"&gt;Full report here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3137"&gt;RFC: let-else statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3128"&gt;RFC: I/O Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3107"&gt;&lt;code&gt;#[derive(Default)]&lt;/code&gt; on enums with a &lt;code&gt;#[default]&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85769"&gt;Stabilize const_fn_transmute, const_fn_union&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85305"&gt;Stabilize bindings_after_at&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/84364"&gt;Add expr202x macro pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84111"&gt;Stabilize &lt;code&gt;impl From&amp;lt;[(K, V); N]&amp;gt;&lt;/code&gt; for HashMap (and friends)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83918"&gt;Stabilize "RangeFrom" patterns in 1.55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81363"&gt;Remove P: Unpin bound on impl Future for Pin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/79704"&gt;Tracking Issue for IntoInnerError::into_parts etc. (io_into_inner_error_parts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/75243"&gt;Tracking Issue for array_map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/63567"&gt;Tracking issue for #![feature(maybe_uninit_extra)] &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/277633525/"&gt;July 7, 2021, Denver, CO, US - End-to-end Encrypted Messaging in Rust, with Ockam by Mrinal Wadhwa - Rust Denver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;July 8, 2021, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrycckbrb/"&gt;July 13, 2021, Seattle, WA, US - Monthly meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdoVbexvU3TZox1D9yLKPUggeTuih7TEDR6eaFQGTEgJtXZ5g/viewform"&gt;July 14, 2021, Malaysia - Rust Meetup July 2021 - Golang Malaysia, feat Rustlang, Erlang, Haskelllang and &lt;code&gt;.*-?(lang|script)\&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/278698763/"&gt;July 14, 2021, Dublin, IE - Rust Dublin July Remote Meetup - Rust Dublin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/zkqvjsycckbcc/"&gt;July 21, 2021, Vancouver, BC, CA - Rust Adoption at Huawei - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrycckbsb/"&gt;July 14, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;StructionSite&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/structionsite/3eecbb4d-427b-4e99-87fd-89533b9e7510"&gt;Backend Engineer - AI Pipeline (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ChainSafe Systems&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.smartrecruiters.com/ChainSafeSystemsInc/743999739358248-rust-developer"&gt;Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;InfinyOn&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://infinyon.zohorecruit.com/jobs/Careers/619885000000428015/Senior-Rust-Software-Engineer?source=CareerSite"&gt;Senior Rust Engineer(Remote))&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Merantix&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arbeitnow.com/view/senior-software-engineer-data-infrastructure-merantix-125225"&gt;Senior Software Engineer (Data Infrastructure) (Berlin, DE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NORICS GmbH&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.norics.de/job"&gt;Softwareentwickler (m/w/d) (Norden, DE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NZXT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer for CAM (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=317"&gt;Senior Software Engineer for Streaming Software (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Parity Technologies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.parity.io/jobs/"&gt;Several positions available (Berlin, DE and Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Esturary&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://estuary.dev/careers"&gt;Several positions available (New York, NY, US and Columbus, OH, US)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken?team=Engineering"&gt;Several positions available (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Subspace Network&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/subspacelabs"&gt;Several positions available (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;One thing I like about Rust is that it filters out lazy/sloppy thinkers. Even when I disagree with another Rust programmer, there is a certain level of respect that comes from knowing that they thought about the problem deeply enough to pass the borrow checker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/what-is-you-elevator-pitch-for-rust/61713/7?u=llogiq"&gt;Zeroexcuses on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1070"&gt;Jonah&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 07 Jul 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-07-07:blog/2021/07/07/this-week-in-rust-398/</guid></item><item><title>This Week in Rust 397</title><link>https://this-week-in-rust.org/blog/2021/06/30/this-week-in-rust-397/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-06-25-announcing-executive-search/"&gt;Announcing our Executive Search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/chainsafe-systems/pint-community-update-2-b337ece3f031"&gt;ChainSafe's Polkadot Index Network Token update #2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/06/28/changelog-83.html"&gt;Rust Analyzer Changelog #83&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.badykov.com/rust/2021/06/27/fang/"&gt;Fang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://veloren.net/devblog-125/"&gt;This Week In Veloren 125&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tensorbase.io/thisweek/2021-06-30-tw_9/"&gt;This Week In TensorBase 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/hosting-wasm-modules-in-rust-easily-using-wasmi/"&gt;Hosting wasm modules in Rust easily using ‘wasmi’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=BWL4889RKhU&amp;amp;t=5s"&gt;Why the future of the cloud will be built on Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adventures.michaelfbryan.com/posts/deserializing-binary-data-files/"&gt;Deserializing Binary Data Files in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cmyr.net/blog/keypaths.html"&gt;Type-checked keypaths in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oswalt.dev/2021/06/polymorphism-in-rust/"&gt;Polymorphism in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rohanjain.in/cargo-cross/"&gt;Cross Compiling Rust Binaries With GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cthutu/rust-2-lifetimes-owners-and-borrowers-oh-my-3fem"&gt;Rust #2: Lifetimes, Owners and Borrowers, OH MY!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/naruhodo/build-an-api-in-rust-part-3-11j1"&gt;Build an API in Rust (Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://www.youtube.com/watch?v=TCUnZVLgNps"&gt;Building a Web Application with Rust - Part V - HTTP Server with Database Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] [video] &lt;a href="https://www.youtube.com/watch?v=v7y_Ngn_-AY"&gt;Building a Web Application with Rust - Part VI - CRUD API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/playlist?list=PLlrxD0HtieHjbTjrchBwOVks_sr8EVW1x"&gt;Beginner's Series to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=PGKBdxOA6Xs&amp;amp;t=1s"&gt;Building a multithreaded Flutter + Rust App integrating both with Bloc/Cubit and Rid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=fvcbyCYdR10"&gt;Implementing Hazard Pointers in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=sDtQaO5_SOw"&gt;Rust Linz; June 2021 - Tim McNamara - How to learn Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/programming-rust-2nd/9781492052586/"&gt;Programming Rust, 2nd Edition is Available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.manning.com/books/rust-in-action"&gt;Rust in Action is Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/yamafaktory/hypergraph"&gt;hypergraph&lt;/a&gt;, graph data structure implementation where edges can join arbitrary numbers of vertices.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/929"&gt;Davy Duperron&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h2&gt;
&lt;p&gt;284 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-06-21..2021-06-28"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86206"&gt;fix type checking of return expressions outside of function bodies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85707"&gt;add &lt;code&gt;future_prelude_collision&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86166"&gt;do not emit alloca for ZST locals with multiple assignments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86452"&gt;fix panic-safety in specialized &lt;code&gt;Zip::next_back&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86037"&gt;add &lt;code&gt;io::Cursor::&lt;/code&gt;{&lt;code&gt;remaining&lt;/code&gt;, &lt;code&gt;remaining_slice&lt;/code&gt;, &lt;code&gt;is_empty&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86655"&gt;make &lt;code&gt;fmt::Arguments::as_str&lt;/code&gt; unstably const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9574"&gt;cargo: unify weak and namespaced features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84814"&gt;rustdoc: properly render higher-ranked trait bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86513"&gt;rustdoc: do not list impl when trait has doc(hidden)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86449"&gt;rustdoc: render &lt;code&gt;&amp;lt;Self as X&amp;gt;::Y&lt;/code&gt; type casts properly across crate bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85651"&gt;rustdoc: staggered layout for module contents on mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7350"&gt;clippy: add suspicious group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;We only have partial results this week (more details in full report). From the results we have collected, we have one small regression and several improvements.
Also, there was a broad &lt;a href="https://perf.rust-lang.org/compare.html?start=29cd70d40722930e66a8b726fe58a7bd1d64a22b&amp;amp;end=6b354a13820a444f834a33365ae4a8d97d7d27ce&amp;amp;stat=max-rss"&gt;max-rss regression&lt;/a&gt; from 11 days ago.
and narrower &lt;a href="https://perf.rust-lang.org/compare.html?start=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48&amp;amp;end=4573a4a879a8e1f773944a8859e4dcd136138af8&amp;amp;stat=max-rss"&gt;max-rss regression&lt;/a&gt; from 9 days ago.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=406d4a9cc3b9601cf98a07c6c83e0227d64f5d48&amp;amp;end=5a7834050f3a0ebcd117b4ddf0bc1e8459594309&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;406d4a9..5a78340&lt;/a&gt;
Revision range: &lt;a href="https://perf.rust-lang.org/?start=7c3872e6bfd555d2ad753ac1f871db3bd7f2a547&amp;amp;end=7ede6e2a2359c1bb9032baffa4fdafe5633749e3&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;7c3872e..7ede6e2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 5 Improvements, 0 Mixed; 1 of them in rollups&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-06-30.md"&gt;Full report here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3137"&gt;RFC: let-else statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3128"&gt;RFC: I/O Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3107"&gt;&lt;code&gt;#[derive(Default)]&lt;/code&gt; on enums with a &lt;code&gt;#[default]&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2756"&gt;New RFC: Collection Transmute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2475"&gt;RFC: Add delete and delete_by methods to Iterator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85305"&gt;Stabilize bindings_after_at&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/85149"&gt;Tracking Issue for std::io::Seek::rewind()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84111"&gt;Stabilize &lt;code&gt;impl From&amp;lt;[(K, V); N]&amp;gt;&lt;/code&gt; for HashMap (and friends)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83918"&gt;Stabilize "RangeFrom" patterns in 1.55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/76905"&gt;Tracking Issue for feature(string_drain_as_str) - string::Drain::as_str()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3145"&gt;Candidate Target Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/jxfdjsycckbjb/"&gt;July 6, 2021, Buffalo, NY, US - Buffalo Rust User Group, First Tuesdays - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/277633525/"&gt;July 7, 2021, Denver, CO, US - End-to-end Encrypted Messaging in Rust, with Ockam by Mrinal Wadhwa - Rust Denver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrycckbrb/"&gt;July 13, 2021, Seattle, WA, US - Monthly meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdoVbexvU3TZox1D9yLKPUggeTuih7TEDR6eaFQGTEgJtXZ5g/viewform"&gt;July 14, 2021, Malaysia - Rust Meetup July 2021 - Golang Malaysia, feat Rustlang, Erlang, Haskelllang and &lt;code&gt;.*-?(lang|script)\&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/278698763/"&gt;July 14, 2021, Dublin, IE - Rust Dublin July Remote Meetup - Rust Dublin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrycckbsb/"&gt;July 14, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Field 33&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arbeitnow.com/view/senior-software-engineer-backend-javarust-fxm-field-33-55295"&gt;Senior Software Engineer Backend - Java/Rust (Berlin, DE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Georg Fischer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.indeed.com/viewjob?cmp=Georg-Fischer-Signet-LLC&amp;amp;t=Software+Engineer&amp;amp;jk=c5a6c3823ac77bd4"&gt;Software Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Rhebo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rhebo.com/de/unternehmen/karriere/job/senior-software-entwickler-rust-m-w/"&gt;Softwareentwickler Rust - Schwerpunkt Netzwerk (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ChainSafe Systems&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.smartrecruiters.com/ChainSafeSystemsInc/743999739358248-rust-developer"&gt;Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mimo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mimo-capital/jobs/blob/main/Full-time%20senior%20Rust%20developer.md"&gt;Full-time senior Rust developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Anixe&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;Rust Software Engineer (Wrocław, PL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NZXT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer for CAM (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=317"&gt;Senior Software Engineer for Streaming Software (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kollider&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/junior-backend-engineer/en"&gt;Junior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/senior-backend-engineer/en"&gt;Senior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/devops-engineer/en"&gt;DevOps Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team#open-roles"&gt;Multiple Rust Engineering Positions Available (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;When a panic has a payload that's an object which needs Drops,&lt;br /&gt;
And the panic hits a catch_unwind for unexpected stops&lt;br /&gt;
Before if its Drop panicked we'd just crash to your desktops,&lt;br /&gt;
Now the payload gets forgotten, and you'd better grab some mops!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://twitter.com/josh_triplett/status/1407776002973986819"&gt;Josh Triplett on twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1069"&gt;Josh Triplett&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/obarj8/this_week_in_rust_397/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 30 Jun 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-06-30:blog/2021/06/30/this-week-in-rust-397/</guid></item><item><title>This Week in Rust 396</title><link>https://this-week-in-rust.org/blog/2021/06/23/this-week-in-rust-396/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;p&gt;No newsletters or research articles this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html"&gt;Announcing Rust 1.53.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/06/23/compiler-team-june-steering-cycle.html"&gt;Rust Compiler June Steering Cycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/06/21/changelog-82.html"&gt;rust-analyzer Changelog #82&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/06/21/changelog-149.html"&gt;IntelliJ Rust Changelog #149&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/junjunjd/rustymind"&gt;rustymind - Parse and visualize brainwaves with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tensorbase.io/thisweek/2021-06-23-tw_8/"&gt;This Week In TensorBase 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.memorysafety.org/blog/supporting-miguel-ojeda-rust-in-linux/"&gt;Supporting Miguel Ojeda's Work on Rust in the Linux Kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.antoyo.xyz/rustc_codegen_gcc-progress-report-1"&gt;rustc_codegen_gcc: Progress Report #1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-java-tutorials.netlify.app/blog/5-trait-objects-2/"&gt;Walking through "The Java Tutorials" with Rust - boxed trait objects and the search for inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/wabt-a-wonderful-cli-for-manipulating-wasm/"&gt;WABT: A wonderful CLI for manipulating Wasm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/wasm-bindgen-making-rust-and-javascript-interoperability-easy/"&gt;wasm-bindgen making Rust and JavaScript interoperability easy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cmyr.net/blog/keypaths.html"&gt;Type-checked keypaths in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://carllerche.com/2021/06/17/six-ways-to-make-async-rust-easier/"&gt;Exploring ways to make async Rust easier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.morsecodist.io/blog/rust-writer-ownership"&gt;Reading Back What You Wrote in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/o3k6yu/first_rust_project_a_chess_engine/"&gt;First Rust Project: A Chess Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/rust-vs-c-for-game-development/"&gt;Rust vs C++ for game development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plume.benboeckel.net/~/JustAnotherBlog/skipping-tests-in-rust"&gt;Skipping Tests in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] &lt;a href="https://yodalee.me/2020/12/2020_rust_gameboy/"&gt;Build a Gameboy emulator in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/BWL4889RKhU"&gt;Why the future of the cloud will be built on Rust - Oliver Gould, Buoyant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mitchgollub.com/rust-and-aws-lambda/"&gt;Rust and AWS Lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventures.michaelfbryan.com/posts/deserializing-binary-data-files/"&gt;Deserializing Binary Data Files in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jeikabu/yet-another-snazzy-rust-cli-k4i"&gt;Yet Another Snazzy Rust CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/naruhodo/build-an-api-in-rust-part-2-f11"&gt;Build an API in Rust (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oswalt.dev/2021/06/polymorphism-in-rust/"&gt;Polymorphism in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://romankudryashov.com/blog/2021/06/mongodb-redis-rust/"&gt;Getting started with MongoDB and Redis in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rotoclone.zone/blog/posts/raspberry-pi-monitoring"&gt;Making My Website Part 1: Monitoring On A Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] &lt;a href="https://yodalee.me/2021/05/1helloworld/"&gt;Develop WebAssembly Program in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/MiDFvrqjM2E"&gt;Rust Fuzzing #3: How to write (better) Rust fuzz targets?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/u-bjMHQ22TI"&gt;Building a Web Application with Rust - Part III - Database Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/rJB0PLwipRI"&gt;Building a Web Application with Rust - Part IV - HTTP Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.m-ou.se/rust-is-not-a-company/"&gt;Rust is not a Company&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Google-Wants-Rust-In-Kernel"&gt;Google Wants To See Rust Code In The Linux Kernel, Contracts The Main Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/o5p267/rust_is_the_most_wanted_language_by_godot_engine/"&gt;Rust is the most wanted language by Godot Engine users&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/laysakura/serde-encrypt"&gt;serde-encrypt&lt;/a&gt;, a library that adds encryption to all &lt;code&gt;Serialize&lt;/code&gt; impls.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/926"&gt;Sho Nakatani&lt;/a&gt; for the nomination.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/issues/8694"&gt;cargo - SearchIndexer takes time indexing \target on windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/issues/1706"&gt;cargo - Ability to specify the output name for a bin target different from the crate name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/issues/6691"&gt;cargo - Using alternative registries names in text output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/issues/9518"&gt;cargo - A dependency on path = "." should have a good error message&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h2&gt;
&lt;p&gt;301 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-06-07..2021-06-14"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86385"&gt;use &lt;code&gt;AttrVec&lt;/code&gt; for &lt;code&gt;Arm&lt;/code&gt;, &lt;code&gt;FieldDef&lt;/code&gt;, and &lt;code&gt;Variant&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86392"&gt;prefer &lt;code&gt;partition_point&lt;/code&gt; to look up assoc items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86426"&gt;lint for unused borrows as part of &lt;code&gt;UNUSED_MUST_USE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1832"&gt;miri: report an error if a &lt;code&gt;#[no_mangle]&lt;/code&gt;/&lt;code&gt;#[export_name = ...]&lt;/code&gt; function has the same symbol name as a built-in shim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86104"&gt;fix span calculation in format strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86136"&gt;stabilize &lt;code&gt;span_open()&lt;/code&gt; and &lt;code&gt;span_close()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85608"&gt;stabilize &lt;code&gt;ops::ControlFlow&lt;/code&gt; (just the type)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85925"&gt;linear interpolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82179"&gt;add functions &lt;code&gt;Duration::try_from_secs_&lt;/code&gt;{&lt;code&gt;f32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86202"&gt;specialize &lt;code&gt;io::Bytes::size_hint&lt;/code&gt; for more types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86179"&gt;optimize &lt;code&gt;Eq&lt;/code&gt; implementation for paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85406"&gt;integrate binary search codes of &lt;code&gt;binary_search_by&lt;/code&gt; and &lt;code&gt;partition_point&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2450"&gt;futures: introduce &lt;code&gt;stream::select_with_strategy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9579"&gt;cargo: don't allow config env to modify vars set by cargo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9586"&gt;cargo: avoid quadratic complexity when splitting output into lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86401"&gt;rustdoc: fix ICE when using &lt;code&gt;#[doc(keyword = "...")]&lt;/code&gt; on non-items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86473"&gt;rustdoc: account for const-unstable functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7382"&gt;clippy: fix wrong config option being suggested for deprecated &lt;code&gt;wrong_pub_self_convention&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7380"&gt;clippy: improve panic message on "Found multiple rlibs" error in compile-test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7299"&gt;clippy: add &lt;code&gt;macro_braces&lt;/code&gt; lint to check for irregular brace use in certain macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7357"&gt;clippy: check for unbalanced tick pairs in &lt;code&gt;doc_markdown&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7375"&gt;clippy: move &lt;code&gt;from-iter-instead-of-collect&lt;/code&gt; to pedantic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A few small regressions on smaller benchmarks (e.g., helloworld), likely
centered around more IR being generated in a few cases.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=d192c80d2284ba6b5146bb3da586354c3762c72b&amp;amp;end=3912083821c5072f700a75589c8af6a9d3e20a21&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;d192c80..3912083&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 1 Improvements, 0 Mixed; 1 of them in rollups&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-06-22.md"&gt;Full report here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2528"&gt;Type-changing struct update syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2475"&gt;RFC: Add delete and delete_by methods to Iterator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85746"&gt;Redefine ErrorKind::Other and stop using it in std.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85270"&gt;When using process::Command on Windows, environment variable names must be case-preserving but case-insensitive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/85149"&gt;Tracking Issue for std::io::Seek::rewind()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81360"&gt;Support forwarding caller location through trait object method call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/61356"&gt;Tracking issue for ops::Bound::cloned()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3143"&gt;Stabilize Cargo's weak-dep-features and namespaced-features.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;June 24, 2021, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccjbmc/"&gt;June 29, 2021, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/jxfdjsycckbjb/"&gt;July 6, 2021, Buffalo, NY, US - Buffalo Rust User Group, First Tuesdays - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;ChainSafe Systems&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.smartrecruiters.com/ChainSafeSystemsInc/743999739358248-rust-developer"&gt;Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kollider&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/junior-backend-engineer/en"&gt;Junior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/senior-backend-engineer/en"&gt;Senior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/devops-engineer/en"&gt;DevOps Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;At last, I can name my unsafe functions appropriately.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unsafe fn e͙̤͎̪͒x̲͓̞̤͍̻̺̂͗͛͆͡t̜̣͊̓ͩ̍̑e̩͖͙͎̼̖͉ͮṇ̨͖̎̓ͅd̗̼͕ͫ̅_̲̦̥̙̙͍͂́l͙͙̦̞̠̃͌͒i̹̘͍̳̊ͪͦͤ͒̊͋f̨ͥ̄̌ḛ̜͗̉̃̎̂̔̐t̩̲̘͕͉̺̫̓͗́i̹̤̭ͭ͆̔ͪͤ͢m̹̤̜̗̫̩͍ͨe̝͒ͣ&amp;lt;'b&amp;gt;(r: R&amp;lt;'b&amp;gt;) -&amp;gt; R&amp;lt;'static&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/o1yy1p/announcing_rust_1530/h2488f5"&gt;Freeky on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1063"&gt;Vincent de Phily&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/o6q7rw/this_week_in_rust_396/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 23 Jun 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-06-23:blog/2021/06/23/this-week-in-rust-396/</guid></item><item><title>This Week in Rust 395</title><link>https://this-week-in-rust.org/blog/2021/06/16/this-week-in-rust-395/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Highlight&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Content warning: Suicide, Mental Health&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The following post mourns the death of somebody in the Rust community.
This is a very sensitive topic, and it's hard to truly do justice to the loss of human life.
The most important thing we can do is to raise awareness surrounding mental health.&lt;/p&gt;
&lt;p&gt;If you or somebody you know is in need of a suicide prevention hotline,
please visit &lt;a href="https://www.opencounseling.com/suicide-hotlines"&gt;https://www.opencounseling.com/suicide-hotlines&lt;/a&gt; for emergency and suicide prevention hotline phone numbers in your country.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.redox-os.org/news/open-source-mental-health/"&gt;Open Source and Mental Health&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/06/15/1.53.0-prelease.html"&gt;1.53.0 pre-release testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/06/15/boxyuwu-leseulartichaut-the8472-compiler-contributors.html"&gt;Please welcome Boxy, Léo Lanteri Thauvin and the8472 to compiler-contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/news/022/"&gt;This Month in Rust GameDev #22 - May 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/06/14/changelog-81.html"&gt;rust-analyzer Changelog #81&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/awslabs/aws-sdk-rust/releases/tag/v0.0.8-alpha"&gt;AWS-SDK-Rust: CloudFormation, SageMaker, EC2, and SES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://confused.ai/posts/announcing-aya"&gt;Announcing Aya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tensorbase.io/thisweek/2021-06-16-tw_7/"&gt;This Week In TensorBase 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sunfishcode.online/introducing-cap-std/"&gt;Introducing cap-std, a capability-based version of the Rust standard library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wasmer.io/posts/wasmer-2.0"&gt;Wasmer 2.0, it's a big deal!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/nwdyip/new_create_announcement_iterate/"&gt;New crate announcement, &lt;code&gt;iterate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/releases/tag/13.0.0"&gt;ripgrep 13.0.0 release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.cr0.org/2021/06/a-few-thoughts-on-fuchsia-security.html"&gt;A few thoughts on Fuchsia security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://console.dev/interviews/atuin-ellie-huxtable/"&gt;On using Rust to implement shell history search/sync (interview with Ellie Huxtable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepu.tech/memory-management-in-rust/"&gt;Visualizing memory management in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://youtu.be/iQer8hUu0Es"&gt;Using Rust with Flutter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/embedded-rust-build-flash-binary-to-stm32f3discovery/"&gt;Embedded-Rust: Build &amp;amp; Flash binary to STM32F3DISCOVERY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pwy.io/en/posts/learning-to-fly-pt4/"&gt;Learning to Fly: Let's simulate evolution in Rust! (pt 4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dstancu.net/macos/rust/ffi/xpc/ncurses/2021/06/15/rust-xpc-ffi.html"&gt;Baby's first Rust with extra steps (XPC, launchd, and FFI)!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cprimozic.net/blog/speeding-up-webcola-with-webassembly/"&gt;Speeding Up the WebCola Graph Viz Library with Rust + WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.alexqua.ch/posts/from-nand-to-raytracer/"&gt;From NAND to Raytracer: Raytracing on the Hack computer (feat. Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rymc.io/blog/2021/cacao-rs-macos-ios-rust/"&gt;Cacao: Building macOS (and iOS) Apps in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/naruhodo/build-an-api-in-rust-part-1-5c43"&gt;Build an API in Rust (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pancy/learn-to-build-a-parser-in-rust-for-fun-and-profit-2id5"&gt;Learn to Build a Parser in Rust for Fun and Profit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nicholaschiasson/beginner-s-guide-to-running-rust-on-aws-lambda-277n"&gt;Beginner's Guide to Running Rust on AWS Lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sirneij/a-command-line-key-value-data-store-using-the-rust-programming-language-33b6"&gt;A Command Line Key-Value Data Store using the Rust Programming Language.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/smrpn/how-to-use-casbin-authorization-in-your-rust-web-app-part-3-4g2f"&gt;How to use casbin authorization in your rust web-app (part 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/tezedge/speeding-up-incoming-message-parsing-by-3-to-10-times-by-switching-from-serde-to-the-nom-library-a74b04391bb4"&gt;Speeding up incoming message parsing by 3- to 10-times by switching from serde to the nom library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] [series] &lt;a href="https://blog.budshome.com/budshome/rust-he-wasm-de-rong-he-,shi-yong-yew-gou-jian-web-qian-duan-(3)--zi-yuan-wen-jian-ji-xiao-zhong-gou"&gt;Build front-end web apps with Yew and WebAssembly in Rust -part 3: Assets &amp;amp; Refactor (Rust 和 Wasm 的融合，使用 yew 构建 web 前端（3）- 资源文件及小重构)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] [series] &lt;a href="https://blog.budshome.com/budshome/rust-he-wasm-de-rong-he-,shi-yong-yew-gou-jian-web-qian-duan-(4)--huo-qu-graphql-shu-ju-bing-jie-xi"&gt;Build front-end web apps with Yew and WebAssembly in Rust -part 4: GraphQL data &amp;amp; Parsing (Rust 和 Wasm 的融合，使用 yew 构建 web 前端（4）- 获取 GraphQL 数据并解析)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/Wmq3etdwCbM"&gt;Building a Web Application with Rust - Part 1 - Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/c9qSGUHgE1c"&gt;Building a Web Application with Rust - Part 2 - Database Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/tNzCj8691LE"&gt;Lock-Free to Wait-Free Simulation in Rust (part 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="research"&gt;Research&lt;/h3&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/blog/post/2021/06/03/meet-rustaceans-neil-mitchell/"&gt;Meet the Rustaceans: A series of interviews with Facebook Rust engineers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/nyd1qw/pop_os_uses_a_lot_of_rust/"&gt;Pop!_OS uses a lot of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/nY07zWzhyn4"&gt;Keynote: Bryan Cantrill - Hardware/Software Co-design: The Coming Golden Age&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week has two crates: &lt;a href="https://github.com/nativeshell/nativeshell"&gt;nativeshell&lt;/a&gt; gets you a Flutter app in Rust, while &lt;a href="https://github.com/matthieu-m/static-rc"&gt;static-rc&lt;/a&gt; is a compile-time reference-counted smart pointer.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/922"&gt;Zicklag&lt;/a&gt; for both nominations&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/boa-dev/boa/labels/good%20first%20issue"&gt;boa-dev/boa has some good first issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/softprops/shiplift/issues/301"&gt;softprops/shiplift - We have too many unwrap() calls in the codebase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h2&gt;
&lt;p&gt;289 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-06-07..2021-06-14"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86117"&gt;fix force-warns to allow dashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86116"&gt;suggest a trailing comma if a 1-tuple is expected and a parenthesized expression is found&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86215"&gt;do not suggest to add type annotations for unnameable types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85630"&gt;&lt;code&gt;to_digit&lt;/code&gt; simplification (less jumps)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84687"&gt;multiple improvements to &lt;code&gt;RwLock&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85791"&gt;add &lt;code&gt;Ipv6Addr::is_unicast&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86204"&gt;stabilize &lt;code&gt;wasm simd intrinsics&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86273"&gt;stabilize &lt;code&gt;maybe_uninit_ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86233"&gt;stabilize &lt;code&gt;simd_x86_bittest&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9561"&gt;cargo: implement warning for ignored trailing arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7262"&gt;clippy: fix &lt;code&gt;while_let_on_iterator&lt;/code&gt; suggestion in a closure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7345"&gt;clippy: remove requirement of fully qualified path for &lt;code&gt;disallowed_method&lt;/code&gt;/&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7326"&gt;clippy: fix false positive on &lt;code&gt;semicolon_if_nothing_returned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7325"&gt;clippy: fix false positive in &lt;code&gt;default_numeric_fallback&lt;/code&gt; with external macro expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7270"&gt;clippy: &lt;code&gt;Vec&lt;/code&gt; &lt;code&gt;extend&lt;/code&gt; to &lt;code&gt;append&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79608"&gt;BPF target support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85788"&gt;support for force-warns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85292"&gt;improve debugging experience for enums on windows-msvc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84995"&gt;parser: ensure that all nonterminals have tokens after parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85979"&gt;don't suggest unsized indirection in where-clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84988"&gt;rustc: allow safe &lt;code&gt;#[target_feature]&lt;/code&gt; on wasm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86002"&gt;always go through the &lt;code&gt;expn_that_defined&lt;/code&gt; query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85892"&gt;perf: miscellaneous inlining improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85905"&gt;perf: only compute the trait map once&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83362"&gt;stabilize &lt;code&gt;vecdeque_binary_search&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85930"&gt;update standard library for &lt;code&gt;IntoIterator&lt;/code&gt; implementation of arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7319"&gt;clippy: don't warn about &lt;code&gt;cfg!(..)&lt;/code&gt; as a constant in assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7289"&gt;clippy: fix &lt;code&gt;needless_collect&lt;/code&gt; with binding shadowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7265"&gt;clippy: add lint &lt;code&gt;manual_str_repeat&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;Some good improvements, and a few regressions. No large changes.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=1160cf864f2a0014e3442367e1b96496bfbeadf4&amp;amp;end=a50d72158e08e02cfc051b863017bdbd2c45b637&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;1160cf..a50d721&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3 Regressions, 3 Improvements, 1 Mixed; 1 of them in rollups&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-06-08.md"&gt;Full report here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/3057"&gt;Add the boxed!() macro to "de-magic" box syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/86136"&gt;Stabilize span_open() and span_close().&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85746"&gt;Redefine ErrorKind::Other and stop using it in std.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85270"&gt;When using process::Command on Windows, environment variable names must be case-preserving but case-insensitive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85200"&gt;Ignore derived Clone and Debug implementations during dead code analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81360"&gt;Support forwarding caller location through trait object method call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/61356"&gt;Tracking issue for ops::Bound::cloned()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3140"&gt;RFC: fallible-allocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3139"&gt;Cargo alternative registry auth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/277575285/"&gt;June 17, 2021, Denver, CO, US - Learning Rust as a Python/Javascript developer by Juhis - Rust Denver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DIxjk0HTx5U"&gt;June 18, 2021, Online - Learn Rust Fundamentals | Rust 101 - KubeDaily&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccjbmc/"&gt;June 29. 2021, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Tweede golf&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/vacatures/2/lead-developer-embedded-rust"&gt;Lead Developer Embedded Rust (Nijmegen, NL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Paige&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/paige/jobs/5210311002"&gt;Senior Software Engineer, Visualization (Remote, Europe)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ChainSafe Systems&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.smartrecruiters.com/ChainSafeSystemsInc/743999739358248-rust-developer"&gt;Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Gnosis&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arbeitnow.com/view/ethereum-core-developer-mwd-gnosis-126355"&gt;Ethereum Core Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Braiins&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://braiins.com/careers/rust-developer"&gt;Rust Developer (Prague, CZ)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NZXT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer for CAM (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=317"&gt;Senior Software Engineer for Streaming Software (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kollider&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/junior-backend-engineer/en"&gt;Junior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/senior-backend-engineer/en"&gt;Senior Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kollider.homerun.co/devops-engineer/en"&gt;DevOps Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;
ChainSafe Systems &lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;If manually managing memory is like wielding a gun, the borrow checker is an automatic safety that prevents you from pulling the trigger when you're roughly pointing it at yourself. But it's coarse-grained and errs on the side of caution; it simulates your foot as as the rectangular box that would contain it, not as a detailed 3D mesh. If you &lt;em&gt;really&lt;/em&gt; think you can aim it between your toes and avoid hitting yourself (for example, "the value returned by this function must remain alive for no more than 15 successive invocations of this function"), unsafe will let you try, but the borrow checker's built-in rules isn't granular enough to help you, though it will still stop you if you accidentally put your hand in front without declaring it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://news.ycombinator.com/item?id=27468885"&gt;infogulch on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1056"&gt;StyMaar&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/o1l0xo/this_week_in_rust_395/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 16 Jun 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-06-16:blog/2021/06/16/this-week-in-rust-395/</guid></item></channel></rss>