<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/categories/this-week-in-rust/rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 14 Jul 2020 00:00:00 -0400</lastBuildDate><item><title>This Week in Rust 347</title><link>https://this-week-in-rust.org/blog/2020/07/14/this-week-in-rust-347/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://rustacean-station.org/episode/022-twir-347/"&gt;this week's &lt;em&gt;This Week in Rust Podcast&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/07/08/Rustup-1.22.1.html"&gt;Announcing Rustup 1.22.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/07/09/lang-team-path-to-membership.html"&gt;Lang team design meeting: path to membership&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/hnfnti/where_is_the_rust_community_allowed_to_talk_about/fxf65nf/"&gt;Perspective on Rust Community Moderation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/programming-servo-the-birds-eyes-view-201d28220b9a?source=friends_link&amp;amp;sk=b8610f254bf6faf8b81c81729c1b3498"&gt;Programming Servo: the birdâ€™s-eyes view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-malaysia.github.io/code/2020/07/11/faster-integer-parsing.html"&gt;Faster Integer Parsing (Rust port)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeandbitters.com/lets-build-a-parser/"&gt;Learning Rust: Let's Build a Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jneem.github.io/nnnoiseless/"&gt;nnnoiseless: porting audio code from C to rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nbaksalyar.github.io/2020/07/12/soul-of-a-new-debugger.html"&gt;The Soul of a New Debugger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cad97/string-interners-in-rust-797"&gt;String interners in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nickwilcox.com/blog/target_cpu_vs_target_feature/"&gt;Target Feature vs Target CPU for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.mgattozzi.dev/orphan-rules/"&gt;Rust and it's Orphan Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2020/07/09/async-interview-8-stjepan-glavina/"&gt;Async Interview #8: Stjepan Glavina&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zupzup.org/rmq-in-rust/"&gt;Using RabbitMQ in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-embedded.github.io/embedonomicon/custom-target.html"&gt;Creating a custom target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.ielliott.io/sized-hkts/"&gt;Statically Sized Higher-kinded Polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/getting-in-and-out-of-trouble-with-rust-futures"&gt;Getting in and out of trouble with Rust futures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/07/13/changelog-33.html"&gt;Rust Analyzer Changelog #33&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/07/13/changelog-126.html"&gt;IntelliJ Rust Changelog #126&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2020-06/"&gt;This Month in Rust OSDev (June 2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://burgers.io/cross-compile-rust-from-arm-to-x86-64"&gt;Cross-compiling Rust from ARM to x86-64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://simplabs.com/blog/2020/06/25/writing-rust-nifs-for-elixir-with-rustler/"&gt;Writing Rust NIFs for Elixir With Rustler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/constraints-part-1-expressions/"&gt;Geometric Constraint Solvers Part 1: Algebraic Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.haoxp.xyz/posts/async-memory-access/"&gt;A View of Async Memory Access in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://esimmler.com/building-canrun-part-1/"&gt;Building Canrun: A Statically Typed Logic Programming Library for Rust (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/gnunicorn/hunting-down-a-non-determinism-bug-in-our-rust-wasm-build-4fk1"&gt;Hunting down a non-determinism-bug in our Rust Wasm build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yossarian.net/2020/03/09/Implementing-the-Clipper-chip-cipher-in-Rust"&gt;Implementing the Clipper Chip Cipher in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Linux-Plumbers-2020-Rust"&gt;Linux Developers May Discuss Allowing Rust Code Within the Kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.secondstate.io/articles/machine-learning/"&gt;Machine Learning in Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nicolodavis.com/blog/typescript-to-rust/"&gt;Moving from TypeScript to Rust/WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.redox-os.org/news/io_uring-1/"&gt;RSoC: Improving Drivers and Kernel - Part 1 (Largely io_uring)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://depth-first.com/articles/2020/07/07/rust-and-webassembly-from-scratch-hello-world-with-strings/"&gt;Rust and WebAssembly from Scratch: Hello World with Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sheshbabu.com/posts/rust-for-javascript-developers-pattern-matching-and-enums/"&gt;Rust for JavaScript Developers - Pattern Matching and Enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stu2b50.dev/posts/rust-is-surpris76171"&gt;Rust is Surprisingly Good as a Server Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seanchen1991/some-learnings-from-implementing-a-normalizing-rust-representer-2l12"&gt;Some Learnings from Implementing a Normalizing Rust Representer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.figuiere.net/technotes/notes/tn002/"&gt;Subclassing GTK Widgets in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[spanish] &lt;a href="https://emanuelpeg.blogspot.com/2020/07/rust-es-orientado-objeto.html#.XwsegbMr_EQ.reddit"&gt;Rust es orientado a objeto?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://medium.com/@social_62682/fuzzing-rust-with-shnatsel-podcast-e1fa0dbc28a"&gt;Fuzzing Rust with Shnatsel Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=zVX2qJFHDXA&amp;amp;feature=youtu.be"&gt;Rust Loops Part 1: loop, break, continue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?time_continue=4&amp;amp;v=DArJCR0HDL8&amp;amp;feature=emb_logo"&gt;Hitting A Bug in the Rust Compiler - While Writing A Boring Link Checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=CMlHbAGkXjA&amp;amp;list=PLK_g1a_cAfaZuTXzDoQUAFEHCalKSCv9G&amp;amp;index=2"&gt;Two Sum Problem - Leet Code + Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=dmbqpg5BuBY"&gt;Rust + WebAssembly - EdgeXR @ Netlight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=7YQGwb4_AvA"&gt;Rust Meetup - Adding WASM Support to a Native Application (GameDev Edition)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://jneem.github.io/nnnoiseless"&gt;nnnoiseless&lt;/a&gt;, a filter for audio noise removal ported from C.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/790"&gt;mmmmib&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rahul-thakoor/rust_gpiozero/issues/11"&gt;rust_gpiozero is looking for contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;273 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-07-06..2020-07-13"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73978"&gt;shrink &lt;code&gt;ParamEnv&lt;/code&gt; to 16 bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73887"&gt;stabilize const &lt;code&gt;mem::forget&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73870"&gt;typeck: adding type information to projection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/5443"&gt;clippy: some accuracy lints for floating point operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74125"&gt;correctly mark the ending span of a match arm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74109"&gt;only allow &lt;code&gt;repr(i128/u128)&lt;/code&gt; on enum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74107"&gt;hide &lt;code&gt;&amp;amp;mut self&lt;/code&gt; methods from Deref in sidebar if there are no &lt;code&gt;DerefMut&lt;/code&gt; impl for the type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74103"&gt;only add CFGuard on &lt;code&gt;windows-msvc&lt;/code&gt; targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74099"&gt;add &lt;code&gt;VecDeque::range*&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74076"&gt;add &lt;code&gt;read_exact_at&lt;/code&gt; and &lt;code&gt;write_all_at&lt;/code&gt; to WASI's &lt;code&gt;FileExt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/5769"&gt;clippy: new lint: &lt;code&gt;match_like_matches_macro&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74066"&gt;Optimize &lt;code&gt;is_ascii&lt;/code&gt; for &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;[u8]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/873"&gt;arch: added &lt;code&gt;f32&lt;/code&gt; and &lt;code&gt;f64&lt;/code&gt; unaligned stores and loads from avx512f set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/179"&gt;hashbrown: add &lt;code&gt;HashSet::drain_filter&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-07-14.md"&gt;2020-07-14&lt;/a&gt;. Twelve revisions checked. Zero regressions. One improvement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/74060"&gt;Remove trait &lt;code&gt;LengthAtMost32&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/73893"&gt;Stabilize control-flow-guard codegen option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/73197"&gt;Impl Default for ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/66770"&gt;Tracking issue for &lt;code&gt;core::{f32,f64}::consts::TAU&lt;/code&gt; &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2955"&gt;Opt-in Stable Trait VTables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/mzzfsrybckbsb/"&gt;July 14. Dallas, TX, US - Dallas Rust - Second Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.mozilla.org/events/gruppo-di-studio-di-rust-3/"&gt;July 16. Turin, IT - Rust Italia - Gruppo di studio di Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rusty-days.org/"&gt;July 27 - August 8. Rusty Days Virtual Rust Conference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybckbtb/"&gt;July 15. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpybckbkc/"&gt;July 27. Durham, NC, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/logdna/jobs/4703358002"&gt;Senior Software Engineer - Backend at LogDNA (Remote, US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/logdna/jobs/4702074002"&gt;Senior Security Engineer at LogDNA (Remote, US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elektron.se/rust-engineer/"&gt;Rust Engineer at Elektron (Gothenburg, Sweden)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.embark-studios.com/jobs/910166-open-source-engineer"&gt;Open Source Engineer (Remote) at Embark Studios (Stockholm)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.embark-studios.com/jobs/910166-open-source-engineer"&gt;Software Engineer (Remote) at Embark Studios (Stockholm)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[dutch] &lt;a href="https://www.dreamsolution.nl/2020-07-03-vacature-rust-python-software-engineer.html"&gt;Vacature software engineer (Rust / Python) at Dreamsolution (Netherlands)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Ownership in Rust is entirely a type system fiction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€” RalfJung&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm not sure what is meant there. "ownership" in many languages is a very real thing to me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ and &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/900"&gt;ZiCog on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/903"&gt;Stephan Sokolow&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/hrc4dt/this_week_in_rust_347/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 14 Jul 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-07-14:blog/2020/07/14/this-week-in-rust-347/</guid></item><item><title>This Week in Rust 346</title><link>https://this-week-in-rust.org/blog/2020/07/08/this-week-in-rust-346/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://rustacean-station.org/episode/021-twir-346/"&gt;this week's &lt;em&gt;This Week in Rust Podcast&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/07/06/Rustup-1.22.0.html"&gt;Announcing Rustup 1.22.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/07/02/Ownership-Std-Implementation.html"&gt;Ownership of the standard library implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-lang.github.io/compiler-team/minutes/design-meeting/2020-05-29-Roadmap-2020-2021/"&gt;Compiler Team 2020-2021 Roadmap Meeting Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://donsbot.wordpress.com/2020/07/04/back-to-old-tricks-or-baby-steps-in-rust/"&gt;Back to old tricks ..(or, baby steps in Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/small-strings-in-rust"&gt;Small strings in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/"&gt;Choosing a Rust web framework, 2020 edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pliniker.github.io/post/rust-hosted-langs/"&gt;Writing Interpreters in Rust: a Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://immunant.com/blog/2020/06/kernel_modules/"&gt;Transpiling A Kernel Module to Rust: The Good, the Bad and the Ugly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.azabani.com/2020/06/29/bad-apple-for-taskmgr.html"&gt;Bad Apple!! and how I wrote a Rust video player for Task Manager!!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boa-dev.github.io/2020/07/03/boa-release-09.html"&gt;Boa release v0.9 and make use of Rust's measureme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustinblockchain.org/newsletters/2020-07-01-stuck-inside-hacking-away/"&gt;RiB (Rust in Blockchain) Newsletter #13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sharpend.io/7-things-I-learned-from-porting-a-c-crypto-library-to-rust/"&gt;7 Things I learned from Porting a C Crypto Library to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-011/"&gt;This Month in Rust GameDev #11 (June 2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/aws-lambda-with-rust/"&gt;AWS Lambda with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codeslow.com/2020/07/writing-winning-4k-intro-in-rust.html"&gt;Writing a winning 4K intro in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/ringbahn-ii/"&gt;Ringbahn II: the central state machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bastion.rs/2020/06/14/bastion-floating-on-tide-part-2.html"&gt;Bastion floating on Tide - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://paytonrules.com/post/games-in-rust-with-godot-part-one/"&gt;Porting Godot Games To Rust (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/image-decay-as-a-service"&gt;Image decay as a service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/06/29/changelog-125.html"&gt;IntelliJ Rust Changelog #125&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/abstracting-away-correctness"&gt;Abstracting away correctness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zerotoga.me/dev/renderinginrust"&gt;Rendering in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.firosolutions.com/2020/07/superhero-rust-fuzzing/"&gt;Super hero Rust fuzzing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/what-is-a-dangling-pointer-2773d49cf86c"&gt;What Is a Dangling Pointer?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frogtok.com/simple-rocket-web-framework-tutorial-part-2in/"&gt;Simple Rocket Web Framework Tutorial | POST Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://osblog.stephenmarz.com/ch7.html"&gt;Adventures of OS - System Calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://notes.iveselov.info/programming/allocation-api-and-allocators"&gt;Allocation API, Allocators and Virtual Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rimutaka/cargo-features-explained-with-examples-194g"&gt;Cargo [features] explained with examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/embedded-concurrency-patterns/"&gt;Concurrency Patterns in Embedded Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/getting-started-with-webassembly-and-rust/"&gt;Getting started with WebAssembly and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/virtualkirill/how-to-write-a-stack-in-rust-3d4o"&gt;How to Write a Stack in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://subhojit777.in/implementing-websockets-in-rust/"&gt;Implementing WebSockets in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/07/06/changelog-32.html"&gt;rust-analyzer changelog 32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sheshbabu.com/posts/rust-for-javascript-developers-functions-and-control-flow/"&gt;Rust for JavaScript Developers - Functions and Control Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://willcrichton.net/notes/rust-the-new-llvm/"&gt;Rust: The New LLVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/fallenstedt/using-rust-and-webassembly-to-process-pixels-from-a-video-feed-4hhg"&gt;Using Rust and WebAssembly to Process Pixels from a Video Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/lokesh007/webassembly-with-rust-and-react-using-create-react-app-67"&gt;WebAssembly with Rust and React (Using create-react-app)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Portuguese] &lt;a href="https://dev.to/pehdepano/aprendendo-rust-01-hello-world-35p4"&gt;Aprendendo Rust: 01 - Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/020-mun/"&gt;Mun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://datascienceathome.com/rust-and-machine-learning-3-with-alec-mocatta-ep-109/"&gt;Rust and machine learning #3 with Alec Mocatta (Ep. 109)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=AH2P7Vc0N9s"&gt;Authentication Service in Actix - Part 1: Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=ygP4egJtmzw"&gt;Rust FLTK gui tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/skallwar/suckit"&gt;suckit&lt;/a&gt;, a tool to recursively download a website.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/786"&gt;Martin Schmidt&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No issues were proposed for CfP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;308 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-06-29..2020-07-06"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73670"&gt;add &lt;code&gt;format_args_capture&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73306"&gt;don't implement Fn* traits for &lt;code&gt;#[target_feature]&lt;/code&gt; functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73885"&gt;fix wasm32 being broken due to a NodeJS version bump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73569"&gt;handle &lt;code&gt;macro_rules!&lt;/code&gt; tokens consistently across crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73414"&gt;implement &lt;code&gt;slice_strip&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73778"&gt;make &lt;code&gt;likely&lt;/code&gt; and &lt;code&gt;unlikely&lt;/code&gt; const, gated by feature &lt;code&gt;const_unlikely&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73938"&gt;optimise fast path of checked_ops with &lt;code&gt;unlikely&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73449"&gt;provide more information on duplicate lang item error.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73751"&gt;remove &lt;code&gt;TypeckTables::empty(None)&lt;/code&gt; and make hir_owner non-optional.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74025"&gt;remove unnecessary release from Arc::try_unwrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73706"&gt;serialize all foreign &lt;code&gt;SourceFile&lt;/code&gt;s into proc-macro crate metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72445"&gt;stabilize &lt;code&gt;#[track_caller]&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73724"&gt;use WASM's saturating casts if they are available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73973"&gt;use &lt;code&gt;Span&lt;/code&gt;s to identify unreachable subpatterns in or-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73658"&gt;Update the rust-lang/llvm-project submodule to include AVR fixes recently merged&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73949"&gt;mir-opt: Fix mis-optimization and other issues with the SimplifyArmIdentity pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72688"&gt;added &lt;code&gt;.collect()&lt;/code&gt; into &lt;code&gt;String&lt;/code&gt; from &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73466"&gt;impl &lt;code&gt;From&amp;lt;char&amp;gt;&lt;/code&gt; for &lt;code&gt;String&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73564"&gt;linker: create &lt;code&gt;GNU_EH_FRAME&lt;/code&gt; header by default when producing ELFs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73726"&gt;resolve: disallow labelled breaks/continues through closures/async blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72978"&gt;ship rust analyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/551"&gt;chalk: add type outlives goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/557"&gt;chalk: allow printing lifetime placeholders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/524"&gt;chalk: support for ADTs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/171"&gt;hashbrown: add RawTable::erase and remove&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/174"&gt;hashbrown: expose RawTable::try_with_capacity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/175"&gt;hashbrown: improve RawIter re-usability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/pull/1795"&gt;libc: add a bunch of constants and functions which were missing on Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/pull/1811"&gt;libc: add more WASI libc definitions.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/pull/1804"&gt;libc: declare &lt;code&gt;seekdir&lt;/code&gt; and &lt;code&gt;telldir&lt;/code&gt; for WASI.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/872"&gt;stdarch: fix or equals integer comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8453"&gt;cargo: write GNU tar files, supporting long names.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/2601"&gt;crates.io: use default branch alias instead of "master"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/4841"&gt;clippy: added restriction lint: pattern-type-mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/5301"&gt;clippy: suggest &lt;code&gt;Option::map_or&lt;/code&gt;(&lt;code&gt;_else&lt;/code&gt;) for &lt;code&gt;if let Some { y } else { x }&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4294"&gt;rustfmt: do not duplicate const keyword on parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4291"&gt;rustfmt: do not remove fn headers (e.g., async) on extern fn items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4292"&gt;rustfmt: pick up comments between trait where clause and open block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020.md#2020-07-07"&gt;2020-07-07&lt;/a&gt;. One unimportant regression on a rollup; six improvements, two on rollups.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2867"&gt;RFC: Add a new &lt;code&gt;#[instruction_set(...)]&lt;/code&gt; attribute for supporting per-function instruction set changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2920"&gt;Inline &lt;code&gt;const&lt;/code&gt; expressions and patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2873"&gt;Inline assembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/73887"&gt;stabilize const mem::forget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/73862"&gt;Stabilize casts and coercions to &lt;code&gt;&amp;amp;[T]&lt;/code&gt; in const fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/73265"&gt;mv std libs to std/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72920"&gt;Stabilize &lt;code&gt;transmute&lt;/code&gt; in constants and statics but not const fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72488"&gt;Stabilize const_type_id feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71322"&gt;Accept tuple.0.0 as tuple indexing (take 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2953"&gt;RFC: IndexGet and IndexSet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybckbmb/"&gt;July 9. Berlin, DE - Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/271680644/"&gt;July 9. San Diego, CA, US - July 2020 Tele-Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrybckbsb/"&gt;July 13. Seattle, WA, US - Seattle Rust Meetup - Monthly Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.mozilla.org/events/gruppo-di-studio-di-rust-3/"&gt;July 16. Turin, IT - Rust Italia - Gruppo di studio di Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybckblb/"&gt;July 8. Atlanta, GA, US - Rust Atlanta - Grab a beer with fellow Rustaceans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/268567961/"&gt;July 9. Lehi, UT, US - Utah Rust - The Blue Pill: Rust on Microcontrollers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybckbtb/"&gt;July 15. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/1password/0623888f-0125-41b9-9902-eae8cfeae0c3"&gt;Rust Developer at 1Password, Remote (US or Canada)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/1password/23444f56-c83b-4c75-85cf-64305c335e78"&gt;Security Engineer at 1Password, Remote (US or Canada)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tagnifi/job-descriptions/issues/1"&gt;Part-time Backend Engineer at Tagnifi, Remote (North America)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is like a futuristic laser gun with an almost AI-like foot detector that turns the safety on when it recognises your foot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://www.reddit.com/r/rust/comments/hiyfhq/linus_torvalds_the_kernel_team_is_looking_at/fwk12r6/"&gt;u/goofbe on reddit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/898"&gt;Synek317&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/hnkws3/this_week_in_rust_346/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 08 Jul 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-07-08:blog/2020/07/08/this-week-in-rust-346/</guid></item><item><title>This Week in Rust 345</title><link>https://this-week-in-rust.org/blog/2020/06/30/this-week-in-rust-345/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://rustacean-station.org/episode/020-twir-345/"&gt;this week's &lt;em&gt;This Week in Rust Podcast&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/a-practical-guide-to-async-in-rust/"&gt;A practical guide to async in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://anssi-fr.github.io/rust-guide/"&gt;Secure Rust Guidelines - ANSSI (National Cybersecurity Agency of France)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rimutaka/faster-rust-development-on-aws-ec2-with-vscode-4hno"&gt;Faster Rust development on AWS EC2 with VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alastairreid.github.io/rust-verification-tools/"&gt;Rust verification tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nickwilcox.com/blog/arm_vs_x86_memory_model/"&gt;Examining ARM vs X86 Memory Models with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/06/29/lto-improvements.html"&gt;Disk space and LTO improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.garrensmith.com/blogs/fortuna-rs-couchdb-view-server"&gt;Building a faster CouchDB View Server in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cetra3.github.io/blog/implementing-a-jobq-sqlx/"&gt;Implementing a Job queue with SQLx and Postgres&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/jbarszczewski/rust-actix-cosmosdb-mongodb-tutorial-api-17i5"&gt;Rust + Actix + CosmosDB (MongoDB) tutorial api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frogtok.com/extremely-simple-rust-rocket-framework-tutorial/"&gt;Extremely Simple Rust Rocket Framework Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/blog/post/2020/06/03/build-smart-bookmarking-tool-rust-rocket/"&gt;Build a Smart Bookmarking Tool with Rust and Rocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nikhilism.com/post/2020/futures-suspending-scheduler/"&gt;A Future is a Suspending Scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.collabora.com/news-and-blog/blog/2020/06/23/cross-building-rust-gstreamer-plugins-for-the-raspberry-pi/"&gt;Cross building Rust GStreamer plugins for the Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raphlinus.github.io/xi/2020/06/27/xi-retrospective.html"&gt;xi-editor retrospective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alex-dukhno.github.io/2020-06-27-This-June-in-my-Database-project-written-in-rust/"&gt;This month in my Database project written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pingcap.com/blog/reasons-rust-compiles-slowly"&gt;A Few More Reasons Rust Compiles Slowly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codethink.co.uk/articles/2020/fixing-rusts-test-suite-on-risc-v/"&gt;Fixing Rust's test suite on RISC-V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/elshize/protobuf-code-generation-in-rust-1e35"&gt;Protobuf code generation in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.blog.nodrama.io/rust-opencv-eye-center-localisation/"&gt;Tracking eye centers location with Rust &amp;amp; OpenCV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/lcsfelix/using-rust-blurz-to-read-from-a-ble-device-gmb"&gt;Using rust, blurz to read from a BLE device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/06/29/changelog-31.html"&gt;rust-analyzer changelog #31&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/06/29/changelog-125.html"&gt;IntelliJ Rust Changelog #125&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=_cYz03jS7tk&amp;amp;feature=youtu.be"&gt;Manipulating ports, virtual ports and pseudo terminals - Rust WrocÅ‚aw Webinar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=lQt0adYPdfQ&amp;amp;feature=youtu.be"&gt;Rust Stream: Iterators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/print_bytes"&gt;print_bytes&lt;/a&gt;, a library to print arbitrary bytes to a stream as losslessly as possible.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/784"&gt;dylni&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/alex-dukhno/database/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22"&gt;Database in Rust is looking for contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/out-of-cheese-error/gooseberry/issues/8"&gt;Gooseberry: Set the kb_dir somewhere more accessible to the user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruma/ruma/issues/79"&gt;Ruma: Add directory and profile query endpoints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;339 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-06-22..2020-06-29"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72493"&gt;move leak-check to during coherence, candidate eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73496"&gt;account for multiple impl/dyn Trait in return type when suggesting &lt;code&gt;'_&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73674"&gt;tweak binop errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73672"&gt;adds a clearer message for when the async keyword is missing from a function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73516"&gt;allow dynamic linking for iOS/tvOS targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73293"&gt;always capture tokens for &lt;code&gt;macro_rules!&lt;/code&gt; arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73639"&gt;change heuristic for determining range literal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73244"&gt;check for assignments between non-conflicting generator saved locals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73757"&gt;const prop: erase all block-only locals at the end of every block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73460"&gt;emit line info for generator variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73708"&gt;explain move errors that occur due to method calls involving &lt;code&gt;self&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73588"&gt;fix handling of reserved registers for ARM inline asm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72271"&gt;improve compiler error message for wrong generic parameter order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73601"&gt;point at the call span when overflow occurs during monomorphization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73534"&gt;provide suggestions for some moved value errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72738"&gt;self contained linking option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73485"&gt;perform obligation deduplication to avoid buggy &lt;code&gt;ExistentialMismatch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73513"&gt;show the values and computation that would overflow a const evaluation or propagation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72437"&gt;stabilize &lt;code&gt;#![feature(const_if_match)]&lt;/code&gt; and &lt;code&gt;#![feature(const_loop)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73398"&gt;A way forward for pointer equality in const eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73613"&gt;the const propagator cannot trace references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72771"&gt;warn if linking to a private item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72700"&gt;&lt;code&gt;improper_ctypes_definitions&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71756"&gt;add Windows system error codes that should map to io::ErrorKind::TimedOut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73763"&gt;errors: use &lt;code&gt;-Z terminal-width&lt;/code&gt; in JSON emitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73102"&gt;proc_macro: stop flattening groups with dummy spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73743"&gt;rustc_lint: only query &lt;code&gt;typeck_tables_of&lt;/code&gt; when a lint needs it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73644"&gt;rustdoc: fix doc aliases with crate filtering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/430"&gt;chalk: .chalk file syntax writer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/523"&gt;chalk: add method to get repr data of an ADT to ChalkDatabase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/541"&gt;chalk: fix built-in &lt;code&gt;Fn&lt;/code&gt; impls when generics are involved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/538"&gt;chalk: fix coherence issue with associated types in generic bound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1461"&gt;miri: implement rwlocks on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1459"&gt;miri: supply our own implementation of the CTFE pointer comparison intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73627"&gt;shortcuts for min/max on ordinary BTreeMap/BTreeSet iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72717"&gt;add &lt;code&gt;TryFrom&amp;lt;{int}&amp;gt;&lt;/code&gt; for &lt;code&gt;NonZero{int}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72617"&gt;add a fast path for &lt;code&gt;std::thread::panicking&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73577"&gt;add &lt;code&gt;[T]::partition_point&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73418"&gt;add unstable &lt;code&gt;core::mem::variant_count&lt;/code&gt; intrinsic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72705"&gt;added io forwarding methods to the stdio structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73032"&gt;stabilize &lt;code&gt;leading_trailing_ones&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71660"&gt;&lt;code&gt;impl PartialEq&amp;lt;Vec&amp;lt;B&amp;gt;&amp;gt; for &amp;amp;[A], &amp;amp;mut [A]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73800"&gt;forward &lt;code&gt;Hash::write_iN&lt;/code&gt; to &lt;code&gt;Hash::write_uN&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/pull/1792"&gt;libc: add ancillary socket data accessor functions for solarish OSes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/pull/1791"&gt;libc: FreeBSD: machine register structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/pull/1796"&gt;libc: add wexecv, wexecve, wexecvp, wexecvpe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8323"&gt;cargo: add support for &lt;code&gt;workspace.metadata&lt;/code&gt; table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8387"&gt;cargo: adding environment variable CARGO_PKG_LICENSE_FILE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8391"&gt;cargo: enable "--target-dir" in "cargo install"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8418"&gt;cargo: expose built cdylib artifacts in the Compilation structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8364"&gt;cargo: improve support for non-&lt;code&gt;master&lt;/code&gt; main branches &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/859"&gt;docs.rs: don't panic when a crate doesn't exist for target-redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/861"&gt;docs.rs: improve executing tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/5694"&gt;clippy: lint iterator.map(|x| x)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/5695"&gt;clippy: new lint: suggest &lt;code&gt;ptr::read&lt;/code&gt; instead of &lt;code&gt;mem::replace(..., uninitialized())&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/5178"&gt;clippy: clippy-driver: pass all args to rustc if --rustc is present&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/5701"&gt;clippy: cmp_owned: handle when PartialEq is not implemented symmetrically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4284"&gt;rustfmt: do not reorder module declaration with #![macro_use]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4256"&gt;rustfmt: don't reformat with errors unless --force flag supplied&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020.md#2020-06-30"&gt;2020-06-30&lt;/a&gt;. Three regressions, two of them on rollups; two improvements, one on a rollup.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2906"&gt;RFC: Deduplicate Cargo workspace information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2920"&gt;Inline &lt;code&gt;const&lt;/code&gt; expressions and patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2873"&gt;Inline assembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/73466"&gt;impl &lt;code&gt;From&amp;lt;char&amp;gt;&lt;/code&gt; for String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/73265"&gt;mv std libs to std/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72920"&gt;Stabilize &lt;code&gt;transmute&lt;/code&gt; in constants and statics but not const fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72688"&gt;added &lt;code&gt;.collect()&lt;/code&gt; into String from &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72488"&gt;Stabilize const_type_id feature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2951"&gt;Linking modifiers for native libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2949"&gt;Hierarchic anonymous life-time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2948"&gt;Portable packed SIMD vector type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2947"&gt;crates.io token scopes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;June 30. Berlin, DE - Remote - Berlin Rust - Rust and Tell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/271286846/"&gt;July 1. Johannesburg, ZA - Remote - Monthly Joburg Rust Chat!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/271417290/"&gt;July 1. Dublin, IE - Remote - Rust Dublin - July Remote Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstrybckbcb/"&gt;July 1. Indianapolis, IN, US - Indy Rust - Indy.rs - with Social Distancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrybckbsb/"&gt;July 13. Seattle, WA, US - Seattle Rust Meetup - Monthly Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/nppvrrybcjbnc/"&gt;June 30. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybckblb/"&gt;July 8. Atlanta, GA, US - Rust Atlanta - Grab a beer with fellow Rustaceans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/268567961/"&gt;July 9. Lehi, UT, US - Utah Rust - The Blue Pill: Rust on Microcontrollers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876691/"&gt;July 6. Auckland, NZ - Rust AKL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/logdna/jobs/4703358002"&gt;Senior Software Engineer - Backend at LogDNA, Remote, US&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team/Senior-Software-Engineer-Protocols-in-Rust/1d3e2e2d-e538-5847-874f-6bec1b63af97"&gt;Senior Software Engineer - Protocols in Rust at Ockam, Remote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;References are a sharp tool and there are roughly three different approaches to sharp tools.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don't give programmers sharp tools. They may make mistakes and cut their fingers off. &lt;em&gt;This is the Java/Python/Perl/Ruby/PHP... approach.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Give programmers all the sharp tools they want. They are professionals and if they cut their fingers off it's their own fault. &lt;em&gt;This is the C/C++ approach.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Give programmers sharp tools, but put guards on them so they can't accidentally cut their fingers off. &lt;em&gt;This is Rust's approach.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lifetime annotations are a safety guard on references. Rust's references have no sychronization and no reference counting -- that's what makes them sharp. References in category-1 languages (which typically &lt;em&gt;do&lt;/em&gt; have synchronization and reference counting) are "blunted": they're not really &lt;em&gt;quite&lt;/em&gt; as effective as category-2 and -3 references, but they don't cut you, and they still work; they might just slow you down a bit.&lt;/p&gt;
&lt;p&gt;So, frankly, I like lifetime annotations because they prevent me from cutting my fingers off.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://users.rust-lang.org/t/when-do-you-find-lifetime-annotations-helpful/44434/6"&gt;trentj on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/897"&gt;Ivan Tham&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/hisn3e/this_week_in_rust_345/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 30 Jun 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-06-30:blog/2020/06/30/this-week-in-rust-345/</guid></item><item><title>This Week in Rust 344</title><link>https://this-week-in-rust.org/blog/2020/06/23/this-week-in-rust-344/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href="https://rustacean-station.org/episode/019-twir-344/"&gt;this week's &lt;em&gt;This Week in Rust Podcast&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/06/18/Rust.1.44.1.html"&gt;Announcing Rust 1.44.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/non-trivial-macros/"&gt;Writing Non-Trivial Macros in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kbknapp.dev/rust-cli/"&gt;Diving into Rust with a CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.io/rust-for-data-intensive-computation/"&gt;Rust for Data-Intensive Computation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.tonari.no/why-we-love-rust?ref=twtr"&gt;3K, 60fps, 130ms: achieving it with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@polyglot_factotum/rust-concurrency-the-archetype-of-a-message-passing-bug-817b60efd8f8?source=friends_link&amp;amp;sk=ad32b77d42eda3dd28a26671282271df"&gt;Rust concurrency: the archetype of a message-passing bug.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/how-to-design-for-panic-resilience-in-rust-55d5fd2478b9"&gt;How to Design For Panic Resilience in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svartalf.info/posts/2020-04-10-github-action-for-binary-crates-installation/"&gt;GitHub Action for binary crates installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tomforb.es/managing-rust-bloat-with-github-actions/"&gt;Managing Rust bloat with Github Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mattkeeter.com/projects/pont/"&gt;A multiplayer board game in Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://djugei.github.io/bad-at-unsafe/"&gt;Im bad at unsafe {}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2020/05/08/simd-library-plans.html"&gt;SIMD library plans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://endler.dev/2020/rust-compile-times/"&gt;Tips for Faster Rust Compile Times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/06/22/changelog-30.html"&gt;Rust Analyzer Changelog #30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/building-a-blockchain-in-rust-and-substrate-a-step-by-step-guide-for-developers-kc223ybp"&gt;Building A Blockchain in Rust &amp;amp; Substrate: A Step-by-Step Guide for Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sunshine-chain/rust-and-dart-the-async-story-3adk"&gt;Dart and Rust: the async story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/wayofthepie/decode-a-certificate-5903"&gt;Decode a certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://onesignal.com/blog/4-years-of-rust-at-onesignal/"&gt;Four Years of Rust At OneSignal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bearer.sh/how-rust-lets-us-monitor-30k-api-calls-min/"&gt;How Rust Lets Us Monitor 30k API calls/min&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/how-to-use-c-polymorphism-in-rust-76e1d1a88ed1"&gt;How to use C++ polymorphism in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://willcrichton.net/notes/type-safe-printf/"&gt;Implementing a Type-safe printf in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/tindleaj/introduction-to-rust-for-node-developers-3j05"&gt;Introduction to Rust for Node Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.protocol.com/rust-programming-safety-security"&gt;The programming language that wants to rescue the world from dangerous code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/property-based-testing-in-rust-with-proptest/"&gt;Property-based testing in Rust with Proptest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cncf.io/blog/2020/06/22/rust-at-cncf/"&gt;Rust at CNCF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pingcap.com/blog/rust-huge-compilation-units"&gt;Rust's Huge Compilation Units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://link.springer.com/chapter/10.1007%2F978-3-030-44914-8_18"&gt;RustHorn: CHC-Based Verification for Rust Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://saarw.github.io/dev/2020/06/18/shipping-linux-binaries-that-dont-break-with-rust.html"&gt;Shipping Linux binaries that don't break with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/frankmeza/some-examples-of-rust-lifetimes-in-a-struct-3m53"&gt;Some examples of Rust Lifetimes in a struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://harald.hoyer.xyz/rust-static-pie/"&gt;Static PIE and ASLR for the x86_64-unknown-linux-musl Target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/wayofthepie/three-bytes-to-an-integer-13g5"&gt;Three bytes to an integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.forrestthewoods.com/blog/using-rust-to-delete-gitignored-cruft/"&gt;Using Rust to Delete Gitignored Cruft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tourofrust.com/chapter_8_en.html"&gt;Tour of Rust - Chapter 8 - Smart Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/blog/2020/thread-local-storage/"&gt;Thread-local Storage - Part 13 of Making our own executable packer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://osblog.stephenmarz.com/ch11.html"&gt;RISC-V OS using Rust - Chapter 11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2020-06-21-zero-to-production-2-learn-by-building-an-email-newsletter/"&gt;Zero To Production #2: Learn By Building An Email Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=8O0Nt9qY_vo"&gt;Crust of Rust: Smart Pointers and Interior Mutability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/channel/UCRA18QWPzB7FYVyg0WFKC6g/videos"&gt;CS 196 at Illinois&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=jGgQmnPH0dQ&amp;amp;feature=youtu.be&amp;amp;t=28792"&gt;Ask Me Anything with Felix Klock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=lmEKIvLh9D4&amp;amp;feature=youtu.be"&gt;Rust Stream: The Guard Pattern and Interior Mutability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/imsnif/diskonaut"&gt;diskonaut&lt;/a&gt;, a disk usage explorer.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/781"&gt;Aram Drevekenin&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/extrawurst/gitui/issues"&gt;GitUI is looking for contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruma/ruma/issues/54"&gt;Ruma: /account/whoami should use UserId&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;325 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-06-15..2020-06-22"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73214"&gt;add &lt;code&gt;asm!()&lt;/code&gt; support for hexagon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72696"&gt;enable LLVM zlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73139"&gt;add methods to go from a nul-terminated &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; to a &lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73227"&gt;allow multiple &lt;code&gt;asm!&lt;/code&gt; options groups and report an error on duplicate options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73347"&gt;diagnose use of incompatible sanitizers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73305"&gt;disallow loading crates with non-ascii identifier name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73034"&gt;export &lt;code&gt;#[inline]&lt;/code&gt; fns with extern indicators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72280"&gt;fix up autoderef when reborrowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72804"&gt;further tweak lifetime errors involving &lt;code&gt;dyn Trait&lt;/code&gt; and &lt;code&gt;impl Trait&lt;/code&gt; in return position&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73300"&gt;implement crate-level-only lints checking.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72357"&gt;implement new gdb/lldb pretty-printers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71976"&gt;improve diagnostics for &lt;code&gt;let x += 1&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73027"&gt;make &lt;code&gt;need_type_info_err&lt;/code&gt; more conservative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70551"&gt;make all uses of ty::Error delay a span bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73320"&gt;make new type param suggestion more targetted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73446"&gt;make novel structural match violations not a &lt;code&gt;bug&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73382"&gt;only display other method receiver candidates if they actually apply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72623"&gt;prefer accessible paths in 'use' suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73471"&gt;prevent attacker from manipulating FPU tag word used in SGX enclave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72788"&gt;projection bound validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72331"&gt;report error when casting an C-like enum implementing Drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71420"&gt;specialization is unsound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72707"&gt;use min_specialization in the remaining rustc crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73465"&gt;add specialization of &lt;code&gt;ToString for char&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73261"&gt;suggest &lt;code&gt;?Sized&lt;/code&gt; when applicable for ADTs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73058"&gt;support sanitizers on aarch64-unknown-linux-gnu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73362"&gt;test that bounds checks are elided when slice len is checked up-front&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72456"&gt;try to suggest dereferences on trait selection failed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73373"&gt;use track caller for bug! macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72934"&gt;forbid mutable references in all constant contexts except for const-fns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72785"&gt;linker: MSVC supports linking static libraries as a whole archive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73384"&gt;linker: never pass &lt;code&gt;-no-pie&lt;/code&gt; to non-gnu linkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73287"&gt;lint: normalize projections using opaque types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/70946"&gt;add a lint to catch clashing &lt;code&gt;extern&lt;/code&gt; fn declarations.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73054"&gt;memory access sanity checks: abort instead of panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73442"&gt;pretty/mir: const value enums with no variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72962"&gt;store &lt;code&gt;ObligationCause&lt;/code&gt; on the heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/519"&gt;chalk: add closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/531"&gt;chalk: ignore auto traits order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72486"&gt;fix asinh of negative values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72938"&gt;stabilize Option::zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72584"&gt;stabilize vec::Drain::as_slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73389"&gt;use &lt;code&gt;Ipv4Addr::from&amp;lt;[u8; 4]&amp;gt;&lt;/code&gt; when possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/72790"&gt;core/time: Add Duration methods for zero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73580"&gt;deprecate wrapping_offset_from&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71660"&gt;&lt;code&gt;impl PartialEq&amp;lt;Vec&amp;lt;B&amp;gt;&amp;gt;&lt;/code&gt; for &lt;code&gt;&amp;amp;[A]&lt;/code&gt;, &lt;code&gt;&amp;amp;mut [A]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/162"&gt;hashbrown: avoid creating small tables with a capacity of 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/866"&gt;stdarch: add AVX 512f gather, scatter and compare intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8325"&gt;cargo: adding environment variable CARGO_PKG_LICENSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8363"&gt;cargo: cut down on data fetch from git dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8358"&gt;cargo: fix doctests not running with --target=HOST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8395"&gt;cargo: fix order-dependent feature resolution.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8398"&gt;cargo: fix overzealous &lt;code&gt;clean -p&lt;/code&gt; for reserved names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8359"&gt;cargo: support linker with -Zdoctest-xcompile.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4268"&gt;rustfmt: avoid using Symbol::intern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4271"&gt;rustfmt: ensure idempotency on empty match blocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020.md#2020-06-23"&gt;2020-06-23&lt;/a&gt;. Lots of improvements this week, and no regressions, which is good. But we regularly see significant performance effects on rollups, which is a concern.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/73466"&gt;impl &lt;code&gt;From&amp;lt;char&amp;gt;&lt;/code&gt; for String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/73032"&gt;stabilize leading_trailing_ones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72717"&gt;Add &lt;code&gt;TryFrom&amp;lt;{int}&amp;gt;&lt;/code&gt; for &lt;code&gt;NonZero{int}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/72445"&gt;Stabilize &lt;code&gt;#[track_caller]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/71756"&gt;add Windows system error codes that should map to &lt;code&gt;io::ErrorKind::TimedOut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/52000"&gt;Tracking issue for RFC 2344, "Allow &lt;code&gt;loop&lt;/code&gt; in constant evaluation"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/50264"&gt;Tracking issue for &lt;code&gt;Option::deref&lt;/code&gt;, &lt;code&gt;Result::deref&lt;/code&gt;, &lt;code&gt;Result::deref_ok&lt;/code&gt;, and &lt;code&gt;Result::deref_err&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2945"&gt;RFC: 'C unwind' ABI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wroclaw/events/271319037/"&gt;June 24. Wroclaw, PL - Remote - Rust Wroclaw Meetup #22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-edi/events/271129693/"&gt;June 25. Edinburgh, UK - Remote - Pirrigator - Growing Tomatoes Free From Memory Errors and Race Conditions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcjbhc/"&gt;June 25. Berlin, DE - Remote - Rust Hack and Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/271286846/"&gt;July 1. Johannesburg, ZA - Remote - Monthly Joburg Rust Chat!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/nppvrrybcjbnc/"&gt;June 30. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/dtqwprybckbcb/"&gt;July 1. Indianapolis, IN, US - Indy Rust - Indy.rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876691/"&gt;July 6. Auckland, NZ - Rust AKL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jewishinteractive.org/senior-developer/?utm_campaign=Available%20Jobs%20-%202020&amp;amp;utm_content=132060591&amp;amp;utm_medium=social&amp;amp;utm_source=twitter&amp;amp;hss_channel=tw-449734543"&gt;Senior Back-End Rust Developer at Jewish Interactive (Ji)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust's beauty lies in the countless decisions made by the development community that constantly make you feel like you can have ten cakes and eat all of them too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://blog.tonari.no/why-we-love-rust"&gt;Jake McGinty et al on the tonari blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/896"&gt;llogiq&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/hepkfq/this_week_in_rust_344/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 23 Jun 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-06-23:blog/2020/06/23/this-week-in-rust-344/</guid></item></channel></rss>