<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/categories/this-week-in-rust/rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 25 Feb 2020 00:00:00 -0500</lastBuildDate><item><title>This Week in Rust 327</title><link>https://this-week-in-rust.org/blog/2020/02/25/this-week-in-rust-327/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/blog/2020/working-with-strings-in-rust/"&gt;Working with strings in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kennykerr.ca/2020/02/22/rust-winrt-coming-soon/"&gt;Rust/WinRT coming soon&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html"&gt;Intro to rustc's self profiler&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/02/26/crates-io-incident-report.html"&gt;crates.io incident report for 2020-02-20&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/adobetech/filtering-duplicates-on-the-command-line-30x-faster-than-sort-uniq-96ca5f7b4277"&gt;Filtering duplicates on the command line: 30x faster than sort|uniq&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/blog/2020/whats-in-a-linux-executable/"&gt;Making our own executable packer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/line-simplification/"&gt;Line simplification with Ramer–Douglas–Peucker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/async-http/"&gt;Async HTTP&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@polyglot_factotum/further-thoughts-on-async-await-7767f924cb7e"&gt;Further thoughts on async/await&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.rs/dtolnay/0.0.8/dtolnay/macro._04__triage_scale.html"&gt;Triage at scale for the Rust team&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tech.olx.com/presenting-dali-an-image-processor-service-514e6be00de8"&gt;Presenting Dali, an image processor service&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.wnut.pw/2020/02/25/anouncing-async_executors-a-building-block-for-executor-agnostic-libraries/"&gt;Anouncing async_executors, a building block for executor agnostic libraries&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bodil.lol/vgtk/"&gt;Building TodoMVC With vgtk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sn99/wasm-template-rust"&gt;Host Rust+Wasm projects on github pages or other&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/programming-servo-implementing-broadcastchannel-94516289ecd4"&gt;Programming Servo: implementing BroadcastChannel&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fuchsia.googlesource.com/fuchsia/+/refs/heads/master/docs/project/policy/programming_languages.md"&gt;Fuchsia programming language policy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/02/24/changelog-13.html"&gt;rust-analyzer changelog 113&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crates are &lt;a href="https://crates.io/crates/wundergraph"&gt;wundergraph&lt;/a&gt;, a GraphQL interface library, and &lt;a href="https://github.com/ilai-deutel/kibi"&gt;kibi&lt;/a&gt;, a text editor in thousand lines of Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/732"&gt;Georg Semmler&lt;/a&gt; and &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/734"&gt;Vikrant&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[good first issue] &lt;a href="https://github.com/launchbadge/sqlx/issues/115"&gt;sqlx: Implement support for time-rs 0.2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;307 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-02-17..2020-02-24"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69244"&gt;configure: set LLVM flags with a value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69366"&gt;parse: unify item parsing &amp;amp; filter illegal item kinds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69361"&gt;parse: allow &lt;code&gt;type Foo: Ord&lt;/code&gt; syntactically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69194"&gt;parse: fuse associated and extern items up to defaultness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67272"&gt;&lt;code&gt;recursion_limit&lt;/code&gt; parsing handles overflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69302"&gt;fix generator miscompilations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69248"&gt;don't eliminate frame pointers on thumb targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69305"&gt;tweak binding lifetime suggestion text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68877"&gt;on mismatched argument count point at arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69217"&gt;do not emit note suggesting to implement operation trait to foreign type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69084"&gt;split non macro portion of &lt;code&gt;unused_doc_comment&lt;/code&gt; from macro part into two passes/lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69113"&gt;combine &lt;code&gt;HaveBeenBorrowedLocals&lt;/code&gt; and &lt;code&gt;IndirectlyMutableLocals&lt;/code&gt; into one dataflow analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69200"&gt;fix printing of &lt;code&gt;Yield&lt;/code&gt; terminator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69242"&gt;querify &lt;code&gt;object_safety_violations&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69181"&gt;change const eval to just return the value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68847"&gt;allow trait methods to be called on concrete types in a const context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69256"&gt;perf: miscellaneous inlining improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69072"&gt;perf: O(log n) lookup of associated items by name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68705"&gt;add &lt;code&gt;LinkedList::remove&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67925"&gt;change &lt;code&gt;FromStr&lt;/code&gt; for &lt;code&gt;String&lt;/code&gt; to use &lt;code&gt;Infallible&lt;/code&gt; directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68984"&gt;make &lt;code&gt;u8::is_ascii&lt;/code&gt; a stable &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68978"&gt;make integer exponentiation methods unstably const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68597"&gt;simplify &lt;code&gt;Skip::nth&lt;/code&gt; and &lt;code&gt;Skip::last&lt;/code&gt; implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68945"&gt;stabilize &lt;code&gt;Once::is_completed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69249"&gt;stabilize {&lt;code&gt;f32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;}::{&lt;code&gt;LOG2_10&lt;/code&gt;, &lt;code&gt;LOG10_2&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/git2-rs/pull/522"&gt;git2: add &lt;code&gt;Branch::get_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2085"&gt;futures: relax bounds for &lt;code&gt;FuturesUnordered&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2068"&gt;futures: add &lt;code&gt;StreamExt::flat_map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7820"&gt;cargo: add new feature resolver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7903"&gt;cargo: add an option to include crate versions to the generated docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7891"&gt;cargo: improvements to &lt;code&gt;StringList&lt;/code&gt; config handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4044"&gt;rustfmt: support formatting half open ranges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2834"&gt;Cargo report future-incompat&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68004"&gt;Permit negative impls for non-auto traits&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/69373"&gt;Stabilize const for integer {to,from}_{be,le,ne}_bytes methods&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="africa"&gt;Africa&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/268960482/"&gt;Mar  4. Johannesburg, ZA - Johannesburg Rust Meetup - Coffee and a chat about Rust&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Melbourne/events/268002615/"&gt;Mar  5. Melbourne, AU - Rust Melbourne - Hack Night, Talks, and Networking&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/237883717/"&gt;Mar  4. Dublin, IE - Rust Dublin - Reboot pub meetup: The Duke&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/gztznrybcfbgb/"&gt;Mar  4. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Oslo/events/268738879"&gt;Mar 11. Oslo, NO - Rust Oslo - Lightning talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Mozilla-Torino/events/268822794"&gt;Mar 12. Turin, IT - Mozilla Torino - Gruppo di studio Rust alla Torino hacknight&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/mffbtpybcfbgb/"&gt;Mar  4. Indianapolis, IN, US - Indy.rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/267834799/"&gt;Mar 10. Denver, CO, US - Rust Boulder/Denver - March Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/prbtdrybcfbnb/"&gt;Mar 10. Redmond, WA, US - Seattle Rust Meetup - Monthly meetup in Redmond&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybcfbpb/"&gt;Mar 11. Atlanta, GA, US - Rust Atlanta - Grab a beer with fellow Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/events/469382520642102"&gt;Mar 11. Houston, TX, US - Houston Linux Users Group - Rust Study Group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrybcfbqb/"&gt;Mar 12. Columbus, OH, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/268567961/"&gt;Mar 12. Lehi, UT, US - Utah Rust - The Blue Pill: Rust on Microcontrollers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybcfbxb/"&gt;Mar 18. Vancouver, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aleph-alpha.de/sw_engineer.html?language=de"&gt;Infrastructure Engineer at Aleph Alpha, Heidelberg, Germany&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angel.co/company/layertwo/jobs/687465-senior-backend-engineer"&gt;Backend Engineer, Rust at LayerTwo, London, UK&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angel.co/company/layertwo/jobs/702600-junior-full-stack-engineer"&gt;Junior Backend Engineer, Rust at LayerTwo, London, UK&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Yoda must have hit his head, though. &lt;code&gt;if let 42 = x {}&lt;/code&gt; "if let forty-two equals x"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://internals.rust-lang.org/t/using-if-let-to-check-for-equality/11750/19"&gt;Hutch on rust-internals&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/821"&gt;Kornel&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/fabtwg/this_week_in_rust_327/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 25 Feb 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-02-25:blog/2020/02/25/this-week-in-rust-327/</guid></item><item><title>This Week in Rust 326</title><link>https://this-week-in-rust.org/blog/2020/02/18/this-week-in-rust-326/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/sealed-rust-the-plan/"&gt;Sealed Rust update: The plan for safety critical Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/02/14/why-rust-is-loved.html"&gt;Why is Rust the most loved programming language&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://quietmisdreavus.net/self/2020/02/17/rust-ghost-signing-off/"&gt;Rust ghost, signing off&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/f4zldz/i_audited_3_different_implementation_of_async/"&gt;I audited 3 different implementation of async RwLock&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/f5xpib/psa_denywarnings_is_actively_harmful/"&gt;&lt;code&gt;deny(warnings)&lt;/code&gt; is actively harmful&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leshow.github.io/post/rust_for_java_devs/"&gt;Rust for Java devs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://typr124.github.io/UB1"&gt;Some nuances of undefined behavior in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/pragmatic-global-state/"&gt;A pragmatic approach to global state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://depth-first.com/articles/2020/02/17/graphs-in-rust-introducting-graphcore/"&gt;Graphs in Rust: Introducing GraphCore&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nrxus.github.io/faux/blog/how-it-works.html"&gt;faux - an inside look&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/02/17/changelog-12.html"&gt;rust-analyzer changelog 12&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/02/18/changelog-116.html"&gt;IntelliJ Rust changelog 116&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-006/"&gt;This month in Rust GameDev 6 - January 2020&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crates are &lt;a href="https://github.com/CAD97/pointer-utils"&gt;pointer-utils&lt;/a&gt;, a small library for working with pointers, and &lt;a href="https://github.com/Taaitaaiger/jlrs"&gt;jlrs&lt;/a&gt;, a crate to call &lt;a href="https://julialang.org"&gt;Julia&lt;/a&gt; from Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/729"&gt;Vikrant&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[puzzle] &lt;a href="https://rustbattle.net/battle/straight-finch-8-e4f4"&gt;The battle for Rust knowledge supremacy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;276 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-02-10..2020-02-17"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68824"&gt;enable Control Flow Guard in rustbuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69129"&gt;transition macro_legacy_warnings into a hard error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69023"&gt;parse: unify function front matter parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69128"&gt;fix extra subslice lowering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68938"&gt;fix lifetime shadowing check in GATs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68814"&gt;record proc macro harness order for use during metadata deserialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68816"&gt;tweak borrow error on &lt;code&gt;FnMut&lt;/code&gt; when &lt;code&gt;Fn&lt;/code&gt; is expected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69082"&gt;when expecting &lt;code&gt;BoxFuture&lt;/code&gt; and using &lt;code&gt;async {}&lt;/code&gt;, suggest &lt;code&gt;Box::pin&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69050"&gt;micro-optimize the heck out of LEB128 reading and writing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69022"&gt;traits: preallocate 2 Vecs of known initial size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69044"&gt;don't run coherence twice for future-compat lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68129"&gt;correct inference of primitive operand type behind binary operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67954"&gt;support new LLVM pass manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67885"&gt;rustc_session: allow overriding lint level of individual lints from a group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68241"&gt;migrate borrowck dataflow impls to new framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67681"&gt;infer regions for opaque types in borrowck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68475"&gt;use a &lt;code&gt;ParamEnvAnd&amp;lt;Predicate&amp;gt;&lt;/code&gt; for caching in &lt;code&gt;ObligationForest&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69027"&gt;add missing &lt;code&gt;_zeroed&lt;/code&gt; varants to &lt;code&gt;AllocRef&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68986"&gt;make ASCII ctype functions unstably const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68914"&gt;speed up &lt;code&gt;SipHasher128&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69126"&gt;miri: fix exact_div&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1158"&gt;miri: add shim for rename&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68781"&gt;BTree: lighten the load on Miri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68679"&gt;improve &lt;code&gt;ty.needs_drop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69058"&gt;preparation for allocator aware &lt;code&gt;Box&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68491"&gt;hide niches under &lt;code&gt;UnsafeCell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67642"&gt;relax bounds on &lt;code&gt;HashMap&lt;/code&gt;/&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67585"&gt;improve &lt;code&gt;char::is_ascii_*&lt;/code&gt; codegen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66721"&gt;implement &lt;code&gt;LowerExp&lt;/code&gt; and &lt;code&gt;UpperExp&lt;/code&gt; for integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/64069"&gt;add &lt;code&gt;From&amp;lt;Vec&amp;lt;NonZeroU8&amp;gt;&amp;gt;&lt;/code&gt; for &lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/69106"&gt;fix &lt;code&gt;std::fs::copy&lt;/code&gt; on WASI target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2074"&gt;futures: implement fast-path for already-completed shared futures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68668"&gt;rustdoc: struct variant field search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2857"&gt;RFC 2857: Rust 2020 roadmap&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68984"&gt;Make &lt;code&gt;u8::is_ascii&lt;/code&gt; a stable &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68952"&gt;Stabilize assoc_int_consts associated int/float constants&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/67637"&gt;Add primitive module to libcore&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/63568"&gt;Tracking issue for &lt;code&gt;#![feature(maybe_uninit_ref)]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2867"&gt;Add a new attribute, &lt;code&gt;#[isa]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Sydney/events/268525192/"&gt;Feb 24. Sydney, AU - Rust Sydney - Meetup 19&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Melbourne/events/268002615/"&gt;Mar  5. Melbourne, AU - Rust Melbourne - Hack Night, Talks, and Networking&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/268416708/"&gt;Feb 21. Stuttgart, DE - Rust Community Stuttgart - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-London-User-Group/events/268354799"&gt;Feb 25. London, GB - Rust LDN Talks @ TrueLayer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustgbg/events/268653522/"&gt;Feb 25. Göteborg, SE - Rust Gbg — "Beginner Friendly" February 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wroclaw/events/268683403"&gt;Feb 27. Wroclaw, PL - Rust Wrocław Meetup #17&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/gztznrybcfbgb/"&gt;Mar 4. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpybcdbgc/"&gt;Feb 24. Durham, NC, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmybcdbhc/"&gt;Feb 25. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/PDXRust/events/268266020/"&gt;Feb 26. Portland, OR, US - PDXRust - Hack Night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/events/469382520642102"&gt;Feb 26. Houston, TX, US - Houston Linux Users Group - Rust Study Group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Ann-Arbor-Rust-Meetup/events/zdfscrybcdbjc/"&gt;Feb 26. Ann Arbor, MI, US - Ann Arbor Rust Meetup - Monthly Gathering&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Desert-Rustaceans/events/268793593/"&gt;Feb 26. Mesa, AZ, US - Desert Rust - Rust: lightning talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybcfbpb/"&gt;Mar 11. Atlanta, GA, US - Rust Atlanta - Grab a beer with fellow Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/mffbtpybcfbgb/"&gt;Mar  4. Indianapolis, IN, US - Indy.rs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/redcanary/d7729b7d-e18d-4fe9-b3f5-fd5f8b947f22"&gt;Senior Software Engineer, Rust &amp;amp; Linux (Remote) at Red Canary, Denver, CO, US&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; is null in different clothes, but the clothes that nulls wear are important.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/how-would-you-do-that-in-rust-versus-java/38187/6"&gt;skysch on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/815"&gt;Cerberuser&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/f6sy2s/this_week_in_rust_326/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 18 Feb 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-02-18:blog/2020/02/18/this-week-in-rust-326/</guid></item><item><title>This Week in Rust 325</title><link>https://this-week-in-rust.org/blog/2020/02/11/this-week-in-rust-325/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/scaling-back-my-involvement-in-rust/11754"&gt;Alex Crichton: Scaling back my involvement in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/embedded-async-await/"&gt;Bringing async/await to embedded Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2020/02/06/Cleanup-Crew-ICE-breakers.html"&gt;Announcing the Cleanup Crew ICE-breaker group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/survey-01/"&gt;Results from Rust game development ecosystem survey&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linuxwit.ch/blog/2020/02/the-future-of-rusoto/"&gt;The &lt;code&gt;std::future::Future&lt;/code&gt; of Rusoto&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jason-williams.co.uk/debugging-rust-in-vscode"&gt;Debugging Rust in VSCode (in 2020)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://savanni.luminescent-dreams.com/2020/01/15/rust-react-gtk/"&gt;Rust and GTK from a React perspective&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://omarabid.com/async-rust"&gt;A primer to Rust Async&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/solving-sparse-matrix-systems-in-rust-5e978ed07bc3"&gt;Solving sparse matrix systems in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/markedit/"&gt;I made a thing: Markedit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/implementing-interactive-applications/"&gt;Creating interactive applications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2020/02/11/async-interview-6-eliza-weisman/"&gt;Async interview 6: Eliza Weisman&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/02/10/changelog-11.html"&gt;rust-analyzer changelog 11&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/google/argh"&gt;argh&lt;/a&gt;, a small opinionated argument parsing library for Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/718"&gt;Vikrant&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/image-rs/image/issues/1134"&gt;image: Tracking issue: Converting error representations&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/training-in-london/"&gt;Ferrous Systems and TrueLayer: Rust Training in London, March 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/issues/1657"&gt;libc crate is looking for maintainers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;261 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-02-03..2020-02-10"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68452"&gt;implement proper C ABI lowering for RISC-V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68376"&gt;initial implementation of &lt;code&gt;#![feature(move_ref_pattern)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68845"&gt;parser: stop using &lt;code&gt;BytePos&lt;/code&gt; for computing spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68919"&gt;remove &lt;code&gt;HashStable&lt;/code&gt; impl for &lt;code&gt;ast::Lifetime&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/65232"&gt;replace the leak check with universes, take 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68377"&gt;tweak obligation error output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67665"&gt;improve reporting errors and suggestions for trait bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67668"&gt;implement MIR lowering for or-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68790"&gt;improve &lt;code&gt;merge_from_succ&lt;/code&gt; perf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68694"&gt;reduce the number of &lt;code&gt;RefCell&lt;/code&gt;s in &lt;code&gt;InferCtxt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68966"&gt;improve performance of coherence checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68911"&gt;speed up the inherent impl overlap check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68524"&gt;generator resume arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68358"&gt;remove some unsound specializations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68835"&gt;remove problematic specialization from &lt;code&gt;RangeInclusive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68946"&gt;mark several functions and methods in &lt;code&gt;core::cmp&lt;/code&gt; as &lt;code&gt;#[must_use]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68742"&gt;implement &lt;code&gt;AsMut&amp;lt;str&amp;gt;&lt;/code&gt; for &lt;code&gt;String&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68834"&gt;fix and test implementation of &lt;code&gt;BTreeMap::&lt;/code&gt;{&lt;code&gt;first_entry&lt;/code&gt;, &lt;code&gt;last_entry&lt;/code&gt;, &lt;code&gt;pop_first&lt;/code&gt;, &lt;code&gt;pop_last&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68499"&gt;&lt;code&gt;BtreeMap::range_search&lt;/code&gt; spruced up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68976"&gt;make &lt;code&gt;num::NonZeroX::new&lt;/code&gt; an unstable const fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68809"&gt;make more arithmetic functions unstably const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68810"&gt;remove &lt;code&gt;Copy&lt;/code&gt; impl from &lt;code&gt;OnceWith&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68738"&gt;derive &lt;code&gt;Clone + Eq&lt;/code&gt; for &lt;code&gt;std::string::FromUtf8Error&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2058"&gt;futures: add &lt;code&gt;TryFutureExt::map_ok_or_else&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7857"&gt;cargo: fix &lt;code&gt;BuildScriptOutput&lt;/code&gt; when a build script is run multiple times&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2396"&gt;RFC 2396: target_feature 1.1&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2857"&gt;Rust 2020 roadmap&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/67637"&gt;Add primitive module to libcore&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/67885"&gt;rustc_session: allow overriding lint level of individual lints from a group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68700"&gt;Add Wake trait for safe construction of Wakers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68899"&gt;Add Display and Error impls for proc_macro::LexError&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68945"&gt;Stabilize Once::is_completed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/67028"&gt;Fix an inconsistency in Linux version of TcpListener::accept&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mad-rs/events/268597652"&gt;Feb 15. Chennai, IN - Rust Chennai - Monthly meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Seoul-Meetup/events/djkzlrybcdbxb/"&gt;Feb 18. Seoul, KR - Seoul Rust Meetup - Learning Rust #2 - Control flow and pattern matching&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Sydney/events/268525192/"&gt;Feb 24. Sydney, AU - Rust Sydney - Meetup 19&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/nxdpgrybcdbzb/"&gt;Feb 19. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Mozilla-Torino/events/268060855"&gt;Feb 20. Turin, IT - Mozilla Torino - Gruppo di studio Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/268416708/"&gt;Feb 21. Stuttgart, DE - Rust Community Stuttgart - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/prbtdrybcdbpb/"&gt;Feb 18. Redmond, WA, US - Seattle Rust Meetup - Monthly meetup in Redmond&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybcdbzb/"&gt;Feb 19. Vancouver, BC, CA - Vancouver Rust meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpybcdbgc/"&gt;Feb 24. Durham, NC, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmybcdbhc/"&gt;Feb 25. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/PDXRust/events/268266020/"&gt;Feb 26. Portland, OR, US - PDXRust - Hack Night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/events/469382520642102"&gt;Feb 26. Houston, TX, US - Houston Linux Users Group - Rust Study Group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Ann-Arbor-Rust-Meetup/events/zdfscrybcdbjc/"&gt;Feb 26. Ann Arbor, MI, US - Ann Arbor Rust Meetup - Monthly Gathering&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aleph-alpha.de/sw_engineer.html?language=de"&gt;Infrastructure Engineer at Aleph Alpha, Heidelberg, Germany&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/jobs/view/1689801033/"&gt;Senior Rust Developer at Luxoft, Wrocław, Poland&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.indeed.com/viewjob?cmp=Georg-Fischer-Signet&amp;amp;t=Associate+Software+Engineer&amp;amp;jk=279804b2f5c06e2b"&gt;Associate Embedded Software Engineer at Georg Fischer Signet, El Monte, CA, US&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;p&gt;This week we have two (related) quotes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Even with just basic optimization, Rust was able to outperform the hyper hand-tuned Go version.&lt;/strong&gt; This is a huge testament to how easy it is to write efficient programs with Rust compared to the deep dive we had to do with Go.&lt;/p&gt;
&lt;p&gt;[..] After a bit of profiling and performance optimizations, &lt;strong&gt;we were able to beat Go on every single performance metric&lt;/strong&gt; . Latency, CPU, and memory were all better in the Rust version.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://blog.discordapp.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f"&gt;Jesse Howard on the discord blog&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The consistency angle really shouldn’t be overlooked. Performance is nice, but slow and consistent can still be planned for much more easily than inconsistent.&lt;/p&gt;
&lt;p&gt;That was the big aha moment about Rust for me when I pushed out my first project using the language. Being nervous about it I had added way too much instrumentation so that I could know how every bit of it was responding to real traffic. But as soon as I started seeing the data, I was convinced that my instrumentation code was broken. The graphs I was seeing were just so...boring. Straight lines everywhere, no variation...after 24hrs, the slowest response (not P99...literally P100) was within 75ms of the fastest response.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/eytyug/why_discord_is_switching_from_go_to_rust/fgjjpiv/"&gt;/u/tablair commenting on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/811"&gt;Jules Kerssemakers&lt;/a&gt; and &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/809"&gt;Stephan Sokolow&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/f3a5hu/this_week_in_rust_325/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 11 Feb 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-02-11:blog/2020/02/11/this-week-in-rust-325/</guid></item><item><title>This Week in Rust 324</title><link>https://this-week-in-rust.org/blog/2020/02/04/this-week-in-rust-324/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;🎈🎉 &lt;a href="https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html"&gt;Announcing Rust 1.41.0&lt;/a&gt;. 🎉🎈&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.discordapp.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f"&gt;Why Discord is switching from Go to Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://os.phil-opp.com/status-update/2020-02-01/"&gt;Writing an OS in Rust: Updates in January 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jitter.company/blog/2020/01/28/measuring-space-time-behaviours-of-piano-keys-with-rust/"&gt;Measuring space-time behaviours of piano keys with Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stjepang.github.io/2020/01/31/build-your-own-executor.html"&gt;Build your own executor&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chacin.dev/blog/cross-compiling-rust-for-the-raspberry-pi/"&gt;Cross compiling Rust on Linux for the Raspberry Pi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/01/31/conf-lineup.html"&gt;The 2020 Rust event lineup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bastion.rs/2020/02/01/writing-aws-lambda-functions-with-bastion.html"&gt;Writing AWS Lambda functions with Bastion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/eymfxu/announcing_rustsearchextension_v07_search_std/"&gt;rust-search-extension: Search std docs, crates, error codes, and attributes in browser's address bar&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-embedded.github.io/blog/newsletter-23/"&gt;The Embedded WG newsletter 23&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/02/03/changelog-10.html"&gt;Rust Analyzer changelog 10&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/02/04/changelog-115.html"&gt;IntelliJ Rust changelog 115&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustinblockchain.org/2020/02/05/rib-newsletter-8-looking-forward-to-2020/"&gt;Rust in Blockchain newsletter 8: Looking forward to 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/async-rs/async-std/releases/tag/v1.5.0"&gt;Announcing async-std v1.5.0&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/http-rs/tide/releases/tag/v0.6.0"&gt;Announcing Tide 0.6.0&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/nrxus/faux"&gt;faux&lt;/a&gt;, a trait-less mocking library for Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/715"&gt;Vikrant&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyfisch/cbor/issues/179"&gt;serde_cbor crate is looking for maintainers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/diesel-rs/diesel/issues/1186"&gt;Diesel: Looking for persons willing to do some code review on submitted PRs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/time-rs/time/issues/203#issuecomment-581175875"&gt;time: Implement function returning the local UTC offset&lt;/a&gt;. Looking for a code review of linked gist.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;291 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-01-27..2020-02-03"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68572"&gt;detect use-after-scope bugs with AddressSanitizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68180"&gt;add support for Control Flow Guard on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68720"&gt;add support for enabling the LLVM time-trace feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68447"&gt;suggest defining type parameter when appropriate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68763"&gt;do not suggest duplicate bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68769"&gt;parser: avoid re-wrapping NtItem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68764"&gt;parser: syntactically allow &lt;code&gt;self&lt;/code&gt; in all &lt;code&gt;fn&lt;/code&gt; contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68571"&gt;check_match: extract common logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68407"&gt;rustc_span: return an &lt;code&gt;impl Iterator&lt;/code&gt; instead of a &lt;code&gt;Vec&lt;/code&gt; from &lt;code&gt;macro_backtrace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68460"&gt;use &lt;code&gt;BufWriter&lt;/code&gt; for emitting MIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67878"&gt;change opt-level from 2 back to 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67340"&gt;shrink &lt;code&gt;Nonterminal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68772"&gt;avoid exponential behaviour when relating types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68672"&gt;deduplicate types in the generator witness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68606"&gt;add an early-exit to &lt;code&gt;QueryNormalizer::fold_ty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68778"&gt;add &lt;code&gt;raw-addr-of&lt;/code&gt; variant to &lt;code&gt;mir_raw_fat_ptr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68787"&gt;optimize &lt;code&gt;core::ptr::align_offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68325"&gt;move numeric consts to associated consts (step 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66577"&gt;add &lt;code&gt;Iterator::map_while&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68378"&gt;add &lt;code&gt;BTreeMap::remove_entry&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68200"&gt;stabilize &lt;code&gt;debug_map_key_value&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68234"&gt;stabilize &lt;code&gt;ptr::slice_from_raw_parts&lt;/code&gt;(&lt;code&gt;_mut&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68800"&gt;stabilize &lt;code&gt;core::iter::once_with()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/1891"&gt;futures: allow async-await macros to be used without std&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7844"&gt;cargo: swap std::sync::mpsc channel with crossbeam_channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7823"&gt;cargo: stabilize config-profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No issues are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Rhein-Main/events/268145620/"&gt;Feb  7. Darmstadt, DE - Rust Rhein-Main - Rust Meetup – Show Your Project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Zurich/events/267790109/"&gt;Feb 11. Zurich, CH - Rust Zurich - From cargo to kubernetes and back-up - February Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-%D0%B2-%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B5/events/268190420/"&gt;Feb 12. Moscow, RU - Rust Moscow February 2019 Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/266865499/"&gt;Feb 13. Munich, DE - Rust Munich - Lightning~ish Talks - First Edition&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/nxdpgrybcdbzb/"&gt;Feb 19. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Mozilla-Torino/events/268060855"&gt;Feb 20. Turin, IT - Mozilla Torino - Gruppo di studio Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/268416708/"&gt;Feb 21. Stuttgart, DE - Rust Community Stuttgart - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/events/469382520642102"&gt;Feb 12. Houston, TX, US - Houston Linux Users Group - Rust Study Group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/PDXRust/events/267797263/"&gt;Feb 12. Portland, OR, US - PDXRust - WASM: Run Rust in the browser&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrybcdbrb/"&gt;Feb 13. Columbus, OH, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/268129845/"&gt;Feb 13. San Diego, CA, US - San Diego Rust February 2020 Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/268293591"&gt;Feb 13. Arlington, VA, US - Rust DC — Mid-month Rustful&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/prbtdrybcdbpb/"&gt;Feb 18. Redmond, WA, US - Seattle Rust Meetup - Monthly meetup in Redmond&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qnrgnrybcdbzb/"&gt;Feb 19. Vancouver, BC, CA - Vancouver Rust meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/eyw94s/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Official /r/rust "Who's Hiring" thread for job-seekers and job-offerers [Rust 1.41]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akamaijobs.referrals.selectminds.com/jobs/software-engineer-ii-12839"&gt;Software Engineer II at Akamai, Ottawa, CA&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4c864c8f-bde6-443d-b521-dd90df0e9105"&gt;Backend Engineer - Rust at Kraken, Remote&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://consensys.net/open-roles/1792013/"&gt;Systems Engineer (Rust) at Consensys, Remote&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;People argue about the color of a bike shed because even though it's a meaningless decision - it's still a decision that has to be made. The null choice is a very bad choice - if you don't paint the shed it'll rust. And there is no "default color" so you can't just say "just color it" - you have to pick a color.&lt;/p&gt;
&lt;p&gt;Even seen someone argue about the &lt;strong&gt;pattern&lt;/strong&gt; of the shed's paint? No. The pattern is not any more meaningful than the color, but unlike the color - there is a null choice. There is a default. Solid paint. And because there is a default, no one even thinks about using something else because why are you wasting company time and money on a pattern for a bike shed?&lt;/p&gt;
&lt;p&gt;From my personal experience, when there is a default and the default is good enough, nobody bikesheds how to derive from the default. They only discuss it when there is a concrete problem with the default, where is doesn't fit your needs for whatever reason. And when you do have a concrete reason to derive from the default - you will derive from the default. Because you have to. And if the library does not support it - you'll switch the library.&lt;/p&gt;
&lt;p&gt;Because you have to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/exbbes/argh_is_googles_opinionated_derivebased_argument/fgdxvt7"&gt;/u/someboddy on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/804"&gt;Stephan Sokolow&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ezqkbg/this_week_in_rust_324/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 04 Feb 2020 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2020-02-04:blog/2020/02/04/this-week-in-rust-324/</guid></item></channel></rss>