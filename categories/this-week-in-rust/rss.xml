<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>This Week in Rust - This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><lastBuildDate>Wed, 29 Nov 2023 00:00:00 -0500</lastBuildDate><item><title>This Week in Rust 523</title><link>https://this-week-in-rust.org/blog/2023/11/29/this-week-in-rust-523/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2023-11-27-announcing-axum-0-7-0"&gt;Announcing axum 0.7.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/developer/announcing-general-availability-of-the-aws-sdk-for-rust/"&gt;Announcing general availability of the AWS SDK for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BurntSushi/ripgrep/releases/tag/14.0.0"&gt;ripgrep 14.0.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2023/11/24/arcanization.html"&gt;Improved Multithreading in wgpu - Arcanization Lands on Trunk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=kale-lab.salt"&gt;Introducing SALT: A Rust error tutor, seeking participants in a study of errors!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bionic-gpt/bionic-gpt"&gt;Bionic GPT - Chat GPT replacement built in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dustinblackman.com/posts/why-does-everyone-install-crates-globally/"&gt;cargo-run-bin: Why does everyone install crates globally?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kdab.com/cxx-qt-0-6/"&gt;CXX-Qt: On the Road to Stability, improved signals support and more in release 0.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dustinblackman.com/posts/oatmeal/"&gt;Oatmeal: Terminal UI to chat with large language models (LLM) using different model backends, and integrations with your favourite editors!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2023/11/28/project-goals/"&gt;Project Goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/poll-next/"&gt;poll_next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=gRAVZv7V91Q"&gt;but what is 'a lifetime?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/cedric-sellmann/"&gt;Recruiting in Rust with Cedric Sellmann&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mcyoung.xyz/2023/11/27/simd-base64/"&gt;Designing a SIMD Algorithm from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2023/11/23/enums-in-rust"&gt;Why Enums in Rust feel so much better&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flinect.com/blog/quick-tips-rust-declarative-macros"&gt;How I Use Declarative Macros in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/embassy-on-esp-getting-started"&gt;Embassy on ESP: Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://edgarluque.com/blog/mlir-with-rust/"&gt;Intro to LLVM and MLIR with Rust and Melior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Yj2aANykEgM"&gt;Rust Course (Part 2) - YouTube&lt;/a&gt; (Bahasa Indonesia).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.adamchalmers.com/crazy-compile-time/"&gt;Investigating crazy compile times&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="research"&gt;&lt;a class="toclink" href="#research"&gt;Research&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2311.14452"&gt;Refinement Proofs in Rust Using Ghost Locks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ethz.ch/content/dam/ethz/special-interest/infk/inst-pls/plf-dam/documents/StudentProjects/MasterTheses/2023-Andy-Thesis.pdf"&gt;Semantic fuzzing of the Rust compiler and interpreter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/read-arbitrary-yaml"&gt;Read arbitrary YAML files in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://maahl.net/blog/rust-aws-lambda/"&gt;Create a Lambda in Rust using Terraform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://docs.rs/tokio-graceful"&gt;tokio-graceful&lt;/a&gt;, a library for graceful shutdown of tokio-based async servers.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1266"&gt;Glen De Cauwsemaecker&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;!-- CFPs go here, use this format: * [project name - title of issue](link to issue) --&gt;
&lt;!-- * [ - ]() --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2910"&gt;Hyperswitch - [REFACTOR]: [Nuvei] MCA metadata validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2904"&gt;Hyperswitch - [Features]: [Noon] Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2906"&gt;Hyperswitch - [Features]: [Payme] Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2899"&gt;Hyperswitch - [BUG]: MCA metadata deserialization failures should be 4xx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2910"&gt;Hyperswitch - [REFACTOR]: [Stripe] Error Message For Connector Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6707"&gt;Ockam - Library - Slim down the &lt;code&gt;NodeManagerWorker&lt;/code&gt; for &lt;code&gt;node / node status&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6706"&gt;Ockam - Command - refactor to use typed interfaces to implement commands for &lt;code&gt;kafka services&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6694"&gt;Ockam - Library - Validate CBOR structs according to the cddl schema for &lt;code&gt;nodes/models/transport&lt;/code&gt; and &lt;code&gt;nodes/models/workers&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/r3bl-org/r3bl-open-core/issues/200"&gt;r3bl-open-core - [tuify] API change the return type of &lt;code&gt;select_from_list()&lt;/code&gt; 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/r3bl-org/r3bl-open-core/issues/248"&gt;r3bl-open-core - Improve "Bug report" issue template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;405 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-11-20..2023-11-27"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118133"&gt;stabilize dyn upcasting coercion&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/3324-dyn-upcasting.html"&gt;#3324&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117978"&gt;add an experimental feature gate for function delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118013"&gt;enable Rust to use the EHCont security feature of Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118100"&gt;enable profiler in dist-powerpc64-linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118095"&gt;enable the Arm Cortex-A53 errata mitigation on aarch64-unknown-none&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118091"&gt;remove now deprecated target &lt;code&gt;x86_64-sun-solaris&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118243"&gt;&lt;code&gt;EvalCtxt::commit_if_ok&lt;/code&gt; don't inherit nested goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118089"&gt;&lt;code&gt;intercrate_ambiguity_causes&lt;/code&gt;: handle self ty infer + reservation impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118245"&gt;add &lt;code&gt;Span&lt;/code&gt; to &lt;code&gt;TraitBoundModifier&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110303"&gt;add &lt;code&gt;debug_assert_nounwind&lt;/code&gt; and convert &lt;code&gt;assert_unsafe_precondition&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/112380"&gt;add allow-by-default lint for unit bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118161"&gt;allow defining opaques in &lt;code&gt;check_coroutine_obligations&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117301"&gt;call &lt;code&gt;FileEncoder::finish&lt;/code&gt; in rmeta encoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117651"&gt;coverage: simplify building coverage expressions based on sums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118118"&gt;do not erase late bound regions when selecting inherent associated types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118112"&gt;don't ICE when ambiguity is found when selecting &lt;code&gt;Index&lt;/code&gt; implementation in typeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118290"&gt;don't ICE when encountering placeholders in implied bounds computation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118026"&gt;don't consider generic args of supertrait in &lt;code&gt;deref_into_dyn_supertrait&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117992"&gt;don't require intercrate mode for negative coherence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117584"&gt;eagerly compute &lt;code&gt;output_filenames&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118035"&gt;fix early param lifetimes in &lt;code&gt;generic_const_exprs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118138"&gt;fixes error count display is different when there's only one error left&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118131"&gt;improve tool-only help for multiple &lt;code&gt;#[default]&lt;/code&gt; variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118261"&gt;make PlaceholderReplacer &lt;code&gt;shallow_resolver&lt;/code&gt; and recur when infer vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117835"&gt;note about object lifetime defaults in does not live long enough error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118169"&gt;print query map for deadlock when using parallel front end&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118262"&gt;relate Inherent Associated Types using eq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117522"&gt;remove &lt;code&gt;--check-cfg&lt;/code&gt; checking of command line &lt;code&gt;--cfg&lt;/code&gt; args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118199"&gt;remove &lt;code&gt;HirId&lt;/code&gt; from &lt;code&gt;QPath::LangItem&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118271"&gt;separate &lt;code&gt;NaN&lt;/code&gt;/&lt;code&gt;Inf&lt;/code&gt; floats with &lt;code&gt;_&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118359"&gt;suggest swapping the order of &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;box&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118127"&gt;the unadjusted ABI needs to pass aggregates by-value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118142"&gt;tighten up link attributes for llvm-wrapper bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118010"&gt;typeck break expr even if break is illegal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118060"&gt;use an absolute path to the NUL device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118065"&gt;when failing to import &lt;code&gt;core&lt;/code&gt;, suggest &lt;code&gt;std&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117972"&gt;add &lt;code&gt;VarDebugInfo&lt;/code&gt; to Stable MIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118012"&gt;add support for global allocation in smir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118274"&gt;fix smir's &lt;code&gt;Ty::Ref&lt;/code&gt; pretty printing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118029"&gt;expand Miri's BorTag GC to a Provenance GC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118075"&gt;validate there are no critical call edges in optimized MIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118073"&gt;miri: GC the &lt;code&gt;dead_alloc_map&lt;/code&gt; too&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3180"&gt;miri: check that target features required by LLVM intrinsics are enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3185"&gt;miri: refactor &lt;code&gt;float_to_int_checked&lt;/code&gt; to remove its generic parameter and reduce code duplication a bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118189"&gt;cache flags for &lt;code&gt;ty::Const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118228"&gt;indicate that multiplication in &lt;code&gt;Layout::array&lt;/code&gt; cannot overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117611"&gt;rewrite exhaustiveness in one pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118267"&gt;&lt;code&gt;AmbiguityCause&lt;/code&gt; should not eagerly format strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118094"&gt;specialize &lt;code&gt;SpecFromElem&lt;/code&gt; for &lt;code&gt;()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117722"&gt;refactor &lt;code&gt;binary_search_by&lt;/code&gt; to use conditional moves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117968"&gt;stabilize &lt;code&gt;ptr::addr_eq&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/98943"&gt;add &lt;code&gt;BufRead::skip_until&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115159"&gt;kmc-solid: I/O safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117619"&gt;add &lt;code&gt;Duration::abs_diff&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117697"&gt;non null convenience ops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/480"&gt;hashbrown: specialize &lt;code&gt;fold&lt;/code&gt; implementation of iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_cranelift/pull/1431"&gt;cranelift: implement another batch of vendor intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13021"&gt;cargo: &lt;code&gt;refactor(toml)&lt;/code&gt;: Better abstract inheritance details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12995"&gt;cargo: exited with hard error when custom build file no existence or not in package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12996"&gt;cargo: add &lt;code&gt;CARGO_RUSTC_CURRENT_DIR&lt;/code&gt; (unstable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13050"&gt;cargo: use custom error instead of anyhow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13047"&gt;cargo: review and remove ignored tests in rustfix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13042"&gt;cargo: try running on windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116085"&gt;rustdoc-search: add support for traits and associated types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118251"&gt;rustdoc-search: avoid infinite where clause unbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118109"&gt;rustdoc-search: simplify &lt;code&gt;checkPath&lt;/code&gt; and &lt;code&gt;sortResults&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118224"&gt;rustdoc: sort unstable items last instead of first&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfix/pull/225"&gt;rustfix: add notice that rustfix has moved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11877"&gt;clippy: &lt;code&gt;TypeckResults::node_type()&lt;/code&gt; can be used inside of bodies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11850"&gt;clippy: &lt;code&gt;deprecated_semver&lt;/code&gt;: Allow &lt;code&gt;#[deprecated(since = "TBD")]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11879"&gt;clippy: &lt;code&gt;manual_try_fold&lt;/code&gt;: check that &lt;code&gt;fold&lt;/code&gt; is really &lt;code&gt;Iterator::fold&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11859"&gt;clippy: &lt;code&gt;missing_asserts_for_indexing&lt;/code&gt;: work with bodies instead of blocks separately&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11627"&gt;clippy: &lt;code&gt;needless_return_with_question_mark&lt;/code&gt;: don't lint if never type is used for coercion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11817"&gt;clippy: &lt;code&gt;ptr_arg&lt;/code&gt;: recognize methods that also exist on slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11842"&gt;clippy: add new &lt;code&gt;check_private_items&lt;/code&gt; config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11864"&gt;clippy: create new lint &lt;code&gt;option_map_or_err_ok&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11836"&gt;clippy: don't suggest &lt;code&gt;a.mul_add(b, c)&lt;/code&gt; if parameters are not float&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11845"&gt;clippy: extend &lt;code&gt;result_map_or_into_option&lt;/code&gt; lint to handle &lt;code&gt;Result::map_or_else(|_| None, Some)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11875"&gt;clippy: fix &lt;code&gt;box_default&lt;/code&gt; behaviour with empty &lt;code&gt;vec![]&lt;/code&gt; coming from macro arg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11757"&gt;clippy: fix &lt;code&gt;iter_kv_map&lt;/code&gt; false positive &lt;code&gt;into_keys&lt;/code&gt; and &lt;code&gt;into_values&lt;/code&gt; suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11860"&gt;clippy: improve error messages format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11844"&gt;clippy: remove underscore check for &lt;code&gt;manual_non_exhaustive&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11862"&gt;clippy: suggest alternatives to iterate an array of ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11870"&gt;clippy: use absolute path for &lt;code&gt;declare_tool_lint&lt;/code&gt; in &lt;code&gt;declare_clippy_lint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15894"&gt;rust-analyzer: cancelable initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15846"&gt;rust-analyzer: editor/code: add option to suppress internal error notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15940"&gt;rust-analyzer: ensure renames happen after edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15970"&gt;rust-analyzer: fix variant resolve for type alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15962"&gt;rust-analyzer: fix: add fallback for completion label details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15825"&gt;rust-analyzer: fix: better resolve assoc item with type bound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15754"&gt;rust-analyzer: fix: dedup duplicate crates with differing origins in CrateGraph construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15857"&gt;rust-analyzer: fix: remove parenthesis should ensure space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15956"&gt;rust-analyzer: improve completion label details display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15960"&gt;rust-analyzer: replace &lt;code&gt;option.map(cond) == Some(true)&lt;/code&gt; with &lt;code&gt;option.is_some_and(cond)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A good week, despite a few PRs that pnkfelix opted not to mark as triaged. In
particular, a broad set of primary benchmarks improved, due to improvements to
resolve (PR #118188) and a one-pass rewrite of exhaustiveness (PR #117611).&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=4f3da903a43f22ea33d2ca4435a24b42fc1f842a&amp;amp;end=df0295f07175acc7325ce3ca4152eb05752af1f2&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;4f3da903..df0295f0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 5 Improvements, 5 Mixed; 2 of them in rollups
84 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/20911b7f28a4b88d36ecd5b13414f26feac49d4d/triage/2023-11-28.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3531"&gt;Macro fragment specifiers edition policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117869"&gt;[rustdoc] Add highlighting for comments in items declaration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117088"&gt;generalize: handle occurs check failure in aliases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Unsafe Code Guideline RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3535"&gt;RFC: constants in patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3533"&gt;Add RFC combining Infra and Release teams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-11-29 - 2023-12-27 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-29 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296583091/"&gt;&lt;strong&gt;Atomics &amp;amp; Locks Book Club Final Chapter! (Chapter 10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/296833665/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Virtual (Dublin, IE) | &lt;a href="https://www.meetup.com/rust-dublin/"&gt;Rust Dublin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-dublin/events/296346693/"&gt;&lt;strong&gt;Automating expertise with cargo-semver-checks&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-01 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296583626/"&gt;&lt;strong&gt;Rust &amp;amp; C++ Christmas Game Jam Kick-Off!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-02 | Virtual (Kampala, UG) | &lt;a href="https://www.eventbrite.com/o/rust-circle-kampala-65249289033"&gt;Rust Circle Kampala&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.com/e/rust-circle-meetup-tickets-628763176587?aff=ebdssbdestsearch"&gt;&lt;strong&gt;Rust Circle Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-05 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/295679797/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-05 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/297021574/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-06 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/297172140"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-10 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296583652/"&gt;&lt;strong&gt;Rust &amp;amp; C++ Christmas Game Jam Finale&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | Virtual | &lt;a href="https://mainmatter.com"&gt;Mainmatter&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-telemetry-workshop.mainmatter.com"&gt;&lt;strong&gt;Workshop: Telemetry for Rust applications&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/297532862/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14| Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/296833674/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Virtual (Nuremberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/295679660/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-17 | Virtual (Tel Aviv, IL) | &lt;a href="https://www.meetup.com/code-mavens/"&gt;Code Mavens&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/297334993/"&gt;&lt;strong&gt;Don't panic! - Our journey to error handling in Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-18 | Virtual (Munich, DE) | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/296429053/"&gt;&lt;strong&gt;Rust Munich 2023 / 5 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/295679827/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-20 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/292763506/"&gt;&lt;strong&gt;Adventures in egui app dev&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-16 | Delhi, IN | &lt;a href="https://www.meetup.com/rustdelhi/"&gt;Rust Delhi&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdelhi/events/297652586/"&gt;&lt;strong&gt;Meetup #4&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-30 | Brussels, BE | &lt;a href="https://lambda-brussels.glitch.me/"&gt;Lambda Brussels&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lambda-brussels.glitch.me/"&gt;&lt;strong&gt;Lambda Brussels&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Copenhagen, DK | &lt;a href="https://www.meetup.com/copenhagen-rust-community/"&gt;Copenhagen Rust Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/copenhagen-rust-community/events/297405705/"&gt;&lt;strong&gt;Rust metup #42 sponsored by Nine A/S&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Vienna, AT | &lt;a href="https://www.meetup.com/rust-vienna/"&gt;Rust Vienna&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-vienna/events/297382145/"&gt;&lt;strong&gt;Rust Vienna Meetup - November&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Zurich, CH | &lt;a href="https://www.meetup.com/de-DE/rust-zurich/"&gt;Rust Zurich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-zurich/events/297312190/"&gt;&lt;strong&gt;November Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-06 | Cologne, DE | &lt;a href="https://www.meetup.com/rustcologne/events"&gt;Rust Cologne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustcologne/events/297100007/"&gt;&lt;strong&gt;December Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-07 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/296223513/"&gt;&lt;strong&gt;Rust and Talk at Danske Commodities&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-07 | Lille, FR | &lt;a href="https://www.meetup.com/meetup-group-zgphbyet/"&gt;Rust Lille&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/meetup-group-zgphbyet/events/297477578/"&gt;&lt;strong&gt;Rust Lille #5&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Augsburg, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/297025700/"&gt;&lt;strong&gt;Augsburg Rust Meetup #4&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-18 | Munich, DE + Virtual | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/296429053/"&gt;&lt;strong&gt;Rust Munich 2023 / 5 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Heidelberg, DE | &lt;a href="https://rheinneckar.events/@nix_rust"&gt;Nix Your Bugs &amp;amp; Rust Your Engines&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rheinneckar.events/events/298e520c-89ca-4754-96f8-e252b96b7a46"&gt;&lt;strong&gt;Nix Your Bugs &amp;amp; Rust Your Engines #1&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Leipzig, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/295504276/"&gt;&lt;strong&gt;Tauri, an Electron-alternative&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-29 | Chicago, IL, US | &lt;a href="https://www.meetup.com/deep-dish-rust/"&gt;Deep Dish Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/deep-dish-rust/events/296657831/"&gt;&lt;strong&gt;Rust Hack Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/mv-rust-meetup/"&gt;Mountain View Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mv-rust-meetup/events/297628043/"&gt;&lt;strong&gt;Rust Meetup at Hacker Dojo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-07 | Seattle, WA, US | &lt;a href="https://www.meetup.com/seattle-rust-user-group/"&gt;Seattle Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seattle-rust-user-group/events/297533440/"&gt;&lt;strong&gt;Seattle Rust User Group Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | Seattle, WA, US | &lt;a href="https://www.meetup.com/cap-hill-rust/"&gt;Cap Hill Rust Coding/Hacking/Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/cap-hill-rust/events/296564619/"&gt;&lt;strong&gt;Rusty Coding/Hacking/Learning Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | New York, NY, US | &lt;a href="https://www.meetup.com/rust-nyc/"&gt;Rust NYC&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-nyc/events/297659937/"&gt;&lt;strong&gt;Rust NYC Monthly Mixer: Share, Show, &amp;amp; Tell! 🦀&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/vwljctyfcqbzb/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-28 | Canberra, ACT, AU | &lt;a href="https://www.meetup.com/rust-canberra/"&gt;Rust Canberra&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-canberra/events/296391733/"&gt;&lt;strong&gt;November Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-05 | Aukland, NZ | &lt;a href="https://www.meetup.com/rust-akl/"&gt;Rust AKL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/297271684/"&gt;&lt;strong&gt;Rust AKL: Advanced Async Tricks + Interruptible Software&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-11 | Perth, WA, AU | &lt;a href="https://www.meetup.com/perth-rust-meetup-group/"&gt;Rust Perth Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/perth-rust-meetup-group/events/297191089/"&gt;&lt;strong&gt;Rust End of Year Event&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/182f6dv/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I'd like to report that Rust's compile times were OK today and yesterday and the day before.&lt;/p&gt;
&lt;p&gt;I'll keep you posted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/is-rust-compile-time-really-that-slow/102863/15"&gt;ZiCog about slow Rust compile times on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1491"&gt;Michael Bryan&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="REDDIT_LINK_HERE"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 29 Nov 2023 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2023-11-29:/blog/2023/11/29/this-week-in-rust-523/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 522</title><link>https://this-week-in-rust.org/blog/2023/11/22/this-week-in-rust-522/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2023/11/16/Rust-1.74.0.html"&gt;Announcing Rust 1.74.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://seanmonstar.com/blog/hyper-v1/"&gt;hyper v1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rocket.rs/v0.5/news/2023-11-17-version-0.5/"&gt;Rocket v0.5: Stable, Async, Sentinels, Streams, SSE, Forms, WebSockets, &amp;amp; So Much More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gluesql/gluesql/releases/tag/v0.15.0"&gt;GlueSQL v0.15 - Python, Redis and CSV support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.meilisearch.com/meilisearch-1-5/"&gt;Meilisearch releases v1.5 - faster indexing, on-demand snapshots, and Puffin reports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/greyblake/nutype/releases/tag/v0.4.0"&gt;Nutype v0.4.0 - newtype with constraints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/x11tBhokFNc"&gt;Announcing open-ai-safe: a typesafe OpenAI API Rust client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://andreabergia.com/blog/2023/11/a-jvm-in-rust-part-8-retrospective/"&gt;A JVM in Rust part 8 - Retrospective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MOzuShpnUm8"&gt;Rust 1.74.0: All 45 changes in 19 minutes!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.blotato.com/fun-with-lexical-analysis-rust/"&gt;Fun with lexical analysis and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bytecodealliance.org/articles/wasmtime-and-cranelift-in-2023"&gt;Wasmtime and Cranelift in 2023&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.adamchalmers.com/signals-vs-servers/"&gt;Signals vs. Servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yossarian.net/2023/11/19/Function-interposition-in-Rust-with-upgrayedd"&gt;Function interposition in Rust with upgrayedd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://morestina.net/blog/1976/a-close-encounter-with-false-sharing"&gt;A close encounter with false sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/edge-iot-with-rust-on-esp-mqtt-publisher"&gt;Edge IoT with Rust on ESP: MQTT Publisher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://predr.ag/blog/checking-semver-for-doc-hidden-items/"&gt;Checking semver in the presence of doc(hidden) items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2023/11/15/push-ifs-up-and-fors-down.html"&gt;Push Ifs Up And Fors Down&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arindas.github.io/blog/segmented-log-rust/"&gt;Building Segmented Logs in Rust: From Theory to Production!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sea-ql.org/blog/2023-11-22-async-runtime-generic/"&gt;Writing an async runtime generic library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stadiamaps.com/news/ferrostar-building-a-cross-platform-navigation-sdk-in-rust-part-1/"&gt;Ferrostar: Building a Cross-Platform Navigation SDK in Rust (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aandreba.com/article/this-is-how-i-made-the-runtime-this-website-runs-on"&gt;This is how I made the runtime this website runs on!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=LUcI6KkM-PE"&gt;Tokenizing and parsing a programming language in Rust, by Adam Chalmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rocket.rs/v0.5/news/2023-11-17-rwf2-prelaunch/"&gt;Building a Better Foundation for Rocket's Future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/gabor-szabo/"&gt;Rust Digger with Gabor Szabo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=r0srf3kfZbs"&gt;Making the (partial) Rust BitTorrent client more reasonable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Ciuhriopc00"&gt;Rust Release Train 1.74&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/playlist?list=PLH6-VpZ3SvUUKFSEPEWiHQi4JqebBj9Tq"&gt;EuroRust 2023&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://rocket.rs"&gt;rocket&lt;/a&gt;, an opinionated web framework that aims to be really ergonomic while still being fast.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1265"&gt;David Mason&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2913"&gt; Hyperswitch - [REFACTOR]: [Zen] MCA metadata validation &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2939"&gt; Hyperswitch - [FEATURE] Standardize state field in billing and shipping address &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2899"&gt; Hyperswitch - [BUG]: MCA metadata deserialization failures should be 4xx &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2905"&gt; Hyperswitch - [Feature]: [NMI] Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2908"&gt; Hyperswitch - [Feature]: [Zen] Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/5491"&gt;Ockam - &lt;code&gt;Cargo.toml&lt;/code&gt; feature management should allow building individual crates with default feature set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/5897"&gt;Ockam - Improve error handling of multiple &lt;code&gt;ockam tcp-outlet create&lt;/code&gt; calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6708"&gt;Ockam - Library - Slim down the &lt;code&gt;NodeManagerWorker&lt;/code&gt; for &lt;code&gt;node / tcp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6709"&gt;Ockam - Library - Slim down the &lt;code&gt;NodeManagerWorker&lt;/code&gt; for &lt;code&gt;node / credentials&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6699"&gt;Ockam - Command - refactor to use typed interfaces to implement commands for &lt;code&gt;secure channel&lt;/code&gt; and &lt;code&gt;secure channel listener&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;369 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-11-13..2023-11-20"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115526"&gt;add arm64e-apple-ios &amp;amp; arm64e-apple-darwin targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117338"&gt;remove asmjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116555"&gt;add -Z &lt;code&gt;llvm_module_flag&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117517"&gt;add richer structure for Stable MIR Projections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117895"&gt;adjust frame IP in backtraces relative to image base for SGX target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117856"&gt;always point at index span on index obligation failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117828"&gt;avoid iterating over hashmaps in astconv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117686"&gt;build pre-coroutine-transform coroutine body on error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117500"&gt;ensure sanity of all computed ABIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117783"&gt;fix insertion of statements to be executed along return edge in inlining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117988"&gt;handle attempts to have multiple &lt;code&gt;cfg&lt;/code&gt;d tail expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117994"&gt;ignore but do not assume region obligations from unifying headers in negative coherence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/112422"&gt;ignore implied bounds with placeholders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118054"&gt;lint pinned &lt;code&gt;#[must_use]&lt;/code&gt; pointers (in particular, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;#[must_use]&lt;/code&gt;) in &lt;code&gt;unused_must_use&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117849"&gt;make &lt;code&gt;LayoutError::Cycle&lt;/code&gt; carry &lt;code&gt;ErrorGuaranteed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118000"&gt;make regionck care about placeholders in outlives components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/114292"&gt;more detail when expecting expression but encountering bad macro argument&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117278"&gt;new solver normalization improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117807"&gt;patterns: don't ICE when encountering a raw str slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117891"&gt;recover &lt;code&gt;dyn&lt;/code&gt; and &lt;code&gt;impl&lt;/code&gt; after &lt;code&gt;for&amp;lt;...&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117801"&gt;remove incorrect transformation from RemoveZsts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117364"&gt;remove legacy bitcode defaults from all Apple specs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117959"&gt;better handle type errors involving &lt;code&gt;Self&lt;/code&gt; literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117742"&gt;add some additional warnings for duplicated diagnostic items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117893"&gt;suggest dereferencing the LHS for binops such as &lt;code&gt;&amp;amp;T == T&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117998"&gt;on resolve error of &lt;code&gt;[rest..]&lt;/code&gt;, suggest &lt;code&gt;[rest @ ..]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116097"&gt;try to use approximate placeholder regions when outputting an AscribeUserType error in borrowck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117924"&gt;when a local binding shadows a fn, point at fn def in call failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117683"&gt;when encountering &lt;code&gt;struct&lt;/code&gt; fn call literal with private fields, suggest all builders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117964"&gt;when using existing fn as module, don't claim it doesn't exist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117832"&gt;interpret: simplify handling of shifts by no longer trying to handle signed and unsigned shift amounts in the same branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117330"&gt;custom MIR: Support cleanup blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117745"&gt;emit smir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117787"&gt;add CoroutineWitness to covered types in smir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3175"&gt;miri: cargo-miri: when verbose, print where the sysroot is being built&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3168"&gt;miri: get rid of our last uses of &lt;code&gt;set_var&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3176"&gt;miri: implement all 16 AVX compare operators for 128-bit SIMD vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3166"&gt;miri: reallocarray shim linux/freebsd support proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117825"&gt;reenable effects in libcore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117957"&gt;if available use a Child's pidfd for kill/wait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116301"&gt;fix rounding issue with exponents in &lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116750"&gt;add &lt;code&gt;Seek::seek_relative&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115249"&gt;impl more traits for &lt;code&gt;ptr::Alignment,&lt;/code&gt; add mask method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111922"&gt;feat: implement &lt;code&gt;DoubleEndedSearcher&lt;/code&gt; for &lt;code&gt;CharArray[Ref]Searcher&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/481"&gt;hashbrown: avoid using unstable &lt;code&gt;ptr::invalid_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2801"&gt;futures: fillBuf: don't poll a second time on EOF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2800"&gt;futures: remove redundant &lt;code&gt;impl Unpin&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12985"&gt;cargo-credential-1password: add missing &lt;code&gt;--account&lt;/code&gt; argument to &lt;code&gt;op signin&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12992"&gt;cargo: add color output for &lt;code&gt;cargo --list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12975"&gt;cargo resolver: Don't do git fetches when updating workspace members&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12950"&gt;cargo resolver: Prefer MSRV, rather than ignore incompatible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13011"&gt;cargo: fix &lt;code&gt;--check-cfg&lt;/code&gt; invocations with zero features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12973"&gt;cargo: fix error message for duplicate links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13016"&gt;cargo: handle &lt;code&gt;$message_type&lt;/code&gt; in JSON diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12977"&gt;cargo: if the only path is a loop then counted as the shortest path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12972"&gt;cargo: ignore &lt;code&gt;changing_spec_relearns_crate_types&lt;/code&gt; on windows-gnu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12944"&gt;cargo: only filter out target if its in the package root&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118051"&gt;remove unneeded &lt;code&gt;unknown&lt;/code&gt; variable and &lt;code&gt;Symbol&lt;/code&gt; creation when iterating over items in rustdoc rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118024"&gt;rustdoc-search: optimize unifyFunctionTypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117955"&gt;rustdoc-search: simplify the checkTypes fast path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfix/pull/224"&gt;rustfix: fix insert at beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11804"&gt;clippy: &lt;code&gt;impl_trait_in_params&lt;/code&gt;: avoid ICE when function with &lt;code&gt;impl Trait&lt;/code&gt; type has no parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11802"&gt;clippy: &lt;code&gt;needless_return_with_question_mark&lt;/code&gt; ignore let-else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11809"&gt;clippy: change &lt;code&gt;if_same_then_else&lt;/code&gt; to be a &lt;code&gt;style&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11821"&gt;clippy: extend &lt;code&gt;maybe_misused_cfg&lt;/code&gt; lint over &lt;code&gt;cfg(test)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11778"&gt;clippy: &lt;code&gt;manual_memcpy&lt;/code&gt; reduce indexing suggestions when array length is equal to loop range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11791"&gt;clippy: implement new lint &lt;code&gt;iter_over_hash_type&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11840"&gt;clippy: improve maybe misused cfg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11691"&gt;clippy: lint &lt;code&gt;flatten()&lt;/code&gt; under &lt;code&gt;lines_filter_map_ok&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11453"&gt;clippy: new lint &lt;code&gt;clippy::join_absolute_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11002"&gt;clippy: teach &lt;code&gt;eager_or_lazy&lt;/code&gt; about panicky arithmetic operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11781"&gt;clippy: verify &lt;code&gt;Borrow&amp;lt;T&amp;gt;&lt;/code&gt; semantics for types that implement Hash, &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt; and &lt;code&gt;Borrow&amp;lt;[u8]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15893"&gt;rust-analyzer: diagnose incorrect unsafety for trait impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15895"&gt;rust-analyzer: diagnose missing assoc items in trait impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15891"&gt;rust-analyzer: diagnose some orphan trait impl cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15875"&gt;rust-analyzer: fix &lt;code&gt;PathSegment&lt;/code&gt; grammar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15903"&gt;rust-analyzer: fix builtin line! expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15901"&gt;rust-analyzer: diagnose everything in nested items, not just def diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15911"&gt;rust-analyzer: handle default constant values in &lt;code&gt;trait_impl_missing_assoc_item&lt;/code&gt; diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pretty quiet week, with only a small number of statistically significant changes landing.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=173b6e686b158dbad7d072c64bef3ced2052312b&amp;amp;end=4f3da903a43f22ea33d2ca4435a24b42fc1f842a&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;173b6e68..4f3da90&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 1 Improvements, 1 Mixed; 0 of them in rollups
60 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2023-11-21.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3516"&gt;RFC: Superseding public/private dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/114764"&gt;[style edition 2024] Combine all delimited exprs as last argument&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/116324"&gt;Tracking Issue for &lt;code&gt;ptr::addr_eq&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117472"&gt;Stabilize C string literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/96469"&gt;Tracking Issue for mutex_unpoison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Unsafe Code Guideline RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3531"&gt;Macro fragment specifiers edition policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3530"&gt;eRFC: Implement function delegation in rustc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-11-22 - 2023-12-20 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-23 | Virtual (Edmonton, AB, CA) | &lt;a href="https://www.meetup.com/edmonton-r-user-group-yegrug/"&gt;Edmonton R User Group - Yegrug&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/edmonton-r-user-group-yegrug/events/296605221/"&gt;&lt;strong&gt;Edmonton R User Group Meetup: R and Rust, like a match made in heaven&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-28 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/mvdtgtyfcpblc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-28 | Virtual (Europe / Africa) | &lt;a href="https://lunch.rs/"&gt;Rust for Lunch&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lunch.rs/meetups/2023-11-28/"&gt;&lt;strong&gt;Rust Meet-up&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-29 | Virtual (Cardiff, UK)| &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296583091/"&gt;&lt;strong&gt;Atomics &amp;amp; Locks Book Club Final Chapter! (Chapter 10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/296833665/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Virtual (Dublin, IE) | &lt;a href="https://www.meetup.com/rust-dublin/"&gt;Rust Dublin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-dublin/events/296346693/"&gt;&lt;strong&gt;Automating expertise with cargo-semver-checks&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-01 | Virtual (Cardiff, UK)| &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296583626/"&gt;&lt;strong&gt;Rust &amp;amp; C++ Christmas Game Jam Kick-Off!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-02 | Virtual (Kampala, UG) | &lt;a href="https://www.eventbrite.com/o/rust-circle-kampala-65249289033"&gt;Rust Circle Kampala&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.com/e/rust-circle-meetup-tickets-628763176587?aff=ebdssbdestsearch"&gt;&lt;strong&gt;Rust Circle Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-05 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/295679797/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-05 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/297021574/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-06 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/297172140"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | Virtual | &lt;a href="https://mainmatter.com"&gt;Mainmatter&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-telemetry-workshop.mainmatter.com"&gt;&lt;strong&gt;Workshop: Telemetry for Rust applications&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/fvdtgtyfcqbqb/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Virtual (Nuremberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/295679660/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-18 | Virtual (Munich, DE) | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/296429053/"&gt;&lt;strong&gt;Rust Munich 2023 / 5 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-20 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/292763506/"&gt;&lt;strong&gt;Rust Study/Hack/Hang-out&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-23 | Biel/Bienne, CH | &lt;a href="https://www.meetup.com/rust-bern/"&gt;Rust Bern&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-bern/events/296556498/"&gt;&lt;strong&gt;Rust Talks Bern @ Biel: Embedded Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-28 | London, UK | &lt;a href="https://www.meetup.com/rust-london-user-group/"&gt;Rust London User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-london-user-group/events/297257712/"&gt;&lt;strong&gt;LDN Talks November 2023 with Helsing.ai&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Brussels, BE | &lt;a href="https://www.meetup.com/fr-FR/belgium-rust-user-group/events/297538601/"&gt;Belgium Rust user group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lambda-brussels.glitch.me/"&gt;&lt;strong&gt;Lambda Brussels&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Copenhagen, DK | &lt;a href="https://www.meetup.com/copenhagen-rust-community/"&gt;Copenhagen Rust Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/copenhagen-rust-community/events/297405705/"&gt;&lt;strong&gt;Rust metup #42 sponsored by Nine A/S&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Vienna, AT | &lt;a href="https://www.meetup.com/rust-vienna/"&gt;Rust Vienna&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-vienna/events/297382145/"&gt;&lt;strong&gt;Rust Vienna Meetup - November&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Zurich, CH| &lt;a href="https://www.meetup.com/de-DE/rust-zurich/"&gt;Rust Zurich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-zurich/events/297312190/"&gt;&lt;strong&gt;November Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-06 | Cologne, DE | &lt;a href="https://www.meetup.com/rustcologne/events"&gt;Rust Cologne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustcologne/events/297100007/"&gt;&lt;strong&gt;December Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-07 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/296223513/"&gt;&lt;strong&gt;Rust and Talk at Danske Commodities&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-07 | Lille, FR | &lt;a href="https://www.meetup.com/meetup-group-zgphbyet/"&gt;Rust Lille&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/meetup-group-zgphbyet/events/297477578/"&gt;&lt;strong&gt;Rust Lille #5&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Augsburg, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/297025700/"&gt;&lt;strong&gt;Augsburg Rust Meetup #4&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-18 | Munich, DE + Virtual | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/296429053/"&gt;&lt;strong&gt;Rust Munich 2023 / 5 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Leipzig, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/295504276/"&gt;&lt;strong&gt;Tauri, an Electron-alternative&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-22 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/xvkdgtyfcpbdc/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-28 | Pasadena, CA, US | &lt;a href="https://www.meetup.com/thursday-go/"&gt;Pasadena Thursday Go / Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/thursday-go/events/297062186/"&gt;&lt;strong&gt;Monthly Rust group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-29 | Chicago, IL, US | &lt;a href="https://www.meetup.com/deep-dish-rust/"&gt;Deep Dish Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/deep-dish-rust/events/296657831/"&gt;&lt;strong&gt;Rust Hack Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | Seattle, WA, US | &lt;a href="https://www.meetup.com/cap-hill-rust/"&gt;Cap Hill Rust Coding/Hacking/Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/cap-hill-rust/events/296564619/"&gt;&lt;strong&gt;Rusty Coding/Hacking/Learning Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/vwljctyfcqbzb/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-28 | Canberra, ACT, AU | &lt;a href="https://www.meetup.com/rust-canberra/"&gt;Rust Canberra&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-canberra/events/296391733/"&gt;&lt;strong&gt;November Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-05 | Aukland, NZ | &lt;a href="https://www.meetup.com/rust-akl/"&gt;Rust AKL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/297271684/"&gt;&lt;strong&gt;Rust AKL: Advanced Async Tricks + Interruptible Software&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-11 | Perth, WA, AU | &lt;a href="https://www.meetup.com/perth-rust-meetup-group/"&gt;Rust Perth Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/perth-rust-meetup-group/events/297191089/"&gt;&lt;strong&gt;Rust End of Year Event&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/163w6fl/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;If you require it, measure it. That's the simple answer. Everything else is guesswork.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/rusts-forcing-of-using-pointers-when-writing-a-variable-printing-it/102627/12"&gt;Johannes Lade on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1489"&gt;Michael Bryan&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/181s96q/this_week_in_rust_522/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 22 Nov 2023 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2023-11-22:/blog/2023/11/22/this-week-in-rust-522/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 521</title><link>https://this-week-in-rust.org/blog/2023/11/15/this-week-in-rust-521/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2023/11/09/parallel-rustc.html"&gt;Faster compilation with the parallel front-end in nightly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2023/11/13/leadership-council-update.html"&gt;November 2023 Leadership Council Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2023/11/15/spec-vision.html"&gt;Our Vision for the Rust Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="foundation"&gt;&lt;a class="toclink" href="#foundation"&gt;Foundation&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/the-rust-foundation-to-develop-training-and-certification-program/"&gt;The Rust Foundation to Develop Training and Certification Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://slint.dev/blog/slint-1.3-released"&gt;Slint 1.3 Released with Revamped Native Styles and JavaScript API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.antoyo.xyz/rustc_codegen_gcc-progress-report-27"&gt;rustc_codegen_gcc: Progress Report #27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2023/11/13/changelog-207.html"&gt;rust-analyzer changelog #207&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crates.io/crates/breadcrumbs"&gt;breadcrumbs 0.1.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://corrode.dev/why-rust/"&gt;Why Rust in Production?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.yieldcode.blog/post/building-a-webapp-in-rust/"&gt;Building a Web App in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thomask.sdf.org/blog/2023/11/14/rust-without-crates-io.html"&gt;Rust without crates.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://benw.is/posts/how-i-improved-my-rust-compile-times-by-seventy-five-percent"&gt;How I Improved My Rust Compile Times by 75%&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/iterator-as-an-alias/"&gt;Iterator as an Alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/what-is-a-team/"&gt;What is a team?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2023/11/15/ssg-in-rust"&gt;Building and Deploying A Static Site Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hellocode.co/blog/post/tracking-active-process-windows-rust/"&gt;Tracking the current active process in Windows with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/edge-iot-with-rust-on-esp-mqtt-subscriber"&gt;Edge IoT with Rust on ESP: MQTT Subscriber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@adefemiadeoye/building-a-central-authentication-server-with-rust-postgresql-kafka-and-grpc-f1b44de099ea"&gt;Building a Central Authentication Server with Rust, PostgreSQL, Kafka and gRPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://barretts.club/posts/i-got-a-milkv-duo/"&gt;I Got a Milk-V Duo (and It’s Running Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=h288gZTjJOM"&gt;An Introduction to Veilid, by Christien Rioux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=pnFS0YIKUJ8"&gt;Code in Rust with RustRover, by Vitaly Bragilevsky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=pyeUkQg8z9A"&gt;Create a Dummy GitHub CLI in Rust!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[audio] &lt;a href="https://ieni.dev/2023/11/%EF%B8%8F-corrode.dev-and-lychee-with-matthias-endler-rustship-5/"&gt;RustShip: Corrode.dev and lychee with Matthias Endler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/foresterre/cargo-msrv"&gt;cargo-msrv&lt;/a&gt;, a cargo subcommand to find out the Minimum Supported Rust Version (MSRV) of your crate.&lt;/p&gt;
&lt;p&gt;llogiq is a bit worried about not having received suggestions for two weeks in a row, but still offers you his choice.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;!-- CFPs go here, use this format: * [project name - title of issue](link to issue) --&gt;
&lt;!-- * [ - ]() --&gt;

&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;364 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-11-06..2023-11-13"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117723"&gt;speed up &lt;code&gt;x clean&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117675"&gt;llvm-wrapper: remove include of non-existant Vectorize.h&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/114224"&gt;&lt;code&gt;rustc_llvm&lt;/code&gt;: Link to libkstat on Solaris/SPARC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117650"&gt;add -Zcross-crate-inline-threshold=yes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115694"&gt;add &lt;code&gt;std::hash::{DefaultHasher, RandomState}&lt;/code&gt; exports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116881"&gt;add a new &lt;code&gt;download-ci-llvm = if-unchanged&lt;/code&gt; option and enable it by default for &lt;code&gt;profile = codegen&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117122"&gt;allow configuring the parent GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117418"&gt;build a better MIR body when errors are encountered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117858"&gt;compute layout with spans for better cycle errors in coroutines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117560"&gt;compute polonius loan scopes over the region graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117827"&gt;coverage: avoid creating malformed macro name spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117700"&gt;coverage: rename the &lt;code&gt;run-coverage&lt;/code&gt; test mode to &lt;code&gt;coverage-run&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117817"&gt;deny more &lt;code&gt;~const&lt;/code&gt; trait bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117645"&gt;extend builtin/auto trait args with error when they have &gt;1 argument&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115485"&gt;format macro const literals with pretty printer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117712"&gt;generator layout: ignore fake borrows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117297"&gt;give a better diagnostic for missing parens in Fn* bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117263"&gt;handle the case when the change-id isn't found&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/113925"&gt;improve diagnostic for const ctors in array repeat expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117557"&gt;make &lt;code&gt;FatalErrorMarker&lt;/code&gt; lower priority than other panics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115229"&gt;on method chain expression failure, look for missing method in earlier segments of the chain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117610"&gt;only instantiate binder during dyn's built-in trait candidate probe once&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117542"&gt;only use &lt;code&gt;normalize_param_env&lt;/code&gt; when normalizing predicate in &lt;code&gt;check_item_bounds&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116930"&gt;patterns: reject raw pointers that are not just integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117282"&gt;recover from incorrectly ordered/duplicated function keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117695"&gt;reorder checks to make sure potential missing expect on Option/Result…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117724"&gt;restore rustc shim error message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117770"&gt;catch stray &lt;code&gt;{&lt;/code&gt; in let-chains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117743"&gt;suggest removing &lt;code&gt;;&lt;/code&gt; for &lt;code&gt;;&lt;/code&gt; within let-chains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117229"&gt;thir unsafeck fixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117616"&gt;warn when using an unstable feature with -Ctarget-feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117006"&gt;when not finding assoc fn on type, look for builder fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3155"&gt;miri: &lt;code&gt;data_race&lt;/code&gt;: link to docs for 'unusual' race conditions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3161"&gt;miri: freebsd adding getentropy interception support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3159"&gt;miri: implement round.ps and round.pd SSE4.1 intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3162"&gt;miri: share getentropy shim across various unixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2931"&gt;miri: treat thread-local statics on main thread as static roots for leakage analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117727"&gt;emit &lt;code&gt;#[inline]&lt;/code&gt; on &lt;code&gt;derive(Debug)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116866"&gt;stabilize &lt;code&gt;result_option_inspect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117694"&gt;move &lt;code&gt;BorrowedBuf&lt;/code&gt; and &lt;code&gt;BorrowedCursor&lt;/code&gt; from &lt;code&gt;std:io&lt;/code&gt; to &lt;code&gt;core::io&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117730"&gt;closure-consuming helper functions for &lt;code&gt;fmt::Debug&lt;/code&gt; helpers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115460"&gt;don't panic in &lt;code&gt;&amp;lt;BorrowedCursor as io::Write&amp;gt;::write&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2797"&gt;futures: provide a non-destructive mechanism to determine if a sink/stream are paired&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_cranelift/pull/1416"&gt;codegen-cranelift: implement AArch64 intrinsics necessary for simd-json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_cranelift/pull/1425"&gt;codegen-cranelift: implement AES-NI and SHA256 crypto intrinsics using inline asm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_cranelift/pull/1417"&gt;codegen-cranelift: implement a lot of SIMD intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/374"&gt;codegen_gcc: do not emit &lt;code&gt;.eh_frame&lt;/code&gt; section if using -Cpanic=abort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12970"&gt;cargo: &lt;code&gt;query&lt;/code&gt;{&lt;code&gt;_vec&lt;/code&gt;} use &lt;code&gt;IndexSummary&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12865"&gt;cargo: add better error message when it can not find the search section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12634"&gt;cargo: add cache garbage collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12953"&gt;cargo credential: include license files in all published crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12928"&gt;cargo: do not allow empty feature name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12889"&gt;cargo: make browser links out of HTML file paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12949"&gt;cargo: filter &lt;code&gt;cargo-credential-*&lt;/code&gt; dependencies by OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12959"&gt;cargo: fix &lt;code&gt;--quiet&lt;/code&gt; being used with nested subcommands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12958"&gt;cargo: fix non-deterministic behavior in last-use repopulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12965"&gt;cargo: do not panic when failed to parse rustc commit-hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12951"&gt;cargo: preserve jobserver file descriptors on rustc invocation in &lt;code&gt;fix_exec_rustc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12924"&gt;cargo: report more detailed semver errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117531"&gt;rustdoc: properly elide cross-crate host effect args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11772"&gt;clippy: &lt;code&gt;arc_with_non_send_sync&lt;/code&gt; Improve suggested resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11792"&gt;clippy: &lt;code&gt;map_identity&lt;/code&gt;: respect match ergonomics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11779"&gt;clippy: &lt;code&gt;mod_module_files&lt;/code&gt; Don't emit lint for mod.rs in tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11767"&gt;clippy: add type details to &lt;code&gt;unnecessary_fallible_conversions&lt;/code&gt; note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11790"&gt;clippy: destructure &lt;code&gt;Conf&lt;/code&gt; in &lt;code&gt;register_lints&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11780"&gt;clippy: disable &lt;code&gt;vec_box&lt;/code&gt; when using different allocators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11760"&gt;clippy: don't check for late-bound vars, check for escaping bound vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11787"&gt;clippy: fixes to &lt;code&gt;manual_let_else&lt;/code&gt;'s divergence check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11508"&gt;clippy: lint &lt;code&gt;needless_borrow&lt;/code&gt; and &lt;code&gt;explicit_auto_deref&lt;/code&gt; on most union field accesses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11798"&gt;clippy: move &lt;code&gt;suspicious_doc_comments&lt;/code&gt; to doc pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11750"&gt;clippy: replace &lt;code&gt;if_chain&lt;/code&gt; with let chains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15871"&gt;rust-analyzer: add config for preferring / ignoring prelude modules when inserting imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15847"&gt;rust-analyzer: preview adt field when hover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15864"&gt;rust-analyzer: find &lt;code&gt;Self&lt;/code&gt; reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15854"&gt;rust-analyzer: ignore &lt;code&gt;doc(hidden)&lt;/code&gt; attr if no body is present&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15860"&gt;rust-analyzer: truncate closure capture place for raw pointer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15866"&gt;rust-analyzer: improve check for include macro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A week dominated by one particular perf improvement that lead to huge performance gains - an avg of 5% improvement across 121 test cases! The perf improvement comes from adding an &lt;code&gt;#[inline]&lt;/code&gt; hint to the output from &lt;code&gt;#[derive(Debug)]&lt;/code&gt; which presumably allows the compiler to more easily do deadcode elimination reducing the binary size and the amount of code that actually needs to be code-gened.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=7b97a5ca8422d1495a8918106d3249aa405812d4&amp;amp;end=173b6e686b158dbad7d072c64bef3ced2052312b&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;7b97a5ca..173b6e68&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;(instructions:u)&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;range&lt;/th&gt;
&lt;th align="center"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;0.4%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 0.9%]&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;1.9%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 3.6%]&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;-5.6%&lt;/td&gt;
&lt;td align="center"&gt;[-49.2%, -0.1%]&lt;/td&gt;
&lt;td align="center"&gt;111&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;-3.5%&lt;/td&gt;
&lt;td align="center"&gt;[-25.0%, -0.2%]&lt;/td&gt;
&lt;td align="center"&gt;155&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;All ❌✅ (primary)&lt;/td&gt;
&lt;td align="center"&gt;-5.1%&lt;/td&gt;
&lt;td align="center"&gt;[-49.2%, 0.9%]&lt;/td&gt;
&lt;td align="center"&gt;121&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;2 Regressions, 2 Improvements, 3 Mixed; 3 of them in rollups
55 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/e036aa707afc1495783004ee018aada4dfa9d192/triage/2023-11-14.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3516"&gt;RFC: Superseding public/private dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/96469"&gt;Tracking Issue for mutex_unpoison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/65991"&gt;Tracking issue for dyn upcasting coercion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/116085"&gt;rustdoc-search: add support for traits and associated types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Unsafe Code Guidelines entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3529"&gt;Add named path bases to cargo (v2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3527"&gt;RFC: Associated const underscore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3526"&gt;Add forbidden function casts RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3525"&gt;Struct target features RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3523"&gt;Create 0000-cargo-dns.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-11-15 - 2023-12-13 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-15 | Virtual (Cardiff, UK)| &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296582223/"&gt;&lt;strong&gt;Building Our Own Locks (Atomics &amp;amp; Locks Chapter 9)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-15 | Virtual (Richmond, VA, US) | &lt;a href="https://lpc.events"&gt;Linux Plumbers Conference&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lpc.events/event/17/sessions/170/"&gt;&lt;strong&gt;Rust Microconference in LPC 2023 (Nov 13-16)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-15 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/296600976/"&gt;&lt;strong&gt;Nightly Night: impl Trait in Type Aliases&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/296833657/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Virtual (San Diego, CA, US) | &lt;a href="https://www.meetup.com/san-diego-rust/"&gt;San Diego Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-diego-rust/events/297376463/"&gt;&lt;strong&gt;San Diego Rust November 2023 Tele-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Virtual (Vilnius, LT) | &lt;a href="https://www.meetup.com/vilnius-rust-go-meetup-group/"&gt;Vilnius Rust and Go Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vilnius-rust-go-meetup-group/events/297133832/"&gt;&lt;strong&gt;Enjoy our first Rust event&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-21 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/295679794/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-21 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/296807537/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-23 | Virtual (Edmonton, AB, CA) | &lt;a href="https://www.meetup.com/edmonton-r-user-group-yegrug/"&gt;Edmonton R User Group - Yegrug&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/edmonton-r-user-group-yegrug/events/296605221/"&gt;&lt;strong&gt;Edmonton R User Group Meetup: R and Rust, like a match made in heaven&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-28 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/mvdtgtyfcpblc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-29 | Virtual (Cardiff, UK)| &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296583091/"&gt;&lt;strong&gt;Atomics &amp;amp; Locks Book Club Final Chapter! (Chapter 10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/296833665/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Virtual (Dublin, IE) | &lt;a href="https://www.meetup.com/rust-dublin/"&gt;Rust Dublin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-dublin/events/296346693/"&gt;&lt;strong&gt;Automating expertise with cargo-semver-checks&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-01 | Virtual (Cardiff, UK)| &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296583626/"&gt;&lt;strong&gt;Rust &amp;amp; C++ Christmas Game Jam Kick-Off!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-02 | Virtual (Kampala, UG) | &lt;a href="https://www.eventbrite.com/o/rust-circle-kampala-65249289033"&gt;Rust Circle Kampala&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.com/e/rust-circle-meetup-tickets-628763176587?aff=ebdssbdestsearch"&gt;&lt;strong&gt;Rust Circle Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-05 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/295679797/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-05 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/297021574/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-21 | Leipzig, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/295504264/"&gt;&lt;strong&gt;GPU processing in Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-23 | Biel/Bienne, CH | &lt;a href="https://www.meetup.com/rust-bern/"&gt;Rust Bern&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-bern/events/296556498/"&gt;&lt;strong&gt;Rust Talks Bern @ Biel: Embedded Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-07 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/296223513/"&gt;&lt;strong&gt;Rust and Talk at Danske Commodities&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Brussels, BE | &lt;a href="https://lambda-brussels.glitch.me/"&gt;Lambda Brussels&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lambda-brussels.glitch.me/"&gt;&lt;strong&gt;Lambda Brussels&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-15 | Richmond, VA, US + Virtual | &lt;a href="https://lpc.events"&gt;Linux Plumbers Conference&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lpc.events/event/17/sessions/170/"&gt;&lt;strong&gt;Rust Microconference in LPC 2023 (Nov 13-16)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/mv-rust-meetup/"&gt;Mountain View Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mv-rust-meetup/events/297062689/"&gt;&lt;strong&gt;Rust Meetup at Hacker Dojo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Nashville, TN, US | &lt;a href="https://www.meetup.com/music-city-rust-developers/"&gt;Music City Rust Developers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/music-city-rust-developers/events/296916567/"&gt;&lt;strong&gt;Python loves Rust!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Seattle, WA, US | &lt;a href="https://www.meetup.com/seattle-rust-user-group/"&gt;Seattle Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seattle-rust-user-group/events/295483924"&gt;&lt;strong&gt;Seattle Rust User Group Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-21 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/296917625/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-22 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/xvkdgtyfcpbdc/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-28 | Pasadena, CA, US | &lt;a href="https://www.meetup.com/thursday-go/"&gt;Pasadena Thursday Go / Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/thursday-go/events/297062186/"&gt;&lt;strong&gt;Monthly Rust group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | Seattle, WA, US | &lt;a href="https://www.meetup.com/cap-hill-rust/"&gt;Cap Hill Rust Coding/Hacking/Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/cap-hill-rust/events/296564619/"&gt;&lt;strong&gt;Rusty Coding/Hacking/Learning Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-21 | Christchurch, NZ | &lt;a href="https://www.meetup.com/christchurch-rustlang-meetup-group/"&gt;Christchurch Rust Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/christchurch-rustlang-meetup-group/events/296819540/"&gt;&lt;strong&gt;Christchurch Rust meetup meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-28 | Canberra, ACT, AU | &lt;a href="https://www.meetup.com/rust-canberra/"&gt;Rust Canberra&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-canberra/events/296391733/"&gt;&lt;strong&gt;November Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-11 | Perth, WA, AU | &lt;a href="https://www.meetup.com/perth-rust-meetup-group/"&gt;Rust Perth Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/perth-rust-meetup-group/events/297191089/"&gt;&lt;strong&gt;Rust End of Year Event&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/163w6fl/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I decided to keep learning Rust because I liked the syntax. I liked the speed. I liked the community. I liked it all. It felt like a breath of fresh air: a syntax more intuitive than Python, JavaScript, or C, yet still faster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://digital-goobers.vercel.app/posts/learning-rust"&gt;Goren Barak on their blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1488"&gt;Goren Barak&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/17wa7hl/this_week_in_rust_521/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 15 Nov 2023 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2023-11-15:/blog/2023/11/15/this-week-in-rust-521/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 520</title><link>https://this-week-in-rust.org/blog/2023/11/08/this-week-in-rust-520/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="newsletters"&gt;&lt;a class="toclink" href="#newsletters"&gt;Newsletters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2023-10/"&gt;This Month in Rust OSDev: October 2023&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/libp2p/rust-libp2p/releases/tag/libp2p-v0.53.0"&gt;rust-libp2p v0.53 has been released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zellij.dev/news/session-resurrection-ui-components/"&gt;Zellij 0.39.0 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/officially-qualified-ferrocene/"&gt;Officially Qualfied - Ferrocene&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rocket.rs/v0.5-rc/news/2023-11-01-version-0.5-rc.4/"&gt;Rocket's 4th v0.5 Release Candidate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dhruv-ahuja.github.io/posts/writing-rust-bindings/"&gt;Writing Rust Bindings for My Python App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/a-four-year-plan/"&gt;A four year plan for async Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://endler.dev/2023/cursed-rust/"&gt;Cursed Rust: Printing Things The Wrong Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2023/11/08/testing-in-rust"&gt;Rust for JavaScript Developers: An Overview of Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.moonguard.dev/why-golang-instead-of-rust-to-develop-the-krater-desktop-app"&gt;Why Golang instead of Rust to develop the Krater desktop app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/news/Google-Linux-Binder-In-Rust"&gt;Google Rewriting Android's Binder In Rust With Promising Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bennett.dev/rust/dump-struct-bytes/"&gt;Dump Rust Struct or Enum Memory Representation as Bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/how-open-source-projects-are-using-kani-to-write-better-software-in-rust/"&gt;How Open Source Projects are Using Kani to Write Better Software in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://burn.dev/blog/creating-high-performance-asynchronous-backends-with-burn-compute"&gt;Creating High Performance Asynchronous Backends With Burn-Compute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://huggingface.co/blog/santiagomed/building-a-rag-cli-application-application"&gt;Goodbye Python, Hello Rust: Building a RAG CLI Application with Orca&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://poignardazur.github.io/2023/11/08/time-for-variadic-generics/"&gt;Variadic generics, again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lgug2z.com/articles/using-rust-chrome-and-nixos-to-take-headless-screenshots-for-social-sharing/"&gt;Using Rust, Chrome and NixOS to Take Headless Screenshots for Social Sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/sudo-rs-audit/"&gt;sudo-rs' first security audit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ismailmaj.github.io/destructing-trees-safely-and-cheaply"&gt;Destructing trees safely and cheaply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/edge-iot-with-rust-on-esp-ntp"&gt;Edge IoT with Rust on ESP: NTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devork.be/blog/2023/11/modern-linux-sockets/"&gt;Using Modern Linux Sockets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://securedrop.org/news/migrating-securedrops-pgp-backend-from-gnupg-to-sequoia/"&gt;Migrating SecureDrop’s PGP backend from GnuPG to Sequoia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=FCVfofYsWHU"&gt;10x faster - taking charge of the compiler backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=jb5-P_r3jmw"&gt;RISC-V Vector Extension in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/embedding-simple-csv-file"&gt;Embedding simple CSV file in Rust application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/lapce/floem"&gt;floem&lt;/a&gt;, a native Rust UI library with fine-grained reactivity.&lt;/p&gt;
&lt;p&gt;Despite receiving no suggestions, llogiq is reasonably pleased with his choice.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6463"&gt;Ockam - Make &lt;code&gt;ockam identity delete&lt;/code&gt; (no args) interactive by asking the user to choose from a list of identity names to delete (tuify)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6465"&gt;Ockam - Make &lt;code&gt;ockam tcp-outlet delete&lt;/code&gt; (no args) interactive by asking the user to choose from a list of tcp-outlet aliases to delete (tuify)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6473"&gt;Ockam - Make &lt;code&gt;ockam project show&lt;/code&gt; (no args) interactive by asking the user to choose from a list of projects to show (tuify)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;366 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-10-30..2023-11-06"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117134"&gt;&lt;code&gt;dropck_outlives&lt;/code&gt; check whether generator witness &lt;code&gt;needs_drop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117289"&gt;account for &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;mut&lt;/code&gt; in the wrong place for pattern ident renaming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117417"&gt;add a stable MIR visitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117131"&gt;add all RPITITs when augmenting param-env with GAT bounds in &lt;code&gt;check_type_bounds&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117596"&gt;add diagnostic items for a few of core's builtin macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117451"&gt;add support for pre-unix-epoch file dates on Apple platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117585"&gt;add the &lt;code&gt;Span&lt;/code&gt; of the &lt;code&gt;move&lt;/code&gt; keyword to the HIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117416"&gt;also consider TAIT to be uncomputable if the MIR body is tainted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117373"&gt;avoid the path trimming ICE lint in error reporting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117179"&gt;avoid unnecessary comparison in &lt;code&gt;partition_equal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117637"&gt;check binders with bound vars for global bounds that don't hold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117554"&gt;consts: remove dead code around &lt;code&gt;i1&lt;/code&gt; constant values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117421"&gt;coverage: replace impossible &lt;code&gt;coverage::Error&lt;/code&gt; with assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117578"&gt;derive &lt;code&gt;TyEncodable&lt;/code&gt;/&lt;code&gt;TyDecodable&lt;/code&gt; in &lt;code&gt;rustc_type_ir&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117292"&gt;detect misparsed binop caused by missing semi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116405"&gt;detect object safety errors when assoc type is missing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117438"&gt;do not ICE on constant evaluation failure in GVN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117441"&gt;do not assert in &lt;code&gt;op_to_const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117466"&gt;don't check for alias bounds in liveness when aliases have escaping bound vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117397"&gt;don't emit delayed good-path bugs on panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116017"&gt;don't pass &lt;code&gt;-stdlib=libc++&lt;/code&gt; when building C files on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117363"&gt;enable cross-crate-inlining when MIR inlining is enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117435"&gt;enable parallel rustc front end in nightly builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117570"&gt;fallback for &lt;code&gt;construct_generic_bound_failure&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117576"&gt;fix excessive initialization and reads beyond EOF in &lt;code&gt;io::copy(_, Vec&amp;lt;u8&amp;gt;)&lt;/code&gt; specialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117505"&gt;fix incorrect trait bound restriction suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117521"&gt;fix order of implementations in the "implementations on foreign types" section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115333"&gt;guarantee representation of None in NPO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116894"&gt;guarantee that &lt;code&gt;char&lt;/code&gt; has the same size and alignment as &lt;code&gt;u32&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117503"&gt;hint optimizer about try-reserved capacity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117475"&gt;inline and remove &lt;code&gt;create_session&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117589"&gt;make sure that predicates with unmentioned bound vars are still considered global in the old solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117603"&gt;make the randomize feature of &lt;code&gt;rustc_abi&lt;/code&gt; additive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116692"&gt;match usize/isize exhaustively with half-open ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117439"&gt;prepopulate opaque ty storage before using it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116439"&gt;pretty print &lt;code&gt;Fn&lt;/code&gt; traits in &lt;code&gt;rustc_on_unimplemented&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117298"&gt;recover from missing param list in function definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117401"&gt;refactor: move suggestion functions from demand to suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117504"&gt;remove obsolete support for linking unwinder on Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117509"&gt;remove support for alias &lt;code&gt;-Z symbol-mangling-version&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116412"&gt;remove support for compiler plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/113970"&gt;replace switch to unreachable by assume statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117307"&gt;set &lt;code&gt;max_atomic_width&lt;/code&gt; for riscv32*-esp-espidf to 32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117388"&gt;turn &lt;code&gt;const_caller_location&lt;/code&gt; from a query to a hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117508"&gt;use &lt;code&gt;FxIndexSet&lt;/code&gt; in the symbol interner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117407"&gt;use derivative for &lt;code&gt;Clone&lt;/code&gt;/&lt;code&gt;PartialOrd&lt;/code&gt;/&lt;code&gt;Ord&lt;/code&gt;/&lt;code&gt;Hash&lt;/code&gt; in &lt;code&gt;rustc_type_ir&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117394"&gt;use global cache when computing proof trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117592"&gt;use the correct span when emitting the &lt;code&gt;env!&lt;/code&gt; result&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117094"&gt;warn users who set &lt;code&gt;non_exhaustive_omitted_patterns&lt;/code&gt; lint level on a match arm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116712"&gt;when encountering unclosed delimiters during lexing, check for diff markers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/553"&gt;enable src/math for all UEFI targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/552"&gt;intrinsics macro: fix non-weak aeabi generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/554"&gt;this enables math module for riscv32 targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116218"&gt;stabilize &lt;code&gt;const_maybe_uninit_zeroed&lt;/code&gt; and &lt;code&gt;const_mem_zeroed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117422"&gt;stabilize &lt;code&gt;file_set_times&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117386"&gt;fix &lt;code&gt;switch_stdout_to&lt;/code&gt; on Windows7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117510"&gt;add &lt;code&gt;track_caller&lt;/code&gt; to &lt;code&gt;transmute_copy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117434"&gt;delegate &lt;code&gt;&amp;lt;Box&amp;lt;E&amp;gt; as Error&amp;gt;::provide&lt;/code&gt; to &lt;code&gt;&amp;lt;E as Error&amp;gt;::provide&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/114208"&gt;support &lt;code&gt;enum&lt;/code&gt; variants in &lt;code&gt;offset_of!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117537"&gt;feature gate enums in &lt;code&gt;offset_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/96979"&gt;override &lt;code&gt;Waker::clone_from&lt;/code&gt; to avoid cloning &lt;code&gt;Waker&lt;/code&gt;s unnecessarily&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/368"&gt;codegen_gcc: fix vector compilation error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12900"&gt;cargo: &lt;code&gt;feat(trim-paths)&lt;/code&gt;: set env &lt;code&gt;CARGO_TRIM_PATHS&lt;/code&gt; for build scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12911"&gt;cargo toml: Pull out the schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12923"&gt;cargo: fix an unhelpful panic message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12625"&gt;cargo: implement &lt;code&gt;-Ztrim-paths&lt;/code&gt;&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/3127-trim-paths.html"&gt;#3127&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12908"&gt;cargo: merge &lt;code&gt;trim-paths&lt;/code&gt; from different profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117450"&gt;rustdoc: accept less invalid Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5954"&gt;rustfmt: fixes comma added to comment in where-clause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11756"&gt;clippy: &lt;code&gt;unused_enumerate_index&lt;/code&gt;: don't ICE on empty tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10404"&gt;clippy: add &lt;code&gt;unused_enumerate_index&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11743"&gt;clippy: fix &lt;code&gt;dbg_macro&lt;/code&gt; semi span calculation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11498"&gt;clippy: fix &lt;code&gt;enum_variant_names&lt;/code&gt; depending lint depending on order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11744"&gt;clippy: fix &lt;code&gt;get_first&lt;/code&gt; false negative for VecDeque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11669"&gt;clippy: new lint: &lt;code&gt;unnecessary_fallible_conversions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15832"&gt;rust-analyzer: add &lt;code&gt;generate_mut_trait_impl&lt;/code&gt; assist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15788"&gt;rust-analyzer: import trait with alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15819"&gt;rust-analyzer: skip checking token tree count for include! macro call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15834"&gt;rust-analyzer: fix docs path for derive macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15827"&gt;rust-analyzer: vSCode metadata. category:formatters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A difficult week for triage, due to what appears to be system-level disruption to
measurement apparatus, yielding transient noise (and potentially masking actual
problems). The main non-noise performance change was huge regression to bitmaps introduced
by PR 117131, and that already has a fix in-flight fix (PR #117542). The other thing
worth noting is that the parallel rustc front-end has been enabled in the nighlty builds,
which has introduced some overhead that was expected by wg-parallel-rustc.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=650991d62c3a2c80ba27009d06839adbb038bf5e&amp;amp;end=7b97a5ca8422d1495a8918106d3249aa405812d4&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;650991d6..7b97a5ca&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10 Regressions, 4 Improvements, 3 Mixed; 3 of them in rollups
68 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/9804362a1bf583dddd7070095e674b0bd6eee887/triage/2023-11-07.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3463"&gt;Add "crates.io Policy Update" RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3498"&gt;Merge RFC 3498: "Lifetime Capture Rules 2024"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117138"&gt;Add T: ?Sized to &lt;code&gt;RwLockReadGuard&lt;/code&gt; and &lt;code&gt;RwLockWriteGuard&lt;/code&gt;'s Debug impls.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/105135"&gt;Tracking Issue for &lt;code&gt;file_create_new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/111922"&gt;feat: implement &lt;code&gt;DoubleEndedSearcher&lt;/code&gt; for &lt;code&gt;CharArray[Ref]Searcher&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/107645"&gt;TAIT defining scope options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/115694"&gt;Add &lt;code&gt;std::hash::{DefaultHasher, RandomState}&lt;/code&gt; exports (needs FCP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues/472"&gt;Decide on zero-sized offsets and memory accesses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3519"&gt;Arbitrary self types v2.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-11-08 - 2023-12-06 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-08 | Virtual(Boulder, CO, US) | &lt;a href="https://www.meetup.com/solidstatedepot/"&gt;Solid State Depot - The Boulder Makerspace&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/solidstatedepot/events/296661062/"&gt;&lt;strong&gt;Placeholder: Boulder Rust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-09 | Virtual (Linz, AT) | &lt;a href="https://www.meetup.com/rust-linz/"&gt;Rust Linz&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-linz/events/297133538/"&gt;&lt;strong&gt;Rust Meetup Linz - 34rd Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-09 | Virtual (Nuremberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/289732666/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-10 | Virtual (Bangalore, IN) | &lt;a href="https://www.meetup.com/just-code/"&gt;Learn Everything About Programming&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/just-code/events/297172855/"&gt;&lt;strong&gt;Getting started with rust-lang&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-12 | Virtual (Tel Aviv-Yafo, IL) | &lt;a href="https://www.meetup.com/code-mavens/"&gt;Code Mavens&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/297064458/"&gt;&lt;strong&gt;Rust in Israel - Rust Digger&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-14 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/fvdtgtyfcpbsb/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-14 | Virtual (Kyiv, UA) | &lt;a href="https://www.meetup.com/yeducation/"&gt;Yalantis Education&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/yeducation/events/297219539/"&gt;&lt;strong&gt;Довгий шлях до першого комерційного досвіду або до чого тут Rust?&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-15 | Virtual (Cardiff, UK)| &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296582223/"&gt;&lt;strong&gt;Building Our Own Locks (Atomics &amp;amp; Locks Chapter 9)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-15 | Virtual (Richmond, VA, US) | &lt;a href="https://lpc.events"&gt;Linux Plumbers Conference&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lpc.events/event/17/sessions/170/"&gt;&lt;strong&gt;Rust Microconference in LPC 2023 (Nov 13-16)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-15 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/296600976/"&gt;&lt;strong&gt;Nightly Night: impl Trait in Type Aliases&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/296833657/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Virtual (Vilnius, LT) | &lt;a href="https://www.meetup.com/vilnius-rust-go-meetup-group/"&gt;Vilnius Rust and Go Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vilnius-rust-go-meetup-group/events/297133832/"&gt;&lt;strong&gt;Enjoy our first Rust event&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-21 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/295679794/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-21 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/296807537/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-23 | Virtual (Edmonton, AB, CA) | &lt;a href="https://www.meetup.com/edmonton-r-user-group-yegrug/"&gt;Edmonton R User Group - Yegrug&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/edmonton-r-user-group-yegrug/events/296605221/"&gt;&lt;strong&gt;Edmonton R User Group Meetup: R and Rust, like a match made in heaven&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-28 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/mvdtgtyfcpblc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-29 | Virtual (Cardiff, UK)| &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296583091/"&gt;&lt;strong&gt;Atomics &amp;amp; Locks Book Club Final Chapter! (Chapter 10)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/296833665/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-30 | Virtual (Dublin, IE) | &lt;a href="https://www.meetup.com/rust-dublin/"&gt;Rust Dublin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-dublin/events/296346693/"&gt;&lt;strong&gt;Automating expertise with cargo-semver-checks&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-01 | Virtual (Cardiff, UK)| &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296583626/"&gt;&lt;strong&gt;Rust &amp;amp; C++ Christmas Game Jam Kick-Off!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-02 | Virtual (Kampala, UG) | &lt;a href="https://www.eventbrite.com/o/rust-circle-kampala-65249289033"&gt;Rust Circle Kampala&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.com/e/rust-circle-meetup-tickets-628763176587?aff=ebdssbdestsearch"&gt;&lt;strong&gt;Rust Circle Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-05 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/295679797/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-05 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/297021574/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-09 | Barcelona, ES | &lt;a href="https://www.meetup.com/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bcnrust/events/296567395"&gt;&lt;strong&gt;11th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-09 | Paris, FR | &lt;a href="https://www.eventbrite.fr/e/rust-meetup-in-paris-tickets-732823744547/"&gt;Paris Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.fr/e/rust-meetup-in-paris-tickets-732823744547"&gt;&lt;strong&gt;Rust Meetup in Paris&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-09 | Reading, UK | &lt;a href="https://www.meetup.com/reading-rust-workshop/"&gt;Reading Rust Workshop&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/reading-rust-workshop/events/296083417/"&gt;&lt;strong&gt;Reading Rust Meetup at Browns&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-21 | Leipzig, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/295504264/"&gt;&lt;strong&gt;GPU processing in Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-23 | Biel/Bienne, CH | &lt;a href="https://www.meetup.com/rust-bern/"&gt;Rust Bern&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-bern/events/296556498/"&gt;&lt;strong&gt;Rust Talks Bern @ Biel: Embedded Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-08 | Boulder, CO, US | &lt;a href="https://www.meetup.com/boulder-rust-meetup/"&gt;Boulder Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-rust-meetup/events/296437292/"&gt;&lt;strong&gt;Let's make a Discord bot!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-14 | New York, NY, US | &lt;a href="https://www.meetup.com/rust-nyc/"&gt;Rust NYC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-nyc/events/296895126/"&gt;&lt;strong&gt;Rust NYC Monthly Mixer: Share, Show, &amp;amp; Tell! 🦀&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-14 | Seattle, WA, US | &lt;a href="https://www.meetup.com/cap-hill-rust/"&gt;Cap Hill Rust Coding/Hacking/Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seattle-rust-user-group/events/296540653"&gt;&lt;strong&gt;Rusty Coding/Hacking/Learning Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-15 | Richmond, VA, US + Virtual | &lt;a href="https://lpc.events"&gt;Linux Plumbers Conference&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lpc.events/event/17/sessions/170/"&gt;&lt;strong&gt;Rust Microconference in LPC 2023 (Nov 13-16)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/mv-rust-meetup/"&gt;Mountain View Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mv-rust-meetup/events/297062689/"&gt;&lt;strong&gt;Rust Meetup at Hacker Dojo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Nashville, TN, US | &lt;a href="https://www.meetup.com/music-city-rust-developers/"&gt;Music City Rust Developers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/music-city-rust-developers/events/296916567/"&gt;&lt;strong&gt;Python loves Rust!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-16 | Seattle, WA, US | &lt;a href="https://www.meetup.com/seattle-rust-user-group/"&gt;Seattle Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seattle-rust-user-group/events/295483924"&gt;&lt;strong&gt;Seattle Rust User Group Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-21 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/296917625/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-22 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/xvkdgtyfcpbdc/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-28 | Pasadena, CA, US | &lt;a href="https://www.meetup.com/thursday-go/"&gt;Pasadena Thursday Go / Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/thursday-go/events/297062186/"&gt;&lt;strong&gt;Monthly Rust group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-11-21 | Christchurch, NZ | &lt;a href="https://www.meetup.com/christchurch-rustlang-meetup-group/"&gt;Christchurch Rust Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/christchurch-rustlang-meetup-group/events/296819540/"&gt;&lt;strong&gt;Christchurch Rust meetup meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-11-28 | Canberra, ACT, AU | &lt;a href="https://www.meetup.com/rust-canberra/"&gt;Rust Canberra&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-canberra/events/296391733/"&gt;&lt;strong&gt;November Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/13yx1dn/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;For Binder to continue to meet Android's needs, we need better ways to manage (and reduce!) complexity without increasing the risk.&lt;/p&gt;
&lt;p&gt;The biggest change is obviously the choice of programming language. We decided to use Rust because it directly addresses a number of the challenges within Binder that we have faced during the last years.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://lore.kernel.org/rust-for-linux/20231101-rust-binder-v1-0-08ba9197f637@google.com/"&gt;Alice Ryhl on the Linux Kernel Mailing List&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1475"&gt;Vincent de Phily&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/17r3usm/this_week_in_rust_520/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 08 Nov 2023 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2023-11-08:/blog/2023/11/08/this-week-in-rust-520/</guid><category>This Week in Rust</category></item></channel></rss>