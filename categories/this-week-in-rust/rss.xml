<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>This Week in Rust - This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><lastBuildDate>Wed, 28 Dec 2022 00:00:00 -0500</lastBuildDate><item><title>This Week in Rust 475</title><link>https://this-week-in-rust.org/blog/2022/12/28/this-week-in-rust-475/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/board-announcement-farewell-to-shane-miller/"&gt;Board Announcement: Farewell to Shane Miller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/community-grantee-spotlight-o%C4%9Fuz-a%C4%9Fcayaz%C4%B1/"&gt;Community Grantee Spotlight: Oğuz Ağcayazı&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.legoktm.com/2022/12/27/mysql-connection-pooling-in-rust-for-toolforge.html"&gt;MySQL connection pooling in Rust for Toolforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sequoia-pgp.org/blog/2022/12/19/202212-chameleon-0.1/"&gt;The Sequoia GnuPG Chameleon 0.1 is Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotenv-linter.github.io/#/whats_new/v330"&gt;Dotenv-linter v3.3.0: Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2022/12/26/changelog-161.html"&gt;rust-analyzer changelog #161&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/EmbarkStudios/rust-gpu/releases/tag/v0.4.0"&gt;rust-gpu v0.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fyrox.rs/blog/post/twif8/"&gt;This Week in Fyrox #8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://predr.ag/blog/cargo-semver-checks-today-and-in-2023/"&gt;cargo-semver-checks today and in 2023&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://geo-ant.github.io/blog/2022/common-cpp-errors-vs-rust/"&gt;Rust vs Common C++ Bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/look-back-2022/"&gt;2022 in review (Yoshua Wuyts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/rust-2023/"&gt;Rust 2023 (Yoshua Wuyts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gburghoorn.com/posts/rust-in-2023/"&gt;Rust in 2023 (Gijs Burghoorn)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azdavis.net/posts/rust-2023/"&gt;Rust in 2023 (azdavis)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markentier.tech/posts/2022/12/capture-the-ip/"&gt;Capture The IP — Or a tiny story about how to over-engineer a simple project for the sake of learning Rust and other things about web services and binaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=OuSiuySr6_Q"&gt;Rust in 2024 (Niko Matsakis)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=JRMOIE_wAFk"&gt;Profiling Code in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=DMLBBZBlKis"&gt;Nine Rules for Creating Procedural Macros in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boring-guy.sh/posts/river-rust/"&gt;How we extended the River stats module with Rust using PyO3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/a-taste-of-pavex-rust-web-framework/"&gt;A taste of pavex, an upcoming Rust web framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.splitgraph.com/blog/datafusion-filter-expr-visitor"&gt;Rust visitor pattern and efficient DataFusion query federation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/embedded-rust-and-embassy-timer-ultrasonic-distance-measurement"&gt;Embedded Rust and Embassy: Timer Ultrasonic Distance Measurement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=jHrzmflNrgY"&gt;Rust - IAT Hooking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Research&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2212.12976"&gt;Modular Formal Verification of Rust Programs with Unsafe Blocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npopov.com/2022/12/20/This-year-in-LLVM-2022.html"&gt;This year in LLVM (2022)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/scraper"&gt;scraper&lt;/a&gt;, a crate for HTML parsing and querying with CSS selectors.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1140"&gt;Carlo Federico Vescovo&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No calls for participation this week. Keep an eye out for more places to contribute next week!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;344 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2022-12-19..2022-12-26"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106000"&gt;make LLD build forward-compatible with LLVM 16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105812"&gt;add &lt;code&gt;-Zno-jump-tables&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105701"&gt;allow &lt;code&gt;&amp;amp;..&lt;/code&gt; to be parsed as let initializer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105575"&gt;add &lt;code&gt;implied_bounds_entailment&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106051"&gt;allow building std with cranelift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105932"&gt;correct branch-protection ModFlagBehavior for Aarch64 on LLVM-15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105847"&gt;ensure param-env is const before calling &lt;code&gt;eval_to_valtree&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105904"&gt;fix arch flag on i686-apple-darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106057"&gt;give a more helpful error for "&lt;code&gt;trimmed_def_paths&lt;/code&gt; constructed"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106010"&gt;give opaque types a better coherence error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105978"&gt;mark &lt;code&gt;proc_macro_decls_static&lt;/code&gt; as always used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105966"&gt;re-enable &lt;code&gt;Fn&lt;/code&gt; trait call notation error for non-tuple argument&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105843"&gt;suggest associated const on possible capitalization mistake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105872"&gt;suggest remove last method call when type coerce with expected type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2646"&gt;miri: data race spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104741"&gt;switch &lt;code&gt;#[track_caller]&lt;/code&gt; back to a no-op unless feature gate is enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105127"&gt;make &lt;code&gt;VecDeque::new&lt;/code&gt; const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/100390"&gt;implement &lt;code&gt;From&amp;lt;bool&amp;gt;&lt;/code&gt; for f32, f64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104977"&gt;add &lt;code&gt;ptr::from_&lt;/code&gt;{&lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;mut&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105997"&gt;abort immediately on bad &lt;code&gt;mem::zeroed/uninit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/11478"&gt;cargo: fix: deduplicate dependencies by artifact target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/10690"&gt;cargo: support vendoring with different revs from same git repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105933"&gt;add readable rustdoc display for tvOS and watchOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10063"&gt;clippy: add &lt;code&gt;permissions_set_readonly_false&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10098"&gt;clippy: add &lt;code&gt;size_of_ref&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10056"&gt;clippy: avoid &lt;code&gt;match_wildcard_for_single_variants&lt;/code&gt; on guarded wild matches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10109"&gt;clippy: fix false positives in &lt;code&gt;needless_return&lt;/code&gt; when using yeet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10091"&gt;clippy: fix &lt;code&gt;manual_filter&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10113"&gt;clippy: fix incorrect suggestion in &lt;code&gt;suboptimal_flops&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9701"&gt;clippy: improve &lt;code&gt;needless_borrow&lt;/code&gt;, &lt;code&gt;redundant_clone&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13771"&gt;rust-analyzer: add xtask for publishing release notes in Markdown on GitHub Releases from a changelog in AsciiDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13805"&gt;rust-analyzer: complete enum variants without parens when snippets are disabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13817"&gt;rust-analyzer: add an option to hide adjustment hints outside of &lt;code&gt;unsafe&lt;/code&gt; blocks and functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13820"&gt;rust-analyzer: fix binding mode hints always adding parentheses to or-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13831"&gt;rust-analyzer: completion: remove bound insert of type in trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13814"&gt;rust-analyzer: calculate the &lt;code&gt;TargetDataLayout&lt;/code&gt; correctly for the selected target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13764"&gt;rust-analyzer: correctly check for parentheses redundancy in &lt;code&gt;remove_parentheses&lt;/code&gt; assist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13800"&gt;rust-analyzer: don't let mbe expr fragments match let exprs and inline consts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13840"&gt;rust-analyzer: handle lifetime variables in &lt;code&gt;CallableSig&lt;/code&gt; query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13806"&gt;rust-analyzer: skip adjustment hints if the adjustment is identity (&lt;code&gt;T&lt;/code&gt; → &lt;code&gt;T&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13699"&gt;rust-analyzer: implement location link for type inlay hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13835"&gt;rust-analyzer: inline all format arguments where possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/1968"&gt;docs.rs: URL-encode canonical URLs when they can include UTF8 characters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A light week with few performance changes, apart from one PR that added some
necessary extra work to rustdoc and so we observed a corresponding hit to some
doc benchmarks.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=8a746f4ac3a489efb724cde813607f3b96c2df7b&amp;amp;end=b38a6d373cb254697411147c0e49cd2e84864258&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;8a746f4a..b38a6d37&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;(instructions:u)&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;range&lt;/th&gt;
&lt;th align="center"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;2.8%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 18.4%]&lt;/td&gt;
&lt;td align="center"&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;1.3%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 2.6%]&lt;/td&gt;
&lt;td align="center"&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;-&lt;/td&gt;
&lt;td align="center"&gt;-&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;-0.7%&lt;/td&gt;
&lt;td align="center"&gt;[-1.1%, -0.3%]&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;All ❌✅ (primary)&lt;/td&gt;
&lt;td align="center"&gt;2.8%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 18.4%]&lt;/td&gt;
&lt;td align="center"&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;3 Regressions, 2 Improvements, 1 Mixed; 1 of them in rollups
44 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2022-12-27.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/86442"&gt;Tracking Issue for io_error_more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/104429"&gt;More deriving on packed structs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/82485"&gt;Tracking Issue for &lt;code&gt;#![feature(const_socketaddr)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/95985"&gt;Add PhantomData marker to Context to make Context !Send and !Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/85410"&gt;Tracking Issue for abstract namespaces in Unix domain sockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/75251"&gt;Tracking Issue for const MaybeUninit::as(_mut)_ptr (feature: const_maybe_uninit_as_ptr)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No New or Updated RFCs were created this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2022-12-28 - 2023-01-25 🦀&lt;/p&gt;
&lt;h3&gt;Virtual&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-01-03 | Virtual (Beijing, CN) | &lt;a href="https://www.meetup.com/wasm-rust-meetup/"&gt;WebAssembly and Rust Meetup (Rustlang)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/wasm-rust-meetup/events/mbmxvsyfccbfb/"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting, a CNCF sandbox WebAssembly runtime&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-03 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/289581074/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-03 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/lsjbbtyfccbfb/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-04 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsyfccbgb/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-04 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/dvvtvsyfccbgb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-05 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/290122605/"&gt;&lt;strong&gt;Part 2: Exploring USB with Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-10 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/vndgwsyfccbnb/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-11 | Virtual (Boulder, CO, US) | &lt;a href="https://www.meetup.com/boulder-elixir-rust/"&gt;Boulder Elixir and Rust&lt;/a&gt; &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/290277662/"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-12 | Virtual (San Francisco, CA, US; Stockholm, SE; New York, NY US) | &lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/"&gt;Microsoft Reactor San Francisco&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/"&gt;Microsoft Reactor New York&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/events/290071417/"&gt;&lt;strong&gt;Crack code interview problems in Rust - Ep. 1&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-stockholm/events/290071415/"&gt;&lt;strong&gt;Stockholm Mirror&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290071420/"&gt;&lt;strong&gt;New York Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-12 | Virtual (Nürnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/hlvbvsyfccbqb/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-14 | Virtual | &lt;a href="https://gamedev.rs/"&gt;Rust GameDev&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?q=https%3A%2F%2Fdiscord.gg%2FyNtPTb2&amp;amp;sa=D&amp;amp;ust=1666661760000000&amp;amp;usg=AOvVaw13uHY9m-8bJJwgeP58VS8l"&gt;&lt;strong&gt;Rust GameDev Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-16 | Virtual (San Francisco, CA, US; São Paulo, BR; New York, NY, US) | &lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/"&gt;Microsoft Reactor San Francisco&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/"&gt;Microsoft Reactor São Paulo&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/"&gt;Microsoft Reactor New York&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/events/290224512/"&gt;&lt;strong&gt;Primeros pasos con Rust - Qué es y Configuración el entorno de desarrollo&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/events/290224516/"&gt;&lt;strong&gt;São Paulo Mirror&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290224515/"&gt;&lt;strong&gt;New York Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-17 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/289581080/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-17 | Virtual (San Francisco, CA, US; São Paulo, BR, New York, NY, US) | &lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/"&gt;Microsoft Reactor San Francisco&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/"&gt;Microsoft Reactor São Paulo&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290224518/"&gt;Microsoft Reactor New York&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/events/290224517/"&gt;&lt;strong&gt;Primeros pasos con Rust - Creación del primer programa de Rust&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/events/290224521/"&gt;&lt;strong&gt;*São Paulo Mirror&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290224518/"&gt;&lt;strong&gt;New York Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-17 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/289015967/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-18 | Virtual (San Francisco, CA, US; São Paulo, BR; New York, NY US) | &lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/"&gt;Microsoft Reactor San Francisco&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/"&gt;Microsoft Reactor São Paulo&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290224518/"&gt;Microsoft Reactor New York&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/events/290224523/"&gt;&lt;strong&gt;Primeros pasos con Rust: QA y horas de comunidad&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/events/290224522/"&gt;&lt;strong&gt;Sao Paulo Mirror&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290224525/"&gt;&lt;strong&gt;New York Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-18 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/tqvhxsyfccbxb/"&gt;&lt;strong&gt;Rust Study/Hack/Hang-out&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-29 | Tel Aviv, IL | &lt;a href="https://www.meetup.com/rust-tlv/"&gt;Rust TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/290156141/"&gt;&lt;strong&gt;December Edition - xtask, macros and low level features&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-29 | Freiburg, DE | &lt;a href="https://arso.xyz/"&gt;Arso Collective&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tacker.fr/node/10951"&gt;&lt;strong&gt;Rust Café Freiburg&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-12 | Enschede, NL | &lt;a href="https://www.meetup.com/dutch-rust-meetup/"&gt;Dutch Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dutch-rust-meetup/events/289021643/"&gt;&lt;strong&gt;Rust Meetup - Subject TBA&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-20 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/zmppzsyfccbbc/"&gt;&lt;strong&gt;OnSite Meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-25 | Paris, FR | &lt;a href="https://www.meetup.com/rust-paris/"&gt;Rust Paris&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-paris/events/290100223/"&gt;&lt;strong&gt;Rust Paris meetup #55&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-28 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/290335198/"&gt;&lt;strong&gt;Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-05 | Lehi, UT, US | &lt;a href="https://www.meetup.com/utah-rust/"&gt;Utah Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/dsbpxsydcqbdc/"&gt;&lt;strong&gt;Lightning Talks 'n' Chill (a.k.a. Show &amp;amp; Tell), with Pizza!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-09 | Minneapolis, MN, US | &lt;a href="https://www.meetup.com/minneapolis-rust-meetup/"&gt;Minneapolis Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/minneapolis-rust-meetup/events/289768841/"&gt;&lt;strong&gt;Happy Hour and Beginner Embedded Rust Hacking Session (#2!)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-17 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/rwvwzsyfccbwb/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;h2&gt;Jobs&lt;/h2&gt;
&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/zpd1qo/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust does best when we're ambitious&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://blog.yoshuawuyts.com/rust-2023/#ambition"&gt;Niko Matsakis quoted by Yoshua Wuyts on his blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;llogiq is inordinately pleased with &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1343"&gt;his suggestion&lt;/a&gt; and thanks Yoshua for clearing the quote!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/zxkbzb/this_week_in_rust_475/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 28 Dec 2022 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2022-12-28:/blog/2022/12/28/this-week-in-rust-475/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 474</title><link>https://this-week-in-rust.org/blog/2022/12/21/this-week-in-rust-474/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html"&gt;Announcing Rust 1.66.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/news/040/"&gt;This Month in Rust GameDev #40 - November 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustmagazine.github.io/announcing/"&gt;Announcing Rust Magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2022/12/19/changelog-185.html"&gt;IntelliJ Rust Changelog #185&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2022/12/19/changelog-160.html"&gt;rust-analyzer changelog #160&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bytecodealliance.org/articles/cranelift-progress-2022"&gt;Cranelift Progress in 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jack.wrenn.fyi/blog/deflect/"&gt;Native Reflection in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/zn9ut0/announcing_dieselasync_020/"&gt;Announcing Diesel-Async 0.2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://model-checking.github.io/kani-verifier-blog/2022/12/21/easily-verify-your-rust-in-ci-with-kani.html"&gt;Easily verify your Rust in CI with Kani and GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fornjot.app/blog/weekly-release/2022-w51/"&gt;Fornjot (code-first CAD in Rust) - Weekly Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slint-ui.com/thisweek/2022-12-19.html"&gt;Slint 0.3.3 Release and weekly update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://breakbuild.dev/blog/my-year-with-rust/"&gt;My Year With Rust: The Good, The Bad, The Ugly | BreakBuildGames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ochagavia.nl/blog/an-adventure-with-optimization-rust-and-z3/"&gt;An adventure with optimization, Rust and Z3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vadosware.io/post/faster-ci-builds-for-rust-with-builder-images-and-sccache/"&gt;Faster CI builds for Rust with pre-baked builder images and sccache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://saona-raimundo.github.io/2022/12/21/UI-development-in-Rust.html"&gt;UI development in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frehberg.com/2022/12/docs-as-code-mermaid-inline-diagrams/"&gt;Docs as Code: Mermaid inline diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://diziet.dreamwidth.org/13657.html"&gt;Rust needs &lt;code&gt;#[throws]&lt;/code&gt;, not ubiquitous handwritten &lt;code&gt;Ok()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/hdF45WGzi7g"&gt;Possibility of OCI Container Runtime with Rust at KubeDay Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/build-rust-api-builder-pattern/"&gt;How to build a Rust API with the builder pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.joshfinnie.com/blog/a-command-line-application-in-rust/"&gt;Building a Command-Line Application in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariadb.org/writing-user-defined-functions-in-rust/"&gt;Writing SQL User-Defined Functions in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://google.github.io/comprehensive-rust/"&gt;New Rust course by Android: Comprehensive Rust 🦀&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/en/blog/81/our-year-in-rust"&gt;Our year in Rust - in a rhyme!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://diziet.dreamwidth.org/13884.html"&gt;Rust for the Polyglot Programmer (2022 edition) - a rather different introductory text, now revised&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://adspthepodcast.com/2022/12/16/Episode-108.html"&gt;Episode 108: Jane Losare-Lusby on Rust! (Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DE] &lt;a href="https://www.heise.de/news/Programmiersprache-Rust-1-66-erweitert-Enumerations-und-entfernt-Abhaengigkeiten-7398888.html"&gt;Programmiersprache Rust 1.66 erweitert Enumerations und entfernt Abhängigkeiten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=-N8AKKCE9L8"&gt;Re-writing an Express.js chat app (web-sockets) in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Iv3UuGdB0TM"&gt;Story time: Rust compiler errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Y917bFaH_IU"&gt;Let's write a TUI Password Manager in Rust - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=BI_bHCGRgMY"&gt;Decrusting the serde crate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://docs.rs/dhat"&gt;dhat&lt;/a&gt;, a crate providing DHAT-like allocation profiling capabilities.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1139"&gt;Kornel&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/3935"&gt;Ockam - Add &lt;code&gt;clap&lt;/code&gt; command to list available vaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/3904"&gt;Ockam - Add optional --identity argument to clap commands that use CloudOpts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/3907"&gt;Ockam - Add optional --identity argument to clap command secure-channel-listener create and modify its handler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;368 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2022-12-12..2022-12-19"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105623"&gt;fix &lt;code&gt;-Z print-type-sizes&lt;/code&gt; for generators with discriminant field ordered first&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104864"&gt;account for item-local in inner scope for E0425&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105446"&gt;add &lt;code&gt;0..=isize::MAX&lt;/code&gt; range metadata to size loads from vtables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105145"&gt;add batch flag to remote-test-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/103600"&gt;address some &lt;code&gt;EarlyBinder&lt;/code&gt; nits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105663"&gt;adjust log line in &lt;code&gt;fuchsia-test-runner.py&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105725"&gt;allow &lt;code&gt;impl ~const Trait&lt;/code&gt; opaque types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105147"&gt;allow unsafe through inline const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104616"&gt;always check alignment during CTFE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105233"&gt;always evaluate vecs of subdiagnostics eagerly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105717"&gt;always use &lt;code&gt;anonymize_bound_vars&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105627"&gt;auto traits in &lt;code&gt;dyn Trait + Auto&lt;/code&gt; are suggestable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105711"&gt;bail in &lt;code&gt;collect_trait_impl_trait_tys&lt;/code&gt; if signatures reference errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105476"&gt;change pattern borrowing suggestions to be verbose and remove invalid suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105421"&gt;check AArch64 branch-protection earlier in the pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104986"&gt;combine &lt;code&gt;ty::Projection&lt;/code&gt; and &lt;code&gt;ty::Opaque&lt;/code&gt; into &lt;code&gt;ty::Alias&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105356"&gt;custom MIR: Many more improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105350"&gt;fast-path some binder relations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104765"&gt;find the right lower bound region in the scenario of partial order relations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105578"&gt;fix transmutes between pointers in different address spaces (e.g. fn ptrs on AVR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105657"&gt;guard ProjectionTy creation against passing the wrong number of substs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105493"&gt;help rust-analyzer normalize query return types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105285"&gt;highlight conflicting param-env candidates, again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105491"&gt;illegal sized bounds: only suggest mutability change if needed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105018"&gt;implement DerefMut for PathBuf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105500"&gt;make some diagnostics not depend on the source of what they reference being available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105561"&gt;normalize receiver substs and erase the regions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105674"&gt;point at method chains on &lt;code&gt;E0271&lt;/code&gt; errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105332"&gt;point out the type of associated types in every method call of iterator chains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105842"&gt;print argument name in arg mismatch if possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104875"&gt;properly handle postfix inc/dec in standalone and subexpr scenarios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/102813"&gt;simpler diagnostic when passing arg to closure and missing borrow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/102318"&gt;stabilize &lt;code&gt;default_alloc_error_handler&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105481"&gt;start improving monomorphization items stats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105523"&gt;suggest &lt;code&gt;collect&lt;/code&gt;ing into &lt;code&gt;Vec&amp;lt;_&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105839"&gt;suggest a &lt;code&gt;T: Send&lt;/code&gt; bound for &lt;code&gt;&amp;amp;mut T&lt;/code&gt; upvars in &lt;code&gt;Send&lt;/code&gt; generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105679"&gt;suggest constraining type parameter with &lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105595"&gt;suggest dereferencing receiver arguments properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105464"&gt;support &lt;code&gt;#[track_caller]&lt;/code&gt; on async closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105698"&gt;use a more efficient &lt;code&gt;Once&lt;/code&gt; on platforms without threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2676"&gt;futures: impl FusedStream for Buffered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/11434"&gt;cargo: artifact deps should works when target field specified coexists with &lt;code&gt;optional = true&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/11473"&gt;cargo: show &lt;code&gt;--help&lt;/code&gt; if there is no man page for subcommand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/11494"&gt;cargo: stabilize terminal-width&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/11477"&gt;cargo: use workspace lockfile when running &lt;code&gt;cargo package&lt;/code&gt; and &lt;code&gt;cargo publish&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105780"&gt;rustdoc: don't add "Read more" link if there is no extra content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10086"&gt;clippy: fix &lt;code&gt;new_return_no_self&lt;/code&gt; with recursive bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10094"&gt;clippy: fix logic in &lt;code&gt;IncrementVisitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10103"&gt;clippy: fix overflow ICE in &lt;code&gt;large_stack/const_arrays&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10096"&gt;clippy: fix: not suggest &lt;code&gt;seek_to_start_instead_of_rewind&lt;/code&gt; when expr is used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10020"&gt;clippy: extend &lt;code&gt;useless_conversion&lt;/code&gt; to identify more cases of useless &lt;code&gt;into_iter()&lt;/code&gt; calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10053"&gt;clippy: &lt;code&gt;manual_is_ascii_check&lt;/code&gt; check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10101"&gt;clippy: move &lt;code&gt;manual_clamp&lt;/code&gt; to nursery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10099"&gt;clippy: &lt;code&gt;null&lt;/code&gt; fn lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13792"&gt;rust-analyzer: add a command to clear flycheck diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13785"&gt;rust-analyzer: add command for manually running flychecks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13783"&gt;rust-analyzer: add parentheses for binding mode hints when they attach to an Or-pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13784"&gt;rust-analyzer: deduplicate inserted parentheses in binding mode hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13769"&gt;rust-analyzer: parse half-open &lt;code&gt;..= X&lt;/code&gt; patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13766"&gt;rust-analyzer: fix wrong config patching logic for addCallParenthesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13777"&gt;rust-analyzer: add a check for &lt;code&gt;if&lt;/code&gt; token in patterns parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13794"&gt;rust-analyzer: fix "parser seems stuck" panic when parsing colossal files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13774"&gt;rust-analyzer: resolve all inference vars in &lt;code&gt;InferenceResult::assoc_resolutions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13795"&gt;rust-analyzer: use the correct edition when formatting code in path dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;Relatively quiet week for performance, with most regressions and improvements being pretty small.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=109cccbe4f345c0f0785ce860788580c3e2a29f5&amp;amp;end=8a746f4ac3a489efb724cde813607f3b96c2df7b&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;109ccc..8a746f4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;(instructions:u)&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;range&lt;/th&gt;
&lt;th align="center"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;0.9%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 2.8%]&lt;/td&gt;
&lt;td align="center"&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;0.7%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 1.3%]&lt;/td&gt;
&lt;td align="center"&gt;39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;-1.0%&lt;/td&gt;
&lt;td align="center"&gt;[-1.1%, -1.0%]&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;-1.7%&lt;/td&gt;
&lt;td align="center"&gt;[-4.3%, -0.2%]&lt;/td&gt;
&lt;td align="center"&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;All ❌✅ (primary)&lt;/td&gt;
&lt;td align="center"&gt;0.8%&lt;/td&gt;
&lt;td align="center"&gt;[-1.1%, 2.8%]&lt;/td&gt;
&lt;td align="center"&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;3 Regressions, 4 Improvements, 2 Mixed; 3 of them in rollups
53 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2022-12-20.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3348"&gt;RFC: &lt;code&gt;c"…"&lt;/code&gt; string literals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/101947"&gt;Don't normalize in AstConv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/104154"&gt;Change &lt;code&gt;bindings_with_variant_name&lt;/code&gt; to deny-by-default &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No New or Updated RFCs were created this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2022-12-21 - 2023-01-18 🦀&lt;/p&gt;
&lt;h3&gt;Virtual&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-21 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/tqvhxsydcqbcc/"&gt;&lt;strong&gt;Show &amp;amp; Tell: Tableturf&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-27 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/qndgwsydcqbkc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-03 | Virtual (Beijing, CN) | &lt;a href="https://www.meetup.com/wasm-rust-meetup/"&gt;WebAssembly and Rust Meetup (Rustlang)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/wasm-rust-meetup/events/mbmxvsyfccbfb/"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting, a CNCF sandbox WebAssembly runtime&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-03 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/289581074/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-03 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/lsjbbtyfccbfb/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-04 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsyfccbgb/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-04 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/dvvtvsyfccbgb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-05 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/290122605/"&gt;&lt;strong&gt;Part 2: Exploring USB with Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-10 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/vndgwsyfccbnb/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-11 | Virtual (Boulder, CO, US) | &lt;a href="https://www.meetup.com/boulder-elixir-rust/"&gt;Boulder Elixir and Rust&lt;/a&gt; &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/290277662/"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-12 | Virtual (San Francisco, CA, US; Stockholm, SE; New York, NY US) | &lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/"&gt;Microsoft Reactor San Francisco&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/"&gt;Microsoft Reactor New York&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/events/290071417/"&gt;&lt;strong&gt;Crack code interview problems in Rust - Ep. 1&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-stockholm/events/290071415/"&gt;&lt;strong&gt;Stockholm Mirror&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290071420/"&gt;&lt;strong&gt;New York Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-16 | Virtual (San Francisco, CA, US; São Paulo, BR; New York, NY, US) | &lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/"&gt;Microsoft Reactor San Francisco&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/"&gt;Microsoft Reactor São Paulo&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/"&gt;Microsoft Reactor New York&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/events/290224512/"&gt;&lt;strong&gt;Primeros pasos con Rust - Qué es y Configuración el entorno de desarrollo&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/events/290224516/"&gt;&lt;strong&gt;São Paulo Mirror&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290224515/"&gt;&lt;strong&gt;New York Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-17 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/289581080/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-17 | Virtual (San Francisco, CA, US; São Paulo, BR, New York, NY, US) | &lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/"&gt;Microsoft Reactor San Francisco&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/"&gt;Microsoft Reactor São Paulo&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290224518/"&gt;Microsoft Reactor New York&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/events/290224517/"&gt;&lt;strong&gt;Primeros pasos con Rust - Creación del primer programa de Rust&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/events/290224521/"&gt;&lt;strong&gt;*São Paulo Mirror&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290224518/"&gt;&lt;strong&gt;New York Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-17 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/289015967/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-18 | Virtual (San Francisco, CA, US; São Paulo, BR; New York, NY US) | &lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/"&gt;Microsoft Reactor San Francisco&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/"&gt;Microsoft Reactor São Paulo&lt;/a&gt; and &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290224518/"&gt;Microsoft Reactor New York&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/microsoft-reactor-san-francisco/events/290224523/"&gt;&lt;strong&gt;Primeros pasos con Rust: QA y horas de comunidad&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-sao-paulo/events/290224522/"&gt;&lt;strong&gt;Sao Paulo Mirror&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/microsoft-reactor-new-york/events/290224525/"&gt;&lt;strong&gt;New York Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-18 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/tqvhxsyfccbxb/"&gt;&lt;strong&gt;Rust Study/Hack/Hang-out&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-29 | Tel Aviv, IL | &lt;a href="https://www.meetup.com/rust-tlv/"&gt;Rust TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/290156141/"&gt;&lt;strong&gt;December Edition - xtask, macros and low level features&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-29 | Freiburg, DE | &lt;a href="https://arso.xyz/"&gt;Arso Collective&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tacker.fr/node/10951"&gt;&lt;strong&gt;Rust Café Freiburg&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-27 | Austin, TX, US | &lt;a href="https://www.meetup.com/atx-rustaceans/"&gt;ATX Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/atx-rustaceans/events/290064553/"&gt;&lt;strong&gt;Atx Rustaceans Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-05 | Lehi, UT, US | &lt;a href="https://www.meetup.com/utah-rust/"&gt;Utah Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/dsbpxsydcqbdc/"&gt;&lt;strong&gt;Interesting Title and Food!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;h2&gt;Jobs&lt;/h2&gt;
&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/zpd1qo/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;In the depths of a computer's core,&lt;br&gt;
Where bits and bytes are stored,&lt;br&gt;
Lies a tool that's often ignored&lt;br&gt;
But without it, things would be floored.&lt;/p&gt;
&lt;p&gt;It's the rust borrow checker,&lt;br&gt;
A guardian of memory,&lt;br&gt;
Ensuring that data is in the right place&lt;br&gt;
And never causing miseries.&lt;/p&gt;
&lt;p&gt;With each line of code it carefully scans,&lt;br&gt;
Checking for underflows and overflows,&lt;br&gt;
Preventing errors, saving the day,&lt;br&gt;
And keeping the program in a flow.&lt;/p&gt;
&lt;p&gt;So let's give a nod to this silent hero,&lt;br&gt;
Whose work may go unnoticed, but is never zero,&lt;br&gt;
It's the rust borrow checker,&lt;br&gt;
A vital part of the machine,&lt;br&gt;
Ensuring our programs run clean.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://twitter.com/vivek_verse/status/1602232115982393344"&gt;ChatGPT prompted by Vivek Yadav&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1340"&gt;llogiq&lt;/a&gt; is quite self-appreciative for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/zsrzuq/this_week_in_rust_474/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 21 Dec 2022 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2022-12-21:/blog/2022/12/21/this-week-in-rust-474/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 473</title><link>https://this-week-in-rust.org/blog/2022/12/14/this-week-in-rust-473/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2022/12/05/survey-launch.html"&gt;Launching the 2022 State of Rust Survey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/welcoming-shopify-as-our-inaugural-gold-member/"&gt;Welcoming Shopify as Our Inaugural Gold Member&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2022-11/"&gt;This Month in Rust OSDev: November 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2022/12/12/changelog-159.html"&gt;rust-analyzer changelog #159&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dioxuslabs.com/blog/templates-diffing/"&gt;Making Dioxus (almost) as fast as SolidJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ivandemarino.me/2022/12/announcing-ksunami"&gt;Announcing Ksunami v0.1.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fornjot.app/blog/weekly-release/2022-w50/"&gt;Fornjot (code-first CAD in Rust) - Weekly Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yjdoc2/announcing-youki-040-ocn"&gt;Youki v0.0.4 Release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2022/12/11/catch22.html"&gt;Catch 22! Rust in Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.theincredibleholk.org/blog/2022/12/12/dyn-star-codegen/"&gt;A Look at dyn* Code Generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shopify.engineering/shopify-rust-systems-programming"&gt;Shopify Embraces Rust for Systems Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncameron.org/blog/rust-in-2023/"&gt;Rust in 2023&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kurtlawrence.info/blog/category-theory-with-rust-pt2"&gt;Category Theory with Rust (pt2) - GATs example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kas-gui.github.io/blog/state-of-GUI-2022.html"&gt;Rust: state of GUI, from the perspective of KAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://poignardazur.github.io/2022/12/11/rust-gui-blog-posts-2023/"&gt;A call for blogs about Rust GUI in 2023&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=ZzsbN7HBd7E"&gt;Next Generation i18n with Rust Using ICU4X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=DM2DI3ZI_BQ"&gt;Supercharging Zero-Copy Deserialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=2nslVz2ju9I"&gt;Let's write a TCP Port Scanner in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=CJtvnepMVAU"&gt;Rust Is Easy (The COMPILER teaches you!)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/gray-olson/"&gt;Presser with Gray Olson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/seaton-ullberg/"&gt;Kernel Density Estimation with Seaton Ullberg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.propelauth.com/post/clean-code-with-rust-and-axum"&gt;Clean Code with Rust &amp;amp; Axum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/source-and-buggy/data-driven-performance-optimization-with-rust-and-miri-70cb6dde0d35"&gt;Data-driven performance optimization with Rust and Miri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/embedded-rust-embassy-analog-sensing-with-adcs"&gt;Embedded Rust &amp;amp; Embassy: Analog Sensing with ADCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/en/blog/79/sorting-with-simd"&gt;Sorting with SIMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mainmatter.com/blog/2022/12/09/sending-emails-from-the-edge-with-rust/"&gt;Sending Emails from the Edge with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/composing-underpinnings-observable-rust-application/"&gt;Composing an observable Rust application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=DSdXAWCdhmk&amp;amp;list=PL8Q1w7Ff68DDmxLks3_nkZU8xAc6CPe1l"&gt;Meetup: Rust in critical infrastructure, Amsterdam 30 Nov 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://docs.rs/lazy_format"&gt;lazy_format&lt;/a&gt;, a lazy version of format! for more efficient composed string formatting operations.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1133"&gt;Nathan West&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;!-- CFPs go here, use this format: * [project name - title of issue](link to issue) --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://crates.io/crates/impl-tools"&gt;impl-tools - more testing&lt;/a&gt; &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821/481"&gt;more context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/time-rs/time/issues/428"&gt;time - more testing&lt;/a&gt; &lt;a href="https://mastodon.social/@jhpratt/109498400905572278"&gt;more context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/3903"&gt;Ockam - Refactor request_controller function to accept an optional Identity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/3906"&gt;Ockam - Add optional --identity argument to secure-channel create and modify implementation on ockam_api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;320 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2022-12-05..2022-12-12"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105109"&gt;add LLVM KCFI support to the Rust compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105175"&gt;add StableOrd trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105408"&gt;add help for &lt;code&gt;#![feature(impl_trait_in_fn_trait_return)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104019"&gt;compute generator sizes with &lt;code&gt;-Zprint_type_sizes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105410"&gt;consider &lt;code&gt;parent_count&lt;/code&gt; for const param defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104922"&gt;detect long types in E0308 and write them to disk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105369"&gt;detect spurious ; before assoc fn body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105119"&gt;disable top down MIR inlining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105267"&gt;don't ICE in ExprUseVisitor on FRU for non-existent struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105283"&gt;don't call &lt;code&gt;diagnostic_hir_wf_check&lt;/code&gt; query if we have infer variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/102900"&gt;don't internalize &lt;code&gt;__llvm_profile_counter_bias&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/103647"&gt;enable ThinLTO for rustc on &lt;code&gt;x86_64-apple-darwin&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/103591"&gt;enable ThinLTO for rustc on x64 msvc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105389"&gt;enable profiler in dist-powerpc64le-linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104572"&gt;fix build on powerpc-unknown-freebsd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105482"&gt;fix invalid codegen during debuginfo lowering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105485"&gt;fix lint perf regressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105357"&gt;group some fields in a common struct so we only pass one reference instead of three&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105207"&gt;interpret: clobber return place when calling function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105555"&gt;llvm-wrapper: adapt for LLVM API changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105298"&gt;llvm-wrapper: adapt for an LLVM API change&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105453"&gt;make &lt;code&gt;VecDeque::from_iter&lt;/code&gt; &lt;code&gt;O(1)&lt;/code&gt; from &lt;code&gt;vec(_deque)::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105271"&gt;make integer-to-integer &lt;code&gt;From&lt;/code&gt; impls &lt;code&gt;#[inline(always)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105508"&gt;make pointer &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;wrapping_sub&lt;/code&gt; methods &lt;code&gt;#[inline(always)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105262"&gt;make some trivial functions &lt;code&gt;#[inline(always)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105468"&gt;mangle "main" as &lt;code&gt;"__main_void"&lt;/code&gt; on wasm32-wasi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105005"&gt;on E0195 point at where clause lifetime bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105324"&gt;point at GAT &lt;code&gt;where&lt;/code&gt; clause when an obligation is unsatisfied&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105192"&gt;point at LHS on binop type err if relevant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105349"&gt;point at args in associated const fn pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105229"&gt;re-enable removal of ZST writes to unions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105254"&gt;recurse into nested impl-trait when computing variance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105160"&gt;remove &lt;code&gt;token::Lit&lt;/code&gt; from &lt;code&gt;ast::MetaItemLit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105291"&gt;remove {&lt;code&gt;Early&lt;/code&gt;, &lt;code&gt;Late&lt;/code&gt;}&lt;code&gt;LintPassObjects&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105363"&gt;shrink &lt;code&gt;rustc_parse_format::Piece&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105223"&gt;suggest parenthesis around &lt;code&gt;ExprWithBlock BinOp ExprWithBlock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105174"&gt;suggest removing struct field from destructive binding only in shorthand scenario&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105338"&gt;tweak "the following other types implement trait"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105506"&gt;tweak &lt;code&gt;rustc_must_implement_one_of&lt;/code&gt; diagnostic output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2721"&gt;miri: allow configurable and platform-specific page sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2725"&gt;miri: make unix path handling on Windows hosts (and vice versa) preserve absoluteness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/11450"&gt;cargo: allow Check targets needed for optional doc-scraping to fail without killing the build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105539"&gt;rustdoc: only hide lines starting with &lt;code&gt;#&lt;/code&gt; in rust code blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105457"&gt;rustdoc: prevent auto/blanket impl retrieval if there were compiler errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9840"&gt;clippy: &lt;code&gt;arithmetic-side-effects&lt;/code&gt;: consider user-provided pairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10055"&gt;clippy: &lt;code&gt;uninlined_format_args:&lt;/code&gt;ignore assert! and &lt;code&gt;debug_assert!&lt;/code&gt; before 2021 edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10047"&gt;clippy: add 1.58 MSRV for &lt;code&gt;collapsible_str_replace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9920"&gt;clippy: add &lt;code&gt;suppress_restriction_lint_in_const&lt;/code&gt; config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10043"&gt;clippy: add lint &lt;code&gt;almost_complete_digit_range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9826"&gt;clippy: add semicolon-outside/inside-block lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10004"&gt;clippy: don't suggest keeping borrows in &lt;code&gt;identity_op&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10023"&gt;clippy: fix &lt;code&gt;zero_ptr&lt;/code&gt; suggestion for &lt;code&gt;no_std&lt;/code&gt; crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13490"&gt;rust-analyzer: compute data layout of types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13733"&gt;rust-analyzer: add "Remove redundant parentheses" assist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13732"&gt;rust-analyzer: add fallback case in generated &lt;code&gt;PartialEq&lt;/code&gt; impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13726"&gt;rust-analyzer: allow unwrap block in let initializers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13715"&gt;rust-analyzer: breaking snippets on typed incomplete suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13749"&gt;rust-analyzer: don't show duplicated adjustment hints for blocks, ifs and matches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13762"&gt;rust-analyzer: fix parsing of &lt;code&gt;_ = x&lt;/code&gt; in closure body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13746"&gt;rust-analyzer: make &lt;code&gt;make_body&lt;/code&gt; respect comments in &lt;code&gt;extract_function&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13750"&gt;rust-analyzer: normalize projection after discarding free &lt;code&gt;BoundVar&lt;/code&gt;s in RPIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13742"&gt;rust-analyzer: only shift &lt;code&gt;BoundVar&lt;/code&gt;s that come from outside lowering context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13745"&gt;rust-analyzer: show type info on hover of enum variant fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;Fairly quiet week with the only excitement coming from a nice improvement implemented by @nnethercote which fixed a pesky performance regressions in the linting system. This produced a 0.6% performance improvement across a large amount of the real world crates we test against. &lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=9db224fc908059986c179fc6ec433944e9cfce50&amp;amp;end=109cccbe4f345c0f0785ce860788580c3e2a29f5&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;9db224fc..109cccbe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;(instructions:u)&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;range&lt;/th&gt;
&lt;th align="center"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;0.2%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 0.2%]&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;1.7%&lt;/td&gt;
&lt;td align="center"&gt;[0.3%, 3.3%]&lt;/td&gt;
&lt;td align="center"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;-0.8%&lt;/td&gt;
&lt;td align="center"&gt;[-2.2%, -0.2%]&lt;/td&gt;
&lt;td align="center"&gt;129&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;-1.2%&lt;/td&gt;
&lt;td align="center"&gt;[-4.4%, -0.1%]&lt;/td&gt;
&lt;td align="center"&gt;97&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;All ❌✅ (primary)&lt;/td&gt;
&lt;td align="center"&gt;-0.7%&lt;/td&gt;
&lt;td align="center"&gt;[-2.2%, 0.2%]&lt;/td&gt;
&lt;td align="center"&gt;132&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;2 Regressions, 2 Improvements, 4 Mixed; 3 of them in rollups
41 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2022-12-13.md"&gt;full report&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3324"&gt;Support upcasting of &lt;code&gt;dyn Trait&lt;/code&gt; values&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3308"&gt;Add &lt;code&gt;core::mem::offset_of!&lt;/code&gt; RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/3168"&gt;Cargo allow running binaries from development or build dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/99767"&gt;Stabilize &lt;code&gt;#![feature(target_feature_11)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/102318"&gt;Stabilize default_alloc_error_handler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/105085"&gt;Stop promoting all the things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/103763"&gt;&lt;code&gt;Arc::ptr_eq&lt;/code&gt; does not always return "true if the two Arcs point to the same allocation" as documented&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/101947"&gt;Don't normalize in AstConv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/84762"&gt;Encode spans relative to the enclosing item -- enable by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/97373"&gt;impl DispatchFromDyn for Cell and UnsafeCell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/65815"&gt;Tracking issue for the "efiapi" calling convention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3355"&gt;RFC: Start working on a Rust specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2022-12-14 - 2023-01-11 🦀&lt;/p&gt;
&lt;h3&gt;Virtual&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-14 | Virtual (Boulder, CO, US) | &lt;a href="https://www.meetup.com/boulder-elixir-rust/"&gt;Boulder Elixir and Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/zvxcsrydcqbsb/"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-24 | Virtual (Linz, AT) | &lt;a href="https://www.meetup.com/rust-linz/"&gt;Rust Linz&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-linz/events/290196122/"&gt;&lt;strong&gt;Rust Meetup Linz - 28th Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-14 | Virtual (México City, MX) | &lt;a href="https://www.meetup.com/rust-mx/"&gt;Rust MX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-mx/events/289973784/"&gt;&lt;strong&gt;Rust y Arduino&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-15 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/qtvtvsydcqbtb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-20 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;Berlin.rs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/2022/12/20/rust-hack-and-learn.html"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-20 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/vdhxgsydcqbbc/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-21 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/tqvhxsydcqbcc/"&gt;&lt;strong&gt;Show &amp;amp; Tell: Tableturf&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-27 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/qndgwsydcqbkc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-03 | Virtual (Beijing, CN) | &lt;a href="https://www.meetup.com/wasm-rust-meetup/"&gt;WebAssembly and Rust Meetup (Rustlang)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/wasm-rust-meetup/events/mbmxvsyfccbfb/"&gt;&lt;strong&gt;Monthly WasmEdge Community Meeting, a CNCF sandbox WebAssembly runtime&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-03 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/289581074/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-03 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/lsjbbtyfccbfb/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-04 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsyfccbgb/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-04 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/dvvtvsyfccbgb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-05 | Virtual (Charlottesville, VA, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/290122605/"&gt;&lt;strong&gt;Part 2: Exploring USB with Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-29 | Tel Aviv, IL | &lt;a href="https://www.meetup.com/rust-tlv/"&gt;Rust TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/290156141/"&gt;&lt;strong&gt;December Edition - xtask, macros and low level features&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-14 | Trondheim, NO | &lt;a href="https://www.meetup.com/rust-trondheim"&gt;Rust Trondheim&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-trondheim/events/290100114/"&gt;&lt;strong&gt;Rust Advent of Code hackathon&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-15 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/zmppzsydcqbvb/"&gt;&lt;strong&gt;OnSite Meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-14 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/290161310/"&gt;&lt;strong&gt;Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-20 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/wjkjssydcqbbc/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-27 | Austin, TX, US | &lt;a href="https://www.meetup.com/atx-rustaceans/"&gt;ATX Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/atx-rustaceans/events/290064553/"&gt;&lt;strong&gt;Atx Rustaceans Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-05 | Lehi, UT, US | &lt;a href="https://www.meetup.com/utah-rust/"&gt;Utah Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/dsbpxsydcqbdc/"&gt;&lt;strong&gt;Interesting Title and Food!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;h2&gt;Jobs&lt;/h2&gt;
&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/ymepy8/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;... you can lead a horse to git but you cannot make it commit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://old.reddit.com/r/rust/comments/zjx2xx/blog_post_rust_in_2023/izz4g8d/"&gt;/u/kibwen on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1341"&gt;Anton Fetisov&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/zmhhvi/this_week_in_rust_473/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 14 Dec 2022 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2022-12-14:/blog/2022/12/14/this-week-in-rust-473/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 472</title><link>https://this-week-in-rust.org/blog/2022/12/07/this-week-in-rust-472/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from Rust Community&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/share-your-thoughts-on-the-state-of-rust-in-2022/"&gt;Share Your Thoughts on the “State of Rust” in 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustnigeria.curated.co/issues/12#start"&gt;Rust Nigeria Newsletter - Happy Holidays!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://seanmonstar.com/post/702541983003148288/this-month-in-hyper-november-2022"&gt;This Month in hyper: November 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2022/12/05/changelog-184.html"&gt;IntelliJ Rust Changelog #184&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2022/12/05/changelog-158.html"&gt;rust-analyzer changelog #158&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fyrox.rs/blog/post/twif5/"&gt;This Week in Fyrox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/news/GCC-Rust-v4-Cleared-For-Landing"&gt;GCC Rust Front-End v4 Posted - Now Cleared For Merging In GCC 13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sea-ql.org/blog/2022-12-02-whats-new-in-seaography-0.3.0/"&gt;What's new in Seaography 0.3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fornjot.app/blog/weekly-release/2022-w49/"&gt;Fornjot (code-first CAD in Rust) - Weekly Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://helix-editor.com/news/release-22-12-highlights/"&gt;Helix editor 22.12 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/embedded-rust-embassy-pwm-generation"&gt;Embedded Rust &amp;amp; Embassy: PWM Generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://morestina.net/blog/1868/self-referential-types-for-fun-and-profit"&gt;Self-referential types for fun and profit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vgatherps.github.io/2022-11-28-dec/"&gt;Parsing numbers into base-10 decimals with SIMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.readyset.io/bounds-checks/"&gt;How much does Rust's bounds checking actually cost?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/rust/2022/12/05/what-every-rust-developer-should-know-about-macro-support-in-ides/"&gt;What Every Rust Developer Should Know About Macro Support in IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=zVUTZlNCb8U"&gt;High Performance Rust UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bekk.christmas/post/2022/1/introduction-to-rust"&gt;Introduction to Rust: Writing an HTTP CLI client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://grack.com/blog/2022/12/01/hacking-bluetooth-to-brew-coffee-on-github-actions-part-1/"&gt;Hacking Bluetooth to Brew Coffee from GitHub Actions: Part 1 - Bluetooth Investigation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://frehberg.com/2022/12/rust-vue-websocket-demo/"&gt;Rust Axum/Vue WebSocket Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/series/advent-of-code-2022"&gt;Advent of Code 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html"&gt;Memory Safe Languages in Android 13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.manning.com/books/rust-web-development"&gt;The book "Rust Web Development" (Manning) is released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/zeroize"&gt;zeroize&lt;/a&gt;, a crate to securely clear secrets from memory either manually or on drop, with both methods for your types being but one &lt;code&gt;#[derive]&lt;/code&gt; away.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1132"&gt;Tally&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;!-- CFPs go here, use this format: * [project name - title of issue](link to issue) --&gt;
&lt;!-- * [ - ]() --&gt;

&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;339 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2022-11-28..2022-12-05"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/103293"&gt;remove drop order twist of &amp;amp;&amp;amp; and || and make them associative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104963"&gt;&lt;code&gt;rustc_ast_lowering:&lt;/code&gt;stop lowering imports into multiple items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104895"&gt;avoid Invalid code suggested when encountering unsatisfied trait bounds in derive macro code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105181"&gt;don't add a note for implementing a trait if its inner type is erroneous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105188"&gt;don't elide type information when printing E0308 with &lt;code&gt;-Zverbose&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104856"&gt;don't suggest associated function call for associated const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105164"&gt;restore &lt;code&gt;use&lt;/code&gt; suggestion for &lt;code&gt;dyn&lt;/code&gt; method call requiring &lt;code&gt;Sized&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104905"&gt;some initial normalization method changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/101975"&gt;suggest to use . instead of &lt;code&gt;::&lt;/code&gt; when accessing a method of an object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/774"&gt;implement &lt;code&gt;should_continue&lt;/code&gt; in chalk-recursive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/2699"&gt;miri: refactor scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/97485"&gt;rewrite LLVM's archive writer in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105121"&gt;cheaper &lt;code&gt;dump_mir&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104940"&gt;allow to feed a value in another query's cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104861"&gt;attribute cleanups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/94487"&gt;also cache the stable hash of interned Predicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105183"&gt;merge generics and where predicates and prevent duplicates in where predicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104999"&gt;adjust inlining attributes around &lt;code&gt;panic_immediate_abort&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105133"&gt;ensure query backtraces work for &lt;code&gt;DefId&lt;/code&gt;s created after ast lowering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104614"&gt;add &lt;code&gt;type_ascribe!&lt;/code&gt; macro as placeholder syntax for type ascription&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/101514"&gt;stabilize &lt;code&gt;nonzero_bits&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105126"&gt;make &lt;code&gt;VecDeque::new_in&lt;/code&gt; unstably const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105046"&gt;send &lt;code&gt;VecDeque::from_iter&lt;/code&gt; via &lt;code&gt;Vec::from_iter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105002"&gt;add &lt;code&gt;PathBuf::as_mut_os_string&lt;/code&gt; and &lt;code&gt;Path::as_mut_os_str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/104811"&gt;implement TcpStream shutdown for wasm32-wasi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105153"&gt;create a hacky fail-fast mode that stops tests at the first failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/11337"&gt;cargo: aware of compression ratio for unpack size limit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/11299"&gt;cargo: improve file found in multiple build targets warning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105182"&gt;rustdoc-Json: don't inline foreign traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9962"&gt;clippy: &lt;code&gt;comparison_to_empty&lt;/code&gt;: peel derefs in suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9943"&gt;clippy: &lt;code&gt;manual_let_else:&lt;/code&gt;keep macro call on suggestion blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9987"&gt;clippy: don't cross contexts while building the suggestion for &lt;code&gt;redundant_closure_call&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9997"&gt;clippy: don't lint &lt;code&gt;explicit_auto_deref&lt;/code&gt; when the initial type is neither a reference, nor a receiver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9982"&gt;clippy: don't lint &lt;code&gt;from_over_into&lt;/code&gt; for opaque types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10022"&gt;clippy: don't lint &lt;code&gt;implicit_clone&lt;/code&gt; when the type doesn't implement clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10013"&gt;clippy: don't lint &lt;code&gt;manual_assert&lt;/code&gt; in &lt;code&gt;else if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10012"&gt;clippy: don't lint &lt;code&gt;string_lit_as_bytes&lt;/code&gt; in match scrutinees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9980"&gt;clippy: don't lint &lt;code&gt;unnecessary_cast&lt;/code&gt; in mixed macro context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9981"&gt;clippy: don't lint &lt;code&gt;unnecessary_operation&lt;/code&gt; in mixed macro contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10006"&gt;clippy: don't suggest removing &lt;code&gt;mut&lt;/code&gt; from references in &lt;code&gt;redundant_static_lifetimes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10027"&gt;clippy: fix ICE in &lt;code&gt;unnecessary_to_owned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10007"&gt;clippy: fix ICE in &lt;code&gt;result_large_err&lt;/code&gt; with uninhabited enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10001"&gt;clippy: fix ICE in &lt;code&gt;unused_rounding&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9966"&gt;clippy: fix &lt;code&gt;manual_let_else&lt;/code&gt; producing a wrong suggestion with or-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9996"&gt;clippy: fix &lt;code&gt;unnecessary_cast&lt;/code&gt; suggestion when taking a reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9975"&gt;clippy: move &lt;code&gt;index_refutable_slice&lt;/code&gt; to &lt;code&gt;pedantic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/9989"&gt;clippy: move &lt;code&gt;unnecessary_unsafety_doc&lt;/code&gt; to &lt;code&gt;pedantic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13707"&gt;rust-analyzer: add &lt;code&gt;move_const_to_impl&lt;/code&gt; assist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13690"&gt;rust-analyzer: implement vararg parameter type inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/13696"&gt;rust-analyzer: fix signature help not showing up when cursor is between &lt;code&gt;))&lt;/code&gt; or &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A mixed bag of a week. 2 of the 3 regressions are connected to changes to the
query system that underlies incremental compilation. The third regression is
still being investigated. For all three, the impact on cycle counts that are
within our noise tolerance levels There were several small-ish improvements,
though PR #104963 is worth calling out: a well-factored change to
how we lower the AST into HIR that had a broad positive impact. One final
note: the summary-opt max-rss seems to gone up by 1.5% over the past month
(&lt;a href="https://perf.rust-lang.org/?start=2022-11-06&amp;amp;end=2022-12-06&amp;amp;kind=percentfromfirst&amp;amp;stat=max-rss"&gt;perf&lt;/a&gt;),
via a gradual climb; just something to keep our eyes on going forward.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=8a09420ac48658cad726e0a6997687ceac4151e3&amp;amp;end=9db224fc908059986c179fc6ec433944e9cfce50&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;8a09420a..9db224fc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2022-12-06.md"&gt;full report&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3&gt;Call for Testing&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;!-- Pre-Stabilization RFCs go here --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;!-- RFC and FCP sections go here --&gt;

&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3338"&gt;Style evolution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/105018"&gt;Implement DerefMut for PathBuf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/104765"&gt;Find the right lower bound region in the scenario of partial order relations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3352"&gt;Relax const-eval restrictions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upcoming Events&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2022-12-07 - 2023-01-04 🦀&lt;/p&gt;
&lt;h3&gt;Virtual&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-07 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/287027660/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-07 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/dvvtvsydcqbkb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-08 | Virtual (Nürnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/hlvbvsydcqblb/"&gt;&lt;strong&gt;Rust Nürnberg online #20&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-08 | Virtual (San Francisco, CA, US) | &lt;a href="https://www.meetup.com/data-ai-online/"&gt;Data + AI Online Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/data-ai-online/events/289672886/"&gt;&lt;strong&gt;D3L2: The Genesis of Delta Rust with QP Hou&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-10 | Virtual | &lt;a href="https://gamedev.rs/"&gt;Rust GameDev&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?q=https%3A%2F%2Fdiscord.gg%2FyNtPTb2&amp;amp;sa=D&amp;amp;ust=1666661760000000&amp;amp;usg=AOvVaw13uHY9m-8bJJwgeP58VS8l"&gt;&lt;strong&gt;Rust GameDev Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-13 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/vndgwsydcqbrb/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-13 | Virtual (Rostock, DE) | &lt;a href="https://www.meetup.com/altow-academy/"&gt;Altow Academy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/altow-academy/events/289352426/"&gt;&lt;strong&gt;Rust Meetup Rostock&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-13 | Virtual (Saarbrücken, DE) | &lt;a href="https://www.meetup.com/rust-saar/"&gt;Rust-Saar&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-saar/events/289663288/"&gt;&lt;strong&gt;Meetup: 25u16&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-14 | Virtual (Boulder, CO, US) | &lt;a href="https://www.meetup.com/boulder-elixir-rust/"&gt;Boulder Elixir and Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/boulder-elixir-rust/events/zvxcsrydcqbsb/"&gt;&lt;strong&gt;Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-24 | Virtual (Linz, AT) | &lt;a href="https://www.meetup.com/rust-linz/"&gt;Rust Linz&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-linz/events/290196122/"&gt;&lt;strong&gt;Rust Meetup Linz - 28th Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-14 | Virtual (México City, MX) | &lt;a href="https://www.meetup.com/rust-mx/"&gt;Rust MX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-mx/events/289973784/"&gt;&lt;strong&gt;Rust y Arduino&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-15 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/qtvtvsydcqbtb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-20 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;Berlin.rs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berline.rs/2022/12/20/rust-hack-and-learn.html"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-20 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/vdhxgsydcqbbc/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-21 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/tqvhxsydcqbcc/"&gt;&lt;strong&gt;Show &amp;amp; Tell: Tableturf&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-27 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/Dallas-Rust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallas-rust/events/qndgwsydcqbkc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-03 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/lsjbbtyfccbfb/"&gt;&lt;strong&gt;Buffalo Rust User Group, First Tuesdays&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-04 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/qwtdjsyfccbgb/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-01-04 | Virtual (Stuttgart, DE) | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/dvvtvsyfccbgb/"&gt;&lt;strong&gt;Rust-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-29 | Tel Aviv, IL | &lt;a href="https://www.meetup.com/rust-tlv/"&gt;Rust TLV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-tlv/events/290156141/"&gt;&lt;strong&gt;December Edition - xtask, macros and low level features&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-07 | Cologne, DE | &lt;a href="https://www.meetup.com/rustcologne/events"&gt;Rust Cologne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustcologne/events/290084307/"&gt;&lt;strong&gt;Advent of Rust 1.65&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-07 | Zurich, CH | &lt;a href="https://www.meetup.com/Rust-Zurich/"&gt;Rust Zurich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-zurich/events/289518586/"&gt;&lt;strong&gt;Next generation i18n with rust (icu4x) and zero-copy deserialization&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-14 | Trondheim, NO | &lt;a href="https://www.meetup.com/rust-trondheim"&gt;Rust Trondheim&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-trondheim/events/290100114/"&gt;&lt;strong&gt;Rust Advent of Code hackathon&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-15 | Stuttgart, DE | &lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/"&gt;Rust Community Stuttgart&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-community-stuttgart/events/zmppzsydcqbvb/"&gt;&lt;strong&gt;OnSite Meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-08 | Columbus, OH, US | &lt;a href="https://www.meetup.com/columbus-rs/events/"&gt;Columbus Rust Society&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrydcqblb/"&gt;&lt;strong&gt;Monthly Meeting&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-14 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/290161310/"&gt;&lt;strong&gt;Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-20 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/wjkjssydcqbbc/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2022-12-27 | Austin, TX, US | &lt;a href="https://www.meetup.com/atx-rustaceans/"&gt;ATX Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/atx-rustaceans/events/290064553/"&gt;&lt;strong&gt;Atx Rustaceans Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Oceania&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2022-12-09 | Melbourne, VIC, AU | &lt;a href="https://www.meetup.com/rust-melbourne"&gt;Rust Melbourne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-melbourne/events/290037796/"&gt;&lt;strong&gt;December 2022 Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;h2&gt;Jobs&lt;/h2&gt;
&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/ymepy8/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;To date, there have been zero memory safety vulnerabilities discovered in Android’s Rust code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html"&gt;Jeffrey Vander Stoep on the google security team blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1335"&gt;Anton Fetisov&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/zfjo5r/this_week_in_rust_472/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 07 Dec 2022 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2022-12-07:/blog/2022/12/07/this-week-in-rust-472/</guid><category>This Week in Rust</category></item></channel></rss>