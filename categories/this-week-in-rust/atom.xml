<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/categories/this-week-in-rust/atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2020-12-30T00:00:00-05:00</updated><entry><title>This Week in Rust 371</title><link href="https://this-week-in-rust.org/blog/2020/12/30/this-week-in-rust-371/" rel="alternate"></link><updated>2020-12-30T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-12-30:blog/2020/12/30/this-week-in-rust-371/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/12/28/cjgillot-and-nadrieril-for-compiler-contributors.html"&gt;Please welcome cjgillot and Nadrieril to compiler-contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/12/29/1.49.0-prerelease.html"&gt;1.49.0 pre-release testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/12/28/changelog-138.html"&gt;IntelliJ Rust Changelog #138&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/12/28/changelog-57.html"&gt;Rust Analyzer Changelog #57&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.redox-os.org/news/release-0.6.0/"&gt;Redox OS 0.6.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/12/28/csdi.html"&gt;Call Site Dependency Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leshow.github.io/post/udp_tokio_1_0/"&gt;A look at tokio 1.0 API Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2003.03296"&gt;Memory-Safety Challenge Considered Solved? An In-Depth Study with All Rust CVEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sidkshatriya/me/blob/master/003-Rd-makes-significant-advances.md"&gt;45,000+ lines of Rust code later: An update on the Record &amp;amp; Debug Tool (rd)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/cloning-reference-method-calls/"&gt;Cloning A Reference and Method Call Syntax in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://djharper.dev/post/2020/12/26/executable-pngs/"&gt;Executable PNGs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://windsoilder.github.io/why_mongodump_is_fast.html"&gt;Why mongodump is fast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leshow.github.io/post/udp_tokio_1_0/"&gt;A look at tokio 1.0 API Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;Concurrency in modern programming languages: Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rkudryashov/building-distributed-graphql-backend-using-rust-and-apollo-federation-50bm"&gt;Building distributed GraphQL backend using Rust and Apollo Federation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/enhance-code-quality-using-matches-macro-in-rust/"&gt;Enhance code quality using &lt;code&gt;matches&lt;/code&gt; macro! in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://taggartsoftware.medium.com/clickonce-for-rust-apps-f96873feb8f1"&gt;ClickOnce for Rust Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhauniarovich.com/post/2020/2020-12-closures-in-rust/"&gt;Closures in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cyplo.dev/posts/2020/12/fail-and-fork/"&gt;Don't let failures spread over your suite with process-based tests isolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-tutorials.github.io/triangle-from-scratch/opening_a_window/win32.html"&gt;Triangle From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [series] &lt;a href="https://youtube.com/playlist?list=PLoSY6azqHO7BpQo8jWKi4cFIobJo-TCzU"&gt;(Live Coding) Advent of Code 2020 in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Redox-OS-0.6-Released"&gt;Redox OS 0.6 Released With Many Fixes, Rewritten Kernel Memory Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2020/12/30/the-more-things-change/"&gt;The more things change...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kl1e24/min_const_generics_stabilization_has_been_merged/"&gt;Min const generics stabilization has been merged into master! It will reach stable on March 25, 2021 as part of Rust 1.51&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/raskr/rust-autograd"&gt;autograd&lt;/a&gt;, a library of differentiable operations and tensors for machine learning applications.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/864"&gt;Zicklag&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/withoutboats/heck/issues/18"&gt;withoutboats/heck - kebab case doesn't treat numbers as separate word?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jplatte/js_int/issues?q=is:issue+is:open+label:%22good+first+issue%22"&gt;jplatte/js_int has several good first issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;275 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-12-21..2020-12-28"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79135"&gt;stabilize &lt;code&gt;min_const_generics&lt;/code&gt;&lt;/a&gt; (Huzzah!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80262"&gt;utilize PGO for rustc linux dist builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80284"&gt;suggest fn ptr rather than fn item and suggest to use &lt;code&gt;Fn&lt;/code&gt; trait bounds rather than the unique closure type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80160"&gt;implement a compiler diagnostic for move async mistake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80226"&gt;highlight edition-specific keywords correctly in code blocks, accounting for code block edition modifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80246"&gt;prevent caching normalization results with a cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80170"&gt;fix ICE when lookup method in trait for type that have bound vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80099"&gt;remove &lt;code&gt;DefPath&lt;/code&gt; from &lt;code&gt;Visibility&lt;/code&gt; and calculate it on demand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79589"&gt;`rustc_query_system : reduce dependency graph memory usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79134"&gt;add &lt;code&gt;impl Div&amp;lt;NonZeroU'*&lt;/code&gt;&amp;gt; for u`* which cannot panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79261"&gt;deprecate atomic &lt;code&gt;compare_and_swap&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79213"&gt;stabilize &lt;code&gt;core::slice::fill&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79022"&gt;stabilize &lt;code&gt;deque_range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80400"&gt;use &lt;code&gt;clone_from&lt;/code&gt; from &lt;code&gt;hashbrown::&lt;/code&gt;{&lt;code&gt;HashMap&lt;/code&gt;, &lt;code&gt;HashSet&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2283"&gt;futures: perf: pack the state and future of unfolds in the same memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8976"&gt;cargo: stabilize &lt;code&gt;RUSTC_WORKSPACE_WRAPPER&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79642"&gt;rustdoc: stabilise &lt;code&gt;--default-theme&lt;/code&gt; command line option&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-24.md"&gt;2020-12-24&lt;/a&gt;:
3 Regressions, 5 Improvements
Major event this week is landing PGO for rustc (on x86_64-unknown-linux-gnu). We
expect other platforms to follow but further investigation will be needed,
especially for cross-compiled platforms. We expect to add LLVM PGO as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Triage done by @simulacrum.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-24.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77853"&gt;Stabilize slice::strip_prefix and slice::strip_suffix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/issues/48556"&gt;Tracking issue for stable SIMD in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3046"&gt;New trait: core::convert::IntoUnderlying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3042"&gt;#[target_feature(..)] In Trait Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/274936687/"&gt;January 5, Buffalo, NY, US - Buffalo Rust User Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/275424876/"&gt;January 6, Johannesburg, ZA - Monthly Joburg Rust Chat - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstrycccbjb/"&gt;January 6, Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrycccbkb/"&gt;January 7, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrycccbqb/"&gt;January 12, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cemsbv.nl/jobs/rust-software-engineer"&gt;Rust Software Engineer at CEMS (Amsterdam, NL and Delft, NL)&lt;/a&gt;
&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a common theme in Rust’s design: To reduce breakage as code evolves, you’re only allowed to rely on features that have been intentionally declared by the author.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/why-explicit-const-fn-token-needed/53006/2"&gt;2e71828 on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/980"&gt;Kornel&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 370</title><link href="https://this-week-in-rust.org/blog/2020/12/23/this-week-in-rust-370/" rel="alternate"></link><updated>2020-12-23T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-12-23:blog/2020/12/23/this-week-in-rust-370/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No official blog posts or newsletters this week.&lt;/p&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/12/21/changelog-56.html"&gt;Rust Analyzer Changelog #56&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-11/"&gt;Knurling-rs Changelog #11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bevyengine.org/news/bevy-0-4/"&gt;Bevy 0.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2020-12-tokio-1-0"&gt;Announcing Tokio 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seanmonstar.com/post/638320652536922112/hyper-v014"&gt;hyper 0.14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/rustfft-5-0-0-experimental-1-now-faster-than-fftw/53049"&gt;RustFFT 5.0.0.experimental-1: Now faster than FFTW!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yeslogic.com/blog/allsorts-rust-font-shaping-engine-2020-review/"&gt;Allsorts Font Shaping Engine Year in Review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2020/12/18/looking-back-on-2020/"&gt;Looking back on 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://timofreiberg.github.io/clojure-vs-rust/"&gt;I rewrote a Clojure tool in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/somedood/rust-reviewed-is-the-hype-justified-1pa1"&gt;🦀 Rust Reviewed: Is the hype justified? 🦀&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.darkcoding.net/software/three-things-i-wish-id-known-learning-rust/"&gt;Three things I wish I'd known learning Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jbbgameich.github.io/misc/2020/12/21/rust-in-a-kde-project.html"&gt;Rust in a KDE Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/khrt69/first_3_months_of_rust/"&gt;First 3 Months of Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/khlln4/how_rust_changed_and_saved_my_life/"&gt;How rust changed and saved my life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.0xfa.be/building-a-backend-app-in-rust/"&gt;Problems with building backend app in Rust in 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gendignoux.com/blog/2020/12/17/rust-async-type-system-limits.html"&gt;Reaching the (current) limits of Rust's type system with asynchronous programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustgamedev.com/episodes/interview-with-fedor-logachev"&gt;Rust GameDev Podcast - Interview with Fedor Logachev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/blog/50/build-your-own-async-primitive"&gt;Build your own async primitive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/16/"&gt;Make A Language - Part Sixteen: Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/17/"&gt;Make A Language - Part Seventeen: Crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/18/"&gt;Make A Language - Part Eighteen: Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://explog.in/notes/funnn.html"&gt;A Simple Neural Network (&amp;lt;200LoC, Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rocket-tutorial-05-enforcing-uniqueness-of-emails-136j"&gt;Rocket Tutorial 05: Enforcing uniqueness of emails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://implaustin.hashnode.dev/how-to-write-a-terminal-multiplexer-with-rust-async-and-actors-part-2"&gt;How to write a Terminal Multiplexer with Rust, Async, and Actors - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeandbitters.com/static-trait-bound/"&gt;Learning Rust: static trait bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ryhl.io/blog/async-what-is-blocking/"&gt;Async: What is blocking?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/schedule-the-program-in-rust/"&gt;Schedule the program in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=JwG-Wa7dOBU&amp;amp;feature=youtu.be"&gt;Generic Associated Types - Learn Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [series] &lt;a href="https://youtube.com/playlist?list=PLLqEtX6ql2EyPAZ1M2_C0GgVd4A-_L4_5"&gt;Rust Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/a-potential-rust-learning-project-group/13620"&gt;A Potential Rust Learning Project Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rustfest.eu/watch-all-of-rustfest"&gt;Watch all of RustFest Global&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kgw8bz/when_to_use_rust/"&gt;When to use Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kgcye2/hyper_support_is_merged_to_curl_master/"&gt;Hyper support is merged to curl master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kfiaqn/just_wanted_to_say_thanks_to_the_rust_community/"&gt;Just wanted to say thanks to the Rust community!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/ejmahler/RustFFT"&gt;RustFFT&lt;/a&gt;, a &lt;em&gt;Fast&lt;/em&gt; Fourier transformation library that lives up to the name.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/863"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/rc3-assembly-ccc-congress/50283/3"&gt;The CCC Rustaceans are looking for artwork for badges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;292 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-12-14..2020-12-21"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80213"&gt;skip &lt;code&gt;dsymutil&lt;/code&gt; by default for compiler bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79051"&gt;implement if-let match guards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80100"&gt;or_patterns: implement &lt;code&gt;:pat&lt;/code&gt; edition-specific behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80104"&gt;improve and fix diagnostics of exhaustiveness checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77035"&gt;gracefully handle mistyping &lt;code&gt;-&amp;gt;&lt;/code&gt; as &lt;code&gt;=&amp;gt;&lt;/code&gt; in function return type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80211"&gt;handle desugaring in impl trait bound suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80023"&gt;enhance error message when misspelled label to value in break expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80040"&gt;always run intrinsics lowering pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/73210"&gt;mir-opt: allow debuginfo to be generated for a constant or a Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78317"&gt;turn quadratic time on number of impl blocks into linear time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79607"&gt;&lt;code&gt;MaybeUninit::copy&lt;/code&gt;/&lt;code&gt;clone_from_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79485"&gt;stabilize &lt;code&gt;unsafe_cell_get_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79473"&gt;move {&lt;code&gt;f32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;}&lt;code&gt;::clamp&lt;/code&gt; to &lt;code&gt;core&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79342"&gt;stabilize all stable methods of &lt;code&gt;Ipv4Addr&lt;/code&gt;, &lt;code&gt;Ipv6Addr&lt;/code&gt; and &lt;code&gt;IpAddr&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78083"&gt;stabilize &lt;code&gt;or_insert_with_key&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77618"&gt;add fast futex-based thread parker for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80035"&gt;optimization for &lt;code&gt;bool&lt;/code&gt;'s &lt;code&gt;PartialOrd&lt;/code&gt; impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80003"&gt;fix overflow when converting ZST &lt;code&gt;Vec&lt;/code&gt; to &lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80236"&gt;use pointer type in &lt;code&gt;AtomicPtr::swap&lt;/code&gt; implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/973"&gt;stdarch: move code out of constify macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2957"&gt;stabilize cargo's new feature resolver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-15.md"&gt;2020-12-15&lt;/a&gt;:
6 Regressions, 1 Improvements, 2 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week was fairly quite with lots of small regressions. Most of the regressions were either for fixes to changes that yielded large performance wins in previous weeks or small performance losses where there is already a plan for how to gain those losses back.&lt;/p&gt;
&lt;p&gt;Triage done by @rylev.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-15.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2957"&gt;Stabilize Cargo's new feature resolver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3027"&gt;Infallible promotion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2955"&gt;Opt-in Stable Trait VTables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2789"&gt;RFC: Serve crates-io registry over HTTP as static files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition:merge] &lt;a href="https://github.com/rust-lang/rust/pull/79285"&gt;Stabilize Arc::{increment,decrement}_strong_count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition:merge] &lt;a href="https://github.com/rust-lang/rust/pull/79135"&gt;stabilize &lt;code&gt;#![feature(min_const_generics)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition:merge] &lt;a href="https://github.com/rust-lang/rust/pull/79134"&gt;Add &lt;code&gt;impl Div&amp;lt;NonZeroU{0}&amp;gt; for u{0}&lt;/code&gt; which cannot panic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3040"&gt;Primitive enum conversion reform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3037"&gt;Rust 2021 Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcqbmc/"&gt;December 29, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/274936687/"&gt;January 5, Buffalo, NY, US - Buffalo Rust User Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/signal/7aa1ff1f-bd43-4359-82c7-8703d8b842d9"&gt;Distributed Systems (Rust) Developer at Signal (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team/Architect-Rust-Library-Design/53838c2d-1e48-5cec-8bb4-8fa8420e6171"&gt;Architect - Rust Library Design at Ockam (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer (Rust &amp;amp; C++) at NZXT (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/signavio/jobs/4167572003?gh_src=e31399983us"&gt;Lead Backend Engineer - Rust or C/C++ at Signavio (Berlin, DE)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;It took me sometime to let go and embrace getting things working before optimizing. It was a major breakthrough on that journey when I realized that ALL my python variables are &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; , so any chance I had to make a variable that was less complicated than that was already a big optimization. If 1/10 Rust variables had to be that complicated it would not feel good, but it would already be 90% better. So if 1/50 make the code ezere to read and maintain then do it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/kdayix/i_need_some_advice_about_heap_usage_with_rust/gfvtcwx"&gt;Eh2406 on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/977"&gt;Stephan Sokolow&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kj9mcb/this_week_in_rust_370/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 369</title><link href="https://this-week-in-rust.org/blog/2020/12/16/this-week-in-rust-369/" rel="alternate"></link><updated>2020-12-16T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-12-16:blog/2020/12/16/this-week-in-rust-369/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/12/11/lock-poisoning-survey.html"&gt;Launching the Lock Poisoning Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/12/14/Next-steps-for-the-foundation-conversation.html"&gt;Next steps for the Foundation Conversation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/12/16/rust-survey-2020.html"&gt;Rust Survey 2020 Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/12/14/changes-to-compiler-team.html"&gt;Changes to Rust Compiler Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2020-11/"&gt;This Month in Rust OSDev (November 2020)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/12/14/changelog-137.html"&gt;IntelliJ Rust Changelog #137&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/12/14/changelog-55.html"&gt;Rust Analyzer Changelog #55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-10/"&gt;Knurling-rs Changelog #10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jrvidal.github.io/explaine.rs/blog/these-months-in-explainers.html"&gt;These Months in explaine.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cargo2nix/cargo2nix/releases/tag/v0.9.0"&gt;Cargo2nix 0.9.0 release notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adventures.michaelfbryan.com/posts/ffi-safe-polymorphism-in-rust/"&gt;FFI-Safe Polymorphism: Thin Trait Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://confused.ai/posts/rust-bpf-target"&gt;Adding BPF target support to the Rust compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.qovery.com/blog/why-rust-has-a-bright-future-in-the-cloud"&gt;Why Rust Has a Bright Future in the Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustyyato.github.io/rust/syntactic/sugar/2019/01/17/Closures-Magic-Functions.html"&gt;Closures: Magic Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://john-millikin.com/notes-on-cross-compiling-rust"&gt;Notes on cross-compiling Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mattkennedy.io/blog/rust_polymorphism/"&gt;Polymorphism in Rust: Enums vs Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scie.nz/rust/"&gt;Beyond R and Python: Rust for Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ralfj.de/blog/2020/12/14/provenance.html"&gt;Pointers Are Complicated II, or: We need better language specs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://0x709394.me/Serde-tricks"&gt;Serde tricks: The lesson learnt from refactoring rspotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/12/12/notes-on-lock-poisoning.html"&gt;Notes On Lock Poisoning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://danielvz.cl/blog/fast-rust.html"&gt;I tried to make the fastest sorting algorithm I could think of... in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deislabs.io/posts/still-rusting-one-year-later/"&gt;Still Rusting - One Year Later&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mongodb.com/article/six-principles-building-robust-flexible-shared-data-applications"&gt;6 Principles for Building Robust Flexible Shared Data Apps with Rust &amp;amp; MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/EY7Wi9fV5bk"&gt;The Unsafe Chronicles: Exhibit A: Aliasing Boxes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/14/"&gt;Make A Language - Part Fourteen: Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/15/"&gt;Make A Language - Part Fifteen: Markers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://benjamin.computer/posts/2020-12-12-rust-python.html"&gt;Rust, Python and Fish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caballerocoll.com/blog/bevy-chess-tutorial/"&gt;Chess game in Rust using Bevy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.drogue.io/rust-and-microbit/"&gt;Rust on the BBC micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yangwao/developing-smart-contracts-with-ink-4g72"&gt;Developing smart contracts with ink!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/blog/memory-game-tutorial.html"&gt;Learn SixtyFPS: Memory Game Tutorial (Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/aiming-for-correctness-with-types"&gt;Aiming for correctness with types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2020-12-11-zero-to-production-6-domain-modelling/"&gt;Zero to Production in Rust #6: Using Types To Guarantee Domain Invariants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventures.michaelfbryan.com/posts/ffi-safe-polymorphism-in-rust/"&gt;FFI-Safe Polymorphism: Thin Trait Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cargo2nix/cargo2nix/tree/master/examples/4-independent-packaging"&gt;Distributing Rust Analyzer with Nix and Cargo2nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PL] &lt;a href="https://postacnormalna.pl/crabbybird-4-generowanie-swiata-gry-czesc-ii/"&gt;CrabbyBird #4 Generowanie świata gry – cześć II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/J7Aosp1Uauo"&gt;How oso built a runtime reflection library for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/3OL95gZgPWA"&gt;Implementing Rust's Vec From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[RU] [video] &lt;a href="https://www.youtube.com/watch?v=yCrc5BwZrtw"&gt;Rust: Not as hard as you think / Russian Rust Online Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jrvidal.github.io/explaine.rs/blog/these-months-in-explainers.html"&gt;These Months in explaine.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sequoia-pgp.org/"&gt;Sequoia PGP&lt;/a&gt; released &lt;a href="https://sequoia-pgp.org/blog/2020/12/16/202012-1.0/"&gt;version 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cyrilfougeray.com/2020/12/14/leger-rust-wallet-1.html"&gt;Connect devices to blockchains with Léger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kdo06l/signal_group_calls_are_powered_by_rust/"&gt;Signal Group Calls are powered by Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kdfb9k/rusts_option_in_one_figure/"&gt;Rust's Option in One Figure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kcou9c/authors_of_programming_rust_2nd_edition_have_a/"&gt;Authors of "Programming Rust 2nd Edition" have a sense of humor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2020/12/11/rotating-the-compiler-team-leads/"&gt;Rotating the compiler team leads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lupyuen.github.io/articles/debug"&gt;Debug Rust on PineCone BL602 with VSCode and GDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[RU] [audio] &lt;a href="https://www.youtube.com/watch?v=w99C9heBWHE&amp;amp;feature=youtu.be"&gt;SitCast#32 - Эх, Rust, да ещё Rust…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/raygon-renderer/thermite"&gt;thermite&lt;/a&gt;, a SIMD struct-of-arrays-algorithms library.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/857"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hubblo-org/scaphandre/issues"&gt;scaphandre: several help wanted issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;300 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-12-07..2020-12-14"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79818"&gt;fixes to Rust coverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79721"&gt;properly re-use def path hash in incremental mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79656"&gt;add some &lt;code&gt;core::cmp::Ordering&lt;/code&gt; helpers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79621"&gt;constify some &lt;code&gt;MaybeUninit&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79893"&gt;Windows TLS: &lt;code&gt;ManuallyDrop&lt;/code&gt; instead of &lt;code&gt;mem::forget&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78768"&gt;use &lt;code&gt;is_write_vectored&lt;/code&gt; to optimize the &lt;code&gt;write_vectored&lt;/code&gt; implementation for &lt;code&gt;BufWriter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77801"&gt;enforce no-move rule of &lt;code&gt;ReentrantMutex&lt;/code&gt; using &lt;code&gt;Pin&lt;/code&gt; and fix UB in stdio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/207"&gt;hashbrown: enable specialization with aHash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2155"&gt;future: &lt;code&gt;SinkExt::feed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2273"&gt;futures-util: migrate from pin-project to pin-project-lite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8973"&gt;cargo: check if rerun-if-changed points to a directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8950"&gt;cargo: workaround fs issue in &lt;code&gt;cargo publish&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6424"&gt;clippy: add MSRV to more lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4557"&gt;rustfmt: don't force a newline after an empty where clause&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-15.md"&gt;2020-12-15&lt;/a&gt;:
6 Regressions, 1 Improvements, 2 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week was fairly quite with lots of small regressions. Most of the regressions were either for fixes to changes that yielded large performance wins in previous weeks or small performance losses where there is already a plan for how to gain those losses back.&lt;/p&gt;
&lt;p&gt;Triage done by @rylev.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-15.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2992"&gt;RFC: Add &lt;code&gt;target_abi&lt;/code&gt; configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2859"&gt;added secret types rfc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79502"&gt;Implement &lt;code&gt;From&amp;lt;char&amp;gt;&lt;/code&gt; for u64 and u128.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79485"&gt;Stabilize &lt;code&gt;unsafe_cell_get_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79473"&gt;Move &lt;code&gt;{f32,f64}::clamp&lt;/code&gt; to core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79342"&gt;Stabilize all stable methods of &lt;code&gt;Ipv4Addr&lt;/code&gt;, &lt;code&gt;Ipv6Addr&lt;/code&gt; and &lt;code&gt;IpAddr&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79270"&gt;Acknowledge that &lt;code&gt;[CONST; N]&lt;/code&gt; is stable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79261"&gt;Deprecate atomic compare_and_swap method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79213"&gt;Stabilize &lt;code&gt;core::slice::fill&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/79188"&gt;Made matches! more useful by adding mapping support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition:merge] &lt;a href="https://github.com/rust-lang/rust/pull/79135"&gt;stabilize &lt;code&gt;#![feature(min_const_generics)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition:merge] &lt;a href="https://github.com/rust-lang/rust/pull/79134"&gt;Add &lt;code&gt;impl Div&amp;lt;NonZeroU{0}&amp;gt; for u{0}&lt;/code&gt; which cannot panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79073"&gt;passes: prohibit invalid attrs on generic params&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79022"&gt;stabilize deque_range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78242"&gt;Rename &lt;code&gt;overlapping_patterns&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78083"&gt;Stabilize or_insert_with_key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/77688"&gt;Add built-in implementations of &lt;code&gt;Default&lt;/code&gt; for function definition and… &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/74699"&gt;Mark &lt;code&gt;-1&lt;/code&gt; as an available niche for file descriptors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/74304"&gt;Stabilize the Wake trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/63514"&gt;Tracking issue for map_ok and map_err method for &lt;code&gt;Poll&amp;lt;Option&amp;lt;Result&amp;lt;T, E&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3036"&gt;Add min_target_api_version cfg predicate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3035"&gt;Cargo: providing artifacts (for artifact dependencies) via build.rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsybcqbvb/"&gt;December 16, Vancouver, BC, US - Are Results just Checked Exceptions? - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcqbmc/"&gt;December 29, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer (Rust &amp;amp; C++) at NZXT (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.jobs/en/jobs/1321570/software-development-engineer"&gt;Software Development Engineer at Amazon Web Services (Seattle, WA, US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://massa.network/#jobs"&gt;Full remote Rust developer, long-term contract (French CDI) at Massa Labs (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Engineering is not about "not doing mistakes". Engineering is about designing systems that ensure fewer mistakes occur.&lt;/p&gt;
&lt;p&gt;Rust is such a system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://fasterthanli.me/articles/aiming-for-correctness-with-types"&gt;amos on his blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/972"&gt;Joshua Nelson&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://this-week-in-rust.org/blog/2020/12/16/this-week-in-rust-369/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 368</title><link href="https://this-week-in-rust.org/blog/2020/12/09/this-week-in-rust-368/" rel="alternate"></link><updated>2020-12-09T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-12-09:blog/2020/12/09/this-week-in-rust-368/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/12/07/the-foundation-conversation.html"&gt;The Foundation Conversation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-016/"&gt;This Month in Rust GameDev #16 - November 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k6cka7/rib_newsletter_18_on_to_the_ribbles/"&gt;RiB Newsletter #18 - On to the Ribbles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/12/07/changelog-54.html"&gt;Rust Analyzer Changelog #54&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-9/"&gt;Knurling-rs Changelog #9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/clion/2020/12/intellij-rust-updates-for-2020-3/"&gt;IntelliJ Rust: Updates for 2020.3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/monads-gats-nightly-rust/"&gt;Monads and GATs in Nightly Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fanf.dreamwidth.org/134024.html"&gt;Vanishing zeroes for geometric algebra in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.thomasheartman.com/posts/on-generics-and-associated-types"&gt;On Generics and Associated Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vector.dev/blog/adaptive-request-concurrency/"&gt;Adaptive Request Concurrency. Resilient observability at scale.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/rust-compression-libraries/"&gt;Rust compression libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.marcoieni.com/2020/12/rust-makes-cross-compilation-childs-play/"&gt;Rust makes cross compilation child's play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jmmv.dev/2020/12/builder-pattern-for-tests.html"&gt;Using the builder pattern to define test scenarios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/blog/2020/12/04/measuring-memory-usage-in-rust.html"&gt;Measuring Memory Usage in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tag1consulting.com/blog/saving-time-switching-users-async-support-goose"&gt;Saving time by switching users: Async support in Goose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evrone.com/rust-vs-c"&gt;Why Rust is meant to replace C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ibraheem.ca/posts/rust-interior-mutability-understanding-cell"&gt;Interior Mutability in Rust: Understanding The Cell Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://subvisual.com/blog/posts/real-time-video-processing-with-rust-ffmpeg-opencv/"&gt;Real-time video processing with Rust, FFmpeg and OpenCV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/creativcoder/merge-k-sorted-arrays-in-rust-1b2f"&gt;Merge k sorted arrays in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/13/"&gt;Make A Language - Part Thirteen: Whitespace &amp;amp; Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jmmv.dev/2020/12/unit-testing-a-console-app.html"&gt;Unit-testing a console app (a text editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.drogue.io/rust-and-async/"&gt;Rust and Async (on embedded devices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/avoiding-duplicating-strings-rust/"&gt;Avoiding Duplicating Strings in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-custom-target-to-build-kernel-for-a-bare-metal-part-3/"&gt;OS in Rust: Custom target to build kernel for bare metal: Part-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-building-kernel-for-custom-target-part-4/"&gt;OS in Rust: Building kernel for custom target: Part-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/lLWchWTUFOQ"&gt;Introduction to Rust Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/EmbarkStudios/rust-gpu/releases/tag/v0.2"&gt;rust-gpu v0.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/news/2020/12/cpp-rust-interop-cxx/"&gt;Safe Interoperability between Rust and C++ with CXX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.googleblog.com/2020/12/expanding-fuchsias-open-source-model.html"&gt;Expanding Fuchsia's open source model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k75tez/miri_can_now_detect_data_races/"&gt;Miri can now detect data races&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/not-a-seagull/breadx"&gt;breadx&lt;/a&gt;, a X-windows protocol implementation in 100% safe and mutex-free Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/851"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AaronErhardt/Triox/labels/good%20first%20issue"&gt;Triox - Good First Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/libssh2/libssh2/pull/517"&gt;libssh2 - Pull Request Needs Windows Reviewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;279 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-11-30..2020-12-07"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78684"&gt;add wasm32 support to inline asm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79509"&gt;improve attribute message error spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/659"&gt;chalk: always relate with Invariant to non-General inference vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79680"&gt;fix perf regression caused by match exhaustiveness split&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79623"&gt;pass around Symbols instead of Idents in doctree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79620"&gt;tweak diagnostics on shadowing lifetimes/labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78122"&gt;avoid panic_bounds_check in &lt;code&gt;fmt::write&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79650"&gt;fix incorrect &lt;code&gt;io::Take&lt;/code&gt;'s limit resulting from &lt;code&gt;io::copy&lt;/code&gt; specialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79600"&gt;&lt;code&gt;std::io&lt;/code&gt;: use sendfile for UnixStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8937"&gt;cargo: slightly optimize `cargo vendor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8725"&gt;cargo: add "--workspace" to update command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79539"&gt;rustdoc: JSON backend experimental impl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-08.md"&gt;2020-12-08&lt;/a&gt;:
0 Regressions, 2 Improvements, 1 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Triage done by @simulacrum.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-12-08.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3007"&gt;RFC: Plan to make core and std's panic identical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2992"&gt;RFC: Add &lt;code&gt;target_abi&lt;/code&gt; configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2859"&gt;added secret types rfc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79642"&gt;rustdoc: stabilise --default-theme command line option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79502"&gt;Implement &lt;code&gt;From&amp;lt;char&amp;gt;&lt;/code&gt; for u64 and u128.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79485"&gt;Stabilize &lt;code&gt;unsafe_cell_get_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79473"&gt;Move &lt;code&gt;{f32,f64}::clamp&lt;/code&gt; to core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79342"&gt;Stabilize all stable methods of &lt;code&gt;Ipv4Addr&lt;/code&gt;, &lt;code&gt;Ipv6Addr&lt;/code&gt; and &lt;code&gt;IpAddr&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79270"&gt;Acknowledge that &lt;code&gt;[CONST; N]&lt;/code&gt; is stable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79261"&gt;Deprecate atomic compare_and_swap method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79213"&gt;Stabilize &lt;code&gt;core::slice::fill&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/79188"&gt;Made matches! more useful by adding mapping support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79073"&gt;passes: prohibit invalid attrs on generic params&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79022"&gt;stabilize deque_range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/78367"&gt;Apply &lt;code&gt;unused_doc_comments&lt;/code&gt; lint to inner items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78242"&gt;Rename &lt;code&gt;overlapping_patterns&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78083"&gt;Stabilize or_insert_with_key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/77688"&gt;Add built-in implementations of &lt;code&gt;Default&lt;/code&gt; for function definition and… &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/74699"&gt;Mark &lt;code&gt;-1&lt;/code&gt; as an available niche for file descriptors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/74304"&gt;Stabilize the Wake trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/63514"&gt;Tracking issue for map_ok and map_err method for &lt;code&gt;Poll&amp;lt;Option&amp;lt;Result&amp;lt;T, E&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Community-Stuttgart/events/274892215/"&gt;December 10, Stuttgart, DE - Hack &amp;amp; Learn - Directions for 2021 - Rust Community Stuttgart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/274757235/"&gt;December 10, San Diego, CA, US - San Diego Rust December 2020 Tele-Meetup - San Diego Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/274460587"&gt;December 10, Washington, DC, US - How oso built a runtime reflection system for Rust—Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-%D0%B2-%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B5/events/274924961/"&gt;December 15, Russia - Russian Rust Online Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsybcqbvb/"&gt;December 16, Vancouver, BC, US - Are Results just Checked Exceptions? - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/273530244/"&gt;December 10, Provo, UT, US - Mob Programming: Add &lt;code&gt;--tree -d&lt;/code&gt; to &lt;code&gt;lsd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pathai.com/careers/?gh_jid=4983568002"&gt;Software Engineer, Systems at PathAI (Boston, MA, US)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.welcometothejungle.com/fr/companies/meilisearch/jobs/software-developer-rust_paris"&gt;Software Developer (Rust) at MeiliSearch (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust at Kraken (Remote NA, SA, EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2442ee5c-56b6-4a73-a477-8cdda2b218d5"&gt;Rust Engineer, Desktop GUI - Cryptowatch at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4c864c8f-bde6-443d-b521-dd90df0e9105"&gt;Senior Backend Engineer - Rust at Kraken (Remote NA, SA, EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Banking Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4485f672-dc5f-4e49-a10b-2b0399e28a8d"&gt;Software Engineer - Trading Technology (Rust) at Kraken (Remote NA, SA, EMEA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/jobs/294502/rust-for-embedded-environments-ockam"&gt;Rust for Embedded Environments at Ockam (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/jobs/400828/messaging-protocol-architect-in-elixir-and-rust-ockam"&gt;Messaging protocol architect in Elixir (and Rust) at Ockam (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nzxt.bamboohr.com/jobs/view.php?id=259"&gt;Senior Software Engineer (Rust &amp;amp; C++) at NZXT (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/Embedded-Firmware-Engineer-in-C-Rust-a9c741c539454ee7b8bbb969d8e90da2"&gt;Embedded Firmware Engineer in C &amp;amp; Rust at Astropad (Remote, US)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Writing rust for me is a gradual process of the compiler patiently guiding me towards the program I should have written in the first place, and at the end I take all the credit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://discord.com/channels/442252698964721669/448238009733742612/783395725991084074"&gt;@felixwatts on Discord&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/972"&gt;Joshua Nelson&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ka8fvg/this_week_in_rust_368/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry></feed>