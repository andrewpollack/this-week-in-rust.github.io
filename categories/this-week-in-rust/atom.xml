<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/categories/this-week-in-rust/atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2020-01-21T00:00:00-05:00</updated><entry><title>This Week in Rust 322</title><link href="https://this-week-in-rust.org/blog/2020/01/21/this-week-in-rust-322/" rel="alternate"></link><updated>2020-01-21T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-01-21:blog/2020/01/21/this-week-in-rust-322/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6"&gt;Smoke-testing Rust HTTP clients&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://words.steveklabnik.com/a-sad-day-for-rust"&gt;A sad day for Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.blog/2020/01/20/what-is-rust-and-why-is-it-so-popular/"&gt;What is Rust and why is it so popular&lt;/a&gt; - from official StackOverflow blog.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://os.phil-opp.com/allocator-designs/"&gt;Writing an OS in Rust: Allocator designs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/5-hours-to-compile-macro-what-can-i-do/36508"&gt;How refactoring a macro reduced my Rust project compilation time from 4 hours to 40 seconds&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thomashartmann.dev/blog/feature(slice_patterns)/"&gt;Why the stabilization of advanced slice patterns is a big deal to me&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://likebike.com/posts/How_To_Write_Fast_Rust_Code.html"&gt;How to write fast Rust code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://people.gnome.org/~federico/blog/exposing-c-and-rust-apis.html"&gt;Exposing C and Rust APIs: some thoughts from librsvg&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mabez.dev/blog/posts/esp32-rust-svd-pac/"&gt;Rust on the ESP32 - SVD's, PAC's and USB flashing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cfsamsonbooks.gitbook.io/epoll-kqueue-iocp-explained/"&gt;Epoll, Kqueue and IOCP explained with Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/programming-servo-three-years-100-commits-a3cbfb06ff23"&gt;Programming Servo: three years, 100 commits&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/verona"&gt;Project Verona: Microsoft's Rust inspired research language has been released&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/fasteval"&gt;fasteval&lt;/a&gt;, a crate for fast and safe evaluation of algebraic expressions.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/705"&gt;Christopher Sebastian&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/em0ru8/rust_2020_a_conference_in_latin_america"&gt;Call for Papers: Rust LATAM Mexico 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/time-rs/time/issues/203"&gt;time: Implement function returning the local UTC offset&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rusty-celery/rusty-celery/issues?q=is%3Aissue+is%3Aopen+label%3A%22Status%3A+Help+Wanted%22"&gt;rusty-celery: Multiple issues marked "Status: Help Wanted", good place to start for newcomers&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;270 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-01-13..2020-01-20"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68285"&gt;array repeat expression lengths must be monomorphic at MIR building time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68277"&gt;make sure that all upstream generics get re-exported from Rust dylibs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68143"&gt;forbid elided lifetimes within const generic parameter types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68256"&gt;do not ICE on malformed suggestion spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68219"&gt;untangle ZST validation from integer validation and generalize it to all zsts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68088"&gt;don't try to &lt;code&gt;force_ptr&lt;/code&gt; pointers to zsts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68118"&gt;perf: eagerly convert literals to consts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68233"&gt;update compiler_builtins with changes to fix 128 bit integer remainder for aarch64 windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67731"&gt;handle recursive instantiation of drop shims&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66329"&gt;add unreachable propagation mir optimization pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68030"&gt;rebase LLVM onto 9.0.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67914"&gt;don't run const propagation on items with inconsistent bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68033"&gt;don't use f64 shims for f32 cmath functions on non 32-bit x86 MSVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67712"&gt;stabilize slice patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67784"&gt;reset Formatter flags on exit from pad_integral&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68232"&gt;optimize size/speed of Unicode datasets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67076"&gt;stabilize &lt;code&gt;Condvar::&lt;/code&gt;{&lt;code&gt;wait_while&lt;/code&gt;, &lt;code&gt;wait_timeout_while&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68066"&gt;stabilize &lt;code&gt;ManuallyDrop::take&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68348"&gt;make &lt;code&gt;iter::Empty&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;Send&lt;/code&gt; and &lt;code&gt;Sync&lt;/code&gt; for any &lt;code&gt;T&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66716"&gt;implement &lt;code&gt;DebugStruct::non_exhaustive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68123"&gt;implement &lt;code&gt;Cursor&lt;/code&gt; for linked lists&lt;/a&gt; (RFC #&lt;a href="https://rust-lang.github.io/rfcs/2570-linked-list-cursors.html"&gt;2570&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2836"&gt;Introduce the ASM project group&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68234"&gt;Stabilize &lt;code&gt;ptr::slice_from_raw_parts[_mut]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68122"&gt;Stabilize &lt;code&gt;#[repr(transparent)]&lt;/code&gt; on &lt;code&gt;enum&lt;/code&gt;s in Rust 1.42.0&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68200"&gt;Stabilize the debug_map_key_value feature&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Paris/events/267250053/"&gt;Jan 23. Paris, FR - Rust Paris meetup #49&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Warsaw/events/267525144/"&gt;Jan 23. Warsaw, PL - Rust Warsaw 3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fosdem.org/2020/schedule/track/rust/"&gt;Feb  2. Brussels, BE - Rust devroom @ FOSDEM&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Meetup-Hamburg/events/267692684/"&gt;Jan 22. Hamburg, DE - Rust Hack &amp;amp; Learn January 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Zagreb-Rust-Meetup/events/267742601"&gt;Jan 23. Zagreb, HR - impl Zagreb for Rust - Rust Meetup 2020/01: Uvod u lock-free Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cph.rs/"&gt;Jan 29. Copenhagen, DK - Copenhagen Rust Hack Night #21&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/nxdpgrybcdbhb/"&gt;Feb  5. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpybccbkc/"&gt;Jan 27. Durham, NC, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmybccblc/"&gt;Jan 28. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Chicago-Rust-Meetup/events/267616019/"&gt;Jan 29. Chicago, IL, US - Chicago Rust Meetup - Byte Sized Rust - AWS Lambdas &amp;amp; Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/events/469382520642102"&gt;Jan 29. Houston, TX, US - Houston Linux Users Group - Rust Study Group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qgvxlrybcdbhb/"&gt;Feb  5. Vancouver, BC, CA - Vancouver Rust meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybcdbqb/"&gt;Feb  5. Atlanta, GA, US - Rust Atlanta - Static Assertions Internals&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/mffbtpybcdbhb/"&gt;Feb  5. Indianapolis, IN, US - Indy.rs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="south-america"&gt;South America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Argentina/events/267904544/"&gt;Jan 23. Buenos Aires, AR - Rust Argentina - Encuentro de Enero&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AndreaPessino/status/1219341435238895616"&gt;Rust Developer at Ready At Dawn Studios, Irvine, CA, US (Remote available)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/jobs/296070/senior-rust-webgl-developer-luna"&gt;Senior Rust WebGL Developer at Luna, Kraków, PL (Remote available)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/sohostrategy/d6e31b57-eca1-4f2b-9d07-2500e93b7e50"&gt;Platform Lead at HASH, New York, US (Remote available)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lighthouse.sigmaprime.io/hiring-dec-2019.html"&gt;Rust Developer for open-source work at Sigma Prime, Sydney, AU (Remote available)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Rc&amp;lt;RefCell&amp;gt;&lt;/code&gt; is like duct tape.&lt;/p&gt;
&lt;p&gt;It's very versatile, and can fix a multitude of problems in a pinch. For some problems, it's even the best thing to use. But if the thing you're building is more than about 10% wrapped in duct tape, you might want to reconsider your design process!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/why-do-all-docs-say-refcell-is-bad/37086/22"&gt;trentj on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/798"&gt;Tom Phinney&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/esbf8h/this_week_in_rust_322/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 321</title><link href="https://this-week-in-rust.org/blog/2020/01/14/this-week-in-rust-321/" rel="alternate"></link><updated>2020-01-14T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-01-14:blog/2020/01/14/this-week-in-rust-321/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ejmahler.github.io/rust_in_unreal/"&gt;Rust code in Unreal Engine&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bfnightly.bracketproductions.com/rustbook/chapter_0.html"&gt;Introduction - Roguelike tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2020/01/09/towards-a-rust-foundation/"&gt;Towards a Rust foundation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://way-cooler.org/blog/2020/01/09/way-cooler-post-mortem.html"&gt;Way Cooler postmortem&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2020/01/10/rustvsgc.html"&gt;Why Rust? I have a GC&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/01/13/changelog-7.html"&gt;rust-analyzer changelog 7&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-005/"&gt;This month in Rust gamedev 5 - December 2019&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andygrove.io/2020/01/rust-database-connectivity-rdbc/"&gt;RDBC is moving to Tokio&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fitzgeraldnick.com/2020/01/13/synthesizing-loop-free-programs.html"&gt;Synthesizing loop-free programs with Rust and Z3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mtnmts/containerized-builds-for-rust-on-the-esp32-e8m"&gt;Containerized builds for Rust on the ESP32&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ryan-jacobs1.github.io/2020/01/06/scheduler.html"&gt;Implementing a cooperative scheduler in a Rust kernel&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/dtolnay/cxx"&gt;cxx&lt;/a&gt;, a library to build a C++ FFI safely by taking care of both sides.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/702"&gt;Ehsan M. Kermani&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[good first issue] &lt;a href="https://github.com/launchbadge/sqlx/issues/34"&gt;sqlx: Add a proc macro derive for Encode and Decode supporting &lt;em&gt;only&lt;/em&gt; 1-arity tuple structs&lt;/a&gt; with a mentor.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821/288"&gt;Help port hyper and body-image-futio to async-std&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;311 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-01-06..2020-01-13"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67900"&gt;prepare for LLVM 10 upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68059"&gt;allow specifying LLVM args in target specifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68114"&gt;don't require &lt;code&gt;allow_internal_unstable&lt;/code&gt; unless &lt;code&gt;staged_api&lt;/code&gt; is enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67770"&gt;more reductions in error handling diversity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67258"&gt;introduce &lt;code&gt;X..&lt;/code&gt;, &lt;code&gt;..X&lt;/code&gt;, and &lt;code&gt;..=X&lt;/code&gt; range patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68120"&gt;ban &lt;code&gt;...X&lt;/code&gt; pats, harden tests, and improve diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68108"&gt;add suggestions when encountering chained comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67880"&gt;handle multiple error fix suggestions carefully&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67725"&gt;simplify &lt;code&gt;into_key_slice_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67887"&gt;&lt;code&gt;Option::{expect,unwrap}&lt;/code&gt; and &lt;code&gt;Result::{expect, expect_err, unwrap, unwrap_err}&lt;/code&gt; have &lt;code&gt;#[track_caller]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67358"&gt;add &lt;code&gt;HashSet::get_or_insert_owned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66254"&gt;make &lt;code&gt;Layout::new&lt;/code&gt; const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67494"&gt;constify more of &lt;code&gt;alloc::Layout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/1326"&gt;futures mpsc: split bounded and unbounded implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67875"&gt;distinguish between private items and hidden items in rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68074"&gt;rustbuild: add &lt;code&gt;llvm-skip-rebuild&lt;/code&gt; flag to &lt;code&gt;x.py&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2836"&gt;Introduce the ASM project group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2700"&gt;Deprecate stdlib modules dedicated to numeric constants and move those constants to associated consts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/67712"&gt;Stabilize &lt;code&gt;#![feature(slice_patterns)]&lt;/code&gt; in 1.42.0&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/64069"&gt;Added &lt;code&gt;From&amp;lt;Vec&amp;lt;NonZeroU8&amp;gt;&amp;gt;&lt;/code&gt; for CString&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/67642"&gt;Relax bounds on HashMap/HashSet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68234"&gt;Stabilize &lt;code&gt;ptr::slice_from_raw_parts[_mut]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/68200"&gt;Stabilize the debug_map_key_value feature&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/57581"&gt;Tracking issue for core::iter::once_with()&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/55422"&gt;Tracking issue for &lt;code&gt;ManuallyDrop::take&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2850"&gt;Inline assembly&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Community-Stuttgart/events/267764516"&gt;Jan 17. Stuttgart, DE - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wroclaw/events/267514337/"&gt;Jan 22. Wrocław, PL - Rust Wrocław Meetup #16&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Paris/events/267250053/"&gt;Jan 23. Paris, FR - Rust Paris meetup #49&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Warsaw/events/267525144/"&gt;Jan 23. Warsaw, PL - Rust Warsaw 3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fosdem.org/2020/schedule/track/rust/"&gt;Feb  2. Brussels, BE - Rust devroom @ FOSDEM&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/nxdpgrybccbdc/"&gt;Jan 22. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Meetup-Hamburg/events/267692684/"&gt;Jan 22. Hamburg, DE - Rust Hack &amp;amp; Learn January 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Zagreb-Rust-Meetup/events/267742601"&gt;Jan 23. Zagreb, HR - impl Zagreb for Rust - Rust Meetup 2020/01: Uvod u lock-free Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cph.rs/"&gt;Jan 29. Copenhagen, DK - Copenhagen Rust Hack Night #21&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Ann-Arbor-Rust-Meetup/events/zdfscrybccbdc/"&gt;Jan 22. Ann Arbor, MI, US - Ann Arbor Rust Meetup - Monthly Gathering&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qgvxlrybccbdc/"&gt;Jan 22. Vancouver, BC, CA - Vancouver Rust meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/PDXRust/events/267797263/"&gt;Jan 22. Portland, OR, US - PDXRust - PDX Rust Hack Night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpybccbkc/"&gt;Jan 27. Durham, NC, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmybccblc/"&gt;Jan 28. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Chicago-Rust-Meetup/events/267616019/"&gt;Jan 29. Chicago, IL, US - Chicago Rust Meetup - Byte Sized Rust - AWS Lambdas &amp;amp; Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/events/469382520642102"&gt;Jan 29. Houston, TX, US - Houston Linux Users Group - Rust Study Group&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="south-america"&gt;South America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Sao-Paulo-Meetup/events/266858154/"&gt;Jan 18. Sao Paulo, BR - Rust SP - Encontro Janeiro 2020&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;No jobs listed for this week.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;@ZiCog: Does anyone have a 'no holds barred, unsafe or not' solution to the problem in Rust that can match C?&lt;/p&gt;
&lt;p&gt;@kornel: Pipe the C version through c2rust :slight_smile:&lt;/p&gt;
&lt;p&gt;@ZiCog: Yay! Rust now beats both Clang and GCC!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/clippy-driving-me-to-insanity-insisting-on-iterators/36796/19"&gt;ZiCog and Kornel on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/769"&gt;Jan Riemer&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/epinfr/this_week_in_rust_321/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 320</title><link href="https://this-week-in-rust.org/blog/2020/01/07/this-week-in-rust-320/" rel="alternate"></link><updated>2020-01-07T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2020-01-07:blog/2020/01/07/this-week-in-rust-320/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://immunant.com/blog/2020/01/quake3/"&gt;Translating Quake 3 into Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/01/03/reducing-support-for-32-bit-apple-targets.html"&gt;Reducing support for 32-bit Apple targets&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cliffle.com/p/dangerust/6/"&gt;Learn Rust the dangerous way: Let the compiler do the work&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/01/04/mutexes-are-faster-than-spinlocks.html"&gt;Mutexes are faster than spinlocks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://os.phil-opp.com/status-update/2020-01-07/"&gt;Writing an OS in Rust: Updates in December 2019&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/issues/44580#issuecomment-570191702"&gt;Update on const generics progress&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elastic/elasticsearch-rs"&gt;Elastic releases official Elasticsearch Rust client&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lucumr.pocoo.org/2020/1/1/async-pressure/"&gt;Backpressure in async ecosystems&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cfsamsonbooks.gitbook.io/explaining-atomics-in-rust/"&gt;Explaining atomics in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AeroRust"&gt;Announcing ÄroRust - an unofficial Rust + Aerospace Working Group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLgC1L0fKd7UkVwjVlOySfMnn80Qs5TOLb"&gt;Videos from Rust Belt Rust 2019 are now available&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@JoeKreydt/a-primer-on-rusts-result-type-66363cf18e6a"&gt;A primer on Rust’s Result type&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/sqlx"&gt;sqlx&lt;/a&gt;, a modern SQL client library.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/698"&gt;Jan Riemer&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[good first issue] &lt;a href="https://github.com/imsnif/bandwhich/issues/73"&gt;bandwhich: Better error handling when accessing network interface&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/imsnif/bandwhich/issues/14"&gt;bandwhich: In the UI, calculate bandwidth for the past N seconds rather than just 1&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/imsnif/bandwhich/issues/74"&gt;bandwhich: Pause display with space&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdIJy7JbftA27qJlxEgR9Q5o1MB3kXqnH3bthTJbg7KS-P0YQ/viewform"&gt;Register your interest in Rust training with Carol Nichols and Jake Goulding in May 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cfp.rustlatam.org/events/rust-latam-mexico-2020"&gt;Rust LATAM Mexico 2020 CFP&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;207 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2019-12-30..2019-01-06"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67748"&gt;use function attribute "frame-pointer" instead of "no-frame-pointer-elim"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67744"&gt;parser: reduce diversity in error handling mechanisms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67032"&gt;allocate HIR on an arena 4/4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67823"&gt;improve some &lt;code&gt;Drop&lt;/code&gt;-related error messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67702"&gt;add symbol normalization for &lt;code&gt;proc_macro_server&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66913"&gt;suggest calling method when first argument is &lt;code&gt;self&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67810"&gt;implement uncommon_codepoints lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67808"&gt;perf: don't recurse into types that do not need normalizing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67768"&gt;revert "Add IntoFuture trait and await support" for performance reasons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67796"&gt;ensure that we process projections during MIR inlining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1137"&gt;miri: update panic machinery to match &lt;code&gt;#[track_caller]&lt;/code&gt; changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67800"&gt;fix ICE involving calling &lt;code&gt;Instance.ty&lt;/code&gt; during const evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67531"&gt;no longer promote non-pattern const functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67779"&gt;update the barrier cache during ARM EHABI unwinding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/63177"&gt;add &lt;code&gt;Iterator::try_find&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7763"&gt;cargo: fix CARGO_TARGET_triple_LINKER environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/1543"&gt;crates.io: allow multiple keywords in crate search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2795"&gt;RFC 2795: Propose implicit named arguments for formatting macros&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2835"&gt;RFC 2835: Announcing the Safe-Transmute Project Group&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2700"&gt;Deprecate stdlib modules dedicated to numeric constants and move those constants to associated consts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/67712"&gt;Stabilize &lt;code&gt;#![feature(slice_patterns)]&lt;/code&gt; in 1.42.0&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/67076"&gt;Stabilize Condvar::wait_while and wait_timeout_while (previously wait_until, wait_timeout_until)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2843"&gt;Add llvm_asm! and deprecate asm!&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2845"&gt;Supertrait item shadowing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Rhein-Main/events/267158461/"&gt;Jan 10. Darmstadt, DE - Rust Rhein-Main - 1st 2020 Rhein-Main Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Mozilla-Torino/events/267292439"&gt;Jan 16. Turin, IT - Mozilla Torino - Gruppo di studio Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Finland-Rust-Meetup/events/267607507/"&gt;Jan 16. Helsinki, FI - Finland Rust-lang Group - January meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Community-Stuttgart/events/267764516"&gt;Jan 17. Stuttgart, DE - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wroclaw/events/267514337/"&gt;Jan 22. Wrocław, PL - Rust Wrocław Meetup #16&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Paris/events/267250053/"&gt;Jan 23. Paris, FR - Rust Paris meetup #49&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Warsaw/events/267525144/"&gt;Jan 23. Warsaw, PL - Rust Warsaw 3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fosdem.org/2020/schedule/track/rust/"&gt;Feb  2. Brussels, BE - Rust devroom @ FOSDEM&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/nxdpgrybccbdc/"&gt;Jan 22. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Meetup-Hamburg/events/267692684/"&gt;Jan 22. Hamburg, DE - Rust Hack &amp;amp; Learn January 2020&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/267538087/"&gt;Jan 14. Seattle, WA, US - Seattle Rust Meetup - Physical Computing Workshop&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/events/469382520642102"&gt;Jan 20. Houston, TX, US - Houston Linux Users Group - Rust Study Group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Ann-Arbor-Rust-Meetup/events/zdfscrybccbdc/"&gt;Jan 22. Ann Arbor, MI, US - Ann Arbor Rust Meetup - Monthly Gathering&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qgvxlrybccbdc/"&gt;Jan 22. Vancouver, BC, CA - Vancouver Rust meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="south-america"&gt;South America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Sao-Paulo-Meetup/events/266858154/"&gt;Jan 18. Sao Paulo, BR - Rust SP - Encontro Janeiro 2020&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hire.withgoogle.com/public/jobs/astrohqcom/view/P_AAAAAAHAADlK9Jmzxc2Sc6"&gt;Windows Software Engineer at Astro HQMinneapolis, MN, US or Remote&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crowdstrike.wd5.myworkdayjobs.com/en-US/crowdstrikecareers/job/USA-Remote/Senior-Rust-Software-Engineer_R224"&gt;Senior Rust Software Engineer at CrowdStrike, US Remote&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;relatively speaking&lt;/em&gt;, my rust programs are like Leonardo DiCaprio in the Revenant, killing grizzly bears with their bare hands, dying and being frozen into a giant ice cubes then, surprise!, they're actually alive.&lt;/p&gt;
&lt;p&gt;they can handle a lot, they tend to experience far fewer bugs that come around days or weeks after going into production.&lt;/p&gt;
&lt;p&gt;my python programs, otoh, are like William Henry Harrison. Inauguration day! exciting! kind of chilly out here. uh oh -- pneumonia ... dang it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/ehup6r/reddit_on_rust/fcma8y2"&gt;Jonathan Strong on reddit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/769"&gt;Jan Riemer&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/em9hct/this_week_in_rust_320/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 319</title><link href="https://this-week-in-rust.org/blog/2019/12/31/this-week-in-rust-319/" rel="alternate"></link><updated>2019-12-31T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2019-12-31:blog/2019/12/31/this-week-in-rust-319/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cliffle.com/blog/m4vga-in-rust/"&gt;Rewriting m4vgalib in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/ecs-outside-of-games/"&gt;A thought experiment: Using the ECS pattern outside of game engines&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io//2020/01/02/spinlocks-considered-harmful.html"&gt;Spinlocks considered harmful&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.alopex.li/TheStateOfGGEZ2020"&gt;The state Of ggez, 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pitdicker.github.io/Interior-mutability-patterns/"&gt;Interior mutability patterns&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2020/01/01/clippy.html"&gt;Should Clippy care from whence they came&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://silentbyte.com/writing-aws-lambda-functions-in-rust"&gt;Writing AWS Lambda functions in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.katona.me/2019/12/29/Rust-Lifetimes-and-Iterators/"&gt;Rust lifetimes and iterators&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.krruzic.xyz/rocket-multipart/"&gt;Rocket and multipart forms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nical.github.io/posts/new-tessellator.html"&gt;Lyon 0.15.0 - a new tessellator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-embedded/rust-raspi3-OS-tutorials/tree/master/13_integrated_testing"&gt;The embedded WG's Raspberry Pi OS dev tutorials: Tutorial 13 - Kernel unit, integration, and console tests using QEMU&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@ly.lee/optimising-pinetimes-display-driver-with-rust-and-mynewt-3ba269ea2f5c"&gt;Optimising PineTime’s display driver with Rust and Mynewt&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-embedded.github.io/blog/newsletter-22/"&gt;The embedded WG newsletter 22&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2019/12/30/changelog-5.html"&gt;rust-analyzer changelog 5&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustinblockchain.org/2020/01/02/rust-in-blockchain-7-december-2019/"&gt;Rust in blockchain 7 – December 2019&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/attohttpc"&gt;attohttpc&lt;/a&gt;, a tiny synchronous HTTP client library.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/696"&gt;Matěj Laitl&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No issues were proposed for CfP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;184 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2019-12-23..2019-12-30"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67151"&gt;doc comments: less attribute mimicking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67466"&gt;require const stability attributes on intrinsics to be able to use them in constant contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/64273"&gt;stabilize attribute macros on inline modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66670"&gt;normalize &lt;code&gt;ident&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67667"&gt;resolve long compile times when evaluating always valid constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67658"&gt;avoid memory copy logic for zero-size types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67337"&gt;ensure that evaluating or validating a constant never reads from a static&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67268"&gt;tweak errors for missing associated types and type parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67287"&gt;typeck: note other end-point when checking range pats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67241"&gt;refactorings to borrowck region diagnostic reporting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67192"&gt;various const eval and pattern matching ICE fixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67546"&gt;fix ICE in mir interpretation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66936"&gt;allocate HIR on an arena 2/4 -- Expr &amp;amp; Pat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66942"&gt;allocate HIR on an arena 3/4 -- Ty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66296"&gt;initial implementation of &lt;code&gt;#![feature(bindings_after_at)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66919"&gt;deprecate &lt;code&gt;Error::description&lt;/code&gt; for real&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/65244"&gt;add &lt;code&gt;IntoFuture&lt;/code&gt; trait and support for await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67687"&gt;do not ICE on lifetime error involving closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67588"&gt;use &lt;code&gt;NonNull&lt;/code&gt; in &lt;code&gt;slice::&lt;/code&gt;{&lt;code&gt;Iter&lt;/code&gt;, &lt;code&gt;IterMut&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67035"&gt;implement padding for &lt;code&gt;IpAddr&lt;/code&gt; without heap alloc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67659"&gt;stabilize the &lt;code&gt;matches!&lt;/code&gt; macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67445"&gt;differentiate &lt;code&gt;todo!&lt;/code&gt; and &lt;code&gt;unimplemented!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67662"&gt;fix &lt;code&gt;Instance::resolve()&lt;/code&gt; incorrectly returning specialized instances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67459"&gt;prune ill-conceived &lt;code&gt;BTreeMap::iter_mut&lt;/code&gt; assertion and test its mutability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67657"&gt;clean up const-hack PRs now that const if / match exist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/135"&gt;hashbrown: implement &lt;code&gt;drain_filter&lt;/code&gt; for &lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66221"&gt;rustdoc: show the actual value of constant values in the documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2841"&gt;-C export-executable-symbols&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScb1MoYvLE4hfUlUKzg4LJHNI6Abw41hRIQGyBVVIAcwvdGfQ/viewform"&gt;Jan  8. Kuala Lumpur, MY - Rust Meetup January 2020&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/nxdpgrybccblb/"&gt;Jan  8. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Lisbon/events/266629066/"&gt;Jan  9. Lisbon, PT - Rust Lisbon - Live Jan 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Rhein-Main/events/267158461/"&gt;Jan 10. Darmstadt, DE - Rust Rhein-Main - 1st 2020 Rhein-Main Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Mozilla-Torino/events/267292439"&gt;Jan 16. Turin, IT - Mozilla Torino - Gruppo di studio Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wroclaw/events/267514337/"&gt;Jan 22. Wrocław, PL - Rust Wrocław Meetup #16&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Warsaw/events/267525144/"&gt;Jan 23. Warsaw, PL - Rust Warsaw 3&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/events/469382520642102"&gt;Jan  6. Houston, TX, US - Houston Linux Users Group - Rust Study Group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/267240914/"&gt;Jan  7. Denver, CO, US - Rust Boulder/Denver - Rust Meetup: January&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybccblb/"&gt;Jan  8. Atlanta, GA, US - Grab a beer with fellow Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qgvxlrybccblb/"&gt;Jan  8. Vancouver, BC, CA - Vancouver Rust meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/PDXRust/events/266938349/"&gt;Jan  8. Portland, OR, US - PDXRust - C-Side Tourism: Using C libraries from Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrybccbmb/"&gt;Jan  9. Columbus, OH, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/267242856/"&gt;Jan  9. San Diego, CA, US - San Diego Rust January 2020 Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/265905282/"&gt;Jan  9. Lehi, UT, US - Utah Rust - January 2020 Regular Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/266235306"&gt;Jan  9. Arlington, VA, US - Rust DC — Mid-month Rustful&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/267538087/"&gt;Jan 14. Seattle, WA, US - Seattle Rust Meetup - Physical Computing Workshop&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="south-america"&gt;South America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Sao-Paulo-Meetup/events/266858154/"&gt;Jan 18. Sao Paulo, BR - Rust SP - Encontro Janeiro 2020&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ehup6r/reddit_on_rust/"&gt;Rust Engineer at Reddit&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust has multiple &lt;em&gt;unique&lt;/em&gt; paradigms that don't even exist in other languages, such as lifetimes and compile-time-tracked "exclusive access". But instead of endorsing them from the beginning, as @mbrubeck's &lt;a href="https://limpet.net/mbrubeck/2019/02/07/rust-a-unique-perspective.html"&gt; &lt;em&gt;Rust: a unique perspective&lt;/em&gt; &lt;/a&gt; does, the Rust book tries to show a language that is "like other languages, but with (magical) compile-time checks". When the truth is that Rust's strength lies in non-&lt;code&gt;unsafe&lt;/code&gt; Rust being &lt;strong&gt;less expressive&lt;/strong&gt; than languages like C or C++.&lt;/p&gt;
&lt;p&gt;I think that Rust should start with the statement: "Welcome to a language that by being less expressive forces you to use constructs that are &lt;strong&gt;guaranteed at compile-time to be sound&lt;/strong&gt;. But don't worry; after some time you will get used to the coding patterns that are allowed, and will then almost not notice the hindered expressiveness, only the enhanced zero-cost safety that will let you &lt;strong&gt;hack without fear&lt;/strong&gt;."&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It doesn't sound bad imho, and is at least honest &lt;em&gt;w.r.t.&lt;/em&gt; the struggles that someone refusing to shift their way of coding / mental coding patterns may encounter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/after-a-week-with-rust/35829/27"&gt;Daniel H-M on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/768"&gt;Tom Phinney&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ej4eom/this_week_in_rust_319/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</summary></entry></feed>