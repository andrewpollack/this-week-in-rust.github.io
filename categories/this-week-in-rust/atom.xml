<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/categories/this-week-in-rust/atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2021-01-27T00:00:00-05:00</updated><entry><title>This Week in Rust 375</title><link href="https://this-week-in-rust.org/blog/2021/01/27/this-week-in-rust-375/" rel="alternate"></link><updated>2021-01-27T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-01-27:blog/2021/01/27/this-week-in-rust-375/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/01/26/ffi-unwind-longjmp.html"&gt;Rust &amp;amp; the case of the disappearing stack frames&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/01/25/changelog-61.html"&gt;rust-analyzer Changelog #61&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.guillaume-gomez.fr/articles/2021-01-22+Performance+improvement+on+front-end+generated+by+rustdoc"&gt;Performance improvement on front-end generated by rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bheisler.github.io/post/criterion-rs-0-3-4/"&gt;Criterion.rs v0.3.4 and Iai 0.1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/showcase/rusty-hermit/"&gt;The RustyHermit Unikernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yossarian.net/2021/01/21/Introducing-usb-ids-rs"&gt;Introducing usb-ids.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;‚ö°Ô∏è &lt;a href="https://evrone.com/dotenv-linter-v300"&gt;Dotenv-linter v3.0.0: Overview&lt;/a&gt; ü¶Ä&lt;/li&gt;
&lt;li&gt;üßÆ [An Auto-Increment Crate for Rust][https://jeffa.io/an_auto-increment_crate_for_rust]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.console.dev/porting-a-python-azure-serverless-function-to-rust/"&gt;Porting a serverless chatbot from Python to Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/unsafe-rust-how-and-when-not-to-use-it/"&gt;Unsafe Rust: How and when (not) to use it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mark_saward/rust-and-go-department-directories-bla"&gt;Rust and Go department directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deaddabe.fr/blog/2021/01/27/parsing-real-world-data-with-rust-introducing-the-alias_all-attribute-in-serde/"&gt;Parsing real-world data with Rust: introducing the alias_all attribute in Serde&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://edgarluque.com/blog/wrapping-errors-in-rust"&gt;Wrapping Errors in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://laurocaetano.com/programming/2021/01/23/raft-leader-election-rust/"&gt;Implementing Raft's Leader Election in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dev_family/2048-wasm-45gc"&gt;2048 WASM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seanchen1991/implementing-an-lru-cache-in-rust-33pp"&gt;Implementing an LRU Cache in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/buinauskas/json-input-validation-in-warp-i5n"&gt;JSON input validation in Warp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/19/"&gt;Make A Language - Part Nineteen: Code Representations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/20/"&gt;Make A Language - Part Twenty: Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lemmy.ml/post/50089"&gt;How to optimise compilation times with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jibbow.com/posts/criterion-flamegraphs/"&gt;Automatic flamegraphs for benchmarks with Criterion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://laurocaetano.com/programming/2021/01/23/raft-leader-election-rust/"&gt;Implementing Raft's Leader Election in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radim.xyz/project/yewban/"&gt;First time using Yew: A Go game board in just a few lines of Rust.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ES] &lt;a href="https://github.com/irvingfisica/iced_examples/blob/master/Life.md"&gt;El juego de la vida usando Rust y Iced&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.arewelearningyet.com/"&gt;Are we learning yet?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2021/01/21/win32-apis.aspx"&gt;Microsoft Opens Up Old Win32 APIs to C# and Rust, More Languages to Come&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/l4roqk/a_fix_for_the_llvm_noalias_bug_has_landed_in_time/"&gt;A fix for the LLVM noalias bug has landed in time for LLVM 12 branches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hisham.hm/2020/01/20/dynamic-type-systems-arent-even-simpler/"&gt;Dynamic type systems aren't even simpler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/l594zl/everywhere_i_go_i_miss_rusts_enums/"&gt;Everywhere I go, I miss Rust's `enum`s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/open-source-rust"&gt;Open-Source Rust: 24 Awesome Frameworks, Projects, and Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/mersinvald/aquamarine"&gt;aquamarine&lt;/a&gt; bringing you inline diagrams for your rustdocs.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/874"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821/350"&gt;Fuschia has several open issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;299 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-01-18..2021-01-25"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81046"&gt;improve unknown external crate error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81236"&gt;gracefully handle loop labels missing leading &lt;code&gt;'&lt;/code&gt; in different positions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80065"&gt;improve diagnostics when parsing angle args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78578"&gt;permit mutable references in all const contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68828"&gt;prevent query cycles in the MIR inliner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81243"&gt;mir: improve &lt;code&gt;size_of&lt;/code&gt; handling when arg is unsized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75180"&gt;implement &lt;code&gt;Error&lt;/code&gt; for &lt;code&gt;&amp;amp;(impl Error)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80715"&gt;change branching in &lt;code&gt;iter.skip()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79705"&gt;&lt;code&gt;BufWriter&lt;/code&gt;: Provide &lt;code&gt;into_raw_parts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81169"&gt;fix soundness issue for &lt;code&gt;replace_range&lt;/code&gt; and &lt;code&gt;range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81170"&gt;avoid &lt;code&gt;hash_slice&lt;/code&gt; in &lt;code&gt;VecDeque&lt;/code&gt;'s &lt;code&gt;Hash&lt;/code&gt; implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81241"&gt;turn alloc's force_expr macro into a regular macro_rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/229"&gt;hashbrown: add &lt;code&gt;try_insert_no_grow&lt;/code&gt; method on &lt;code&gt;RawTable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9075"&gt;fix a bug in Cargo's cyclic dep graph detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9098"&gt;cargo: add some extra help to &lt;code&gt;cargo new&lt;/code&gt; and invalid package names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81302"&gt;rustdoc: fix rendering of stabilization version for trait implementors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6591"&gt;clippy: &lt;code&gt;manual_filter_map&lt;/code&gt; and &lt;code&gt;manual_find_map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6617"&gt;clippy: new lint: &lt;code&gt;exhaustive_enums&lt;/code&gt;, &lt;code&gt;exhaustive_structs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;This week continues a trend of relatively large rollups, which often contain
perf-sensitive PRs. We need to get better at marking PRs as rollup=never or
otherwise not including them, but it is unclear how precisely to go about doing
so. The tooling for testing individual PRs merged in rollups should also be
improved to work better in the next few days, though.&lt;/p&gt;
&lt;p&gt;Other than that, this week saw several regressions, most of which were not
easily explained. We are seeking feedback from PR authors and reviewers on
whether the results are expected and if anything can be done.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylevick&lt;/strong&gt; and &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=e05409a02c6e73a3dea6da98798468db2910ca59&amp;amp;end=1483e67addd37d9bd20ba3b4613b678ee9ad4d68&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;e05409a02c6e73a3dea6da98798468db2910ca59..1483e67addd37d9bd20ba3b4613b678ee9ad4d68&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 Regressions, 2 Improvements, 1 Mixed;
3 of them in rollups&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-01-26.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3028"&gt;Allow "artifact dependencies" on bin, cdylib, and staticlib crates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3037"&gt;Rust 2021 Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81198"&gt;Remove requirement that forces symmetric and transitive PartialEq impls to exist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81048"&gt;Stabilize &lt;code&gt;core::slice::fill_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80945"&gt;Add Box::downcast() for dyn Any + Send + Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80470"&gt;Stabilize by-value &lt;code&gt;[T; N]&lt;/code&gt; iterator &lt;code&gt;core::array::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80279"&gt;Implement missing &lt;code&gt;AsMut&amp;lt;str&amp;gt;&lt;/code&gt; for &lt;code&gt;str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80053"&gt;stabilise &lt;code&gt;cargo test -- --include-ignored&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80011"&gt;Stabilize &lt;code&gt;peekable_next_if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79570"&gt;rustc: Stabilize &lt;code&gt;-Zrun-dsymutil&lt;/code&gt; as &lt;code&gt;-Csplit-debuginfo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79285"&gt;Stabilize Arc::{increment,decrement}_strong_count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79078"&gt;expand/resolve: Turn &lt;code&gt;#[derive]&lt;/code&gt; into a regular macro attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78044"&gt;Implement io::Seek for io::Empty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/76904"&gt;Tracking Issue for &lt;code&gt;feature(int_bits_const): &amp;lt;integer&amp;gt;::BITS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/74442"&gt;Tracking Issue for &lt;code&gt;fmt::Arguments::as_str()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3067"&gt;Change visibility scoping rules for macro_rules macros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/275827557/"&gt;Februar 2, Dublin, IE - Rust Dublin Remote February Meetup - Rust Dublin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/275593411/"&gt;February 2, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/275352662/"&gt;February 2, Denver, CO, US - ML in Rust, implementing logistic and linear regression from scratch - Rust Denver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/275986420/"&gt;February 3, Johannesburg, ZA - Monthly Joburg Rust Chat! - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccdbgb/"&gt;February 4, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Hungary-Meetup/events/275579644/"&gt;February 4, Budapest, HU - Rust meetup S03! - Rust Hungary Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/246726699/"&gt;February 7, Indianapolis, IN, US - Monthly Meetup - Indy.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccdbmb/"&gt;February 9, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccdbnb/"&gt;February 10, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/seamusabshere/8022bd7c964570b105402dd4dddfcde4"&gt;Engineer or Manager - Rust at Faraday (Burlington, VT, US (and Boston, MA, US))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thegraph.com/jobs/rust-engineer"&gt;Rust Engineer at The Graph (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.workatastartup.com/jobs/41643"&gt;Rust Expert - Senior Software Engineer at Wasmer (San Francisco, CA, US or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/gnosis/jobs/4497327002?gh_src=addc4e802"&gt;Ethereum Core Developer (m/w/d) at Gnosis (Berlin, DE or A Coru√±a, ES, or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Describing Rust as a systems programming language in 2021 is like describing Microsoft as Windows or Google as search. Yes, Rust is equipped for systems programming, but its applicability is much wider.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://twitter.com/timClicks/status/1351247765851017216"&gt;Tim McNamara on twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/993"&gt;Nixon Enraght-Moony&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 374</title><link href="https://this-week-in-rust.org/blog/2021/01/20/this-week-in-rust-374/" rel="alternate"></link><updated>2021-01-20T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-01-20:blog/2021/01/20/this-week-in-rust-374/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/01/15/rustdoc-performance-improvements.html"&gt;Rustdoc performance improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/01/19/changes-to-rustdoc-team.html"&gt;Changes to the Rustdoc team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-017/"&gt;This Month in Rust GameDev #17 - December 2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/01/18/changelog-139.html"&gt;IntelliJ Rust Changelog #139&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/01/18/changelog-60.html"&gt;rust-analyzer Changelog #60&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-13/"&gt;Knurling-rs Changelog #13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ballistacompute.org/thisweek/2021/01/17/this-week-in-ballista-1/"&gt;This week in Ballista #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deno.land/posts/deno-in-2020"&gt;Deno in 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/async-rs/async-std/releases/tag/v1.9.0"&gt;async-std v1.9.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=opLOzofmawI&amp;amp;feature=youtu.be"&gt;Penrose 0.2.0 Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vincenthz.github.io/cryptoxide-performance/"&gt;Cryptoxide perf (SHA2 / Blake2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/PoignardAzur/aea33f28e2c58ffe1a93b8f8d3c58667"&gt;About variadics in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-in-production-1password"&gt;Rust in Production: 1Password&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brson.github.io/2021/01/17/rust-unconditional-loops"&gt;Unconditional loops are unconditionally awesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://macwright.com/2021/01/15/rust.html"&gt;Rust is a hard way to make a web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mineichen/writing-a-better-line-iterator-in-rust-443m"&gt;Writing a better Line Iterator in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pijul.org/posts/2021-01-15-sanakirja-locks/"&gt;Implementing cross-process Sanakirja locks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/future-join-and-const-eval/"&gt;future::join and const-eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.qovery.com/blog/i-use-rust-in-production-for-6-months-heres-my-feedback"&gt;I used Rust in production for 6 months! Here's my feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/LX9GeWWJRNU"&gt;Learning Rust with "Too Many Linked Lists" (Episode 2) - Pop &amp;amp; Drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/zQC8T71Y8e4"&gt;std::process::exit is evil - a Rust bug fixing story&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-running-our-custom-kernel-on-an-emulator-part-5/"&gt;OS in Rust: Running our custom kernel on an emulator: Part-5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mrtact.medium.com/polishing-rust-30eeac3c4bf3"&gt;Polishing Rust: Boxing and Unboxing Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://carlschwan.eu/2021/01/20/efficient-custom-shapes-in-qtquick-with-rust/"&gt;Efficient custom shapes in QtQuick with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aftix.xyz/home/bacon/"&gt;Scientific Computing in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/davidedelpapa/rust-gui-introduction-a-k-a-the-state-of-rust-gui-libraries-as-of-january-2021-40gl"&gt;Rust GUI: Introduction a.k.a. the state of Rust GUI libraries (as of January 2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/hb/how-to-fetch-a-web-api-with-rust-1390"&gt;How to Fetch a Web API with Rust ü¶Ä&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dbanty/replacing-fastapi-with-rust-part-4-a-solution-2kf9"&gt;Replacing FastAPI with Rust: Part 4 - A Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/itnext/getting-started-with-rust-and-redis-4h79"&gt;Getting started with Rust and Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/how-to-write-a-rest-client-in-rust-with-reqwest-and-wiremock/"&gt;How To Write A REST Client In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/16sU1q8OeeI"&gt;Rust live coding - Tower deep dive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markentier.tech/posts/2021/01/rust-wasm-on-aws-lambda-edge/"&gt;Rust/WebAssembly on AWS Lambda@Edge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/vezfR5ggEkc"&gt;(Live Coding) Zola, a Static Site Generator. Migrating my blog &amp;amp; reviewing Zola's source code.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/dotenv-linter/dotenv-linter"&gt;dotenv-linter&lt;/a&gt;, a lightning fast linter for &lt;code&gt;.env&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/869"&gt;Grachev Mikhail&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/magic-wormhole/magic-wormhole.rs/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;magic-wormhole/magic-wormhole.rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;391 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-01-11..2021-01-18"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79998"&gt;use correct ABI for wasm32 by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80635"&gt;improve diagnostics when closure doesn't meet trait bound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80517"&gt;enhance type inference errors involving the &lt;code&gt;?&lt;/code&gt; operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80324"&gt;explain method-call move errors in loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78407"&gt;make CTFE able to check for undefined behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80042"&gt;split a func into cold/hot parts, reducing rustc binary size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80017"&gt;suggest &lt;code&gt;_&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; if a pattern has too few fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76580"&gt;suggest &lt;code&gt;async {}&lt;/code&gt; for &lt;code&gt;async || {}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80941"&gt;do not suggest invalid code in pattern with loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76219"&gt;add allow-by-default lint on implicit ABI in extern function pointers and items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79328"&gt;reintroduce &lt;code&gt;hir::ExprKind::If&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80232"&gt;remove redundant &lt;code&gt;def_id&lt;/code&gt; lookups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80463"&gt;serialize incr comp structures to file via fixed-size buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79670"&gt;turn type inhabitedness into a query to fix &lt;code&gt;exhaustive_patterns&lt;/code&gt; perf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80802"&gt;box &lt;code&gt;Item::Attributes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80765"&gt;resolve: simplify collection of traits in scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80736"&gt;use &lt;code&gt;Once&lt;/code&gt; instead of &lt;code&gt;Mutex&lt;/code&gt; to manage capture resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80718"&gt;consistently avoid constructing optimized MIR when not doing codegen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80201"&gt;add benchmark and fast path for &lt;code&gt;BufReader::read_exact&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80600"&gt;add &lt;code&gt;MaybeUninit&lt;/code&gt; method &lt;code&gt;array_assume_init&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77435"&gt;change &lt;code&gt;BinaryHeap::append&lt;/code&gt; rebuild heuristic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80290"&gt;implement &lt;code&gt;ptr::write&lt;/code&gt; without dedicated intrinsic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78455"&gt;introduce {&lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;RefMut&lt;/code&gt;}&lt;code&gt;::try_map' for optional projections in&lt;/code&gt;RefCell`&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80764"&gt;re-stabilize &lt;code&gt;Weak::as_ptr&lt;/code&gt; and friends for unsized T&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80567"&gt;add &lt;code&gt;Iterator::intersperse_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80670"&gt;&lt;code&gt;TrustedRandomAaccess&lt;/code&gt; specialization composes incorrectly for nested &lt;code&gt;iter::Zips&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80834"&gt;remove unreachable panics from &lt;code&gt;VecDeque::&lt;/code&gt;{&lt;code&gt;front&lt;/code&gt;/&lt;code&gt;back&lt;/code&gt;}(&lt;code&gt;_mut&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81107"&gt;add &lt;code&gt;NonZeroU&lt;/code&gt;n&lt;code&gt;::is_power_of_two&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77858"&gt;stabilize &lt;code&gt;split_inclusive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80968"&gt;stabilize the &lt;code&gt;poll_map&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78818"&gt;add &lt;code&gt;as_rchunks&lt;/code&gt; (and friends) to slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/227"&gt;hashbrown: hide allocator details and default to &lt;code&gt;Global&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/223"&gt;hashbrown: export &lt;code&gt;AllocError&lt;/code&gt; as well as &lt;code&gt;Allocator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/regex/pull/728"&gt;regex: implement &lt;code&gt;regex::Replacer&lt;/code&gt; for &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;&amp;amp;String&lt;/code&gt;, &lt;code&gt;Cow&amp;lt;'a, str&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;Cow&amp;lt;'a, str&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2311"&gt;futures: fix type-inference in &lt;code&gt;sink::unfold()&lt;/code&gt; by specifying more of its types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6462"&gt;clippy: roadmap for 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-01-12.md"&gt;2020-01-12&lt;/a&gt;:
1 Regressions, 2 Improvements, 3 Mixed
Overall, a positive albeit quiet week. The largest change came from the incremental compilation working group which delivered large gains in performance caused by &lt;a href="https://github.com/rust-lang/rust/issues/76896"&gt;changes&lt;/a&gt; in how inlining is handled in debug mode. Unfortunately, these changes may be reversed due to concerns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Triage done by @rylev.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-01-12.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3028"&gt;Allow "artifact dependencies" on bin, cdylib, and staticlib crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2580"&gt;RFC: Pointer metadata &amp;amp; VTable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81198"&gt;Remove requirement that forces symmetric and transitive PartialEq impls to exist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81048"&gt;Stabilize &lt;code&gt;core::slice::fill_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80959"&gt;Stabilize &lt;code&gt;unsigned_abs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80945"&gt;Add Box::downcast() for dyn Any + Send + Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80470"&gt;Stabilize by-value &lt;code&gt;[T; N]&lt;/code&gt; iterator &lt;code&gt;core::array::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80279"&gt;Implement missing &lt;code&gt;AsMut&amp;lt;str&amp;gt;&lt;/code&gt; for &lt;code&gt;str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80053"&gt;stabilise &lt;code&gt;cargo test -- --include-ignored&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79570"&gt;rustc: Stabilize &lt;code&gt;-Zrun-dsymutil&lt;/code&gt; as &lt;code&gt;-Csplit-debuginfo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79285"&gt;Stabilize Arc::{increment,decrement}_strong_count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78044"&gt;Implement io::Seek for io::Empty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/70904"&gt;Stabilize &lt;code&gt;Seek::stream_position&lt;/code&gt; (feature &lt;code&gt;seek_convenience&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrycccbcc/"&gt;January 21, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrycccbjc/"&gt;January 26, Dallas, TX, US - Last Tuesay - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-NYC/events/275690090/"&gt;January 27, New York, NY, US - Snapshot testing in Rust with K9 with Aaron Abramov - Rust NYC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/275593411/"&gt;February 2, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hum-systems.com/en/jobs/rust-developer-full-stack/?job=1298"&gt;Rust Developer - Full Stack at HUM Systems (Berlin, DE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team#open-roles"&gt;Multiple Roles at Ockam (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/vacatures/2/lead-developer-embedded-rust"&gt;Lead Developer Embedded Rust at Tweede Golf (Nijmegen, NL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/6kdXrwhIQ8-7rJTamLP7qw"&gt;Junior Rust Engineer at Bolt Labs (Remote, USA only)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Why do I use the letter ‚Äòo‚Äô for my generic closure param name? [...] I recently realized that since Rust uses pipes to enclose a param block, using ‚Äòo‚Äô makes the block look like a TIE fighter. I am not a terribly serious person.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://mrtact.medium.com/polishing-rust-30eeac3c4bf3"&gt;Tim Keating on medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/990"&gt;Edoardo Morandi&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 373</title><link href="https://this-week-in-rust.org/blog/2021/01/13/this-week-in-rust-373/" rel="alternate"></link><updated>2021-01-13T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-01-13:blog/2021/01/13/this-week-in-rust-373/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-017/"&gt;This Month in Rust GameDev #17 - December 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2020-12/"&gt;This Month in Rust OSDev (December 2020)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/01/11/changelog-59.html"&gt;rust-analyzer Changelog #59&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-12/"&gt;Knurling-rs Changelog #12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.embecosm.com/2021/01/12/gcc-rust-how-it-can-be-achieved/"&gt;GCC Rust ‚Äì How it can be achieved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensrcsec.com/open_source_security_announces_rust_gcc_funding"&gt;Open Source Security, Inc. Announces Funding of GCC Front-End for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bjorn3.github.io/2021/01/07/progress-report-dec-2020.html"&gt;Progress report on rustc_codegen_cranelift (Dec 2020)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://simplabs.com/blog/2020/12/31/xml-and-rust/"&gt;XML parsing in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gregstoll.wordpress.com/2021/01/10/parsing-baseball-files-in-rust-instead-of-python-for-an-8x-speedup/"&gt;parsing baseball files in Rust instead of Python for an 8x speedup!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/philosophies-rust-haskell/"&gt;Philosophies of Rust and Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mrale.ph/blog/2018/02/03/maybe-you-dont-need-rust-to-speed-up-your-js.html"&gt;Maybe you don't need Rust and WASM to speed up your JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.parsed.uk/articles/Simplifying_EndianSpecific_file_parsers_in_Rust_with_Omnom_and_type_inference"&gt;Simplifying Endian-Specific file parsers in Rust with Omnom and type inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jack.wrenn.fyi/blog/semver-snares-transparent/"&gt;Rust's SemVer Snares: repr(transparent) Super-Cut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.ucy.ac.cy/~eliasathan/papers/tops20.pdf"&gt;Exploiting Mixed Binaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://anchor.fm/the-virtual-world/episodes/Embedded-Rust-part-2---James-Munns-eooog5"&gt;The Virtual World: Embedded Rust part 2 - James Munns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.anthropicstudios.com/2021/01/05/setting-a-rust-windows-exe-icon/"&gt;Setting a Rust Executable's Icon in Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lborb.github.io/book/title-page.html"&gt;The Little Book of Rust Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-unofficial.github.io/patterns/"&gt;Rust Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.philippflenker.com/hecto/"&gt;Hecto: Build your own text editor in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kbknapp/cli-shell-completions-in-rust-37g1"&gt;CLI Shell Completions in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cad97/dynamically-aligned-types-360i"&gt;Dynamically Aligned Types?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mrtact.medium.com/polishing-rust-42d9131d1c3"&gt;Polishing Rust - Temporary Value Dropped While Borrowed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jaredwolff.com/testing-hardware-using-rust/"&gt;Testing Hardware Using Rust Firmware and Rust Based CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/blog/expose-rust-library-to-other-languages.html"&gt;Exposing a Rust Library to Other Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dbanty/replacing-fastapi-with-rust-part-3-trying-actix-32lp"&gt;Replacing FastAPI with Rust: Part 3 - Trying Actix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/aNv_oqveuCE"&gt;Learning Rust by following the "Too Many Linked Lists" tutorial (Episode 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/2aI6bJk76xM"&gt;Rust Parser and State Machine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cheats.rs/"&gt;Rust Language Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.theregister.com/2021/01/14/rust_os_theseus/"&gt;Another Rust-y OS: Theseus joins Redox in pursuit of safer, more resilient systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/MKjliJWzs6w"&gt;OSDI '20 - Redleaf: Isolation and Communication in a Safe Operating System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/NzmbDU13Ki8"&gt;Read a paper: Theseus--An OS written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/aldanor/fast-float-rust"&gt;fast-float&lt;/a&gt;, a crate providing methods to parse floats &lt;em&gt;really&lt;/em&gt; fast.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/868"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZcashFoundation/zebra/issues/1582"&gt;ZcashFoundation/zebra - Create test to catch duplicate dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;320 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-01-04..2021-01-11"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80801"&gt;use correct span for structured suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80784"&gt;rustc_parse: better spans for synthesized token streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80441"&gt;ast: remove some indirection layers from values in key-value attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80782"&gt;resolve: scope visiting doesn't need an &lt;code&gt;Ident&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80563"&gt;resolve/expand: improve attribute expansion on macro definitions and calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80200"&gt;optimize DST field access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80418"&gt;allow references to interior mutable data behind a feature gate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80714"&gt;fixed const_generics error help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80830"&gt;use an empty &lt;code&gt;TokenCursorFrame&lt;/code&gt; stack when capturing tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/674"&gt;deduplicate solution enum in chalk-recursive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80756"&gt;optimize away some &lt;code&gt;fs::metadata&lt;/code&gt; calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80755"&gt;optimize away some path lookups in the generic &lt;code&gt;fs::copy&lt;/code&gt; implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79502"&gt;implement &lt;code&gt;From&amp;lt;char&amp;gt;&lt;/code&gt; for &lt;code&gt;u64&lt;/code&gt; and &lt;code&gt;u128&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77853"&gt;stabilize &lt;code&gt;slice::strip_prefix&lt;/code&gt; and &lt;code&gt;slice::strip_suffix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75490"&gt;add &lt;code&gt;[T; N]::each_ref&lt;/code&gt; and &lt;code&gt;[T; N]::each_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2306"&gt;futures: perf: avoid an Option in the &lt;code&gt;Map*&lt;/code&gt; futures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/backtrace-rs/pull/401"&gt;backtrace: use the symbol table if the DWARF only has line numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8997"&gt;cargo: stabilize -Zfeatures and -Zpackage-features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77862"&gt;rustdoc: fix macros 2.0 and built-in derives being shown at the wrong path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/1239"&gt;docs.rs: fix N+1 queries when fetching crate details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/1237"&gt;docs.rs: fix performance regression in all releases-views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6538"&gt;clippy: new lint: vec_init_then_push&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-01-12.md"&gt;2020-01-12&lt;/a&gt;:
1 Regressions, 2 Improvements, 3 Mixed
Overall, a positive albeit quiet week. The largest change came from the incremental compilation working group which delivered large gains in performance caused by &lt;a href="https://github.com/rust-lang/rust/issues/76896"&gt;changes&lt;/a&gt; in how inlining is handled in debug mode. Unfortunately, these changes may be reversed due to concerns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Triage done by @rylev.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-01-12.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2789"&gt;RFC: Serve crates-io registry over HTTP as static files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3027"&gt;Infallible promotion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2992"&gt;RFC: Add &lt;code&gt;target_abi&lt;/code&gt; configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3007"&gt;RFC: Plan to make core and std's panic identical&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3028"&gt;Allow "artifact dependencies" on bin, cdylib, and staticlib crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2580"&gt;RFC: Pointer metadata &amp;amp; VTable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/78500"&gt;Tracking Issue for &lt;code&gt;panic_any&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/issues/48556"&gt;Tracking issue for stable SIMD in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3057"&gt;Add the boxed!() macro to "de-magic" box syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3058"&gt;try_trait_v2: A new design for the ? desugaring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3064"&gt;Add language support for C-compatible bit-fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/275547915/"&gt;January 14, San Diego, CA, US - San Diego Rust January 2021 Tele-Meetup - San Diego Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/npqfbsycccbbc/"&gt;January 20, Vancouver, BC, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrycccbcc/"&gt;January 21, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrycccbjc/"&gt;January 26, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrycccbsb/"&gt;January 14, Columbus, OH, US - Monthly Meeting - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/268567961/"&gt;January 14, Provo, UT, US - The Blue Pill: Rust on Microcontrollers (Jan / Third Round) - Utah Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thegraph.com/jobs/rust-engineer"&gt;Rust Engineer at The Graph (Remote)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust favours security over convenience. Rust does not want you to make silly little mistakes than can waste so much of your time debugging, which in the end makes it more convenient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://users.rust-lang.org/t/rust-does-not-support-and-operator/53851/7"&gt;@Joe232 on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/986"&gt;Jacob Pratt&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://this-week-in-rust.org/blog/2021/01/13/this-week-in-rust-373/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 372</title><link href="https://this-week-in-rust.org/blog/2021/01/06/this-week-in-rust-372/" rel="alternate"></link><updated>2021-01-06T00:00:00-05:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-01-06:blog/2021/01/06/this-week-in-rust-372/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html"&gt;Announcing Rust 1.49.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/01/04/mdbook-security-advisory.html"&gt;mdBook security advisory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ks5ivd/rib_newsletter_19_rust_and_smart_contracts/"&gt;RiB Newsletter #19 - Rust and smart contracts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/01/04/changelog-58.html"&gt;Rust Analyzer Changelog #58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.extension.sh/changelog/#v1-1-2021-01-07"&gt;Rust Search Extension Changelog v1.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kowtqn/rust_design_patterns_now_also_as_a_book/"&gt;Rust Design Patterns now also as a book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pijul.org/posts/2021-01-05-how-to-survive/"&gt;Pijul - How to survive?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/rustfft-5-0-has-been-released/53709"&gt;RustFFT 5.0 has been released!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://napi.rs"&gt;napi 1.0 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://insta.rs/"&gt;Insta got a new website with docs&lt;/a&gt; and a &lt;a href="https://marketplace.visualstudio.com/items?itemName=mitsuhiko.insta"&gt;Visual Studio Code Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stephencoakley.com/2020/12/29/isahc-1.0-and-retrospective"&gt;Isahc 1.0 and Retrospective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kq6lt2/slotmap_10_has_been_released_copy_restriction/"&gt;slotmap 1.0 has been released! Copy restriction removed, no_std support, and more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dxuuu.xyz/libbpf-rs.html"&gt;libbpf-rs: eBPF for the Rust ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alex-dukhno.github.io/2020-12-31-Reflecting-on-developing-a-database-(2020-edition)/"&gt;Reflecting on developing a database (2020 edition)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.azabani.com/2021/01/03/nonymous-bore.html"&gt;bore(1) + nonymous: lessons learned writing a DNS query tool and &lt;code&gt;#![no_std]&lt;/code&gt; DNS library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/exploring-rustffts-simd-architecture/53780"&gt;Exploring RustFFT's SIMD Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/rusty_sys_dev/understanding-yew-part-1-3cfn"&gt;Understanding Yew Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/elshize/transposing-options-results-with-iterators-aj3"&gt;Transposing options/results with iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2021/01/03/dark-side-of-posix-apis.html"&gt;Dark side of POSIX APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/teryror/7b9a23fd0cd8dcfbcb6ebd34ee2639f8"&gt;Redesigning coca's Storage Abstraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://willcrichton.net/notes/gats-are-hofs/"&gt;Generic associated types encode higher-order functions on types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jack.wrenn.fyi/blog/semver-snares-size/"&gt;Rust's SemVer Snares: Sizedness and Size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.ibm.com/articles/why-webassembly-and-rust-together-improve-nodejs-performance/"&gt;Why using WebAssembly and Rust together improves Node.js performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.osohq.com/post/runtime-reflection-pt-3"&gt;Building a runtime reflection system for Rust ü¶ÄÔ∏è (Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://technosophos.com/2019/08/07/writing-a-kubernetes-controller-in-rust.html"&gt;Writing a Kubernetes CRD Controller in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dpbriggs.ca/blog/Adding-FFI-Support-In-x7"&gt;Adding FFI Support in x7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/recursive-iterators-rust"&gt;Recursive Iterators in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beyermatthias.de/blog/2021/01/03/writing-a-prometheus-mpd-exporter/"&gt;Writing a Prometheus MPD Exporter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-build-a-to-do-app-with-rust/"&gt;Rust Programming Language Tutorial - How to Build a To-Do List App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kbknapp/diving-into-rust-with-a-cli-4gap"&gt;Diving into Rust with a CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/henrybarreto/creating-a-gui-for-a-rust-application-2h1g"&gt;Creating a GUI for a Rust application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/an-introduction-to-property-based-testing-in-rust/"&gt;Zero to Production #6.5: An Introduction To Property-Based Testing In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jcdav.is/2021/01/04/Holiday-Hacking-COD-HR/"&gt;Holiday Hacking - Tracking my heart rate while playing Call of Duty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://objectdisoriented.evokewonder.com/posts/introducing-rustybot-part-1/"&gt;Introducing Rustybot (part 1 of n)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://objectdisoriented.evokewonder.com/posts/introducing-rustybot-part-2/"&gt;Introducing Rustybot (part 2 of n)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jam1.re/blog/extracting-files-from-an-archive-format-i-understand-way-too-much"&gt;Extracting Files From an Archive Format I Understand Way Too Much&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/kbknapp/series/10570"&gt;eBPF Networking in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/k_P0wG3-dNk"&gt;FLTK Rust: use FLUID (RAD tool) with Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Rust-1.49-Released"&gt;Rust 1.49.0 Released With 64-bit ARM Linux Support Rated Tier-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/knpvv9/rust_will_drop_official_support_for_windows_xp/"&gt;Rust will drop official support for Windows XP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/knyoej/rust_is_the_second_most_used_language_for_advent/"&gt;Rust is the second most used language for Advent of Code, after Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kp1piy/rust_grew_94_on_oreilly_online_learning_this_year/"&gt;Rust grew 94% on O'Reilly online learning this year&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kpqmrh/rust_is_now_overall_faster_than_c_in_benchmarks/"&gt;Rust is now overall faster than C in benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/nom-supreme"&gt;nom-supreme&lt;/a&gt;, a crate of utilities for nom parsers, especially for great parse error handling.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/864"&gt;Zicklag&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-unofficial/patterns/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;rust-unofficial/patterns has a few good first issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;322 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-12-28..2021-01-04"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79576"&gt;add edition 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80408"&gt;sync &lt;code&gt;rustc_codegen_cranelift&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80613"&gt;diag: print enum variant instead of enum type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80592"&gt;suggest renaming or escaping when fixing non-snake-case identifiers which would conflict with keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80551"&gt;support pattern as const parents in &lt;code&gt;type_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80547"&gt;parse const generics defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80491"&gt;miri: make size/align_of_val work for dangling raw ptrs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80260"&gt;slightly more typed interface to panic implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79150"&gt;remove all &lt;code&gt;doc_comment!{}&lt;/code&gt; hacks by using &lt;code&gt;#[doc = expr]&lt;/code&gt; where needed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79684"&gt;make &lt;code&gt;copy&lt;/code&gt;(&lt;code&gt;_nonoverlapping&lt;/code&gt;) const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79479"&gt;add &lt;code&gt;Iterator::intersperse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80310"&gt;add fallible &lt;code&gt;Box&lt;/code&gt;, &lt;code&gt;Arc&lt;/code&gt;, and &lt;code&gt;Rc&lt;/code&gt; allocator APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80488"&gt;do not create dangling &lt;code&gt;&amp;amp;T&lt;/code&gt; in &lt;code&gt;Weak&amp;lt;T&amp;gt;::drop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80422"&gt;de-stabilize unsized raw ptr methods for &lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-01-05.md"&gt;2020-01-05&lt;/a&gt;:
0 Regressions, 2 Improvements, 2 Mixed
This was a somewhat quiet week with the exception of large gains to the &lt;code&gt;ctfe&lt;/code&gt; 
(const function) stress test benchmark caused by changes to how rustc serializes
and deserializes cache from disk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Triage done by @rylev.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-01-05.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77858"&gt;Stabilize split_inclusive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/issues/48556"&gt;Tracking issue for stable SIMD in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3052"&gt;Deprecate the authors field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrycccbkb/"&gt;January 7, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrycccbqb/"&gt;January 11, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/275077213/"&gt;January 12, Saarb√ºcken, Saarland, DE - Meetup: 7u16 (virtual) - Rust Saar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/275547915/"&gt;January 14, San Diego, CA, US - San Diego Rust January 2021 Tele-Meetup - San Diego Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrycccbsb/"&gt;January 14, Columbus, OH, US - Monthly Meeting - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/268567961/"&gt;January 14, Provo, UT, US - The Blue Pill: Rust on Microcontrollers (Jan / Third Round) - Utah Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of "it works" when you have UB like this: You've flipped a coin 1 time and it's come up heads and you've concluded it's never tails.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì @mirashii on the community discord&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/981"&gt;Michael Bryan&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/kss4kv/this_week_in_rust_372/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry></feed>