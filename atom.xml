<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>This Week in Rust</title><link href="https://this-week-in-rust.org/" rel="alternate"></link><link href="https://this-week-in-rust.org/atom.xml" rel="self"></link><id>https://this-week-in-rust.org/</id><updated>2021-04-07T00:00:00-04:00</updated><entry><title>This Week in Rust 385</title><link href="https://this-week-in-rust.org/blog/2021/04/07/this-week-in-rust-385/" rel="alternate"></link><updated>2021-04-07T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-04-07:blog/2021/04/07/this-week-in-rust-385/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No papers/research projects this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/04/03/core-team-updates.html"&gt;Core Team updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-04-08-introducing-peixin-hou/"&gt;Introducing Peixin Hou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-04-08-introducing-florian-gilcher/"&gt;Introducing Florian Gilcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2021-03/"&gt;This Month in Rust OSDev (March 2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mhmfu9/rib_newsletter_22_a_few_tweaks/"&gt;RiB Newsletter #22 - A few tweaks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thephilbert.io/2021/04/02/gcc-rust-monthly-report-4-march-2021/"&gt;GCC Rust Monthly Report #4 March 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mjxbaz/mrustc_upgrade_rustc_1390/"&gt;mrustc upgrade: rustc 1.39.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/04/05/changelog-71.html"&gt;rust-analyzer Changelog #71&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mess.org/2021/03/26/Left-Recursive-PEG-Parser-Generator/"&gt;A new Left Recursive PEG Parser Generator for rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flott-motion.org/news/last-month-in-flott-april-2021/"&gt;Last Month in Flott (Motion Control Toolkit in Rust) - April 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/rust/2021/04/08/intellij-rust-updates-for-2021-1/"&gt;Recent updates in IntelliJ Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bevyengine.org/news/bevy-0-5/"&gt;Bevy 0.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://uazu.github.io/blog/20210406.html"&gt;Interfacing a low-level actor system to Rust async/await, part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manishearth.github.io/blog/2021/04/05/a-tour-of-safe-tracing-gc-designs-in-rust/"&gt;A Tour of Safe Tracing GC Designs in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackernoon.com/how-i-used-rust-lunatic-to-build-a-telnet-chat-server-with-webassembly-rb3l33cg"&gt;How I Used Rust + Lunatic to Build a TelNet Chat Server with WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2021/04/eliminating-data-races-in-firefox-a-technical-report/"&gt;Eliminating Data Races in Firefox - A Technical Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sunfishcode.online/first-class-io/"&gt;First-class IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.gentoo.org/mgorny/2021/02/19/the-modern-packagers-security-nightmare/"&gt;The modern packager's security nightmare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkolaczk.github.io/disk-access-ordering/"&gt;Ordering Requests to Accelerate I/O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/an-essay-of-checked-exceptions-in-rust/57769"&gt;An essay of checked exceptions in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yossarian.net/2021/02/28/Weird-architectures-werent-supported-to-begin-with"&gt;Weird architectures weren't supported to begin with&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/KEQIWqSq42k"&gt;I tried learning OpenGL in 7 days - using Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/blog/2021/03/python-client/"&gt;How we built our Python Client that's mostly Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kas-gui.github.io/tutorials/hello.html"&gt;Hello world with KAS GUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/rust-small-docker-image/"&gt;How to create small Docker images for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pavel.cool/rust/rust-kubernetes-operators/"&gt;Oxidizing the Kubernetes Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/blog/2021/04/node-bindgen-tuples/"&gt;Sending tuples from Node to Rust and back&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/abhirockzz/getting-started-with-kafka-and-rust-part-1-4hkb"&gt;Getting started with Kafka and Rust: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seanchen1991/a-beginner-s-guide-to-handling-errors-in-rust-40k2"&gt;A Beginner's Guide to Handling Errors in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://project-oak.github.io/rust-verification-tools/using-seahorn/"&gt;Using Seahorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gendignoux.com/blog/2021/04/01/rust-async-streams-futures-part1.html"&gt;Asynchronous streams in Rust (part 1) - Futures, buffering and mysterious compilation error messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://medium.com/the-polyglot-programmer/what-would-sqlite-look-like-if-written-in-rust-part-3-edd2eefda473"&gt;What would SQLite look like if written in Rust? — Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=YNSg7g46Hso"&gt;Return a value from a function in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/rMGWeSjctlY"&gt;Crust of Rust: Atomics and Memory Ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/FNcXf-4CLH0"&gt;Async/Await in Rust: Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/zjAe-uvKMJ4"&gt;OpenVehicleDiag Rust live coding with Macchina's A0!!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] [series] &lt;a href="https://youtube.com/playlist?list=PLfllocyHVgsRwLkTAhG0E-2QxCf-ozBkk"&gt;Easy Rust - learn to program in Rust with simple English&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/e-tony/best-of-ml-rust"&gt;best-of-ml-rust: A ranked list of awesome machine learning Rust libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2021/04/rust-in-android-platform.html"&gt;Rust in the Android platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mify2o/david_tolnay_thank_you/"&gt;David Tolnay - thank you&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2021/04/02/my-shiny-future/"&gt;My "shiny future"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/rs_pbrt"&gt;rs-pbrt&lt;/a&gt;, a counterpart to the PBRT book's (3rd edition) C++ code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/900"&gt;Jan Walter&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotenv-linter/dotenv-linter/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;dotenv-linter has several good first issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;313 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-03-29..2021-04-05"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83771"&gt;fix stack overflow detection on FreeBSD 11.1+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83853"&gt;disallow the use of high byte registes as operands on &lt;code&gt;x86_64&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82907"&gt;resolve/expand: cache intermediate results of &lt;code&gt;#[derive]&lt;/code&gt; expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83726"&gt;panic early when &lt;code&gt;TrustedLen&lt;/code&gt; indicates a &lt;code&gt;length &amp;gt; usize::MAX&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83667"&gt;suggest &lt;code&gt;box&lt;/code&gt;/&lt;code&gt;pin&lt;/code&gt;/&lt;code&gt;arc&lt;/code&gt;ing receiver on method calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83666"&gt;run LLVM coverage instrumentation passes before optimization passes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83663"&gt;simplify logical operations CFG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83839"&gt;remove unneeded type resolving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83605"&gt;unaligned_references: &lt;code&gt;align(N)&lt;/code&gt; fields in &lt;code&gt;packed(N)&lt;/code&gt; structs are fine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83406"&gt;prevent very long compilation runtimes in &lt;code&gt;LateBoundRegionNameCollector&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83357"&gt;reduce the impact of &lt;code&gt;Vec::reserve&lt;/code&gt; calls that do not cause any allocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83267"&gt;BTree: no longer search arrays twice to check &lt;code&gt;Ord&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82780"&gt;stream the dep-graph to a file instead of storing it in-memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81619"&gt;implement &lt;code&gt;SourceIterator&lt;/code&gt; and &lt;code&gt;InPlaceIterable&lt;/code&gt; for &lt;code&gt;ResultShunt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83819"&gt;optimize jumps in &lt;code&gt;PartialOrd::le&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83609"&gt;&lt;code&gt;ffi::c_str&lt;/code&gt; removed bound checks on &lt;code&gt;as_bytes&lt;/code&gt;, &lt;code&gt;to_bytes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82331"&gt;added &lt;code&gt;as_slice&lt;/code&gt; method to &lt;code&gt;BinaryHeap&lt;/code&gt; collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83858"&gt;use &lt;code&gt;#[inline(always)]&lt;/code&gt; on trivial &lt;code&gt;UnsafeCell&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83831"&gt;add &lt;code&gt;#[inline]&lt;/code&gt; to &lt;code&gt;IpAddr&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83652"&gt;disallow octal format in Ipv4 string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82487"&gt;constify methods of &lt;code&gt;std::net::SocketAddr&lt;/code&gt;, &lt;code&gt;SocketAddrV4&lt;/code&gt; and &lt;code&gt;SocketAddrV6&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83571"&gt;constify some slice methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdsimd/pull/87"&gt;stdsimd: add saturating abs/neg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/254"&gt;hashbrown: make &lt;code&gt;RawTable::insert_no_grow&lt;/code&gt; unsafe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9302"&gt;cargo: add cargo config subcommand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83681"&gt;rustdoc: only look at blanket impls in &lt;code&gt;get_blanket_impls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83478"&gt;rustdoc: add unstable option to only emit shared/crate-specific files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82864"&gt;rustdoc: don't enter an &lt;code&gt;infer_ctxt&lt;/code&gt; in &lt;code&gt;get_blanket_impls&lt;/code&gt; for impls that aren't blanket impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83793"&gt;rustdoc: highlight macros more efficiently&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7001"&gt;clippy: add &lt;code&gt;non_octal_unix_permissions&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6976"&gt;clippy: don't lint &lt;code&gt;manual_map&lt;/code&gt; in const functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6706"&gt;clippy: new Lint: &lt;code&gt;needless_for_each&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6463"&gt;clippy: new Lint: &lt;code&gt;branches_sharing_code&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6342"&gt;clippy: lint: &lt;code&gt;filter(Option::is_some).map(Option::unwrap)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7026"&gt;clippy: remove author requirement for &lt;code&gt;cargo_common_metadata&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7030"&gt;Clippy going dark: adding a dark theme to Clippy's lint list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/3409"&gt;crates.io: topologically sort &lt;code&gt;db-dump.tar.gz&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82347"&gt;parallelize tidy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;A pretty major week for &lt;a href="https://perf.rust-lang.org/?start=4896450e7e0a522486b4d3a8d360ac4e1d2072a0&amp;amp;end=d32238532138485c80db4f2cd596372bce214e00&amp;amp;absolute=false&amp;amp;stat=max-rss"&gt;memory usage improvements&lt;/a&gt; with an average of ~20% gains on memory usage for
release builds, and 5% on check builds, due to an update in the default allocator
used (to a more recent jemalloc). Wall time performance remained largely unchanged over this week.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=4896450e7e0a522486b4d3a8d360ac4e1d2072a0&amp;amp;end=d32238532138485c80db4f2cd596372bce214e00&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;4896450e..d32238&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regressions, 4 Improvements, 0 Mixed&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3086"&gt;RFC: Declarative macro metavariable expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2584"&gt;RFC: Structural Records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2498"&gt;Hygiene opt-out (escaping) for declarative macros 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2393"&gt;RFC: Delegation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2353"&gt;RFC: &lt;code&gt;#[derive_no_bound(..)]&lt;/code&gt; and &lt;code&gt;#[derive_field_bound(..)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2320"&gt;RFC: Eager Macro Expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3058"&gt;try_trait_v2: A new design for the &lt;code&gt;?&lt;/code&gt; desugaring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83707"&gt;Remove &lt;code&gt;T: Debug&lt;/code&gt; bound on UnsafeCell Debug impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82918"&gt;Turn old edition lint (anonymous-parameters) into warn-by-default on 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81764"&gt;Stabilize &lt;code&gt;rustdoc::bare_urls&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/79288"&gt;Tracking issue: fNN::is_subnormal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/79143"&gt;Tracking Issue for feature(nonzero_leading_trailing_zeros)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/79025"&gt;Tracking Issue for &lt;code&gt;{BTreeMap,BTreeSet}::retain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/78729"&gt;Tracking Issue for &lt;code&gt;#![feature(const_cell_into_inner)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/78639"&gt;Tracking Issue for &lt;code&gt;atomic_fetch_update&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/78271"&gt;Tracking Issue for feature: "option_insert"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/76416"&gt;Tracking Issue for &lt;code&gt;Duration&lt;/code&gt; saturating operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/73544"&gt;Tracking Issue for &lt;code&gt;Duration::{zero, is_zero} (#![feature(duration_zero)])&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/27778"&gt;Tracking issue for FixedSizeArray trait&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3101"&gt;RFC: Reserved prefixes in the 2021 edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/277133126/"&gt;April 7, Johannesburg, ZA - Monthly Joburg Rust Chat! - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstryccgbkb/"&gt;April 7, Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/276801410/"&gt;April 12, Denver, CO, US - Building Delightful CLI Tools in Rust by Chuck Pierce - Rust Denver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccgbrb/"&gt;April 13, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Saar/events/276873622/"&gt;April 13, Saarbrücken, Saarland, DE - &lt;strong&gt;Rust Saar&lt;/strong&gt; 10u16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/ntvrgsyccgblb"&gt;April 20, Washington, DC, US - The Rust Borrow Checker—A Deep Dive - Rust DC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgryccgblb/"&gt;April 8, Columbus, OH, US - Monthly Meetup - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccgbsb/"&gt;April 14, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wellington/events/277270667"&gt;April 19, Wellington, NZ - IGNITION: What is Rust and why should I care? Rust at work &amp;amp; at play - Rust Wellington&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;IOTA Foundation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://iota.bamboohr.com/jobs/view.php?id=143&amp;amp;source=other"&gt;IOTA Identity Software Engineer - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Parity Technologies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://grnh.se/9aec49883us"&gt;Blockchain Developer - Cross Chain Messaging (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.parity.io/jobs/"&gt;Numerous other Rust engineering openings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Microsoft&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://careers.microsoft.com/us/en/job/960784/Senior-Software-Engineer"&gt;Azure IoT Senior Software Engineer (remote possible within U.S.)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Junior developers should also apply but relocation to Redmond is necessary in that case.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Wallaroo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wallaroo.breezy.hr/p/30939dc4e5c7-software-engineer"&gt;Software Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;p&gt;Sadly there was no quote nominated for this week.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mmvkrl/this_week_in_rust_385/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 384</title><link href="https://this-week-in-rust.org/blog/2021/03/31/this-week-in-rust-384/" rel="alternate"></link><updated>2021-03-31T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-03-31:blog/2021/03/31/this-week-in-rust-384/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html"&gt;Announcing Rust 1.51.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-03-25-introducing-mark-rousskov/"&gt;Introducing Mark Rousskov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-03-25-introducing-nell-shamrell-harrington/"&gt;Introducing Nell Shamrell-Harrington&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/03/29/changelog-70.html"&gt;rust-analyzer changelog #70&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/03/29/changelog-144.html"&gt;IntelliJ Rust Changelog #144&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-financial-update/"&gt;Knurling-rs Financial Update and Call for Funding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam"&gt;Ockam | End-to-end encrypted messaging and mutual authentication between distributed applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deno.com/blog/the-deno-company"&gt;Announcing the Deno Company&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.vortexa.com/insight/using-rust-to-corrode-insane-python-run-times"&gt;Using Rust to corrode insane Python run-times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/the-current-state-of-rust-web-frameworks/"&gt;The current state of Rust web frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://plv.mpi-sws.org/rustbelt/ghostcell/"&gt;GhostCell: Separating Permissions from Data in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2021/03/28/const-generic-slipstreem.html"&gt;Using const generics in slipstream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://robinmoussu.gitlab.io/blog/post/2021-03-25_rust_iterators_tips_and_tricks/"&gt;Rust iterators tips and tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/pin-and-suffering"&gt;Pin and suffering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jaredwolff.com/embedding-rust-into-zephyr-using-cbindgen/"&gt;Embedding Rust Into Zephyr Firmware using C-bindgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doma.dev/blog/parsing-stuff-in-rust/"&gt;Parser combinators in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.adamchalmers.com/grids-2/"&gt;Grids in Rust, part 2: const generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/senyeezus/ergonomic-error-handling-with-rust-13bj"&gt;Ergonomic error handling with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dandyvica/implementing-sha2-256-512-algorithm-with-rust-const-generics-5ap"&gt;Implementing SHA2 (256/512) algorithm with Rust const generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ignaciojvig/analisando-alocacoes-de-memoria-em-rust-utilizando-gnu-debugger-34kb"&gt;Analisando alocações de memória em Rust utilizando GNU Debugger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/test-embedded-app/"&gt;Testing an embedded application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mkhan45.github.io/2021/03/28/Using-const-generics-to-model-an-electronics-graph.html"&gt;Using Const Generics To Model An Electronics Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aloso.github.io/2021/03/28/module-system.html"&gt;Rust's Module System Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/basman/series/11934"&gt;Working with the trust-dns-resolver crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/BPt987BRdDw"&gt;Safer Rust: Program Verification with Creusot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arstechnica.com/gadgets/2021/03/linus-torvalds-weighs-in-on-rust-language-in-the-linux-kernel/"&gt;Linus Torvalds weighs in on Rust language in the Linux kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mgh9n9/ownership_concept_diagram/"&gt;Ownership Concept Diagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/http-rs/tide-acme"&gt;tide-acme&lt;/a&gt;, a crate for automatic HTTPS certification using Let's Encrypt for Tide.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/894"&gt;Josh Triplett&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://umccr.org/blog/aws-bioinformatics-rust/"&gt;AWS Rust lambdas and Bioinformatics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/darpi-rs/darpi"&gt;darpi-rs/darpi is looking for users and contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/RoaringBitmap/roaring-rs/pull/92"&gt;RoaringBitmap/roaring-rs seeks a review of this Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;327 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-03-22..2021-03-29"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83307"&gt;coverage bug fixes and optimization support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83488"&gt;ban custom inner attributes in expressions and statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83424"&gt;&lt;code&gt;GenericParam&lt;/code&gt; does not need to be a HIR owner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83177"&gt;remove assignments to ZST places instead of marking ZST return place as unused&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83050"&gt;run analyses before thir-tree dumps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82980"&gt;import small cold functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75384"&gt;implement &lt;code&gt;feature(const_generics_defaults)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83041"&gt;stabilize &lt;code&gt;debug_non_exhaustive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83273"&gt;simplify encoder and decoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83185"&gt;remove (lots of) dead code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79846"&gt;use &lt;code&gt;TrustedRandomAccess&lt;/code&gt; for in-place iterators where possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81354"&gt;instruct LLVM that &lt;code&gt;binary_search&lt;/code&gt; returns a valid index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80771"&gt;make &lt;code&gt;NonNull::as_ref&lt;/code&gt; (and friends) return refs with unbound lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82917"&gt;add function &lt;code&gt;core::iter::zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82565"&gt;revert reverting of stabilizing &lt;code&gt;integer::BITS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83245"&gt;generalize and inline &lt;code&gt;slice::fill&lt;/code&gt; specializations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83421"&gt;add &lt;code&gt;Result::into_err&lt;/code&gt; where the Ok variant is the never type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83349"&gt;remove &lt;code&gt;Option::&lt;/code&gt;{&lt;code&gt;unwrap_none&lt;/code&gt;, &lt;code&gt;expect_none&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2380"&gt;futures: add &lt;code&gt;AsyncSeekExt::stream_position&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9298"&gt;cargo: default macOS targets to unpacked debuginfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83051"&gt;rustdoc: sidebar trait items order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/1322"&gt;docs.rs: stop displaying and serving authorship information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;A somewhat negative weak for performance where regressions outweigh improvements. Sadly, a lot of the regressions don't seem very straight-forward to understand, and so more investigation will be necessary.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=9b6339e4b9747d473270baa42e77e1d2fff39bf4&amp;amp;end=4896450e7e0a522486b4d3a8d360ac4e1d2072a0&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;9b6339e4..4896450&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 2 Improvements, 3 Mixed&lt;/p&gt;
&lt;p&gt;2 of them in rollups&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3086"&gt;RFC: Declarative macro metavariable expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3098"&gt;Raw Keywords&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/83476"&gt;Add strong_count mutation methods to Rc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82918"&gt;Turn old edition lint (anonymous-parameters) into warn-by-default on 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81942"&gt;reduce threads spawned by ui-tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81938"&gt;Stabilize &lt;code&gt;peekable_peek_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81764"&gt;Stabilize &lt;code&gt;rustdoc::bare_urls&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81507"&gt;Adding diesel to the cargotest suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/81047"&gt;Stabilize &lt;code&gt;cmp_min_max_by&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/80080"&gt;Allow qualified paths in struct construction (both expressions and patterns)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/55467"&gt;Tracking issue for RFC 2457, "Allow non-ASCII identifiers"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3100"&gt;RFC: Add a standard trait for getting many &amp;amp;mut to places&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3099"&gt;RFC: &lt;code&gt;cargo&lt;/code&gt;-&lt;code&gt;miri&lt;/code&gt; integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3098"&gt;Raw Keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3097"&gt;rustdoc URL conflict resolution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccgbcb/"&gt;April 1, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/276717867/"&gt;April 6, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/277133126/"&gt;April 7, Johannesburg, ZA - Monthly Joburg Rust Chat! - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstryccgbkb/"&gt;April 7, Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccgbrb/"&gt;April 13, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgryccgblb/"&gt;April 8, Columbus, OH, US - Monthly Meetup - Columbus Rust Society&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgryccgbsb/"&gt;April 14, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;e.ventures&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://old.reddit.com/r/rust/comments/mfstaz/official_rrust_whos_hiring_thread_for_jobseekers/gspq9v1/"&gt;Rust backend engineer (Remote, the Americas)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Wallaroo&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wallaroo.breezy.hr/p/30939dc4e5c7-software-engineer"&gt;Software Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ockam.io/team#open-roles"&gt;Hiring for several Rust positions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Despite all the negative aspects, I must say that I do generally really like the poll-based approach that Rust is taking. Most of the problems encountered are encountered not because of mistakes, but because no other language really has pushed this principle this far. Programming language design is first and foremost an “artistic” activity, not a technical one, and anticipating the consequences of design choices is almost impossible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://tomaka.medium.com/a-look-back-at-asynchronous-rust-d54d63934a1c"&gt;tomaka on medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1028"&gt;Michael Howell&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mhkhmw/this_week_in_rust_384/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 383</title><link href="https://this-week-in-rust.org/blog/2021/03/24/this-week-in-rust-383/" rel="alternate"></link><updated>2021-03-24T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-03-24:blog/2021/03/24/this-week-in-rust-383/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/03/18/async-vision-doc.html"&gt;Building a shared vision for Async Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2021/03/23/1.51.0-prerelease.html"&gt;1.51.0 pre-release testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-03-18-introducing-bobby-holley/"&gt;Introducing Bobby Holley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Foundation] &lt;a href="https://foundation.rust-lang.org/posts/2021-03-18-introducing-tyler-mandry/"&gt;Introducing Tyler Mandry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/03/22/changelog-69.html"&gt;rust-analyzer Changelog #69&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/the-biggest-threat-to-rust-sustainability/"&gt;The biggest threat to Rust's sustainability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cacm.acm.org/magazines/2021/4/251364-safe-systems-programming-in-rust/fulltext"&gt;Safe Systems Programming in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ecorax.net/macro-bunker-1/"&gt;The GPIO war: macro bunkers for typestate explosions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tomaka.medium.com/a-look-back-at-asynchronous-rust-d54d63934a1c"&gt;A look back at asynchronous Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ikiapps.com/programming/2019/07/26/is-rust-good-for-apps"&gt;Rust as an App Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://steveklabnik.com/writing/how-often-does-rust-change"&gt;How often does Rust change?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vadosware.io/post/serving-a-single-file-over-http-with-rust-and-go/"&gt;Serving a single file over HTTP with Rust and Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.novatec-gmbh.de/en/blog/the-case-for-the-typestate-pattern-the-typestate-pattern-itself/"&gt;The Case for the Typestate Pattern - The Typestate Pattern itself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] &lt;a href="https://zhuanlan.zhihu.com/p/352945545"&gt;Rust in Embedded World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/V8dnIw3amLA"&gt;Cheaply writing a fast interpreter - Neil Mitchell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bit.ly/apache-arrow-with-rust"&gt;Introduction to Apache Arrow with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/rust-execute-from-memory/"&gt;How to execute shellcodes from memory in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doma-dev.medium.com/pattern-matching-in-rust-and-other-imperative-languages-7cf1c6abf4a1"&gt;Beginner's Guide to Rust Pattern Matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.urth.org/2021/03/21/writing-a-postgres-sql-pretty-printer-in-rust-part-1-5/"&gt;Writing a PostgreSQL Pretty Printer in Rust: Part 1.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ericsink.com/entries/lousygrep.html"&gt;Calling .NET APIs from Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hardmo.de/article/2021-03-14-zst-proof-types.md"&gt;The magical applications of Zero-Sized Types in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexmercedcoder/rust-rocket-zero-to-deploy-578o"&gt;Rust and Rocket - Zero to Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pwy.io/en/posts/learning-to-fly-pt3/"&gt;Learning to Fly: Let's simulate evolution in Rust! (pt 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogg.bekk.no/building-an-openstreetmap-app-in-rust-part-vi-8cfc8c3f7798"&gt;Building an OpenStreetMap app in Rust, Part VI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ianjk.com/ecs-in-rust/"&gt;Tutorial: Writing a tiny Entity Component System in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aloso.github.io/2021/03/18/raii-guards.html"&gt;Implementing RAII guards in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[JP] &lt;a href="https://dev.to/nikaera/tech-actix-web-httponly-cookie-182"&gt;[TECH] Actix web で HttpOnly な Cookie を設定する 🍪&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=gesNaLkUJeA&amp;amp;list=PLP2yfE2-FXdQmXLvrQ5QN64enbF_KCYQW"&gt;The four-part "Overview of the Rust Programming Language" for beginners is now complete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="papers-and-research-projects"&gt;Papers and Research Projects&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No Papers or Research Projects this week&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vertexclique.com/streaming-with-bastion-and-kafka/"&gt;Streaming using Bastion &amp;amp; Kafka - near consumer native correlation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://benhoyt.com/writings/count-words/"&gt;Performance comparison: counting words in Python, Go, C++, C, AWK, Forth, and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zdnet.com/article/linus-torvalds-on-where-rust-will-fit-into-linux/"&gt;Linus Torvalds on where Rust will fit into Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.collabora.com/news-and-blog/blog/2021/03/24/rust-integrating-llvm-source-base-code-coverage-with-gitlab/"&gt;Rust: integrating LLVM source-base code coverage with GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://egraphs-good.github.io"&gt;egg&lt;/a&gt;, a project using e-graphs to provide a new way to build program optimizers and synthesizers.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/891"&gt;Daniel Nugent&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotenv-linter/dotenv-linter/issues/390"&gt;dotenv-linter has many good first issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;389 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-03-15..2021-03-22"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82834"&gt;enable mutable noalias for LLVM &amp;gt;= 12&lt;/a&gt; (Fingers crossed)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83216"&gt;allow registering tool lints with &lt;code&gt;register_tool&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83092"&gt;more precise spans for HIR paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82707"&gt;&lt;code&gt;const_evaluatable_checked&lt;/code&gt;: stop eagerly erroring in &lt;code&gt;is_const_evaluatable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1745"&gt;miri: improve error message of calling unsupported non-"C"/"system"-ABI foreign function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83080"&gt;make source-based code coverage compatible with MIR inlining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79278"&gt;stabilize &lt;code&gt;or_patterns&lt;/code&gt; (RFC 2535, 2530, 2175)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/80193"&gt;stabilize &lt;code&gt;feature(osstring_ascii)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82771"&gt;stabilize &lt;code&gt;slice::IterMut::as_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82919"&gt;stabilize &lt;code&gt;assoc_char_funcs&lt;/code&gt; and &lt;code&gt;assoc_char_consts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/71780"&gt;implement &lt;code&gt;String::remove_matches&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81358"&gt;add a check for ASCII characters in &lt;code&gt;to_upper&lt;/code&gt; and &lt;code&gt;to_lower&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82554"&gt;fix invalid slice access in &lt;code&gt;String::retain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83091"&gt;constify copy related functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82570"&gt;add &lt;code&gt;as_str&lt;/code&gt; method for split whitespace str iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82191"&gt;&lt;code&gt;Vec::dedup_by&lt;/code&gt; optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83244"&gt;fix overflowing length in &lt;code&gt;Vec&amp;lt;ZST&amp;gt;&lt;/code&gt; to &lt;code&gt;VecDeque&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81607"&gt;implement &lt;code&gt;TrustedLen&lt;/code&gt; and &lt;code&gt;TrustedRandomAccess&lt;/code&gt; for &lt;code&gt;Range&amp;lt;integer&amp;gt;&lt;/code&gt;, &lt;code&gt;array::IntoIter&lt;/code&gt;, &lt;code&gt;VecDequeue&lt;/code&gt;'s iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9279"&gt;cargo: allow cargo update to operate with the &lt;code&gt;--offline&lt;/code&gt; flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/9290"&gt;cargo: refactor feature handling, and improve error messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83077"&gt;rustdoc: reduce GC work during search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4747"&gt;rustfmt: fix issue 'double spaces between struct field prefix and identity when using long attributes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;An overall busy but decent week for performance. While there were some performance regressions they were mostly small, and they were outnumbered by performance gains. Perhaps the most interesting news is not a compiler performance improvement but rather the introduction of no-alias optimizations at the LLVM level. This slightly hurts optimized build time performance in some cases, but it should make some workloads run faster after compilation.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=f24ce9b0140d9be5a336954e878d0c1522966bb8&amp;amp;end=9b6339e4b9747d473270baa42e77e1d2fff39bf4&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;f24ce9b0..9b6339e4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 5 Improvements, 3 Mixed&lt;/p&gt;
&lt;p&gt;1 of them in rollups&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3014"&gt;Adds must_not_suspend_lint RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2996"&gt;adds async stream rfc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3052"&gt;Make the authors field optional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3086"&gt;RFC: Declarative macro metavariable expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2529"&gt;RFC: Hidden trait implementations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82992"&gt;Stabilize bufreader_seek_relative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78618"&gt;Add IEEE 754 compliant fmt/parse of -0, infinity, NaN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77704"&gt;Implement indexing slices with pairs of &lt;code&gt;core::ops::Bound&amp;lt;usize&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/BcnRust/events/276796209/"&gt;March 25, Barcelona, ES - BcnRust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/276424952"&gt;March 30, Munich, DE - Rust Remote #6 - Rust Munich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccfbnc/"&gt;March 30, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccgbcb/"&gt;April 1, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/276717867/"&gt;April 6, Buffalo, NY, US - Buffalo Rust User Group - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Wellington/events/277104604/"&gt;March 31, Wellington, NZ - Coffee - Rust Wellington&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/careers/jobs/3005375"&gt;Senior Rust Engineer, Database Experience (Remote, North America)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IONQ&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ionq.bamboohr.com/jobs/view.php?id=44"&gt;Senior Software Engineer, Quantum Operating Systems (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pondurance&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pondurance-llc.prismhr-hire.com/job/216824/software-data-engineer-national"&gt;Software Data Engineer - National (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This is just to say,&lt;br /&gt;
I have rebased&lt;br /&gt;
the feature branch&lt;br /&gt;
opened against&lt;br /&gt;
master&lt;/p&gt;
&lt;p&gt;and which&lt;br /&gt;
you might have been&lt;br /&gt;
already working&lt;br /&gt;
on fixing&lt;/p&gt;
&lt;p&gt;Forgive me,&lt;br /&gt;
the diff was so trivial&lt;br /&gt;
so minor&lt;br /&gt;
so smol&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://rust-lang.zulipchat.com/#narrow/stream/257879-project-portable-simd/topic/2021-03-08.20Meeting/near/231384678"&gt;Jubilee on rust-lang zulip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1020"&gt;Josh Triplett&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/mcng4u/this_week_in_rust_383/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry><entry><title>This Week in Rust 382</title><link href="https://this-week-in-rust.org/blog/2021/03/17/this-week-in-rust-382/" rel="alternate"></link><updated>2021-03-17T00:00:00-04:00</updated><author><name>TWiR Contributors</name></author><id>tag:this-week-in-rust.org,2021-03-17:blog/2021/03/17/this-week-in-rust-382/</id><summary type="html">&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No Official Blog Posts this week&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No Newsletters this week&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/thedjinn/MiniWASM"&gt;MiniWASM - A minimalist Rust WebAssembly project template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flott-motion.org/news/stepper-0-5/"&gt;Stepper 0.5 (formerly Step/Dir) - Universal Stepper Motor Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/03/15/changelog-68.html"&gt;Rust Analyzer Changelog #68&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/03/16/changelog-143.html"&gt;IntelliJ Rust Changelog #143&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://console.dev/qa/starship-matan-kushner/"&gt;Why the Starship shell prompt is built in Rust (interview with project creator)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thenewstack.io/rust-vs-go-why-theyre-better-together/?s=09"&gt;Rust vs. Go: Why They’re Better Together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cfallin.org/blog/2021/03/15/cranelift-isel-3/"&gt;Cranelift, Part 3: Correctness in Register Allocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tangramvision.com/blog/making-great-docs-with-rustdoc"&gt;Making Great Docs with Rustdoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.urth.org/2021/03/14/writing-a-postgres-sql-pretty-printer-in-rust-part-1/"&gt;Writing a Postgres SQL Pretty Printer in Rust: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://able.bio/haixuanTao/data-manipulation-polars-vs-rust--3def44c8"&gt;Data Manipulation: Polars vs Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/os-in-rust-incorporate-vga-buffer-part-7/"&gt;OS in Rust: Incorporate VGA buffer: Part-7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/crazymykl/rust-koans"&gt;Rust Koans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/rust-send-email/"&gt;How to send emails with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.stephenmarz.com/2021/02/22/writing-pong-in-rust/"&gt;Writing Pong in Rust for my OS Written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://manishearth.github.io/blog/2021/03/15/arenas-in-rust/"&gt;Arenas in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/zero-downtime-deployments/"&gt;Zero Downtime Deployments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/xinnks/deploy-a-rust-website-on-heroku-1l45"&gt;Deploy A Rust Website on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jakobmeier.ch/blogging/Enums.html"&gt;One enum to rule them all&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rg3d.rs/tutorials/2021/03/11/tutorial3.html"&gt;Writing a 3D Shooter using rg3d - #3 - Bots, AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.datastax.com/blog/2021/03/developing-high-performance-apache-cassandra-applications-rust-part-1"&gt;Developing High Performance Apache Cassandra™ Applications in Rust (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bes.github.io/blog/rust-strings/"&gt;Strings in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pintuch/rust-reqwest-examples-10ff"&gt;Rust - Reqwest examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/libp2p-tutorial-build-a-peer-to-peer-app-in-rust/"&gt;libp2p tutorial: Build a peer-to-peer app in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/playlist?list=PLauX9TuJ8sfyaLPZ1udS3zS_V9YXdsbtc"&gt;Rust for Beginners - Watch me code the Rustlings Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Das3XSWo1GU"&gt;Crust of Rust: The Drop Check (live edition)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="papers-and-research-projects"&gt;Papers and Research Projects&lt;/h3&gt;
&lt;p&gt;*&lt;em&gt;No Papers and Research Projects This Week&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://davidkoloski.me/blog/rkyv-is-faster-than/"&gt;rkyv is faster than {bincode, capnp, cbor, flatbuffers, postcard, prost, serde_json}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.peakscale.com/100ms-gotcha/"&gt;100ms delays with Rust on Lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kornel.ski/rust-c-speed"&gt;Speed of Rust vs C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.greyblake.com/blog/2021-03-12-rust-playground-at-your-fingertips/"&gt;Rust Playground At Your Fingertips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yossarian.net/2021/03/16/totally_safe_transmute-line-by-line"&gt;totally_safe_transmute, line-by-line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocboogie/rust-graphics-crates"&gt;Rust Graphics Crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jduchniewicz.com/posts/2021/02/c-to-rust-or-how-to-render-your-mindset/#introduction"&gt;C++ to Rust - or how to render your mindset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.personal.psu.edu/suz305/recruitment-twir.html"&gt;Paid Online Research: Rust Programmers’ Experience and Challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/tczajka/ibig-rs"&gt;ibig&lt;/a&gt;, a crate of fast big integers.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/889"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/delta-io/delta-rs/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;delta-rs has many good first issues for those who want to learn Delta Lake or Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotenv-linter/dotenv-linter/issues/390"&gt;dotenv-linter has many good first issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;365 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-03-08..2021-03-15"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82422"&gt;expand: do not allocate &lt;code&gt;Lrc&lt;/code&gt; for &lt;code&gt;allow_internal_unstable&lt;/code&gt; list unless necessary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82854"&gt;account for &lt;code&gt;if (let pat = expr) {}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83127"&gt;introduce &lt;code&gt;proc_macro_back_compat&lt;/code&gt; lint, and emit for &lt;code&gt;time-macros-impl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82495"&gt;eagerly construct bodies of THIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/79519"&gt;store HIR attributes in a side table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77511"&gt;add &lt;code&gt;StatementKind::CopyNonOverlapping&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83064"&gt;tweaks to stable hashing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83069"&gt;&lt;code&gt;rustc_query_system&lt;/code&gt;: simplify &lt;code&gt;QueryCache::iter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1737"&gt;mir-opt-level 4 is the new 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1744"&gt;miri: ensure we catch incorrectly unwinding calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1743"&gt;miri: check callee ABI when Miri calls closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83022"&gt;don't implement &lt;code&gt;mem::replace&lt;/code&gt; with &lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82417"&gt;fix &lt;code&gt;io::copy&lt;/code&gt; specialization using &lt;code&gt;copy_file_range&lt;/code&gt; when writer was opened with &lt;code&gt;O_APPEND&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81879"&gt;added &lt;code&gt;#[repr(transparent)]&lt;/code&gt; to &lt;code&gt;core::cmp::Reverse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82849"&gt;add &lt;code&gt;Option::get_or_default&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82121"&gt;implement &lt;code&gt;Extend&lt;/code&gt; and &lt;code&gt;FromIterator&lt;/code&gt; for &lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/81127"&gt;improve &lt;code&gt;sift_down&lt;/code&gt; performance in &lt;code&gt;BinaryHeap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/82760"&gt;fix leak in &lt;code&gt;Vec::extend_from_within&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/regex/pull/752"&gt;regex: substantially reduce regex stack size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6859"&gt;clippy: implement new lint: &lt;code&gt;if_then_some_else_none&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;p&gt;A generally positive albeit quiet week though many of the perf improvements were gaining performance back from previous regressions. We'll need to continue to keep an eye on rollups as there were two that caused small performance changes.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=edeee915b1c52f97411e57ef6b1a8bd46548a37a&amp;amp;end=861872bc453bde79b83ff99d443d035225f10e87&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;edeee..86187&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1 Regression, 4 Improvements, 1 Mixed&lt;/p&gt;
&lt;p&gt;2 of them in rollups&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3086"&gt;RFC: Declarative macro metavariable expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3067"&gt;Change visibility scoping rules for macro_rules macros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82846"&gt;rustdoc: allow list syntax for #[doc(alias)] attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/82539"&gt;Deprecate &lt;code&gt;doc(include)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/79278"&gt;Stabilize or_patterns (RFC 2535, 2530, 2175)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78618"&gt;Add IEEE 754 compliant fmt/parse of -0, infinity, NaN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/78204"&gt;&lt;code&gt;impl&amp;lt;A, B&amp;gt;&lt;/code&gt; IntoIterator for (A, B) as Zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/67364"&gt;tracking issue for &lt;code&gt;debug_non_exhaustive&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/65516"&gt;[Edition vNext] Consider deprecating weird nesting of items&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-manchester/events/276567843/"&gt;March 18, Manchester, UK - Rust Manchester Opening Night - Rust Manchester&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Linz/events/276520435"&gt;March 18, Linz, AT - Rust Meetup Linz - 8th Edition - Rust Linz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprryccfbxb/"&gt;March 18, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/2021/03/23/rust-and-tell.html"&gt;March 23, Berlin, DE - Rust and Tell - 2021 Kickoff - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/BcnRust/events/276796209/"&gt;March 25. Barcelona, ES - BcnRust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccfbnc/"&gt;March 30, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Protocol Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/protocol/c9de15d5-4098-45f9-8a0e-2b1113dc6983"&gt;Research Engineer, CryptoCompute Lab (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Manta Network&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angel.co/company/manta-network/jobs/1182625-backend-distributed-systems-engineer-rust"&gt;Backend/Distributed Systems Engineer (Rust) (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;e.ventures&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://old.reddit.com/r/rust/comments/lhvipu/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Rust backend engineer (Remote, the Americas)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Oso&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.osohq.com/jobs/eng"&gt;Software Engineer (New York, NY, US or Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.osohq.com/jobs/eng-mgr"&gt;Engineering Manager (New York, NY, US or Remote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.osohq.com/jobs/dev-advocate"&gt;Developer Advocate (New York, NY, US or Remote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/?team=Engineering"&gt;Several Rust Engineering Positions are Available (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I think the security of the internet is incredibly important obviously and I want it to be secure and I think bringing rust there is absolutely going to help it. Just by default it eliminates some of the most classic types of vulnerabilities.&lt;/p&gt;
&lt;p&gt;But I don't think that's the most exciting part. I think the most exciting part is that the set of people for whom it is possible to implement these types of things, like who writes coreutils, who writes curl, who does those things. That used to be a really small pool of people. That had to be people who knew the dark arts, and only them and only their buddies or something.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And it's the goal of rust to empower that to be a larger group of people&lt;/strong&gt; and ultimately I think that that is what is going to happen which means the sheer number of people will be larger, and also the diversity of that set of people is going to grow. And I that that that will probably actually do more for the security and usefulness of these tools than eliminating undefined behaviour.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.twitch.tv/videos/946905598"&gt;Ashley Williams on twitch&lt;/a&gt; (quote starts at 46:48)&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1014"&gt;Nixon Enraght-Moony&lt;/a&gt; for the suggestion.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/m7fy87/this_week_in_rust_382/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</summary></entry></feed>