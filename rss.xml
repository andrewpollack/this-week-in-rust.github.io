<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 24 Dec 2019 00:00:00 -0500</lastBuildDate><item><title>This Week in Rust 318</title><link>https://this-week-in-rust.org/blog/2019/12/24/this-week-in-rust-318/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ðŸŽˆðŸŽ‰ &lt;a href="https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html"&gt;Announcing Rust 1.40.0&lt;/a&gt;. ðŸŽ‰ðŸŽˆ&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cliffle.com/p/dangerust/"&gt;Learn Rust the dangerous way&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2019-12-compat/"&gt;Announcing Tokio-Compat&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tech.fpcomplete.com/blog/async-exceptions-haskell-rust"&gt;Async exceptions in Haskell, and Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actix/actix-web/releases/tag/web-v2.0.0"&gt;actix-web v2.0 released&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/blog/post/announcing-the-official-mongodb-rust-driver"&gt;Announcing the official MongoDB Rust driver&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/blog/2019/12/19/rustlings-course-adaptation/"&gt;JetBrains - Rustlings course adaptation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.redsift.com/labs/writing-bpf-code-in-rust/"&gt;Writing BPF code in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dbrgn.ch/2019/12/24/testing-for-no-std-compatibility/"&gt;Testing for no_std compatibility in Rust crates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://immunant.com/blog/2019/12/header_merging/"&gt;Source code linking: Merging C headers into Rust modules&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tech.fpcomplete.com/blog/serverless-rust-wasm-cloudflare"&gt;Serverless Rust using WASM and Cloudflare&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slowtec.de/posts/2019-12-20-porting-javascript-to-rust-part-1.html"&gt;Porting a JavaScript app to WebAssembly with Rust (part 1)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ryanlevick.com/down-the-stack-part-1/"&gt;Down the stack: Compiled Rust part 1&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2019/12/23/formatting-the-compiler.html"&gt;Formatting the compiler tree&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/streams-concurrency/"&gt;Streams concurrency&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pitdicker.github.io/Writing-a-seqlock-in-Rust/"&gt;Writing a seqlock in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.eldruin.com/veml6030-ambient-light-sensor-driver-in-rust/"&gt;Platform agnostic driver for Vishay's VEML6030 and VEML7700 ambient light sensors&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.eldruin.com/pca9685-pwm-led-servo-controller-driver-in-rust/"&gt;PCA9685 16-channel PWM LED/servo motor controller driver&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2019/12/19/jasper-and-wiser-full-members-of-compiler-team.html"&gt;Congrats to compiler team members matthewjasper and wesleywiser&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/o0Ignition0o/cargo-scout"&gt;cargo-scout&lt;/a&gt;, a cargo subcommand to run clippy on only the changed code in your crate (following git diff).&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/694"&gt;Philipp Krones&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[good first issue] &lt;a href="https://github.com/simd-lite/simdjson-rs/issues/91"&gt;simdjson: flattend json access for the tape&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[good first issue] &lt;a href="https://github.com/PieterPenninckx/rsynth/issues/50"&gt;rsynth: Add support for System Exclusive events with the jack back-end&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;334 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2019-12-16..2019-12-23"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67540"&gt;format the world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66994"&gt;refactor expr &amp;amp; stmt parsing + improve recovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/64588"&gt;add a raw "address of" operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67538"&gt;improve diagnostics for invalid assignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67127"&gt;use structured suggestion for disambiguating method calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67059"&gt;fix too restrictive checks on Drop impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67020"&gt;save LTO import info and check it when trying to reuse build products&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67355"&gt;merge &lt;code&gt;ast::Mutability&lt;/code&gt; and &lt;code&gt;mir::Mutability&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67131"&gt;merge &lt;code&gt;TraitItem&lt;/code&gt; &amp;amp; &lt;code&gt;ImplItem into&lt;/code&gt;AssocItem`&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67285"&gt;indicate origin of where type parameter for uninferred types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66931"&gt;allocate HIR on an arena 1/4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66877"&gt;add simpler entry points to const eval for common usages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/272"&gt;chalk: fix coinductive unsoundness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/309"&gt;chalk: move ids to type family&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67130"&gt;const prop should finish propagation into user defined variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1125"&gt;miri: support main functions with Result return type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67270"&gt;implement &lt;code&gt;LineWriter::write_vectored&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67233"&gt;add &lt;code&gt;PartialEq&lt;/code&gt; and &lt;code&gt;Eq&lt;/code&gt; to &lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67462"&gt;make &lt;code&gt;ptr::slice_from_raw_parts&lt;/code&gt; a const fn (behind feature flag)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/65778"&gt;stabilize &lt;code&gt;std::{rc,sync}::Weak::{weak_count, strong_count}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/790"&gt;stdarch: use more simd_* intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2007"&gt;futures.rs: make &lt;code&gt;AtomicWaker::new()&lt;/code&gt; a const fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7708"&gt;cargo: fix overwriting alternate registry token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/2141"&gt;rustup: support local toolchain names in the override file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2837"&gt;Demote Apple 32bit targets to Tier 3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2835"&gt;Announcing the Safe-Transmute Project Group&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScb1MoYvLE4hfUlUKzg4LJHNI6Abw41hRIQGyBVVIAcwvdGfQ/viewform"&gt;Jan  8. Kuala Lumpur, MY - Rust Meetup January 2019&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/nxdpgrybccblb/"&gt;Jan  8. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Lisbon/events/266629066/"&gt;Jan  9. Lisbon, PT - Rust Lisbon - Live Jan 2020&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Rhein-Main/events/267158461/"&gt;Jan 10. Darmstadt, DE - Rust Rhein-Main - 1st 2020 Rhein-Main Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmyzqbpc/"&gt;Dec 31. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/mffbtpybccbcb/"&gt;Jan  1. Indianapolis, IN, US - Indy.rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/267240914/"&gt;Jan  7. Denver, CO, US - Rust Boulder/Denver - Rust Meetup: January&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybccblb/"&gt;Jan  8. Atlanta, GA, US - Grab a beer with fellow Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qgvxlrybccblb/"&gt;Jan  8. Vancouver, BC, CA - Vancouver Rust meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/PDXRust/events/266938349/"&gt;Jan  8. Portland, OR, US - PDXRust - C-Side Tourism: Using C libraries from Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgrybccbmb/"&gt;Jan  9. Columbus, OH, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/267242856/"&gt;Jan  9. San Diego, CA, US - San Diego Rust January 2020 Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/265905282/"&gt;Jan  9. Lehi, UT, US - Utah Rust - January 2020 Regular Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ecxd62/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Official /r/rust "Who's Hiring" thread for job-seekers and job-offerers [Rust 1.40]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://octoml.ai/#op-354907-systems-software-engineer"&gt;Systems software engineer at OctoML, Seattle, US (Remote available)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Unsoundness is what happens when unsafety goes wrong.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://users.rust-lang.org/t/learn-rust-the-dangerous-way-the-unsafe-first-tutorial/35806/39"&gt;Alice Ryhl on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/764"&gt;Daniel H-M&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href=""&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 24 Dec 2019 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2019-12-24:blog/2019/12/24/this-week-in-rust-318/</guid></item><item><title>This Week in Rust 317</title><link>https://this-week-in-rust.org/blog/2019/12/17/this-week-in-rust-317/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2019/12/18/bisecting-rust-compiler.html"&gt;Bisecting Rust compiler regressions with cargo-bisect-rustc&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://async.rs/blog/stop-worrying-about-blocking-the-new-async-std-runtime/"&gt;Stop worrying about blocking: the new async-std runtime, inspired by Go&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://interrupt.memfault.com/blog/zero-to-main-rust-1"&gt;From zero to main(): Bare metal Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/wasm-as-a-platform-for-abstraction/"&gt;WASM as a platform for abstraction&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gtk-rs.org/blog/2019/12/15/new-release.html"&gt;New gtk-rs release: Simplification and more of everything&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2019-12-mio-v0.7-alpha.1/"&gt;Announcing Mio 0.7-alpha.1&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leod.github.io/rust/gamedev/rendology/2019/12/13/introduction-to-rendology.html"&gt;Introduction to Rendology: A Glium-based rendering pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stevedonovan.github.io/rustifications/2018/09/08/common-rust-traits.html"&gt;The common Rust traits&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-malaysia.github.io/code/2019/12/15/the-burger-problem.html"&gt;Solving the Burger problem with Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@ly.lee/porting-druid-rust-widgets-to-pinetime-smart-watch-7e1d5a5d977a"&gt;Porting druid Rust widgets to PineTime smart watch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://relm.antoyo.xyz/documentation/tutorial/"&gt;Relm tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/eaay3c/why_does_rust_seem_to_inspire_people/"&gt;Why does rust seem to inspire people&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/BurntSushi/bstr"&gt;bstr&lt;/a&gt;, a string type for Rust that is not required to be valid UTF-8.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/603"&gt;Willi Kappler&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No issues were proposed for CfP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;223 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2019-12-09..2019-12-16"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67224"&gt;revert stabilization of never type&lt;/a&gt; (sorry â€“ llogiq)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67216"&gt;enable &lt;code&gt;loop&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; in constants behind a feature flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67323"&gt;make transparent enums more ordinary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67134"&gt;ensure a hard error on generic ZST constants whose body causes an eval error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67026"&gt;improve diagnostics and code for exhaustiveness of empty matches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67289"&gt;do not ICE on unnamed future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67250"&gt;remove the &lt;code&gt;DelimSpan&lt;/code&gt; from &lt;code&gt;NamedMatch::MatchedSeq&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67079"&gt;optimize &lt;code&gt;shallow_resolve_changed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67125"&gt;add ExactSizeIterator bound to return types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67215"&gt;fix &lt;code&gt;-Z print-type-sizes&lt;/code&gt;'s handling of zero-sized fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67193"&gt;track polonius in &lt;code&gt;-Z self-profile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67015"&gt;fix constant propagation for scalar pairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66983"&gt;fix &lt;code&gt;unused_parens&lt;/code&gt; triggers on macro by example code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66821"&gt;rustc: allow non-empty ParamEnv's in global trait select/eval caches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66650"&gt;remove uniform array move MIR passes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/308"&gt;chalk: remove depth getting passed around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/294"&gt;chalk: when truncating a goal, don't truncate the environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/1998"&gt;use first nonempty buffer in vectored I/O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67039"&gt;use deref target in Pin trait implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67249"&gt;improve code generated for &lt;code&gt;starts_with('&amp;lt;literal char&amp;gt;')&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66881"&gt;optimize &lt;code&gt;Ord&lt;/code&gt; trait implementation for bool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67169"&gt;inline some common methods on &lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67243"&gt;&lt;code&gt;LinkedList&lt;/code&gt;: drop remaining items when drop panics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67235"&gt;&lt;code&gt;VecDeque&lt;/code&gt;: drop remaining items on destructor panic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66570"&gt;stabilize &lt;code&gt;Result::map_or&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/log/pull/366"&gt;add a separate path for messages with no format arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66405"&gt;remove &lt;code&gt;NodeState::{Waiting,Done}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66341"&gt;match &lt;code&gt;VecDeque::extend&lt;/code&gt; to &lt;code&gt;Vec::extend_desugared&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66771"&gt;stabilize the &lt;code&gt;core::panic&lt;/code&gt; module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66277"&gt;&lt;code&gt;From&amp;lt;NonZero*&amp;gt;&lt;/code&gt; impls for wider &lt;code&gt;NonZero&lt;/code&gt; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66735"&gt;add str::strip_prefix and str::strip_suffix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7660"&gt;cargo: emit error on &lt;code&gt;[target.'cfg(debug_assertions)'.dependencies]&lt;/code&gt; and similar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/2155"&gt;rustup: improve preinstalled rust message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/519"&gt;docs.rs: fix panic viewing source if crate failed to build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2797"&gt;RFC 2797: Announcing the FFI-unwinding Project Group&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/65244"&gt;Add IntoFuture trait and support for await&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/67233"&gt;Add PartialEq and Eq to Cursor&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/65721"&gt;Tracking issue for the &lt;code&gt;matches!&lt;/code&gt; macro&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Community-Stuttgart/events/267063341/"&gt;Dec 20. Stuttgart, DE - Meetup Stuttgart - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/nxdpgrybccblb/"&gt;Jan  8. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpyzqbfc/"&gt;Dec 23. Durham, NC, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmyzqbpc/"&gt;Dec 31. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/mffbtpybccbcb/"&gt;Jan  1. Indianapolis, IN, US - Indy.rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/qxqdgrybccblb/"&gt;Jan  8. Atlanta, GA, US - Grab a beer with fellow Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/qgvxlrybccblb/"&gt;Jan  8. Vancouver, BC, CA - Vancouver Rust meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lighthouse.sigmaprime.io/hiring-dec-2019.html"&gt;Rust Developer for open-source work at Sigma Prime, Sydney, AU (Remote available)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/near/jobs/4563917002"&gt;WebAssembly and Compiler Engineer at NEAR, multiple locations (Remote available)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ebkyzc/need_a_rust_developer_on_a_6_month_contract/"&gt;Rust Developer at WarnerMedia, US&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey @rustlang folks, is there a comprehensive writeup/reference anywhere of how the formatting machinery (format!(), write!(), etc.) work? Specifically from an implementation perspective (wrt trait objects, recursion)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://jamesmunns.com/blog/fmt-unreasonably-expensive/"&gt;James Munns&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Itâ€™s dark and ancient magic. I donâ€™t think anyone knows it very well, never mind documentation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://twitter.com/nick_r_cameron/status/1203753952329650176?ref_src=twsrc%5Etfw"&gt;Nick R. Cameron&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/756"&gt;mmmmib&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ecuj74/this_week_in_rust_317/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 17 Dec 2019 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2019-12-17:blog/2019/12/17/this-week-in-rust-317/</guid></item><item><title>This Week in Rust 316</title><link>https://this-week-in-rust.org/blog/2019/12/10/this-week-in-rust-316/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.mozilla.org/nnethercote/2019/12/11/how-to-speed-up-the-rust-compiler-one-last-time-in-2019/"&gt;How to speed up the Rust compiler one last time in 2019&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jamesmunns.com/blog/fmt-unreasonably-expensive/"&gt;Formatting is unreasonably expensive for embedded Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.1password.com/1passwordx-december-2019-release/"&gt;Some parts 1Password X Manager are rewritten in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seanmonstar.com/post/189594157852/hyper-v013"&gt;Announcing hyper v0.13 with full async/await support&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stjepang.github.io/2019/12/04/blocking-inside-async-code.html"&gt;Blocking inside async code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2019/12/09/announcing-the-docsrs-team.html"&gt;Announcing the docs.rs team&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chasewilson.dev/blog/slowest-quicksort/"&gt;Writing the slowest quicksort&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.rs/dtolnay/0.0.7/dtolnay/macro._03__soundness_bugs.html"&gt;Soundness bugs in Rust libraries: can't live with 'em, can't live without 'em&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codeslow.com/2019/12/tiny-windows-executable-in-rust.html"&gt;Tiny Windows executable in Rust in 3.5 kbytes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/embarkstudios/inside-rust-at-embark-b82c06d1d9f4"&gt;Inside Rust at Embark&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.snoyman.com/blog/2019/12/rust-crash-course-09-tokio-0-2"&gt;Tokio 0.2 - Rust crash course&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lukaskalbertodt.github.io/2019/12/05/generalized-autoref-based-specialization.html"&gt;Generalized autoref-based specialization&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.eldruin.com/si4703-fm-radio-receiver-driver-in-rust/"&gt;A rusty radio: Si4703 FM radio receiver driver&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust2020"&gt;#Rust2020&lt;/h3&gt;
&lt;p&gt;Find all #Rust2020 posts at &lt;a href="https://readrust.net/rust-2020/"&gt;Read Rust&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/slightlyoutofphase/staticvec"&gt;StaticVec&lt;/a&gt;, a nightly-only const-generics-backed fixed size vec crate.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/682"&gt;ABagOfChips&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/e7rer9/we_need_your_help_before_rustup_1210_can_be/"&gt;We need your help before &lt;code&gt;rustup&lt;/code&gt; 1.21.0 can be released&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/servo/rust-smallvec/issues/178"&gt;smallvec: Implement Clone for IntoIter&lt;A: Array&gt; where A: Clone&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/mundane/issues/22"&gt;mundane: Document items behind feature flags&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3AE-mentor"&gt;crates.io: carols10cents will be mentoring multiple issues for the month of November &amp;amp; December&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;247 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2019-12-02..2019-12-09"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/65881"&gt;implement &lt;code&gt;#[track_caller]&lt;/code&gt; attribute&lt;/a&gt; (RFC #&lt;a href="https://rust-lang.github.io/rfcs/2091-inline-semantic.html"&gt;2091&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66935"&gt;syntax: unify macro and attribute arguments in AST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/830"&gt;stdarch: add CRC32 detection to arm32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67003"&gt;fix &lt;code&gt;TypedArena&lt;/code&gt; returning wrong pointers for recursive allocations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67114"&gt;make &lt;code&gt;ForeignItem&lt;/code&gt; an alias of &lt;code&gt;Item&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67085"&gt;remove boxed closures in address parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66850"&gt;rustc: hide HirId's fmt::Debug output from -Z span_free_formats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66408"&gt;make &lt;code&gt;process_obligations()&lt;/code&gt; greedier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66863"&gt;check break target availability when checking breaks with values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67011"&gt;include a span in more &lt;code&gt;expected...found&lt;/code&gt; notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67004"&gt;do not ICE on async fn with non-Copy inferred type arg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66846"&gt;make try_mark_previous_green aware of cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66606"&gt;add feature gate for mut refs in const fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66325"&gt;change unused_labels from allow to warn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66148"&gt;show the sign for signed ops on &lt;code&gt;exact_div&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/281"&gt;chalk: convert ensure_answer_recursively to be iterative instead of recursive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66827"&gt;handle diverging functions forwarding their return place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66991"&gt;cleanup &lt;code&gt;BodyCache&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66967"&gt;remove hack for top-level or-patterns in match checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66960"&gt;const-prop: fix ICE calculating enum discriminant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1099"&gt;miri: tweak and use &lt;code&gt;OsStr&lt;/code&gt; interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66866"&gt;only memoize const fn calls during const eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1106"&gt;miri: add flag to ignore memory leaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1105"&gt;better way to ignore tests in miri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67054"&gt;codegen "unreachable" for invalid &lt;code&gt;SetDiscriminant&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67033"&gt;codegen: Migrate to &lt;code&gt;LLVM&lt;/code&gt;{&lt;code&gt;Get&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;}&lt;code&gt;ValueName2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66973"&gt;update the minimum external LLVM to 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67016"&gt;implement illegal subset relations errors using Polonius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/67041"&gt;add &lt;code&gt;ExitStatusExt&lt;/code&gt; into prelude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/65195"&gt;rename &lt;code&gt;bool::then_*&lt;/code&gt; to &lt;code&gt;bool::to_option_*&lt;/code&gt; and use where appropriate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66841"&gt;add &lt;code&gt;{f32,f64}::approx_unchecked_to&amp;lt;Int&amp;gt;&lt;/code&gt; unsafe methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7667"&gt;add test for &lt;code&gt;NAME&lt;/code&gt; environment variable when &lt;code&gt;cargo new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7655"&gt;cargo: remove &lt;code&gt;--offline&lt;/code&gt; empty index error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7654"&gt;cargo: add a &lt;code&gt;--offline&lt;/code&gt; hint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66828"&gt;rustdoc: less minification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/3938"&gt;rustfmt: switch to non-recursive mode by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/2143"&gt;rustup: output the previous version of a toolchain when it is updated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/2132"&gt;rustup: resolve potential future shock (x.yyy.zz)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/1700"&gt;crates.io: add audit trail to the publish, yank and unyank transactions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2795"&gt;Propose implicit named arguments for formatting macros&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/66919"&gt;Deprecate Error::description for real&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/66771"&gt;Stabilize the &lt;code&gt;core::panic&lt;/code&gt; module&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/66570"&gt;stabilize Result::map_or&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/66254"&gt;Make Layout::new const&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/64273"&gt;Stabilize attribute macros on inline modules&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2837"&gt;Demote Apple 32bit targets to Tier 3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2832"&gt;Move &lt;code&gt;std::net&lt;/code&gt; types into &lt;code&gt;core:.net&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2834"&gt;Cargo report future-incompat&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2835"&gt;Announcing the safe-transmute project group&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2836"&gt;Introduce the ASM project group&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Nederland/events/266888452/"&gt;Dec 16. Amsterdam, NL - Rust Nederland - Rust - Talks &amp;amp; Demos&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Community-Stuttgart/events/267063341/"&gt;Dec 20. Stuttgart, DE - Meetup Stuttgart - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Ann-Arbor-Rust-Meetup/events/zdfscryzqbhc/"&gt;Dec 18. Ann Arbor, MI, US - Ann Arbor Rust Meetup - Monthly Gathering&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpyzqbfc/"&gt;Dec 23. Durham, NC, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmyzqbpc/"&gt;Dec 31. Dallas, TX, US - Dallas Rust - Last Tuesday&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;No jobs listed for this week.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;When I'm writing in Rust, it feels as though I'm actually able to think about the program, rather than wasting half of my effort going through the necessary rituals to stop the language from having a panic attack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://www.reddit.com/r/rust/comments/e8tms0/rust_is_fun/faei257/"&gt;/u/rime-frost on reddit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/755"&gt;ssokolow&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt; and &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/e9t7cl/this_week_in_rust_316/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 10 Dec 2019 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2019-12-10:blog/2019/12/10/this-week-in-rust-316/</guid></item><item><title>This Week in Rust 315</title><link>https://this-week-in-rust.org/blog/2019/12/03/this-week-in-rust-315/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2019/12/02/const-prop-on-by-default.html"&gt;Constant propagation is now on by default in nightly&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.redox-os.org/news/focusing-on-rustc/"&gt;Redox OS: Real hardware breakthroughs, and focusing on rustc&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/2019-12-01-taking-ml-to-production-with-rust-a-25x-speedup/"&gt;Taking ML to production with Rust: a 25x speedup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adventures.michaelfbryan.com/posts/how-to-riir/index.html"&gt;How to RiiR&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2019/12/03/survey-launch.html"&gt;Launching the 2019 State of Rust Survey&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seanmonstar.com/post/189439210962/http-v02"&gt;Announcing http v0.2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tech.fpcomplete.com/rust/pid1"&gt;Implementing pid1 with Rust and async/await&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/tide/"&gt;Tide: the present and future&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.joco.dev/posts/warp_auth_server_tutorial"&gt;Let's make a simple authentication server in Rust with Warp&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.snoyman.com/blog/2019/12/rust-crash-course-08-down-dirty-future"&gt;Down and dirty with Future - Rust crash course lesson 8&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-embedded.github.io/blog/newsletter-21/"&gt;The Embedded WG newsletter 21&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust2020"&gt;#Rust2020&lt;/h3&gt;
&lt;p&gt;Find all #Rust2020 posts at &lt;a href="https://readrust.net/rust-2020/"&gt;Read Rust&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://docs.rs/joinery"&gt;joinery&lt;/a&gt;, a library for generic string joining.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/677"&gt;Nathan West&lt;/a&gt; for the suggestions!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Kerollmops/heed/pull/25"&gt;heed: Support windows and make the tests pass&lt;/a&gt;. Heed is a fully typed LMDB wrapper with minimum overhead.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3AE-mentor"&gt;crates.io: carols10cents will be mentoring multiple issues for the month of November &amp;amp; December&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;264 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2019-11-25..2019-12-02"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/64325"&gt;stabilize nested self receivers in 1.41.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66294"&gt;add memoization for const function evaluations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66918"&gt;add crc and crypto to target feature whitelist on arm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66245"&gt;conditional compilation for sanitizers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66522"&gt;add support for sanitizer recover and tracking origins of uninitialized memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66321"&gt;async fn resume after completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66567"&gt;use structured suggestion when requiring &lt;code&gt;Copy&lt;/code&gt; constraint in type param&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66754"&gt;various tweaks to diagnostic output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66561"&gt;add version mismatch help message for unimplemented trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66671"&gt;AST address-of&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66612"&gt;initial implementation of or-pattern usefulness checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/polonius/pull/137"&gt;polonius: illegal subset relation errors using placeholder loans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66178"&gt;fix opaque types resulting from projections in function signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66246"&gt;simplify memory categorization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/64736"&gt;remove interior mutability in mir predecessors cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/56231"&gt;rustc: move debug info from LocalDecl and UpvarDecl into a dedicated VarDebugInfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66642"&gt;create promoted MIR fragments for &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66128"&gt;alloc: add new_zeroed() versions like new_uninit()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66759"&gt;impl TrustedLen for vec::Drain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/66705"&gt;atomic as_mut_ptr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/65013"&gt;implement Debug for MaybeUninit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/libc/pull/1584"&gt;libc: add support for shared memory operations for solaris/illumos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/7591"&gt;cargo: stabilize profile-overrides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/2126"&gt;rustup: add toolchain install --allow-downgrade option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/docs.rs/pull/499"&gt;docs.rs: match library properly if multiple crate-types are in use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/66045"&gt;Add method Result::into_ok&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/66277"&gt;From&lt;NonZero*&gt; impls for wider NonZero types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/66325"&gt;Change unused_labels from allow to warn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2823"&gt;process-handle-for-async&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Meetup-Hamburg/events/266610252/"&gt;Dec 11. Hamburg, DE - Rust Hack &amp;amp; Learn December 2019&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/nxdpgryzqbpb/"&gt;Dec 11. Berlin, DE - OpenTechSchool Berlin - Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/events/1173477969528421/"&gt;Dec 12. Kyiv, UA - Rails Reactor - Rust Ukraine Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Mozilla-Torino/events/266750624"&gt;Dec 12. Turin, IT - Mozilla Torino - Gruppo di studio Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Nederland/events/266888452/"&gt;Dec 16. Amsterdam, NL - Rust Nederland - Rust - Talks &amp;amp; Demos&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/prbtdryzqbnb/"&gt;Dec 10. Seattle, WA, US - Seattle Rust Meetup - Monthly meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Desert-Rustaceans/events/wmmphryzpbkc/"&gt;Dec 11. Mesa, AZ, US - Desert Rust - Rust: Crates and Organization&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/rwcpfryzqbpb/"&gt;Dec 11. Vancouver, BC, CA - Vancouver Rust meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/266502136/"&gt;Dec 12. San Diego, CA, US - San Diego Rust December Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dpkhgryzqbqb/"&gt;Dec 12. Columbus, OH, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/265905262/"&gt;Dec 12. Lehi, UT, US - Utah Rust - December 2019 Regular Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://careers.microsoft.com/us/en/job/750306/Security-Software-Engineer"&gt;Senior Security Software Engineer at Microsoft, Redmond, US&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://consensys.net/open-roles/1792013/"&gt;Senior Software Engineer at ConsenSys R&amp;amp;D, Remote&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://polymath.bamboohr.com/jobs/view.php?id=85"&gt;Rust/Blockchain Developer at Polymath, Remote&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.parity.io/jobs/"&gt;Rust/Core Developer at Parity, Berlin, DE (Remote available)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Heard recently creative coding experience which rust gives. What about unconscious coding experience - do whatever you can to make your code compile as late as you can, then go sleep and find your code correct and working in the morning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Woah, I know people say the Rust compiler is slow but I never had a Rust program that took all night to compileâ˜º&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;â€“ &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/749"&gt;Maxim Vorobjov and ZiCog in our Quote of the Week Thread&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/752"&gt;both of them and mmmmib&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/Flavsditz"&gt;Flavsditz&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/e68fzf/this_week_in_rust_315/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 03 Dec 2019 00:00:00 -0500</pubDate><guid>tag:this-week-in-rust.org,2019-12-03:blog/2019/12/03/this-week-in-rust-315/</guid></item></channel></rss>