<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 04 Sep 2018 00:00:00 -0400</lastBuildDate><item><title>This Week in Rust 250</title><link>https://this-week-in-rust.org/blog/2018/09/04/this-week-in-rust-250/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stevedonovan.github.io/rustifications/2018/08/18/rust-closures-are-hard.html"&gt;Why Rust closures are (somewhat) hard&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2018/09/02/rust-pattern-iterating-an-over-a-rc-vec-t/"&gt;Rust pattern: Iterating an over a &lt;code&gt;Rc&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/flatbuffers/pull/4898"&gt;FlatBuffers adds support for Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2018/09/03/rpcs3-dolphin.html"&gt;RPCS3 and Dolphin on macOS using gfx-portability&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tutorialedge.net/rust/learning-generics-in-rust/"&gt;Learning generics in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://varkor.github.io/blog/2018/08/28/feasible-functors-in-rust.html"&gt;Feasible functors in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/programming-servo-a-generic-worker-event-loop-400a6f113a60"&gt;Programming Servo: A generic “worker event-loop”&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://noyez.gitlab.io/post/2018-08-28-serilize-this-or-that-into-u64/"&gt;Serde deserialize This or That into u64&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustwasm.github.io/2018/09/04/this-week-in-rust-wasm-007.html"&gt;This Week in Rust and WebAssembly 7&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-embedded.github.io/blog/2018-08-28-newsletter-10/"&gt;The Embedded WG newsletter 10&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/cgroups"&gt;cgroups&lt;/a&gt;, a native Rust library for managing control groups under Linux. Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/450"&gt;yoshuawuyts&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/image-png/issues/80"&gt;png: Unbounded memory consumption on malformed inputs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;109 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-08-27..2018-09-03"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53673"&gt;enable ThinLTO with incremental compilation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53245"&gt;build LLVM with ThinLTO enabled (2nd attempt)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53611"&gt;update LLVM submodule&lt;/a&gt; (mainly WASM improvements)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53679"&gt;ADD more Cortex-R targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53648"&gt;change the default linker of the ARM Cortex-M targets to rust-lld&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/1467"&gt;begin preparation for Rust 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53699"&gt;fix promotion stability hole in old borrowck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53671"&gt;Miri engine cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53779"&gt;Miri refactor: Final round&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53757"&gt;use partial but correct vtable layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53659"&gt;replace &lt;code&gt;AccumulateVec&lt;/code&gt; by &lt;code&gt;SmallVec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53656"&gt;&lt;code&gt;HybridIdxSet&lt;/code&gt; tweaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53314"&gt;NLL: experiment with inverting liveness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53580"&gt;fix NLL ICEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53655"&gt;set rustfix auto-applicability for a few lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53472"&gt;use &lt;code&gt;FxHash&lt;/code&gt;{&lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;} instead of the default &lt;code&gt;Hash&lt;/code&gt;{&lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53842"&gt;various small diagnostic and code clean up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53838"&gt;save-analysis: record info for the types in &lt;code&gt;where&lt;/code&gt; clauses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53755"&gt;fix &lt;code&gt;u32&lt;/code&gt; &lt;code&gt;steps_between&lt;/code&gt; for 16-bit systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53725"&gt;reduce number of syscalls in &lt;code&gt;rand&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53564"&gt;reoptimize &lt;code&gt;VecDeque::append&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53697"&gt;add more const int ops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53535"&gt;make &lt;code&gt;std::intrinsics::transmute()&lt;/code&gt; &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53476"&gt;&lt;code&gt;impl PartialEq for TryFromIntError&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/5943"&gt;add &lt;code&gt;--allow-staged&lt;/code&gt; to &lt;code&gt;cargo fix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53774"&gt;add rust-gdbgui script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53076"&gt;set &lt;code&gt;cfg(rustdoc)&lt;/code&gt; when rustdoc is running on a crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53828"&gt;rustbuild: distribute libLLVM.so with rustc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2471"&gt;RFC 2471: Add lint warning for inner function marked as &lt;code&gt;#[test]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2521"&gt;RFC 2521: Unify &lt;code&gt;std::os::raw::c_void&lt;/code&gt; and &lt;code&gt;libc::c_void&lt;/code&gt; via libcore&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2530"&gt;Amend RFC 2175 to support for loops and leading vert&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2437"&gt;Rustfmt stability&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2418"&gt;Add futures and task system to libcore&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/53555"&gt;Tracking issue for a minimal subset of RFC 911, const fn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/53218"&gt;Add a implementation of &lt;code&gt;From&lt;/code&gt; for converting &lt;code&gt;&amp;amp;'a Option&amp;lt;T&amp;gt;&lt;/code&gt; into &lt;code&gt;Option&amp;lt;&amp;amp;'a T&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/52994"&gt;Add trim_start, trim_end etc.; deprecate trim_left, trim_right, etc. in future&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/51946"&gt;Add &lt;code&gt;-Z emit-stack-sizes&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/44489"&gt;Tracking issue for RFC 2070: stable mechanism to specify the behavior of panic! in no-std applications &lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/40289"&gt;Tracking issue for the &lt;code&gt;#[used]&lt;/code&gt; attribute&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2535"&gt;Or patterns, i.e &lt;code&gt;Foo(Bar(x) | Baz(x))&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2534"&gt;Write References for Direct and Partial Initialization using &amp;amp;out T and &amp;amp;uninit T&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-community"&gt;Sep 11. Rust Community Content Subteam Meeting at channel #rust-community&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Sep 12. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Sep 12. Rust Events Team Meeting in Telegram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Sep 19. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Rhein-Main/events/254282818"&gt;Sep  7. Darmstadt, DE - Rhein Main Rust Meetup / Mentoring Round&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Amsterdam/events/253425558"&gt;Sep 18. Amsterdam, NL - Amsterdam Rust Meetup - Concurrency fundamentals, Tokio &amp;amp; WebAssembly&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Zurich/events/251682152/"&gt;Sep 18. Rapperswil-Jona, CH - Rapperswil-Jona, Zürichsee Meetup - Looking for a speaker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/253541005/"&gt;Sep 19. Berlin, DE - Berlin Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Cambridge-Rust-Meetup/events/pzwshpyxmbbc/"&gt;Sep 20. Cambridge, GB - Cambridge Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxmbmb/"&gt;Sep  9. Mountain View, US - Rust Dev in Mountain View!&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/pkggvpyxmbnb/"&gt;Sep 10. Seattle, US - Seattle Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.meetup.com/Rust-Boulder-Denver/"&gt;Sep 12. Boulder, US - Rust Boulder/Denver Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dbcfrpyxmbrb/"&gt;Sep 13. Columbus, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/253787454"&gt;Sep 13. Arlington, US - Rust DC - Mid-month Rustful&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/253862312/"&gt;Sep 13. San Diego, US - San Diego Rust September Meetup - WASM, "failure" library, or ???&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utahrust/events/253965052/"&gt;Sep 13. Utah, US - Utah Rust monthly meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxmbvb/"&gt;Sep 16. Mountain View, US - Rust Dev in Mountain View!&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxmbzb/"&gt;Sep 19. Vancouver, CA - Vancouver Rust meetup - Study/Hack/Hang-out&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://rust-belt-rust.com/"&gt;Oct 19 &amp;amp; 20. Ann Arbor, US - Rust Belt Rust 2018&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="south-america"&gt;South America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Santiago-de-Chile/events/254285104/"&gt;Sep  8. Santiago, CL - Hackday Santiago de Chile&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Sao-Paulo-Meetup/events/253842754/"&gt;Sep 15. Sao Paulo, BR - Rust Sao Paulo - Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://paritytech.io/jobs/"&gt;Rust Developer at Parity, Berlin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4c864c8f-bde6-443d-b521-dd90df0e9105"&gt;Rust Backend Engineer at Kraken, Remote&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://setter.breezy.hr/p/880e8a830036-lead-engineer"&gt;Rust Lead Engineer at Setter, Torronto&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Zeitgeist of Rust: developing load bearing software that will survive us.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.youtube.com/watch?v=LjFM8vw3pbU"&gt;Bryan Cantrill on Youtube: "The Summer of Rust (1:08:10)"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/u/matthieum"&gt;Matthieu M&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/Flavsditz"&gt;Flavsditz&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/9d3sjf/this_week_in_rust_250/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 04 Sep 2018 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2018-09-04:blog/2018/09/04/this-week-in-rust-250/</guid></item><item><title>This Week in Rust 249</title><link>https://this-week-in-rust.org/blog/2018/08/28/this-week-in-rust-249/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2018-08-async-await/"&gt;Experimental async / await support for Tokio&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/9as61i/tokio_experimental_async_await_support/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-embedded.github.io/blog/2018-08-2x-psa-cortex-m-breakage/"&gt;Nightly Rust is switching to use LLD (LLVM's new built-in linker) as the default linker for ARM microcontrollers&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/9a7te2/nightly_rust_is_switching_to_use_lld_llvms_new/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/9926jq/cve20181000657_buffer_overflow_in_vecdequereserve/"&gt;CVE-2018-1000657: buffer overflow in VecDeque::reserve() in Rust 1.3 through 1.21 allows arbitrary code execution&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/9926jq/cve20181000657_buffer_overflow_in_vecdequereserve/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncameron.org/blog/more-on-the-rls-and-a-1-0-release/"&gt;More on the RLS and a 1.0 release&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/99ltpr/more_on_the_rls_and_a_10_release/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/rethinking-pin/"&gt;Another look at the pinning API&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/99iqdy/another_look_at_the_pinning_api/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.luizirber.org/2018/08/23/sourmash-rust/"&gt;Oxidizing sourmash: Python and FFI&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/99vakd/blog_post_converting_c_to_rust_and_interoperate"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boyter.org/posts/reading-files-quickly-in-rust/"&gt;Reading files quickly in Rust&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/99e4tq/reading_files_quickly_in_rust/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@chyyran/calling-c-natively-from-rust-1f92c506289d"&gt;Calling C# natively from Rust&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/99z7bd/calling_c_natively_from_rust/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/programming-servo-the-makings-of-a-task-queue-b4138cd246ca"&gt;Programming Servo: the makings of a task-queue&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/9axo53/programming_servo_the_makings_of_a_taskqueue/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/coding-neutrino-blog/programming-servo-the-debug-way-5db01f09b7f4"&gt;Programming Servo: The debug way&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/9anveo/programming_servo_the_debug_way_debug_servo_and/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2018/08/25/synstruct.html"&gt;Easy &lt;code&gt;proc_macro_derive&lt;/code&gt;s with &lt;code&gt;synstructure&lt;/code&gt;&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://llogiq.github.io/2018/08/25/synstruct.html"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html"&gt;Two kinds of invariants&lt;/a&gt;, proposing rules for unsafe code concerning uninitialized data. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/99g5b1/two_kinds_of_invariants/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rustfest.eu/next-stop-rome"&gt;Next Rust Fest to take place in Rome on 24 and 25 November&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/99w5vp/let_rome_rust_festnext_rustfest_november_24th_25th/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/fitzgen/generational-arena"&gt;generational-arena&lt;/a&gt;, a safe arena allocator that allows deletion without suffering from the ABA problem by using generational indices. Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/447"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PistonDevelopers/image-png/issues/80"&gt;png: Unbounded memory consumption on malformed inputs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;140 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-08-20..2018-08-27"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53385"&gt;Stablize Iterator::find_map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53236"&gt;Stabilise raw_identifiers feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53044"&gt;Stabilize 'attr_literals' feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50912"&gt;Exhaustive integer matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53584"&gt;Unify E0243, E0244, E0087, E0088, E0089, and E0090 into E0107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53080"&gt;Change &lt;code&gt;Rc::inc_{weak,strong}&lt;/code&gt; to better hint optimization to LLVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53619"&gt;add &lt;code&gt;#[panic_handler]&lt;/code&gt;; deprecate &lt;code&gt;#[panic_implementation]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53434"&gt;wasm: remove --strip-debug argument to LLD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53427"&gt;resolve: overhaul &lt;code&gt;#![feature(uniform_paths)]&lt;/code&gt; error reporting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53397"&gt;visit all attributes for feature collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53358"&gt;&lt;code&gt;{to,from}_{ne,le,be}_bytes&lt;/code&gt; for unsigned integer types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53342"&gt;fix error for unsized packed struct field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53295"&gt;various changes to &lt;code&gt;rustc_on_unimplemented&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52858"&gt;implement Iterator::size_hint for Elaborator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53571"&gt;Fix unsoundness for VecDeque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53384"&gt;Use optimized SmallVec implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53235"&gt;Feature gate where clauses on associated type impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51456"&gt;resolve suggestions should use &lt;code&gt;crate::&lt;/code&gt; when enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52011"&gt;Allow panicking with string literal messages inside constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52602"&gt;Implement try block expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53459"&gt;Stabilize a few secondary macro features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53520"&gt;Merge &lt;code&gt;IdxSet&lt;/code&gt; and &lt;code&gt;IdxSetBuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53521"&gt;syntax: Optimize some literal parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53524"&gt;Buffer LLVM's object output stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53580"&gt;Fix NLL ICEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53581"&gt;Rename TyVariants and variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53644"&gt;Use SmallVec for SmallCStr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2497"&gt;RFC 2497: if- and while-let-chains, take 2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2521"&gt;Unify std::os::raw::c_void and libc::c_void via libcore&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2471"&gt;Add lint warning for inner function marked as &lt;code&gt;#[test]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2437"&gt;Rustfmt stability&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/53533"&gt;Add Error::source method per RFC 2504.&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/53076"&gt;set cfg(rustdoc) when rustdoc is running on a crate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/41686"&gt;Tracking issue for RFC#1685: Deprecate anonymous parameters &lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/15872"&gt;Tracking issue for lifetime elision for impl headers (feature impl_header_lifetime_elision)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/44489"&gt;Tracking issue for RFC 2070: stable mechanism to specify the behavior of panic! in no-std applications&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2528"&gt;Type-changing struct update syntax&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2529"&gt;Hidden trait implementations&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2530"&gt;Amend RFC 2175 to support for loops and leading vert&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2532"&gt;Associated type defaults and Default groups&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Sep  5. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-community"&gt;Sep 11. Rust Community Content Subteam Meeting at channel #rust-community&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Sep 12. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Sep 12. Rust Events Team Meeting in Telegram&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="africa"&gt;Africa&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/cpblrnyxmbgb/"&gt;Sep  4. Johannesburg, ZA - Monthly Meetup of the Johannesburg Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-TLV/events/253408497/"&gt;Sep  2. Tel Aviv, IL - Cargo, Production and N00bing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Belgium-Rust-user-group/events/249899651/"&gt;Sep  4. Brussels, BE - #3 futures/async/tokio &amp;amp;&amp;amp; Gotham-rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/253541000/"&gt;Sep  5. Berlin, DE - Berlin Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rust.cologne/2018/09/05/fun-traits.html"&gt;Sep  5. Cologne, DE - Rust Cologne&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxmbdb/"&gt;Sep  2. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/mffbtpyxmbhb/"&gt;Sep  5. Indianapolis, US - Indy.rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/cbcmbqyxmbhb/"&gt;Sep  5. Atlanta, US - Grab a beer with fellow Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxmbhb/"&gt;Sep  5. Vancouver, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxmbmb/"&gt;Sep  9. Mountain View, US - Rust Dev in Mountain View!&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/pkggvpyxmbnb/"&gt;Sep 10. Seattle, US - Seattle Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/columbus-rs/events/dbcfrpyxmbrb/"&gt;Sep 13. Columbus, US - Columbus Rust Society - Monthly Meeting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/RustDC/events/253787454"&gt;Sep 13. Arlington, US - Rust DC - Mid-month Rustful&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/253862312/"&gt;Sep 13. San Diego, US - San Diego Rust September Meetup - WASM, "failure" library, or ???&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="south-america"&gt;South America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Uruguay/events/253617627/"&gt;Sep  3. Montevideo, UY - Rust meetup - WebAssembly&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://anixe.bamboohr.co.uk/jobs/view.php?id=17"&gt;Rust Engineer at Anixe, Wrocław, Poland&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/994fcg/job_tagnifi_is_looking_for_a_rust_engineer/"&gt;Rust Engineer at TagiFi, Remote&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h1 id="bastion-of-the-turbofish"&gt;Bastion of the Turbofish&lt;/h1&gt;
&lt;p&gt;Beware travellers, lest you venture into waters callous and unforgiving, where hope must abandoned, ere it is cruelly torn from you. For here stands the bastion of the Turbofish: an impenetrable fortress holding unshaking against those who would dare suggest the supererogation of the Turbofish.&lt;/p&gt;
&lt;p&gt;Once I was young and foolish and had the impudence to imagine that I could shake free from the coils by which that creature had us tightly bound. I dared to suggest that there was a better way: a brighter future, in which Rustaceans both new and old could be rid of that vile beast. But alas! In my foolhardiness my ignorance was unveiled and my dreams were dashed unforgivingly against the rock of syntactic ambiguity.&lt;/p&gt;
&lt;p&gt;This humble program, small and insignificant though it might seem, demonstrates that to which we had previously cast a blind eye: an ambiguity in permitting generic arguments to be provided without the consent of the Great Turbofish. Should you be so naïve as to try to revolt against its mighty clutches, here shall its wrath be indomitably displayed. This program must pass for all eternity, fundamentally at odds with an impetuous rebellion against the Turbofish.&lt;/p&gt;
&lt;p&gt;My heart aches in sorrow, for I know I am defeated. Let this be a warning to all those who come after. Here stands the bastion of the Turbofish.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://github.com/rust-lang/rust/pull/53562"&gt;varkor on the rust github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/u/Centril"&gt;Mazdak Farrokhzad&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/Flavsditz"&gt;Flavsditz&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/9b6i15/this_week_in_rust_249/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 28 Aug 2018 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2018-08-28:blog/2018/08/28/this-week-in-rust-249/</guid></item><item><title>This Week in Rust 248</title><link>https://this-week-in-rust.org/blog/2018/08/21/this-week-in-rust-248/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/annoucning-rust-2018-preview-2/8218"&gt;Announcing Rust 2018 Preview 2&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/97mpt0/annoucning_rust_2018_preview_2/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncameron.org/blog/rls-1-0-release-candidate/"&gt;Announcing the RLS 1.0 release candidate&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/98gqsg/announcing_the_rls_10_release_candidate/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@shnatsel/how-rusts-standard-library-was-vulnerable-for-years-and-nobody-noticed-aebf0503c3d6"&gt;How Rust’s standard library was vulnerable for years and nobody noticed&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/988euh/how_rusts_standard_library_was_vulnerable_for/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scottjmaddox.github.io/Safe-partial-initialization-in-Rust/"&gt;Safe partial initialization in Rust&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/98nmge/safe_partial_initialization_in_rust/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raphlinus.github.io/programming/rust/2018/08/17/undefined-behavior.html"&gt;With undefined behavior, anything is possible&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/985id0/with_undefined_behavior_anything_is_possible/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html"&gt;Rust GraphQL webserver with Warp, Juniper, and MongoDB&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/97zlav/rust_graphql_webserver_with_warp_juniper_mongodb/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/programming-servo/anatomy-of-a-fetch-8872a5c843cd"&gt;Programming Servo: Anatomy of a fetch&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/986p56/programming_servo_anatomy_of_a_fetch/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://llogiq.github.io/2018/08/16/ask.html"&gt;Thanks for asking&lt;/a&gt;. An analysis of questions that are asked on r/rust subreddit. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/97ps8m/blog_thanks_for_asking/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustwasm.github.io/2018/08/14/this-week-in-rust-wasm-006.html"&gt;This week in Rust and WebAssembly 6&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/97ah4r/this_week_in_rust_and_webassembly_6/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;[podcast] &lt;a href="https://newrustacean.com/show_notes/news/rust_1_28/"&gt;New Rustacean news: Rust 1.28&lt;/a&gt;. &lt;small&gt;[&lt;a href="https://www.reddit.com/r/rust/comments/98tkve/new_rustaceannews_rust_128/"&gt;discuss&lt;/a&gt;]&lt;/small&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/wasm-bindgen-futures"&gt;wasm-bindgen-futures&lt;/a&gt;, a crate to make ECMAScript promises and Rust futures interoperate. Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/438"&gt;Vikrant&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/98d3zk/call_for_help_building_a_distributed_filesystem/"&gt;Call for help building a distributed filesystem in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[easy] &lt;a href="https://github.com/rust-lang/rust/issues/50723"&gt;rustc: mark applicability of diagnostic suggestions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;157 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-08-13..2018-08-20"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51880"&gt;the Great Generics Generalisation: HIR Followup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51131"&gt;implement Unsized Rvalues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53233"&gt;add bare-metal aarch64 target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52972"&gt;&lt;code&gt;debug_assert&lt;/code&gt; to ensure that &lt;code&gt;from_raw_parts&lt;/code&gt; is only used properly aligned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53406"&gt;do not suggest conversion method that is already there&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53237"&gt;export WASM table by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53321"&gt;fix usage of &lt;code&gt;wasm_target_feature&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53293"&gt;syntax: enforce attribute grammar in the parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53085"&gt;move SmallVector and ThinVec out of libsyntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53335"&gt;resolve: crates only exist in the type namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52923"&gt;&lt;code&gt;#[feature(uniform_paths)]&lt;/code&gt;: allow &lt;code&gt;use x::y;&lt;/code&gt; to resolve through &lt;code&gt;self::x&lt;/code&gt;, not just &lt;code&gt;::x&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53324"&gt;&lt;code&gt;Self&lt;/code&gt; in type definitions&lt;/a&gt; (RFC &lt;a href="http://rust-lang.github.io/rfcs/2300-self-in-typedefs.html"&gt;#2300&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53239"&gt;rustc_codegen_llvm: restore the closure env alloca hack for LLVM 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53290"&gt;make LLVM emit assembly comments with &lt;code&gt;-Z asm-comments&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53288"&gt;unions are not always trivially dropable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53316"&gt;cause cycle err on inf trait normalization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53258"&gt;NLL: optimize reassignment immutable state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53383"&gt;speed up NLL with &lt;code&gt;HybridIdxSetBuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53304"&gt;&lt;code&gt;TokenStream::extend&lt;/code&gt;&lt;/a&gt; (awesome speedups!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53256"&gt;don't accept non-string literals for the format string in writeln&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/47562"&gt;add the identity function as core::convert::identity&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/2306-convert-id.html"&gt;#2306&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53208"&gt;don't panic on &lt;code&gt;std::env::vars()&lt;/code&gt; when env is null&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53377"&gt;use &lt;code&gt;target_pointer_width&lt;/code&gt; for &lt;code&gt;BACKTRACE_ELF_SIZE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52553"&gt;non-naive implementation of &lt;code&gt;VecDeque.append&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/50911"&gt;stabilize &lt;code&gt;use_extern_macros&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2504"&gt;RFC 2504: Fix the Error trait&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2351"&gt;RFC 2351: Add &lt;code&gt;is_sorted&lt;/code&gt; to the standard library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2229"&gt;RFC 2229: Closures Capture Disjoint Fields&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/1892"&gt;RFC 1892: Deprecate uninitialized in favor of a new MaybeUninit type&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2306"&gt;RFC 2306: Add &lt;code&gt;pub fn identity&amp;lt;T&amp;gt;(x: T) -&amp;gt; T { x }&lt;/code&gt; to &lt;code&gt;core::convert&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/issues/2497"&gt;eRFC: if- and while-let-chains, take 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2521"&gt;Unify std::os::raw::c_void and libc::c_void via libcore&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/53533"&gt;Add Error::source method per RFC 2504.&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/52963"&gt;Tracking issue for integer types conversion to and from byte arrays&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/49602"&gt;Tracking Issue for Iterator::find_map&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/34981"&gt;Allow all literals in attributes (Tracking Issue for RFC #1559)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/41686"&gt;Tracking issue for RFC#1685: Deprecate anonymous parameters&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/52580"&gt;Define non-panicking UTF encoding methods on &lt;code&gt;char&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues/2526"&gt;Support underscores as constant names&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues/2524"&gt;RFC: Permit _ in type aliases&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-content"&gt;Aug 28. Rust Community Content Subteam Meeting at #rust-content on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Aug 29. Rust Events Team Meeting in Telegram&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Aug 29. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Sep  5. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="africa"&gt;Africa&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Nairobi/events/253950971/"&gt;Aug 25. Nairobi, KE - Rustbridge Workshop at GirlsCode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/cpblrnyxmbgb/"&gt;Sep  4. Johannesburg, ZA - Monthly Meetup of the Johannesburg Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-TLV/events/253408497/"&gt;Sep 2. Tel Aviv, IL - Cargo, Production and N00bing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Belgium-Rust-user-group/events/249899651/"&gt;Sep  4. Brussels, BE - #3 futures/async/tokio &amp;amp;&amp;amp; Gotham-rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/253541000/"&gt;Sep  5. Berlin, DE - Berlin Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxlbjc/"&gt;Aug 26. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpyxlbkc/"&gt;Aug 27. Durham, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Chicago-Rust-Meetup/events/253621611/"&gt;Aug 28. Chicago, US - Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmyxlblc/"&gt;Aug 28. Dallas, US - Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxmbdb/"&gt;Sep  2. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/mffbtpyxmbhb/"&gt;Sep  5. Indianapolis, US - Indy.rs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/cbcmbqyxmbhb/"&gt;Sep  5. Atlanta, US - Grab a beer with fellow Rustaceans&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxmbhb/"&gt;Sep  5. Vancouver, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="south-america"&gt;South America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Uruguay/events/253617627/"&gt;Aug 23. Montevideo, UY - Rust meetup Montevideo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Uruguay/events/253617627/"&gt;Sep  3. Montevideo, UY - Rust meetup - WebAssembly&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tenx.workable.com/jobs/689268"&gt;Software Engineer - Blockchain at TenX, Sydney, AU&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I made a thing to test building every possible Rust program...eventually.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://www.reddit.com/r/rust/comments/98v0td/i_made_a_thing_to_test_building_every_possible/"&gt;zowch on /r/rust&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/Flavsditz"&gt;Flavsditz&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/999jbu/this_week_in_rust_248/"&gt;Discuss on r/rust&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 21 Aug 2018 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2018-08-21:blog/2018/08/21/this-week-in-rust-248/</guid></item><item><title>This Week in Rust 247</title><link>https://this-week-in-rust.org/blog/2018/08/14/this-week-in-rust-247/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/cmr/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/cmr/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h2 id="news-blog-posts"&gt;News &amp;amp; Blog Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2018/08/08/survey.html"&gt;Launching the 2018 State of Rust Survey&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ManishEarth/status/1027676698068713473"&gt;Discord's new game store makes extensive use of Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vfoley.xyz/rust-compile-speed-tips/"&gt;How to alleviate the pain of Rust compile times&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/"&gt;Never patterns, exhaustive matching, and uninhabited types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2018/08/10/dota2-macos-performance.html"&gt;Benchmarking gfx-portability versus MoltenVK and OpenGL with Dota2 on Mac&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@carllerche/tower-web-a-new-web-framework-for-rust-e2912856851b"&gt;Tower Web — A new web framework for Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bheisler.github.io/post/state-of-gpgpu-in-rust/"&gt;The state of GPGPU in Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md"&gt;The Xi text engine CRDT&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-lang-nursery.github.io/wg-net/2018/08/09/going-live.html"&gt;The WG-Net vision for Rust 2018&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/t/the-embedded-working-group-newsletter-9/8185"&gt;The Embedded WG newsletter 9&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2018/08/14/gsoc.html"&gt;DX11 backend for gfx-rs - GSoC 2018 report&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/lukaslueg/macro_railroad"&gt;macro_railroad&lt;/a&gt;, a library to create neat syntax diagrams for &lt;code&gt;macro_rules!&lt;/code&gt; declarative macros. Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/436"&gt;kornel&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[easy] &lt;a href="https://github.com/rust-lang/rust/issues/50723"&gt;rustc: mark applicability of diagnostic suggestions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang-nursery/wg-net/issues/44"&gt;WG-Net: Call For Example Web Projects&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;102 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2018-08-06..2018-08-13"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53179"&gt;whitelist wasm32 simd128 target feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53270"&gt;fix a few regressions from enabling macro modularization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53053"&gt;resolve: support custom attributes when macro modularization is enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51990"&gt;Place unions, pointer casts and pointer derefs behind extra feature gates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53283"&gt;suggest float for integer literals where a float was expected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53183"&gt;suggest missing comma in macro call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52788"&gt;add help message for missing &lt;code&gt;IndexMut&lt;/code&gt; impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52644"&gt;add errors for unknown, stable and duplicate feature attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52397"&gt;suggest comma when writing &lt;code&gt;println!("{}" a);&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53051"&gt;emit error for pattern arguments in trait methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53100"&gt;fix improper_ctypes lint for individual foreign items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53088"&gt;NLL: use span of the closure args in free region errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53031"&gt;apply some fixes to cross-language LTO (especially when targeting MSVC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/51007"&gt;Un-name globals with private linkage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53161"&gt;avoid many allocations for &lt;code&gt;CString&lt;/code&gt;s during codegen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53025"&gt;change &lt;code&gt;assert!&lt;/code&gt; to &lt;code&gt;debug_assert!&lt;/code&gt; in &lt;code&gt;visit_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53019"&gt;don't &lt;code&gt;collect()&lt;/code&gt; when &lt;code&gt;size_hint&lt;/code&gt; is useless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/52872"&gt;make IpvXAddr::new const fns and the well known addresses associated constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/53060"&gt;change rustdoc style so fully qualified name does not overlap src link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/crates.io/pull/1436"&gt;crates.io: add crate size on the crate detail page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments)
process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2504"&gt;Fix the Error trait&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2351"&gt;Add &lt;code&gt;is_sorted&lt;/code&gt; to the standard library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2306"&gt;Add &lt;code&gt;pub fn identity&amp;lt;T&amp;gt;(x: T) -&amp;gt; T { x }&lt;/code&gt; to core::convert&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2497"&gt;if- and while-let-chains, take 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/1892"&gt;Deprecate uninitialized in favor of a new MaybeUninit type&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/2305"&gt;Introduce panic_thin, a fmtless alternative to panic_fmt&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rfcs/pull/2291"&gt;Add std::mem::zero&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/53125"&gt;(Modules) Tracking issue for the &lt;code&gt;mod.rs&lt;/code&gt; changes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/53027"&gt;Allow to check if sync::Once is already initialized&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/34981"&gt;Allow all literals in attributes (Tracking Issue for RFC #1559)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/49602"&gt;Tracking Issue for Iterator::find_map&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/52580"&gt;Define non-panicking UTF encoding methods on &lt;code&gt;char&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2521"&gt;Unify std::os::raw::c_void and libc::c_void via libcore&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2522"&gt;Generalized Type Ascription&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2523"&gt;#[cfg(accessible(..) / version = ".." / nightly)]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/channels/442252698964721669/443773747350994945"&gt;Aug 22. Rust Community Team Meeting in Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="irc://irc.mozilla.org/rust-content"&gt;Aug 28. Rust Community Content Subteam Meeting at #rust-content on irc.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://t.me/joinchat/EkKINhHCgZ9llzvPidOssA"&gt;Aug 29. Rust Events Team Meeting in Telegram&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;Asia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mad-rs/events/253751178/"&gt;Aug 18. Chennai, IN - Rust Monthly Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;Europe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Cambridge-Rust-Meetup/events/pzwshpyxlbvb/"&gt;Aug 16. Cambridge, GB - Cambridge Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/253062831/"&gt;Aug 22. Berlin, DE - Berlin Rust Hack and Learn&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Portland-Solana-Blockchain-Meetup/events/253180468/"&gt;Aug 16. Portland, US - Meetup w/ Zcash, ParityTech, Solana | Why Use Rust For Blockchain Development&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://rustconf.com/"&gt;Aug 17. Portland, US - RustConf 2018&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxlbzb/"&gt;Aug 19. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/dqldspyxlblb/"&gt;Aug 22. Vancouver, CA - Rust Study/Hack/Hang-out night&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dev-in-Mountain-View/events/glnfcpyxlbjc/"&gt;Aug 26. Mountain View, US - Open Table / Icebreaker: what projects are you working on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/triangle-rustaceans/events/mfglwpyxlbkc/"&gt;Aug 27. Durham, US - Triangle Rustaceans - Project Night &amp;amp; Lightning Talks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Chicago-Rust-Meetup/events/253621611/"&gt;Aug 28. Chicago, US - Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/zfgwzmyxlblc/"&gt;Aug 28. Dallas, US - Rust Meetup&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://paritytech.io/jobs/"&gt;Rust/Core Developer at Parity Technologies, Berlin&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Fearless concurrency includes fearless refactoring.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/parallel-problems-to-showcase-rust-features/19365/6"&gt;cuviper at rust-users&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/u/juleskers"&gt;Jules Kerssemakers&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit your quotes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nasa42"&gt;nasa42&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/Flavsditz"&gt;Flavsditz&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Tue, 14 Aug 2018 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2018-08-14:blog/2018/08/14/this-week-in-rust-247/</guid></item></channel></rss>