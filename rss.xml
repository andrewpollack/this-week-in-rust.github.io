<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><lastBuildDate>Wed, 13 Mar 2024 00:00:00 -0400</lastBuildDate><item><title>This Week in Rust 538</title><link>https://this-week-in-rust.org/blog/2024/03/13/this-week-in-rust-538/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2024/03/11/Rustup-1.27.0.html"&gt;Announcing Rustup 1.27.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2024/03/11/crates-io-download-changes.html"&gt;crates.io: Download changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;&lt;a class="toclink" href="#newsletters"&gt;Newsletters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2024-02/"&gt;This Month in Rust OSDev: February 2024&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bevyengine.org/news/bevy-foundation/"&gt;Bevy Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ad-si/Rust-Flashcards"&gt;Rust Flashcards - 557 cards to learn Rust from first principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/lib-rs-website-improvements/108218"&gt;Lib.rs website improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.memorysafety.org/blog/reducing-dependencies-in-sudo/"&gt;Sudo-rs dependencies: when less is better&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2024/03/11/changelog-224.html"&gt;rust-analyzer changelog #224&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/biscotti-http-cookies-in-rust/"&gt;biscotti, a new crate for HTTP cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boajs.dev/blog/2024/03/07/boa-release-18"&gt;Boa release v0.18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://relm4.org/blog/posts/announcing_relm4_v0.7/"&gt;Announcing Relm4 0.7 and 0.8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.meilisearch.com/meilisearch-1-7/"&gt;Meilisearch 1.7 — New OpenAI models &amp;amp; GPU support for Hugging Face embeddings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kobzol.github.io/rust/cargo/2024/03/10/rust-cargo-wizard.html"&gt;Cargo wizard: automate Cargo project configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://greptime.com/blogs/2024-03-07-greptimedb-v0.7"&gt;GreptimeDB v0.7 is ready for cloud-native monitoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?list=PL85XCvVPmGQipj690WrVgsnU4K4x7qFGy&amp;amp;v=N7GMHcX-WdA"&gt;Project Syn - Simon Gerber - Rust Zürisee March 2024&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.sdf.com/p/fast-development-in-rust-part-one"&gt;Fast Development In Rust, Part One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ia0.github.io/unsafe-mental-model/"&gt;Mental model for unsafe (complete rewrite)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ochagavia.nl/blog/10-years-in-open-source/"&gt;10 years in Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://corrode.dev/podcast/s01e07-season-finale/"&gt;Season Finale - Rust in Production Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=VArNQtYBC6Y"&gt;SemVer in Rust: Breakage, Tooling, and Edge Cases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/articles/rust-procedural-macros-replace-panic/"&gt;How to Use Rust Procedural Macros to Replace Panic with syn’s Fold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/rust/2024/03/12/rust-iterators-beyond-the-basics-part-i-building-blocks/"&gt;Rust Iterators Beyond the Basics - part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/multi-crate-project"&gt;Rust Multi-crate project in a monorepo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2024/03/07/stripe-payments-rust"&gt;Using Stripe Payments with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.weiznich.de/blog/async-transaction-problem/"&gt;Problems around modelling an asynchronous API for database transaction in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/embedded-rust-bluetooth-on-esp-ble-scanner"&gt;Embedded Rust Bluetooth on ESP: BLE Scanner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=u0VotuGzD_w"&gt;Implementing (parts of) git from scratch in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=-1VGwmFKKf8"&gt;The Billion Rows Challenge in Rust - an intro to Rust for data engineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bastienvigneron.medium.com/rust-impact-on-engineering-management-59647e5d0265"&gt;Rust impact on engineering management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://surrealdb.com/blog/from-medical-doctor-to-rust-developer--interview-with-our-new-senior-clinical-research-fellow"&gt;From medical doctor to rust developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://filtra.io/rust-feb-24"&gt;February 2024 Rust Jobs Report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/LukeMathWalker/biscotti"&gt;biscotti&lt;/a&gt;, an opinionated library to deal with HTTP cookies on the server side.&lt;/p&gt;
&lt;p&gt;We saw a lamentable lack of suggestions this week. Nevertheless, llogiq is pleased with his selection.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/issues/119612"&gt;Tracking Issue for &lt;code&gt;min_exhaustive_patterns&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/issues/119612#issuecomment-1967092452"&gt;Testing Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="call-for-participation-projects-and-speakers"&gt;&lt;a class="toclink" href="#call-for-participation-projects-and-speakers"&gt;Call for Participation; projects and speakers&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="cfp-projects"&gt;&lt;a class="toclink" href="#cfp-projects"&gt;CFP - Projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/4054"&gt;Hyperswitch - [REFACTOR]: Remove Default Case Handling - Bambora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/4055"&gt;Hyperswitch - [REFACTOR]: Remove Default Case Handling - Mollie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/4058"&gt;Hyperswitch - [REFACTOR]: Remove Default Case Handling - Braintree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GreptimeTeam/greptimedb/issues/3492"&gt;GreptimeDB - Painless integrating with Grafana via Prometheus plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GreptimeTeam/greptimedb/issues/3435"&gt;GreptimeDB - Add strict mode to validate protocol strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/infinyon/fluvio/issues/3765"&gt;Fluvio - fvm switch fails on some systems with running local cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/infinyon/fluvio/issues/3810"&gt;Fluvio - Add new command fluvio cluster resume&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/quinn-rs/quinn/issues/1778"&gt;quinn - Add CI for mobile platforms (iOS &amp;amp; Android)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="cfp-speakers"&gt;&lt;a class="toclink" href="#cfp-speakers"&gt;CFP - Speakers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker. They are ordered below by when the CFP closes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustfest.ch/cfp/"&gt;RustFest Zürich 2024&lt;/a&gt; | Closes 2024-03-31 | Zürich, Switzerland | Event date: 2024-06-19 - 2024-06-24&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pretalx.com/oxidize-berlin-2024/cfp"&gt;Oxidize 2024&lt;/a&gt; | Closes 2024-03-24 | Berlin, Germany | Event date: 2024-05-28 - 2024-05-30&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/the-rustconf-2024-call-for-talk-proposals-is-open/"&gt;RustConf 2024&lt;/a&gt; | Closes 2024-04-25 | Montreal, Canada | Event date: 2024-09-10&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.papercall.io/eurorust-2024"&gt;EuroRust 2024&lt;/a&gt;| Closes 2024-06-03 | Vienna, Austria &amp;amp; online | Event on 2024-10-10&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scientificcomputing.rs/"&gt;Scientific Computing in Rust 2024&lt;/a&gt;| Closes 2024-06-14 | online | Event date: 2024-07-17 - 2024-07-19&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are an event organizer hoping to expand the reach of your event, please submit a link to the submission website through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;506 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2024-03-05..2024-03-12"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121832"&gt;add new Tier-3 target: &lt;code&gt;loongarch64-unknown-linux-musl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119199"&gt;add arm64ec-pc-windows-msvc target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117458"&gt;LLVM Bitcode Linker: A self contained linker for nvptx and other targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122004"&gt;AST validation: Improve handling of inherent impls nested within functions and anon consts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121894"&gt;&lt;code&gt;const_eval_select&lt;/code&gt;: make it safe but be careful with what we expose on stable for now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121975"&gt;&lt;code&gt;hir_analysis&lt;/code&gt;: enums return &lt;code&gt;None&lt;/code&gt; in &lt;code&gt;find_field&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121905"&gt;add a &lt;code&gt;description&lt;/code&gt; field to target definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121976"&gt;add an option to have an external download/bootstrap cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119365"&gt;add asm goto support to &lt;code&gt;asm!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122305"&gt;add metadata to targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122066"&gt;add proper cfgs for &lt;code&gt;struct&lt;/code&gt; HirIdValidator used only with debug-assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122157"&gt;add the new description field to &lt;code&gt;Target::to_json,&lt;/code&gt; and add descriptions for some MSVC targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116791"&gt;allow codegen backends to opt-out of parallel codegen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122315"&gt;allow multiple &lt;code&gt;impl Into&amp;lt;{D,Subd}iagMessage&amp;gt;&lt;/code&gt; parameters in a function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116793"&gt;allow targets to override default codegen backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122043"&gt;apply &lt;code&gt;EarlyBinder&lt;/code&gt; only to &lt;code&gt;TraitRef&lt;/code&gt; in &lt;code&gt;ImplTraitHeader&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122010"&gt;avoid invoking the &lt;code&gt;intrinsic&lt;/code&gt; query for DefKinds other than &lt;code&gt;Fn&lt;/code&gt; or &lt;code&gt;AssocFn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121190"&gt;avoid overlapping privacy suggestion for single nested imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122014"&gt;change some attributes to &lt;code&gt;only_local&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122078"&gt;check that return type is WF in typeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121752"&gt;detect unused &lt;code&gt;struct&lt;/code&gt; impls pub trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122293"&gt;diagnostics: do not suggest using &lt;code&gt;#[unix_sigpipe]&lt;/code&gt; without a value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121662"&gt;distinguish between library and lang UB in &lt;code&gt;assert_unsafe_precondition&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122026"&gt;do not try to format removed files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122172"&gt;don't ICE if we collect no RPITITs unless there are no unification errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122173"&gt;don't ICE in CTFE if raw/fn-ptr types differ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122137"&gt;don't pass a break scope to &lt;code&gt;Builder::break_for_else&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122123"&gt;don't require specifying unrelated assoc types when trait alias is in &lt;code&gt;dyn&lt;/code&gt; type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/113525"&gt;dynamically size sigaltstk in std&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121301"&gt;errors: share &lt;code&gt;SilentEmitter&lt;/code&gt; between rustc and rustfmt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122181"&gt;fix crash in internal late lint checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122271"&gt;fix legacy numeric constant diag items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122038"&gt;fix linting paths with qself in &lt;code&gt;unused_qualifications&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122304"&gt;fix metadata for dyn-star in new solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122164"&gt;fix misaligned loads when loading UEFI arg pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121958"&gt;fix redundant import errors for preload extern crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119385"&gt;fix type resolution of associated const equality bounds (take 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122244"&gt;fix: localWaker memory leak and some stability attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121857"&gt;implement async closure signature deduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122152"&gt;improve diagnostics for parenthesized type arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122249"&gt;interpret: do not call machine read hooks during validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121202"&gt;limit the number of names and values in check-cfg diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118879"&gt;lint singleton gaps after exclusive ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122022"&gt;loongarch: add frecipe and relax target feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121282"&gt;lower transmutes from int to pointer type as gep on null&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122103"&gt;make TAITs and ATPITs capture late-bound lifetimes in scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121796"&gt;make &lt;code&gt;DefiningAnchor::Bind&lt;/code&gt; only store the opaque types that may be constrained, instead of the current infcx root item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122147"&gt;make &lt;code&gt;std::os::unix::ucred&lt;/code&gt; module private&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122114"&gt;make not finding core a fatal error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122063"&gt;make the lowering of &lt;code&gt;thir::ExprKind::If&lt;/code&gt; easier to follow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122221"&gt;match lowering: define a convenient &lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121846"&gt;only compare ambiguity item that have hard error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122018"&gt;only set noalias on Box with the global allocator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122138"&gt;record mtime in bootstrap's LLVM linker script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121194"&gt;refactor pre-getopts command line argument handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122072"&gt;refer to "slice" instead of "vector" in Ord and PartialOrd trait impl of slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121089"&gt;remove &lt;code&gt;feed_local_def_id&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121959"&gt;removing absolute path in proc-macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121382"&gt;rework &lt;code&gt;untranslatable_diagnostic&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122140"&gt;run a single huge &lt;code&gt;par_body_owners&lt;/code&gt; instead of many small ones after each other&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121863"&gt;silence mismatched types errors for implied projections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119888"&gt;stabilize the &lt;code&gt;#[diagnostic]&lt;/code&gt; namespace and &lt;code&gt;#[diagnostic::on_unimplemented]&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121438"&gt;std support for wasm32 panic=unwind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122299"&gt;store backtrace for &lt;code&gt;must_produce_diag&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122107"&gt;temporarily make allow-by-default the &lt;code&gt;non_local_definitions&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122076"&gt;tweak the way we protect in-place function arguments in interpreters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122027"&gt;uplift some feeding out of &lt;code&gt;associated_type_for_impl_trait_in_impl&lt;/code&gt; and into queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122048"&gt;use GEP inbounds for ZST and DST field offsets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122320"&gt;use ptradd for vtable indexing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122290"&gt;MIR printing: print the path of uneval'd const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122233"&gt;miri: do not apply aliasing restrictions to &lt;code&gt;Box&lt;/code&gt; with custom allocator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3340"&gt;miri: remove the ability to disable ABI checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;perf: build &lt;code&gt;rustc&lt;/code&gt; with 1CGU on &lt;a href="https://github.com/rust-lang/rust/pull/112268"&gt;&lt;code&gt;x86_64-apple-darwin&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/rust-lang/rust/pull/112267"&gt;&lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120268"&gt;replace the default branch with an unreachable branch If it is the last variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122059"&gt;optimize write with &lt;code&gt;as_const_str&lt;/code&gt; for shorter code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121938"&gt;fix quadratic behavior of repeated vectored writes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121428"&gt;net: don't use checked arithmetic when parsing numbers with known max digits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121201"&gt;&lt;code&gt;align_offset, align_to&lt;/code&gt;: no longer allow implementations to spuriously fail to align&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121403"&gt;impl &lt;code&gt;From&amp;lt;TryReserveError&amp;gt;&lt;/code&gt; for &lt;code&gt;io::Error&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/114655"&gt;make &lt;code&gt;impl&amp;lt;Fd: AsFd&amp;gt;&lt;/code&gt; impl take &lt;code&gt;?Sized&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/99153"&gt;add &lt;code&gt;Read&lt;/code&gt; impl for &lt;code&gt;&amp;amp;Stdin&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121942"&gt;&lt;code&gt;std::rand&lt;/code&gt;: enable getrandom for dragonflybsd too&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122002"&gt;&lt;code&gt;std::threads&lt;/code&gt;: revisit stack address calculation on netbsd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121633"&gt;win10: use &lt;code&gt;GetSystemTimePreciseAsFileTime&lt;/code&gt; directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121956"&gt;windows: implement condvar, mutex and rwlock using futex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121148"&gt;add &lt;code&gt;slice::try_range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121280"&gt;implement &lt;code&gt;MaybeUninit::fill{,_with,_from}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122298"&gt;&lt;code&gt;RawVec::into_box&lt;/code&gt;: avoid unnecessary intermediate reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120504"&gt;&lt;code&gt;Vec::try_with_capacity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/122099"&gt;add &lt;code&gt;#[inline]&lt;/code&gt; to &lt;code&gt;BTreeMap::new&lt;/code&gt; constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/112136"&gt;add &lt;code&gt;std::ffi::c_str&lt;/code&gt; module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2825"&gt;futures: add a helper for always ready futures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13399"&gt;cargo: cli: allow logging to chrome traces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13557"&gt;cargo: doc: collapse down generated statuses without --verbose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13538"&gt;cargo: log: trace parameters to align with profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13564"&gt;cargo: lockfile: make diffing/printing more reusable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13537"&gt;cargo: consistently compare MSRVs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/6092"&gt;rustfmt: fix failure with &lt;code&gt;=&amp;gt;&lt;/code&gt; in comment after match &lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;clippy: new lints: &lt;a href="https://github.com/rust-lang/rust-clippy/pull/12378"&gt;&lt;code&gt;duplicated_attributes&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/rust-lang/rust-clippy/pull/12440"&gt;&lt;code&gt;manual_unwrap_or_default&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/rust-lang/rust-clippy/pull/12401"&gt;&lt;code&gt;nonminimal_bool&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/rust-lang/rust-clippy/pull/12449"&gt;&lt;code&gt;zero_repeat_side_effects&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/rust-lang/rust-clippy/pull/12310"&gt;&lt;code&gt;const_is_empty&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;clippy: fix duplicate diagnostics in &lt;a href="https://github.com/rust-lang/rust-clippy/pull/12452"&gt;&lt;code&gt;manual_retain&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/rust-lang/rust-clippy/pull/12442"&gt;&lt;code&gt;mut_mut&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/rust-lang/rust-clippy/pull/12443"&gt;&lt;code&gt;no_effect_replace&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/rust-lang/rust-clippy/pull/12448"&gt;&lt;code&gt;single_match&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12429"&gt;clippy: don't lint &lt;code&gt;redundant_field_names&lt;/code&gt; across macro boundaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12447"&gt;clippy: fix &lt;code&gt;std_instead_of_core&lt;/code&gt; false positive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12433"&gt;clippy: fix &lt;code&gt;missing_docs_in_private_items&lt;/code&gt; on some proc macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12446"&gt;clippy: have more lints respect &lt;code&gt;#[allow]&lt;/code&gt; on exprs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16762"&gt;rust-analyzer: add QuickFix for unresolved field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16810"&gt;rust-analyzer: add fix for &lt;code&gt;unused_variables&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16808"&gt;rust-analyzer: add proc macro semantic token type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16773"&gt;rust-analyzer: add config and capability for test explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16781"&gt;rust-analyzer: don't escape &lt;code&gt;\&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; in "Extract format expressions" assist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16776"&gt;rust-analyzer: don't force draw a dependency edge to the &lt;code&gt;real_span_map&lt;/code&gt; query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16777"&gt;rust-analyzer: don't invalid body query results when generating desugared names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16811"&gt;rust-analyzer: fix method resolution snapshotting &lt;code&gt;receiver_ty&lt;/code&gt; too early&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16769"&gt;rust-analyzer: function argument type inference with associated type impl trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16766"&gt;rust-analyzer: keep attributes in assist &lt;code&gt;'generate_delegate_trait'&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16770"&gt;rust-analyzer: panic when using float numbers without dots in chain calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16782"&gt;rust-analyzer: preserve $ and \ in postfix format completions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16775"&gt;rust-analyzer: remove accidental dependency between &lt;code&gt;parse_macro_expansion&lt;/code&gt; and &lt;code&gt;parse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16779"&gt;rust-analyzer: skip match diagnostics for partially unknown types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16755"&gt;rust-analyzer: for toolchain binaries use the full path found in $PATH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16473"&gt;rust-analyzer: stop eagerly resolving inlay hint text edits for VSCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A mixed week, with a vast number of improvements (in large part due to PR&lt;/p&gt;
&lt;h1 id="122010-which-undoes-a-prior-regression-pr-120985-a-host-llvm-update"&gt;&lt;a class="toclink" href="#122010-which-undoes-a-prior-regression-pr-120985-a-host-llvm-update"&gt;122010, which undoes a prior regression; PR #120985, a host LLVM update).&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;But also three admittedly small-ish regressions which seemed unanticipated and
were still large enough that I did not feel comfortable rubber-stamping them
with a perf-regression-triaged marking.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=41d97c8a5dea2731b0e56fe97cd7cb79e21cff79&amp;amp;end=e919669d42dfb8950866d4cb268c5359eb3f7c54&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;41d97c8a..e919669d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 5 Improvements, 9 Mixed; 5 of them in rollups
54 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/69fb50d19f3d9bb28a903ddcee7326eef6a11518/triage/2024-03-11.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3243"&gt;RFC: Packages as (optional) namespaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id="rust"&gt;&lt;a class="toclink" href="#rust"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117164"&gt;Normalize trait ref before orphan check &amp;amp; consider ty params in alias types to be uncovered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/121720"&gt;Split refining_impl_trait lint into _reachable, _internal variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/120845"&gt;debuginfo: Stabilize &lt;code&gt;-Z debug-macros&lt;/code&gt;, &lt;code&gt;-Z collapse-macro-debuginfo&lt;/code&gt; and &lt;code&gt;#[collapse_debuginfo]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/122055"&gt;Stabilize associated type bounds (RFC 2289)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/115285"&gt;&lt;code&gt;c_unwind&lt;/code&gt; full stabilization request: change in &lt;code&gt;extern "C"&lt;/code&gt; behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rust/issues/120797"&gt;Consider linting against 00B7 aka interpunct aka middle dot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/116935"&gt;Prevent opaque types being instantiated twice with different regions within the same function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/119820"&gt;instantiate higher ranked goals outside of candidate selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117918"&gt;Add &lt;code&gt;wasm_c_abi&lt;/code&gt; &lt;code&gt;future-incompat&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/121948"&gt;stabilize ptr.is_aligned, move ptr.is_aligned_to to a new feature gate &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/121952"&gt;feat: &lt;code&gt;implement {Div,Rem}Assign&amp;lt;NonZero&amp;lt;X&amp;gt;&amp;gt;&lt;/code&gt; on &lt;code&gt;X&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="cargo"&gt;&lt;a class="toclink" href="#cargo"&gt;&lt;a href="https://github.com/rust-lang/cargo/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Cargo&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/cargo/pull/12783"&gt;cargo: prevent dashes in lib.name&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3585"&gt;Make &lt;code&gt;cargo install&lt;/code&gt; respect lockfiles by default&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2024-03-13 - 2024-04-10 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-03-14 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/298406445/"&gt;&lt;strong&gt;Web Frontend Co-Learning (online)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://meet.jit.si/RustHackAndLearnBerlin"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298457903/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/2024/03/14/rust-hack-and-learn.html"&gt;&lt;strong&gt;Mirror: Berline.rs page&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Virtual (Nürnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nüremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/297945252/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Virtual (San Diego, CA, US) | &lt;a href="https://www.meetup.com/san-diego-rust/"&gt;San Diego Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-diego-rust/events/299743034/"&gt;&lt;strong&gt;San Diego Rust March 2024 Tele-Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Virtual | &lt;a href="https://github.com/formal-land/"&gt;Formal Land&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lecture.senfcall.de/hay-gmh-wox-mru"&gt;&lt;strong&gt;Rust for Lunch: Formal verification for Rust with coq-of-rust. Speaker: Guillaume Claret&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://github.com/formal-land/coq-of-rust"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Virtual (Washinigton, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/299335006/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-20 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/299505703/"&gt;&lt;strong&gt;Rust for Rustaceans Book Club: Chapter 3 - Designing Interfaces&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-20 | Virtual (Vancouver, BC, CA)| &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/292763494/"&gt;&lt;strong&gt;Rust Study/Hack/Hang-out&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298368793/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 | Virtual + In Person (Barcelona, ES) | &lt;a href="https://www.meetup.com/es-ES/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/bcnrust/events/299223178/"&gt;&lt;strong&gt;13th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt; - &lt;a href="https://www.youtube.com/@bcnrust"&gt;Stream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/299644917/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-28 | Virtual + In Person (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://meet.jit.si/RustHackAndLearnBerlin"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298457904/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-04-02 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/mrnrktygcgbdb/"&gt;&lt;strong&gt;Buffalo Rust User Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-04-03 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/299507234/"&gt;&lt;strong&gt;Rust for Rustaceans Book Club: Chapter 4 - Error Handling&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-04-03 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/299047892/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-04-09 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/298341660/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="africa"&gt;&lt;a class="toclink" href="#africa"&gt;Africa&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-04-05 | Kampala, UG | &lt;a href="https://www.eventbrite.com/o/rust-circle-kampala-65249289033"&gt;Rust Circle Kampala&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.com/e/rust-circle-meetup-tickets-628763176587"&gt;&lt;strong&gt;Rust Circle Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-03-30 | New Delhi, IN | &lt;a href="https://www.meetup.com/rustdelhi/"&gt;Rust Delhi&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdelhi/events/299771772/"&gt;&lt;strong&gt;Rust Delhi Meetup #6&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-03-13 | Paris, FR | &lt;a href="https://www.eventbrite.com/o/paris-rustaceans-74289178383"&gt;Paris Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.fr/e/rust-meetup-in-paris-tickets-830340830777"&gt;&lt;strong&gt;Rust Meetup in Paris&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Reading, UK | &lt;a href="https://www.meetup.com/reading-rust-workshop/"&gt;Reading Rust Workshop&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/reading-rust-workshop/events/298533419/"&gt;&lt;strong&gt;Reading Rust Meetup at Browns&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/299028814/"&gt;&lt;strong&gt;Hack Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Leipzig, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/299309224/"&gt;&lt;strong&gt;Rust Interactive Session&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Prague, CZ | &lt;a href="https://www.meetup.com/rust-prague/events/299515169/"&gt;Rust Prague&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-prague/events/299515169/"&gt;&lt;strong&gt;Rust Meetup @ Charles University&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-20 | Girona, ES | &lt;a href="https://www.meetup.com/rust-girona/"&gt;Rust Girona&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-girona/events/299172343/"&gt;&lt;strong&gt;Introduction to programming Microcontrollers with Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-20 | Lyon, FR | &lt;a href="https://www.meetup.com/fr-FR/rust-lyon/"&gt;Rust Lyon&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/fr-FR/rust-lyon/events/299527560/"&gt;&lt;strong&gt;Rust Lyon Meetup #9&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Augsburg, DE | &lt;a href="https://www.meetup.com/de-DE/rust-meetup-augsburg/"&gt;Rust Meetup Augsburg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/rust-meetup-augsburg/events/299354449/"&gt;&lt;strong&gt;Augsburg Rust Meetup #6&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Lille, FR | &lt;a href="https://www.meetup.com/meetup-group-zgphbyet/"&gt;Rust Lille&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/meetup-group-zgphbyet/events/299295547/"&gt;&lt;strong&gt;Rust Lille #6: Du RSS et de L'ECS !&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Vienna, AT | &lt;a href="https://www.meetup.com/rust-vienna/"&gt;Rust Vienna&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-vienna/events/299682390/"&gt;&lt;strong&gt;Rust Vienna Meetup - March - Unsafe Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-23 | Stockholm, SE | &lt;a href="https://www.google.com/calendar/event?eid=NWMzaDNqZDZjcG5oZXNwYzJycHRzMXI5djUgYXBkOXZtYmMyMmVnZW5tdHU1bDZjNWpiZmNAZw&amp;amp;ctz=America/Los_Angeles"&gt;Ferris' Fika Forum&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/calendar/event?eid=NWMzaDNqZDZjcG5oZXNwYzJycHRzMXI5djUgYXBkOXZtYmMyMmVnZW5tdHU1bDZjNWpiZmNAZw&amp;amp;ctz=America/Los_Angeles"&gt;&lt;strong&gt;Ferris' Fika Forum&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://maps.google.com/maps?hl=en&amp;amp;q=Starbucks%2C%20Hamngatan%2033%2C%20111%2047%20Stockholm%2C%20Sweden"&gt;Map&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 | Barcelona, ES + Virtual | &lt;a href="https://www.meetup.com/es-ES/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/bcnrust/events/299223178/"&gt;&lt;strong&gt;13th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 - 2024-03-28 | London, UK | &lt;a href="https://www.rustnationuk.com/"&gt;Rust Nation UK&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rustnationuk.com/"&gt;&lt;strong&gt;Rust Nation 2024 - Conference&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-28 | Berlin, DE | &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-berlin/events/299288961/"&gt;&lt;strong&gt;Rust and Tell&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-04-10 | Cambridge, UK | &lt;a href="https://www.meetup.com/cambridge-rust-meetup/"&gt;Cambridge Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/cambridge-rust-meetup/events/299730322/"&gt;&lt;strong&gt;Rust Meetup Reboot 3&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-04-10 | Oslo, NO | &lt;a href="https://www.meetup.com/rust-oslo/"&gt;Rust Oslo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-oslo/events/299488225/"&gt;&lt;strong&gt;Rust Hack'n'Learn at Kampen Bistro&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-03-13 | Boston, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/299262009/"&gt;&lt;strong&gt;Northeastern Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/299186823/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Seattle, WA, US | &lt;a href="https://www.meetup.com/seattle-rust-user-group/"&gt;Seattle Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seattle-rust-user-group/events/298631832/"&gt;&lt;strong&gt;Seattle Rust User Group Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-22 | Somerville, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/299262036/"&gt;&lt;strong&gt;Somerville Union Square Rust Lunch, Mar 22&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 | Minneapolis, MN, US | &lt;a href="https://www.meetup.com/minneapolis-rust-meetup/"&gt;Minneapolis Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/minneapolis-rust-meetup/events/299489274/"&gt;&lt;strong&gt;Minneapolis Rust: Getting started with Rust!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-27 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/299220136/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-27 | Hawthorne, CA, US | &lt;a href="https://freeform.co/"&gt;Freeform&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freeformxrust.rsvpify.com/"&gt;&lt;strong&gt;Rust in the Physical World 🦀 Tech Talk Event at Freeform&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-31 | Boston, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/299262047/"&gt;&lt;strong&gt;Beacon Hill Rust Lunch, Mar 31&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/1arr8xi/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;In 10 years we went from “Rust will never replace C and C++” to “New C/C++ should not be written anymore, and you should use Rust”. Good job.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://lobste.rs/s/dbwn98/secure_by_design_google_s_perspective_on#c_f6j9ok"&gt;dpc_pw on lobste.rs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1547"&gt;Dennis Luxen&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/1bec9sy/this_week_in_rust_538/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 13 Mar 2024 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2024-03-13:/blog/2024/03/13/this-week-in-rust-538/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 537</title><link>https://this-week-in-rust.org/blog/2024/03/06/this-week-in-rust-537/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2024/02/28/Clippy-deprecating-feature-cargo-clippy.html"&gt;Clippy: Deprecating &lt;code&gt;feature = "cargo-clippy"&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2024/02/26/Windows-7.html"&gt;Updated baseline standards for Windows targets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://polar.sh/davidhewitt/posts/replacing-pyo3-api-pt1"&gt;Replacing PyO3's API without breaking everything downstream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2024/03/04/changelog-223.html"&gt;rust-analyzer changelog #223&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-gcc.github.io/2024/03/05/2024-02-monthly-report.html"&gt;rust-gcc February 2024 Monthly report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://godot-rust.github.io/dev/february-2024-update/"&gt;godot-rust February 2024 dev update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0059/"&gt;Fluvio v0.11.5 Release Updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crates.io/crates/sshd-openpgp-auth"&gt;sshd-openpgp-auth version 0.3.0&lt;/a&gt; and &lt;a href="https://crates.io/crates/ssh-openpgp-auth"&gt;ssh-openpgp-auth version 0.2.2&lt;/a&gt; as updates to the tooling providing &lt;a href="https://codeberg.org/wiktor/ssh-openpgp-auth"&gt;OpenPGP based authentication for SSH host keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2024/03/04/borrow-checking-without-lifetimes/"&gt;Borrow checking without lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nnethercote.github.io/2024/03/06/how-to-speed-up-the-rust-compiler-in-march-2024.html"&gt;How to speed up the Rust compiler in March 2024&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nnethercote.github.io/2024/03/05/code-review-in-the-rust-compiler.html"&gt;Code review in the Rust compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swatinem.de/blog/slow-thread-local/"&gt;Rust &lt;code&gt;thread_local!&lt;/code&gt;s are surprisingly expensive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yoshuawuyts.com/building-an-async-runtime-for-wasi/"&gt;Designing an Async Runtime for WASI 0.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/rustls-borrow-checker-p3/"&gt;Storing borrowed data in trait objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.the-pans.com/rusts-early-vs-late-lifetime-binding/"&gt;Rust's early vs. late lifetime binding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/check/how-moving-from-pandas-to-polars-made-me-write-better-code-without-writing-better-code-52bl"&gt;How moving from Pandas to Polars made me write better code without writing better code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2024/02/29/fullstack-loco-rust"&gt;A Full Stack SaaS Template with Loco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2024/02/29/async-rust"&gt;Async Rust in a Nutshell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://infinyon.com/blog/2024/02/fluvio-deep-causality-rs/"&gt;Real-time Streaming Analytics with Fluvio, DeepCausality, and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Pr6T0Phjvgc"&gt;Modern All Rust Stack - Dioxus, Axum, Warp, SurrealDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=PK_FKzgPDWg"&gt;Serverless Data Pipelines in Rust by Michele Vigilante&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8_Pj6q_mVQw"&gt;[FR] [video] Rust Lyon Meetup #8 - Impl Snake for Micro:bit — Cyril MARPAUD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rustlang.cz/"&gt;Czech Rust community index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mainmatter.com/blog/2024/02/29/launching-rustrover/"&gt;Launching RustRover: JetBrains’ Investment in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://ieni.dev/2024/03/%EF%B8%8F-rust-in-art-with-lisa-passing-rustship-6/"&gt;RustShip: Rust in Art with Lisa Passing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/alexpovel/srgn"&gt;srgn&lt;/a&gt;, a mix of tr, sed, rip-grep and tree-sitter.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1294"&gt;Alex Povel&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="call-for-participation-projects-and-speakers"&gt;&lt;a class="toclink" href="#call-for-participation-projects-and-speakers"&gt;Call for Participation; projects and speakers&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="cfp-projects"&gt;&lt;a class="toclink" href="#cfp-projects"&gt;CFP - Projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7473"&gt;Ockam - Output for both &lt;code&gt;ockam project ticket&lt;/code&gt; and &lt;code&gt;ockam project enroll&lt;/code&gt; is improved, with support for &lt;code&gt;--output json&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7471"&gt;Ockam - Syntax highlighting for fenced code blocks, in command help output, on Linux works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6706"&gt;Ockam - Command - refactor to use typed interfaces to implement commands for &lt;code&gt;kafka services&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/zerocopy/issues/553"&gt;ZeroCopy - Don't generate warning when deriving on deprecated type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/zerocopy/issues/367"&gt;ZeroCopy - Test the output of zerocopy-derive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/zerocopy/issues/357"&gt;ZeroCopy - [CI] Check semver compatibility with all target platforms, not just the host platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/zerocopy/issues/7"&gt;ZeroCopy - Inline many trait methods (in zerocopy and in derive-generated code)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/infinyon/fluvio/issues/3765"&gt;Fluvio - fvm switch fails on some systems with running local cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/infinyon/fluvio/issues/3810"&gt;Fluvio - Add new command fluvio cluster resume&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cfp-speakers"&gt;&lt;a class="toclink" href="#cfp-speakers"&gt;CFP - Speakers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://oxidizeconf.com/"&gt;Oxidize 2024&lt;/a&gt; &lt;a href="https://pretalx.com/oxidize-berlin-2024/cfp"&gt;CFP&lt;/a&gt; closes 2024-03-24 | Berlin, Germany | Event date: 2024-05-28 - 2024-05-30&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/the-rustconf-2024-call-for-talk-proposals-is-open/"&gt;RustConf 2024&lt;/a&gt; | CFP closes 2024-04-25 | Montreal, Canada | 2024-09-10&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.papercall.io/eurorust-2024"&gt;EuroRust 2024&lt;/a&gt;| CFP closes 2024-06-03 | Vienna, Austria &amp;amp; online | Event on 2024-10-10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are an event organizer hoping to expand the reach of your event, please submit a link to the submission website through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;488 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2024-02-27..2024-03-05"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121548"&gt;&lt;code&gt;ffi_unwind_calls&lt;/code&gt;: treat RustIntrinsic like regular Rust calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121000"&gt;&lt;code&gt;pattern_analysis&lt;/code&gt;: rework how we hide empty private fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121464"&gt;rustc: fix wasm64 metadata object files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121927"&gt;add a proper &lt;code&gt;with_no_queries&lt;/code&gt; to printing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121703"&gt;add a way to add constructors for &lt;code&gt;rustc_type_ir&lt;/code&gt; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120761"&gt;add initial support for DataFlowSanitizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121917"&gt;add new &lt;code&gt;pattern_complexity&lt;/code&gt; attribute to add possibility to limit and check recursion in pattern matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121765"&gt;add platform-specific function to get the error number for HermitOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121730"&gt;add profiling support to AIX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121753"&gt;add proper cfg to keep only one AlignmentEnum definition for different &lt;code&gt;target_pointer_widths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121782"&gt;allow statics pointing to mutable statics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121665"&gt;always generate GEP i8 / ptradd for &lt;code&gt;struct&lt;/code&gt; offsets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121895"&gt;avoid collecting into vecs in some places&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121993"&gt;avoid using unnecessary queries when printing the query stack in panics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121528"&gt;consider middle segments of paths in &lt;code&gt;unused_qualifications&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121855"&gt;correctly generate item info of trait items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120305"&gt;delete line if suggestion would replace it with an empty line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121739"&gt;display short types for unimplemented trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121864"&gt;don't grab variances in &lt;code&gt;TypeRelating&lt;/code&gt; relation if we're invariant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121913"&gt;don't panic when waiting on poisoned queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120646"&gt;fix incorrect suggestion for uninitialized binding in pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121226"&gt;fix issues in suggesting importing extern crate paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121680"&gt;fix link generation for foreign macro in jump to definition feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121824"&gt;implement missing ABI structures in StableMIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121792"&gt;improve renaming suggestion when item starts with underscore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111505"&gt;made &lt;code&gt;INVALID_DOC_ATTRIBUTES&lt;/code&gt; lint deny by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121850"&gt;make &lt;code&gt;ZeroablePrimitive&lt;/code&gt; trait unsafe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121784"&gt;make the success arms of &lt;code&gt;if lhs || rhs&lt;/code&gt; meet up in a separate block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121716"&gt;match lowering: Lower bindings in a predictable order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121750"&gt;match lowering: Separate the &lt;code&gt;bool&lt;/code&gt; case from other integers in &lt;code&gt;TestKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121715"&gt;match lowering: pre-simplify or-patterns too&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121803"&gt;never say &lt;code&gt;"&lt;/code&gt;Trait is implemented for {type error}&lt;code&gt;"&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121853"&gt;normalizes-to: handle negative impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121743"&gt;opportunistically resolve regions when processing region outlives obligations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121735"&gt;pattern analysis: Don't panic when encountering unexpected constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121987"&gt;pattern analysis: abort on arity mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121622"&gt;preserve same vtable pointer when cloning raw waker, to fix &lt;code&gt;Waker::will_wake&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121702"&gt;process alias-relate obligations in CoerceUnsized loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121912"&gt;properly deal with GATs when looking for method chains to point at&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121681"&gt;safe Transmute: Revise safety analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121376"&gt;skip unnecessary comparison with half-open range patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121695"&gt;split &lt;code&gt;rustc_type_ir&lt;/code&gt; to avoid &lt;code&gt;rustc_ast&lt;/code&gt; from depending on it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121888"&gt;style library/core/src/error.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121130"&gt;suggest moving definition if non-found &lt;code&gt;macro_rules!&lt;/code&gt; is defined later&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121153"&gt;suggest removing superfluous semicolon when statements used as expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121892"&gt;the ordinary lowering of &lt;code&gt;thir::ExprKind::Let&lt;/code&gt; is unreachable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121596"&gt;use volatile access instead of &lt;code&gt;#[used]&lt;/code&gt; for &lt;code&gt;on_tls_callback&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3346"&gt;miri: add -Zmiri-track-alloc-accesses to readme and fix its wording&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3348"&gt;miri: log when we change the active thread, and fix logging for concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3338"&gt;miri: print thread name in miri error backtraces; add option to track read/write accesses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3343"&gt;miri: tree Borrows diagnostic improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3345"&gt;miri: windows: support getting the thread name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121138"&gt;add ASCII fast-path for &lt;code&gt;char::is_grapheme_extended&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121001"&gt;perf: improve &lt;code&gt;write_fmt&lt;/code&gt; to handle simple strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120051"&gt;add &lt;code&gt;display&lt;/code&gt; method to &lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120291"&gt;have &lt;code&gt;String&lt;/code&gt; use &lt;code&gt;SliceIndex&lt;/code&gt; impls from &lt;code&gt;str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121666"&gt;use the OS thread name by default if &lt;code&gt;THREAD_INFO&lt;/code&gt; has not been initialized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121933"&gt;add missing &lt;code&gt;get_name&lt;/code&gt; for &lt;code&gt;wasm::thread&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121736"&gt;remove &lt;code&gt;Mutex::unlock&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121768"&gt;implement unwind safety for Condvar on all platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110543"&gt;make &lt;code&gt;ReentrantLock&lt;/code&gt; public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/455"&gt;codegen_gcc: debuginfo: Add support for debuginfo, without scope support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/462"&gt;codegen_gcc: switch to the new &lt;code&gt;set_special_chars_allowed_in_func_names&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13516"&gt;cargo add: Fallback to &lt;code&gt;rustc -v&lt;/code&gt; when no MSRV is set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13505"&gt;cargo toml: Warn on unset Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13514"&gt;cargo msrv: Report all incompatible packages, not just a random one&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13499"&gt;cargo rustc: Always pass --edition to rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13533"&gt;cargo toml: Don't warn on unset Edition if only 2015 is compatible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13481"&gt;cargo: add all unit's children recursively for &lt;code&gt;doc.extern-map&lt;/code&gt; option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13340"&gt;cargo: add "-Zpublic-dependency" for public-dependency feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13438"&gt;cargo: silently ignore &lt;code&gt;cargo::rustc-check-cfg&lt;/code&gt; to avoid MSRV annoyance when stabilizing &lt;code&gt;-Zcheck-cfg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13492"&gt;cargo: stabilize global cache data tracking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121689"&gt;rustdoc: Prevent inclusion of whitespace character after &lt;code&gt;macro_rules&lt;/code&gt; ident&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/6085"&gt;rustfmt: ensure space around binary exprs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12409"&gt;clippy: &lt;code&gt;identity_op&lt;/code&gt;: Fix duplicate diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12400"&gt;clippy: &lt;code&gt;let_underscore_untyped&lt;/code&gt;: fix false positive on async function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12362"&gt;clippy: &lt;code&gt;map_entry&lt;/code&gt;: Check insert expression for map use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12413"&gt;clippy: &lt;code&gt;misrefactored_assign_op&lt;/code&gt;: fix duplicate diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12380"&gt;clippy: &lt;code&gt;redundant_closure_call&lt;/code&gt;: don't lint closure originating from a macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12365"&gt;clippy: &lt;code&gt;unnecessary_cast&lt;/code&gt;: avoid breaking precedence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12077"&gt;clippy: add &lt;code&gt;assigning_clones&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12354"&gt;clippy: add &lt;code&gt;mixed_attributes_style&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12405"&gt;clippy: added msrv to threadlocal initializer check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12341"&gt;clippy: check for try blocks in &lt;code&gt;question_mark&lt;/code&gt; more consistently&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12406"&gt;clippy: dedup &lt;code&gt;std_instead_of_core&lt;/code&gt; by using first segment span for uniqueness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12423"&gt;clippy: don't emit "missing backticks" lint if the element is wrapped in &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; HTML tags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12276"&gt;clippy: fix false positive in &lt;code&gt;threadlocal!&lt;/code&gt; when falling back to &lt;code&gt;os_local&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12393"&gt;clippy: fix &lt;code&gt;derive_partial_eq_without_eq&lt;/code&gt; false positive on trait projection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12372"&gt;clippy: fix &lt;code&gt;nonminimal_bool&lt;/code&gt; lint regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12010"&gt;clippy: fix &lt;code&gt;manual_memcpy&lt;/code&gt; wrong indexing for multi dimensional arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12419"&gt;clippy: handle plural acronyms in &lt;code&gt;doc_markdown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12375"&gt;clippy: improve &lt;code&gt;is_lint_level&lt;/code&gt; code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12363"&gt;clippy: lower &lt;code&gt;bstr&lt;/code&gt; version requirement to &lt;code&gt;1.6.0&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12403"&gt;clippy: pointers cannot be converted to integers at compile time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15938"&gt;rust-analyzer: add hover display for trait assoc items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16719"&gt;rust-analyzer: add basic support for native debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16723"&gt;rust-analyzer: autocomplete constants inside format strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16752"&gt;rust-analyzer: don't destructure &lt;code&gt;struct&lt;/code&gt; with no public fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16727"&gt;rust-analyzer: don't highlight related assoc items of super traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16696"&gt;rust-analyzer: goto definition for &lt;code&gt;deref_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16709"&gt;rust-analyzer: goto definition for &lt;code&gt;index_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16759"&gt;rust-analyzer: goto-definition for constants inside range pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16702"&gt;rust-analyzer: ignore generic arguments in intra doc link path resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16757"&gt;rust-analyzer: put style lints behind disabled-by-default config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16693"&gt;rust-analyzer: fix rust-project.json projects not preferring sysroot rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16630"&gt;rust-analyzer: fix wrong closure kind deduction for closures with predicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2832"&gt;futures: parse rhs of &lt;code&gt;select!&lt;/code&gt; arms using match-arm rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A bunch of noise this week which has been dropped from the report (but may be
present in the summary figures). As a result, the week is pretty busy in amount
of changes, but the net effect is nearly neutral to a slight regression for
most workloads.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=71ffdf7ff7ac6df5f9f64de7e780b8345797e8a0&amp;amp;end=41d97c8a5dea2731b0e56fe97cd7cb79e21cff79&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;71ffdf7..41d97c8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 0 Improvements, 10 Mixed; 4 of them in rollups
51 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2024-03-05.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3537"&gt;RFC: Make Cargo respect minimum supported Rust version (MSRV) when selecting dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3543"&gt;RFC: patchable-function-entry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3287"&gt;RFC: Add native code coverage support in Cargo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3243"&gt;RFC: Packages as (optional) namespaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id="rust"&gt;&lt;a class="toclink" href="#rust"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/99969"&gt;alloc: implement &lt;code&gt;FromIterator&lt;/code&gt; for &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/116891"&gt;rework opaque type region inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/114655"&gt;Make &lt;code&gt;impl&amp;lt;Fd: AsFd&amp;gt;&lt;/code&gt; impl take &lt;code&gt;?Sized&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/28937"&gt;Tracking issue for Allow a re-export for &lt;code&gt;main&lt;/code&gt; (RFC 1260)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/115141"&gt;Update Windows platform support &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/121602"&gt;Resolve region bounds from components of type projection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/121346"&gt;Propagate temporary lifetime extension into if and match.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/119849"&gt;more eagerly instantiate binders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/121250"&gt;&lt;code&gt;E0492: borrow of an interior mutable value may end up in the final value&lt;/code&gt; during const eval when no inner mutability is involved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/121201"&gt;align_offset, align_to: no longer allow implementations to spuriously fail to align&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/116016"&gt;Soft-destabilize &lt;code&gt;RustcEncodable&lt;/code&gt; &amp;amp; &lt;code&gt;RustcDecodable&lt;/code&gt;, remove from prelude in next edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/121403"&gt;&lt;code&gt;impl From&amp;lt;TryReserveError&amp;gt;&lt;/code&gt; for &lt;code&gt;io::Error&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="cargo"&gt;&lt;a class="toclink" href="#cargo"&gt;&lt;a href="https://github.com/rust-lang/cargo/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Cargo&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/cargo/issues/10554"&gt;Tracking Issue for rustc &lt;code&gt;--check-cfg&lt;/code&gt; integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3579"&gt;Public Key Infrastructure for Rust Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2024-03-06 - 2024-04-03 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-03-06 | Virtual (Dublin, IE) | &lt;a href="https://www.meetup.com/rust-dublin/"&gt;Rust Dublin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-dublin/events/299358988/"&gt;&lt;strong&gt;An intro to &lt;code&gt;nom&lt;/code&gt;, parsing made easy for Rustaceans&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-06 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/299047891/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-07 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298368787/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/298341582/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | Hybrid (Virtual + In-person) Munich, DE | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/298507657/"&gt;&lt;strong&gt;Rust Munich 2024 / 1 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-13 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/299505703/"&gt;&lt;strong&gt;Rust for Rustaceans Book Club: Chapter 3 - Designing Interfaces&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/298406445/"&gt;&lt;strong&gt;Web Frontend Co-Learning (online)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://meet.jit.si/RustHackAndLearnBerlin"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298457903/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/2024/03/14/rust-hack-and-learn.html"&gt;&lt;strong&gt;Mirror: Berline.rs page&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Virtual (Nürnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nüremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/297945252/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Virtual (Washinigton, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/299335006/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-20 | Virtual (Vancouver, BC, CA)| &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/292763494/"&gt;&lt;strong&gt;Rust Study/Hack/Hang-out&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298368793/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 | Virtual + In Person (Barcelona, ES) | &lt;a href="https://www.meetup.com/es-ES/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/bcnrust/events/299223178/"&gt;&lt;strong&gt;13th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt; - &lt;a href="https://www.youtube.com/@bcnrust"&gt;Stream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-28 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://meet.jit.si/RustHackAndLearnBerlin"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298457904/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-04-02 | Virtual (Buffalo, NY, US) | &lt;a href="https://www.meetup.com/buffalo-rust-meetup/"&gt;Buffalo Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/buffalo-rust-meetup/events/mrnrktygcgbdb/"&gt;&lt;strong&gt;Buffalo Rust User Group&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-04-03 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/299507234/"&gt;&lt;strong&gt;Rust for Rustaceans Book Club: Chapter 4 - Error Handling&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-04-03 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/299047892/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-03-09 | Karnataka, Bengaluru, IN | &lt;a href="https://hasgeek.com/rustbangalore"&gt;Rust Bangalore&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hasgeek.com/rustbangalore/march-2024-rustacean-meetup/"&gt;&lt;strong&gt;March 2024 Rustacean Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | Tokyo, JP | &lt;a href="https://www.meetup.com/tokyo-rust-meetup/"&gt;Tokyo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/tokyo-rust-meetup/events/299607311/"&gt;&lt;strong&gt;Building the Isograph Compiler in Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-03-06 | Cologne / Köln, DE | &lt;a href="https://www.meetup.com/rustcologne/"&gt;Rust Cologne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustcologne/events/299530888/"&gt;&lt;strong&gt;Macros by simple Examples&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-06 | Zürich, CH | &lt;a href="https://www.meetup.com/rust-zurich/"&gt;Rust Zürisee&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-zurich/events/299380190/"&gt;&lt;strong&gt;How to (partial) Migration - March Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-07 | Copenhagen, DK | &lt;a href="https://www.meetup.com/copenhagen-rust-community/"&gt;Copenhagen Rust Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/copenhagen-rust-community/events/299451605/"&gt;&lt;strong&gt;Rust Hack Night #3: Embedded on Espressif's ESP32C3&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | Munich, DE + Virtual | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/298507657/"&gt;&lt;strong&gt;Rust Munich 2024 / 1 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-13 | Paris, FR | &lt;a href="https://www.eventbrite.com/o/paris-rustaceans-74289178383"&gt;Paris Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.fr/e/rust-meetup-in-paris-tickets-830340830777"&gt;&lt;strong&gt;Rust Meetup in Paris&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Reading, UK | &lt;a href="https://www.meetup.com/reading-rust-workshop/"&gt;Reading Rust Workshop&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/reading-rust-workshop/events/298533419/"&gt;&lt;strong&gt;Reading Rust Meetup at Browns&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/299028814/"&gt;&lt;strong&gt;Hack Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Leipzig, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/299309224/"&gt;&lt;strong&gt;Rust Interactive Session&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Prague, CZ | &lt;a href="https://www.meetup.com/rust-prague/events/299515169/"&gt;Rust Prague&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-prague/events/299515169/"&gt;&lt;strong&gt;Rust Meetup @ Charles University&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-20 | Girona, ES | &lt;a href="https://www.meetup.com/rust-girona/"&gt;Rust Girona&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-girona/events/299172343/"&gt;&lt;strong&gt;Introduction to programming Microcontrollers with Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-20 | Lyon, FR | &lt;a href="https://www.meetup.com/fr-FR/rust-lyon/"&gt;Rust Lyon&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/fr-FR/rust-lyon/events/299527560/"&gt;&lt;strong&gt;Rust Lyon Meetup #9&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Augsburg, DE | &lt;a href="https://www.meetup.com/de-DE/rust-meetup-augsburg/"&gt;Rust Meetup Augsburg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/rust-meetup-augsburg/events/299354449/"&gt;&lt;strong&gt;Augsburg Rust Meetup #6&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Lille, FR | &lt;a href="https://www.meetup.com/meetup-group-zgphbyet/"&gt;Rust Lille&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/meetup-group-zgphbyet/events/299295547/"&gt;&lt;strong&gt;Rust Lille #6: Du RSS et de L'ECS !&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 | Barcelona, ES + Virtual | &lt;a href="https://www.meetup.com/es-ES/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/bcnrust/events/299223178/"&gt;&lt;strong&gt;13th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-27 - 2024-03-28 | London, UK | &lt;a href="https://www.rustnationuk.com/"&gt;Rust Nation UK&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rustnationuk.com/"&gt;&lt;strong&gt;Rust Nation 2024 - Conference&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-28 | Berlin, DE | &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-berlin/events/299288961/"&gt;&lt;strong&gt;Rust and Tell&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-03-07 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/mv-rust-meetup/"&gt;Mountain View Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mv-rust-meetup/events/299043793/"&gt;&lt;strong&gt;Rust Meetup at Hacker Dojo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | New York, NY, US | &lt;a href="https://www.meetup.com/rust-nyc/"&gt;Rust NYC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-nyc/events/299619615/"&gt;&lt;strong&gt;Rust NYC Monthly Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-13 | Boston, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/299262009/"&gt;&lt;strong&gt;Northeastern Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/299186823/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Seattle, WA, US | &lt;a href="https://www.meetup.com/seattle-rust-user-group/"&gt;Seattle Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seattle-rust-user-group/events/298631832/"&gt;&lt;strong&gt;Seattle Rust User Group Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-27 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/299220136/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-27 | Hawthorne, CA, US | &lt;a href="https://freeform.co/"&gt;Freeform&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freeformxrust.rsvpify.com/"&gt;&lt;strong&gt;Rust in the Physical World 🦀 Tech Talk Event at Freeform&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/1arr8xi/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;My experience with C++ is that, as I’ve become more of an expert in the language, I’ve become more disillusioned with it. It’s incredibly hard to do things that you should be able to do in software. And, it’s a huge problem for me to constantly be helping other engineers debug the same bugs over and over. It’s always another use after free. I’ve probably debugged 300 of those. [...]&lt;/p&gt;
&lt;p&gt;In our experience using the Rust ecosystem for almost three years now, I don't think we found a bug in a single Rust crate that we've pulled off the shelf. We found a bug in one of them and that was a Rust crate wrapping a C library and the bug was in the C library. The software quality that you kind of get for free is amazing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://filtra.io/rust-amp-feb-24"&gt;Carter Schultz interviewed on the filtra blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1543"&gt;George Barwood&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/1b8o0ms/this_week_in_rust_537/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 06 Mar 2024 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2024-03-06:/blog/2024/03/06/this-week-in-rust-537/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 536</title><link>https://this-week-in-rust.org/blog/2024/02/28/this-week-in-rust-536/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://servo.org/blog/2024/02/28/gamepads-font-fallback-space-jam/"&gt;This month in Servo: gamepad support, font fallback, Space Jam, and more!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bytecodealliance.org/articles/jco-1.0"&gt;Announcing Jco 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/this-month-in-pavex-09/"&gt;This month in Pavex, #9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://argmin-rs.org/blog/version-v0-10-0/"&gt;argmin 0.10.0 - a Rust crate for numerical optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://maximkaaa.github.io/galileo/blog/posts/text_rendering_design/"&gt;Text labels rendering on a map with Rust - research and design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devclass.com/2024/02/20/rust-developers-fear-language-is-getting-too-complex-and-prefer-bug-fixes-to-new-features/"&gt;Rust developers fear language is getting too complex and prefer bug fixes to new features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codethink.co.uk/articles/2024/distributed_system_rust/"&gt;Lessons learnt from building a distributed system in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://filtra.io/rust-amp-feb-24"&gt;How Rust Could Change Robotics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/asynchronous-clean-up/"&gt;Asynchronous clean-up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/edge-iot-with-rust-on-esp-ping"&gt;Edge IoT with Rust on ESP: Ping!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/esp-embedded-rust-command-line-interface"&gt;ESP Embedded Rust: Command Line Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/esp-embedded-rust-ping-cli-app-part-2"&gt;ESP Embedded Rust: Ping CLI App Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crustc.com/string-to-int-in-rust/"&gt;Convert a String to int in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://asyncmove.com/blog/2024/02/mastering-manuallydropt-a-guide-to-explicit-resource-management-in-rust/"&gt;Mastering &lt;code&gt;ManuallyDrop&amp;lt;T&amp;gt;&lt;/code&gt; - A Guide to Explicit Resource Management in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hegdenu.net/posts/rust-but-async/"&gt;Rust, but async&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jacobelder.com/2024/02/26/rust-matching-and-iterators.html"&gt;Matching and iterators in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev-state.com/posts/error_handling/"&gt;Practical guide to Error Handling in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/en/blog/114/building-an-async-runtime-with-mio"&gt;Building an Async Runtime with mio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[HE] [video] &lt;a href="https://www.youtube.com/playlist?list=PLm2NBp4tb5F3QZNMW6bEt3IoAQAu2LAPs"&gt;Rust Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/guide-using-tensorflow-rust/"&gt;Guide to using TensorFlow in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://justinpombrio.net/2024/02/23/a-twist-on-Wadlers-printer.html"&gt;A Twist on Wadler's Printer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2024/02/22/api-rate-limiting-rust"&gt;Implementing API Rate Limiting in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bencher.dev/learn/benchmarking/rust/iai/"&gt;How to benchmark Rust code with Iai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/en/blog/115/sequential-storage-efficiently-store-data-in-flash"&gt;Sequential-storage: efficiently store data in flash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://corrode.dev/podcast/s01e06-sentry/"&gt;Sentry - Rust in Production Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=-gkvOoxgp8E"&gt;A First Look at Lifetimes in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=VH4z60akQuM"&gt;Firmware for an ESP32 to read from a noise sensor in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/orottier/web-audio-api-rs"&gt;web-audio-api-rs&lt;/a&gt;, a Rust implementation of the Web Audio API for use &lt;em&gt;outside&lt;/em&gt; the browser.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1292"&gt;Otto Rottier&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="call-for-participation-projects-and-speakers"&gt;&lt;a class="toclink" href="#call-for-participation-projects-and-speakers"&gt;Call for Participation; projects and speakers&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="cfp-projects"&gt;&lt;a class="toclink" href="#cfp-projects"&gt;CFP - Projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/3749"&gt; Hyperswitch - [FEATURE] : add &lt;code&gt;offset&lt;/code&gt; field to disputes list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/3748"&gt; Hyperswitch - [FEATURE]: add&lt;code&gt;offset&lt;/code&gt; field to mandates list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7625"&gt;Ockam - &lt;code&gt;ockam node create --identity X&lt;/code&gt; should fail if &lt;code&gt;X&lt;/code&gt; doesn't exist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7478"&gt;Ockam - Output for &lt;code&gt;ockam project ticket&lt;/code&gt; is improved and information is not opaque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7473"&gt;Ockam - Output for both &lt;code&gt;ockam project ticket&lt;/code&gt; and &lt;code&gt;ockam project enroll&lt;/code&gt; is improved, with support for &lt;code&gt;--output json&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/zerocopy/issues/953"&gt;ZeroCopy - In zerocopy-derive UI tests, detect whether we're building with &lt;code&gt;RUSTFLAGS='-Wwarnings'&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="cfp-speakers"&gt;&lt;a class="toclink" href="#cfp-speakers"&gt;CFP - Speakers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.&lt;/p&gt;
&lt;p&gt;If you are an event organizer hoping to expand the reach of your event, please submit a link to the submission website through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;430 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2024-02-20..2024-02-27"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120393"&gt;Avoid non-local definitions in functions&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/3373-avoid-nonlocal-definitions-in-fns.html"&gt;#3373&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120588"&gt;wasm: store rlib metadata in wasm object files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121435"&gt;account for RPITIT in E0310 explicit lifetime constraint suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121617"&gt;actually use the right closure kind when checking async Fn goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121114"&gt;add &lt;code&gt;#[rustc_no_mir_inline]&lt;/code&gt; for standard library UB checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121482"&gt;allow for a missing &lt;code&gt;adt_def&lt;/code&gt; in &lt;code&gt;NamePrivacyVisitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119106"&gt;avoid generalization inside of aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121493"&gt;by changing some attributes to &lt;code&gt;only_local,&lt;/code&gt; reducing encoding attributes in the crate metadate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121628"&gt;do not const prop unions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121470"&gt;don't ICE on anonymous &lt;code&gt;struct&lt;/code&gt; in &lt;code&gt;enum&lt;/code&gt; variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121344"&gt;expand weak alias types before collecting constrained/referenced late bound regions + refactorings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121427"&gt;fix panic when compiling &lt;code&gt;Rocket&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121309"&gt;make intrinsic fallback bodies cross-crate inlineable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121396"&gt;make it possible for outside crates to inspect a &lt;code&gt;mir::ConstValue&lt;/code&gt; with the interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120805"&gt;make non-PartialEq-typed consts as patterns a hard error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120742"&gt;mark &lt;code&gt;min_exhaustive_patterns&lt;/code&gt; as complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121393"&gt;match lowering: Introduce a &lt;code&gt;TestCase enum&lt;/code&gt; to replace most matching on &lt;code&gt;PatKind&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120904"&gt;match lowering: eagerly simplify match pairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121172"&gt;match lowering: simplify empty candidate selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121175"&gt;match lowering: test one or pattern at a time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121391"&gt;Fix liveness analysis in the presence of never patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120598"&gt;no need to &lt;code&gt;validate_alias_bound_self_from_param_env&lt;/code&gt; in &lt;code&gt;assemble_alias_bound_candidates&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121409"&gt;prevent cycle in implied predicates computation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121515"&gt;promotion: don't promote &lt;code&gt;int::MIN / -1&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121651"&gt;properly emit &lt;code&gt;expected ;&lt;/code&gt; on &lt;code&gt;#[attr] expr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120730"&gt;provide suggestions through &lt;code&gt;rustc_confusables&lt;/code&gt; annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121277"&gt;refactor trait implementations in &lt;code&gt;core::convert::num&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120840"&gt;split Diagnostics for Uncommon Codepoints: Add Individual Identifier Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121044"&gt;support async trait bounds in macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121392"&gt;unify dylib loading between proc macros and codegen backends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121471"&gt;when encountering &lt;code&gt;&amp;lt;&amp;amp;T as Clone&amp;gt;::clone(x)&lt;/code&gt; because &lt;code&gt;T: Clone&lt;/code&gt;, suggest &lt;code&gt;#[derive(Clone)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3328"&gt;miri: /miri many-seeds: support &lt;code&gt;MIRI_SEED_END&lt;/code&gt; to control the end of the seed range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3312"&gt;miri: add "cargo miri clean" command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3316"&gt;miri: windows miri-script execution ergonomics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120650"&gt;use &lt;code&gt;br&lt;/code&gt; instead of a conditional when switching on a constant boolean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119590"&gt;stabilize &lt;code&gt;cfg_target_abi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117174"&gt;improve UEFI stdio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121337"&gt;windows: use ProcessPrng for random keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121225"&gt;require &lt;code&gt;simd_insert, simd_extract&lt;/code&gt; indices to be constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119536"&gt;make &lt;code&gt;Barrier::new()&lt;/code&gt; const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117107"&gt;implement &lt;code&gt;MappedMutexGuard&lt;/code&gt;, &lt;code&gt;MappedRwLockReadGuard&lt;/code&gt;, and &lt;code&gt;MappedRwLockWriteGuard&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120718"&gt;add "algebraic" fast-math intrinsics, based on fast-math ops that cannot return poison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118634"&gt;remove useless &lt;code&gt;'static&lt;/code&gt; bounds on &lt;code&gt;Box&lt;/code&gt; allocator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121646"&gt;mpsc: fix race between block initialization and receiver disconnection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2830"&gt;futures: add &lt;code&gt;'static&lt;/code&gt; bound to &lt;code&gt;waker_ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13281"&gt;cargo add: Improve error when adding registry packages while vendored&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13463"&gt;cargo: Control clap colors through config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13479"&gt;cargo: Respect &lt;code&gt;CARGO_TERM_COLOR&lt;/code&gt; in '--list' and '-Zhelp'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13480"&gt;cargo: error messages when collecting workspace members now mention the workspace root location&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13197"&gt;cargo: support &lt;code&gt;target.&amp;lt;triple&amp;gt;.rustdocflags&lt;/code&gt; officially&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121490"&gt;rustdoc: include crate name in links for local primitives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12355"&gt;clippy: &lt;code&gt;box_default&lt;/code&gt;: preserve required path segments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11136"&gt;clippy: &lt;code&gt;read_line_without_trim&lt;/code&gt;: detect string literal comparison and &lt;code&gt;.ends_with()&lt;/code&gt; calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12303"&gt;clippy: add &lt;code&gt;unnecessary_clippy_cfg&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12259"&gt;clippy: add new &lt;code&gt;multiple_bound_locations&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12339"&gt;clippy: add new &lt;code&gt;unnecessary_get_then_check&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12333"&gt;clippy: allow &lt;code&gt;unused_imports,&lt;/code&gt; and &lt;code&gt;unused_import_braces&lt;/code&gt; on &lt;code&gt;use&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12317"&gt;clippy: don't lint &lt;code&gt;infinite_loop&lt;/code&gt; in external or proc macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12336"&gt;clippy: make &lt;code&gt;redundant_guards&lt;/code&gt; take constness into account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12322"&gt;clippy: &lt;code&gt;unused_unit&lt;/code&gt;: be careful with expressions with attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12342"&gt;clippy: new lint: &lt;code&gt;empty docs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12324"&gt;clippy: extend &lt;code&gt;unnecessary_to_owned&lt;/code&gt; to handle &lt;code&gt;Borrow&lt;/code&gt; trait in map types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12126"&gt;clippy: fix sign-handling bugs and false negatives in &lt;code&gt;cast_sign_loss&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12116"&gt;clippy: fix suggestion error in &lt;code&gt;useless_vec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12323"&gt;clippy: fix &lt;code&gt;no_effect_underscore_binding&lt;/code&gt; firing on ignored parameters of async fns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12308"&gt;clippy: look for &lt;code&gt;implied_bounds_in_impls&lt;/code&gt; in more positions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12260"&gt;clippy: take lifetime extension into account in &lt;code&gt;ref_as_ptr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16651"&gt;rust-analyzer: add assist for filling fields by replacing ellipsis in record syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16654"&gt;rust-analyzer: add short flag -V for consistency with other rust tooling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16687"&gt;rust-analyzer: add "make tuple" tactic to term search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16647"&gt;rust-analyzer: &lt;code&gt;replace_filter_map_next_with_find_map&lt;/code&gt; shouldn't work for dyn trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16684"&gt;rust-analyzer: don't panic on synthetic syntax in inference diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16691"&gt;rust-analyzer: fix completions panicking with certain macro setups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16645"&gt;rust-analyzer: fix deadlock in &lt;code&gt;recreate_crate_graph &amp;lt;-&amp;gt; file_line_index&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16679"&gt;rust-analyzer: fix modules in blocks not resolving in ide layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16637"&gt;rust-analyzer: fix proc-macro server not accounting for string delimiters correctly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16621"&gt;rust-analyzer: fix recompiles due to &lt;code&gt;RUSTC_BOOTSTRAP&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16678"&gt;rust-analyzer: panic when inlining callsites inside macros' parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16669"&gt;rust-analyzer: merge &lt;code&gt;BorrowKind::Unique&lt;/code&gt; into &lt;code&gt;BorrowKind::Mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16555"&gt;rust-analyzer: speed up Method Completions By Taking Advantage of Orphan Rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A rare week where regressions out powered improvements to make the compiler roughly half a percent slower on average on nearly 100 benchmarks. Some regressions have fixes in the pipeline, but some remain elusive or were introduced to address correctness issues.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=5af2130440c198afefbe5b8099342057cf272ef4&amp;amp;end=71ffdf7ff7ac6df5f9f64de7e780b8345797e8a0&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;5af21304..71ffdf7f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;(instructions:u)&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;range&lt;/th&gt;
&lt;th align="center"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;1.0%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 4.4%]&lt;/td&gt;
&lt;td align="center"&gt;69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;1.4%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 4.9%]&lt;/td&gt;
&lt;td align="center"&gt;66&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;-1.1%&lt;/td&gt;
&lt;td align="center"&gt;[-3.3%, -0.2%]&lt;/td&gt;
&lt;td align="center"&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;-0.6%&lt;/td&gt;
&lt;td align="center"&gt;[-1.5%, -0.2%]&lt;/td&gt;
&lt;td align="center"&gt;33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;All ❌✅ (primary)&lt;/td&gt;
&lt;td align="center"&gt;0.4%&lt;/td&gt;
&lt;td align="center"&gt;[-3.3%, 4.4%]&lt;/td&gt;
&lt;td align="center"&gt;97&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;4 Regressions, 6 Improvements, 5 Mixed; 2 of them in rollups
58 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/0528b31d7dad7c98af395e29271591740e984e16/triage/2024-02-27.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id="rust"&gt;&lt;a class="toclink" href="#rust"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/118879"&gt;Lint singleton gaps after exclusive ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/76014"&gt;Tracking Issue for slice::split_at_unchecked() and split_at_mut_unchecked()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/120257"&gt;Tracking Issue for generic &lt;code&gt;NonZero&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/111505"&gt;Made &lt;code&gt;INVALID_DOC_ATTRIBUTES&lt;/code&gt; lint deny by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/117215"&gt;Tracking Issue for ARM CRC32 intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/100824"&gt;use &lt;code&gt;confstr(_CS_DARWIN_USER_TEMP_DIR, ...)&lt;/code&gt; as a &lt;code&gt;TMPDIR&lt;/code&gt; fallback on Darwin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3577"&gt;RFC: RArrow Dereference for Pointer Ergonomics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2024-02-28 - 2024-03-27 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-02-29 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://meet.jit.si/RustHackAndLearnBerlin"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298457901/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/2024/02/29/rust-hack-and-learn.html"&gt;&lt;strong&gt;Mirror: Berline.rs page&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-29 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298372724/"&gt;&lt;strong&gt;Surfing the Rusty Wireless Waves with the ESP32-C3 Board&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-06 | Virtual (Dublin, IE) | &lt;a href="https://www.meetup.com/rust-dublin/"&gt;Rust Dublin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-dublin/events/299358988/"&gt;&lt;strong&gt;An intro to &lt;code&gt;nom&lt;/code&gt;, parsing made easy for Rustaceans&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-06 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/299047891/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-07 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298368787/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/298341582/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | Hybrid (Virtual + In-person) Munich, DE | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/298507657/"&gt;&lt;strong&gt;Rust Munich 2024 / 1 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/298406445/"&gt;&lt;strong&gt;Web Frontend Co-Learning (online)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://meet.jit.si/RustHackAndLearnBerlin"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298457903/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/2024/03/14/rust-hack-and-learn.html"&gt;&lt;strong&gt;Mirror: Berline.rs page&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Virtual (Nürnberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nüremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/297945252/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Seattle, WA, US | &lt;a href="https://www.meetup.com/seattle-rust-user-group/"&gt;Seattle Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seattle-rust-user-group/events/298631832/"&gt;&lt;strong&gt;Seattle Rust User Group Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 | Virtual + In Person (Barcelona, ES) | &lt;a href="https://www.meetup.com/es-ES/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/bcnrust/events/299223178/"&gt;&lt;strong&gt;13th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt; - &lt;a href="https://www.youtube.com/@bcnrust"&gt;Stream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-02-29 | Berlin, DE | &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-berlin/events/299190389/"&gt;&lt;strong&gt;Rust and Tell - Season start 2024&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-29 | Copenhagen, DK | &lt;a href="https://www.meetup.com/copenhagen-rust-community/"&gt;Copenhagen Rust Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/copenhagen-rust-community/events/299353844/"&gt;&lt;strong&gt;Rust Meetup #44 sponsored by Bang &amp;amp; Olufsen&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-06 | Zürich, CH | &lt;a href="https://www.meetup.com/rust-zurich/"&gt;Rust Zürisee&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-zurich/events/299380190/"&gt;&lt;strong&gt;How to (partial) Migration - March Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | Munich, DE + Virtual | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/298507657/"&gt;&lt;strong&gt;Rust Munich 2024 / 1 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-13 | Paris, FR | &lt;a href="https://www.eventbrite.com/o/paris-rustaceans-74289178383"&gt;Paris Rustaceans&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.eventbrite.fr/e/rust-meetup-in-paris-tickets-830340830777"&gt;&lt;strong&gt;Rust Meetup in Paris&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Reading, UK | &lt;a href="https://www.meetup.com/reading-rust-workshop/"&gt;Reading Rust Workshop&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/reading-rust-workshop/events/298533419/"&gt;&lt;strong&gt;Reading Rust Meetup at Browns&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/299028814/"&gt;&lt;strong&gt;Hack Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Leipzig, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/299309224/"&gt;&lt;strong&gt;Rust Interactive Session&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-20 | Girona, ES | &lt;a href="https://www.meetup.com/rust-girona/"&gt;Rust Girona&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-girona/events/299172343/"&gt;&lt;strong&gt;Introduction to programming Microcontrollers with Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Augsburg, DE | &lt;a href="https://www.meetup.com/de-DE/rust-meetup-augsburg/"&gt;Rust Meetup Augsburg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/rust-meetup-augsburg/events/299354449/"&gt;&lt;strong&gt;Augsburg Rust Meetup #6&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Lille, FR | &lt;a href="https://www.meetup.com/meetup-group-zgphbyet/"&gt;Rust Lille&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/meetup-group-zgphbyet/events/299295547/"&gt;&lt;strong&gt;Rust Lille #6: Du RSS et de L'ECS !&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 | Barcelona, ES + Virtual | &lt;a href="https://www.meetup.com/es-ES/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/bcnrust/events/299223178/"&gt;&lt;strong&gt;13th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26, 2024-03-28 | London, UK | &lt;a href="https://www.rustnationuk.com/"&gt;Rust Nation UK&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rustnationuk.com/"&gt;&lt;strong&gt;Rust Nation 2024&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-02-28 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/297380841/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-28 | Chicago, IL, US | &lt;a href="https://www.meetup.com/deep-dish-rust/"&gt;Deep Dish Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/deep-dish-rust/events/299284926/"&gt;&lt;strong&gt;Rust Happy Hour&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-04 | Cambridge, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/299261953/"&gt;&lt;strong&gt;Central Cambridge Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-07 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/mv-rust-meetup/"&gt;Mountain View Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mv-rust-meetup/events/299043793/"&gt;&lt;strong&gt;Rust Meetup at Hacker Dojo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-13 | Boston, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/299262009/"&gt;&lt;strong&gt;Northeastern Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group/"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/299186823/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-27 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/299220136/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-27 | Hawthorne, CA, US | &lt;a href="https://freeform.co/"&gt;Freeform&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freeformxrust.rsvpify.com/"&gt;&lt;strong&gt;Rust in the Physical World 🦀 Tech Talk Event at Freeform&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-02-29 | Brisbane, QLD, AU | &lt;a href="https://www.meetup.com/rust-brisbane/"&gt;Rust Brisbane&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-brisbane/events/299304438/"&gt;&lt;strong&gt;February Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-05 | Auckland, NZ | &lt;a href="https://www.meetup.com/rust-akl/"&gt;Rust AKL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/299158887/"&gt;&lt;strong&gt;Rust AKL: Introduction to Embedded Rust + The State of Rust UI&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/1arr8xi/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;That would take 18 million terabytes of RAM. You don't have that much memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://users.rust-lang.org/t/what-is-max-array-size/107058/4"&gt;Alice Ryhl answering "What is MAX array size" on rust-users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1536"&gt;Zeroexcuses&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/1b2n4bw/this_week_in_rust_536/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 28 Feb 2024 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2024-02-28:/blog/2024/02/28/this-week-in-rust-536/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 535</title><link>https://this-week-in-rust.org/blog/2024/02/21/this-week-in-rust-535/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2024/02/19/2023-Rust-Annual-Survey-2023-results.html"&gt;2023 Annual Rust Survey Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2024/02/21/Rust-participates-in-GSoC-2024.html"&gt;Rust participates in Google Summer of Code 2024&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2024/02/19/leadership-council-repr-selection.html"&gt;Leadership Council March Representative Selections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="foundation"&gt;&lt;a class="toclink" href="#foundation"&gt;Foundation&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/save-the-date-rustconf-2024-september-10-13/"&gt;Save the Date: RustConf 2024 – September 10-13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/second-security-initiative-report-details-rust-security-advancements/"&gt;Second Security Initiative Report Details Rust Security Advancements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bevyengine.org/news/bevy-0-13/"&gt;Bevy 0.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://joonaa.dev/blog/05/bevy-xpbd-0-4-0"&gt;Bevy XPBD 0.4: Collider Agnosticism, Layer Rework, and Bevy 0.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://astral.sh/blog/uv"&gt;uv: Python packaging in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-cliff.org/blog/2.0.0/"&gt;git-cliff: What's new in 2.0.0? (highly customizable changelog generator)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.antoyo.xyz/rustc_codegen_gcc-progress-report-30"&gt;rustc_codegen_gcc: Progress Report #30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/rust/2024/02/14/q4-2023-features-retrospective/"&gt;RustRover Q4 2023 Feature Updates Retrospective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2024/02/19/changelog-221.html"&gt;rust-analyzer changelog #221&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/1amjknw/anouncing_stabby_300_and_rustconf_video_available/"&gt;Anouncing Stabby 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://argmin-rs.org/blog/argmin-testfunctions-v0-2-0/"&gt;argmin_testfunctions 0.2.0: test functions for optimization problems in Rust and Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberian/vscode-rustup"&gt;vscode-rustup released: interface with rustup as a VSCode extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeberg.org/openpgp-card/openpgp-card-tools"&gt;OpenPGP-card-tools 0.10.0 released. The project provides the &lt;code&gt;oct&lt;/code&gt; commandline tool for inspecting, configuring and using OpenPGP card devices such as Nitrokey or Yubikey.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.timeplus.com/post/rust-client-for-proton"&gt;Rust Client for Timeplus Proton SQL Streaming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/futures-unordered/"&gt;FuturesUnordered and the order of futures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2024/02/15/best-rust-tooling"&gt;Rust Tooling: 8 tools that will increase your productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/ia0/820ab50d4c5f0f5e3aeb841cef8e6792"&gt;Writing down my mental model of unsafe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/rust-fast-techempower-web-framework-benchmarks"&gt;How can Rust be so fast in the TechEmpower Web Framework Benchmarks?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://registerspill.thorstenball.com/p/from-1s-to-4ms"&gt;From 1s to 4ms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mary.codes/blog/programming/translating_openstreetmaps_to_HTML5_canvas_rust_wasm/"&gt;Translating OpenStreetMap data to HTML5 Canvas with Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auroranssolis.github.io/rust/2024/02/14/macros-rule.html"&gt;macros_rule!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2024/02/21/using-jwt-auth-rust"&gt;Implementing JWT Authentication in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@sam.van.overmeire/deploying-axum-to-lambda-and-ecs-using-lambda-web-adapter-2273bd56bb81"&gt;Deploying Axum to Lambda and ECS, using Lambda Web Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tylerjw.dev/posts/rust-cmake-interop-part-3-cxx/"&gt;Rust/C++ Interop Part 3 - Cxx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[FR] &lt;a href="https://lafor.ge/closure/"&gt;Les closures en Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=vfMpIsJwpjU"&gt;Safe Rust AIN'T SAFE!? (cve-rs)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=kXPBVGDkQSs"&gt;Release-plz: releasing crates like it's 2023 (RustLab 2023)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/wingbackapp/kind/"&gt;kind&lt;/a&gt;, a helper crate for typed UUIDs.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1290"&gt;Denys Séguret&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h4 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3013"&gt;RFC: Checking conditional compilation at compile time&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3013#issuecomment-1936648479"&gt;Testing steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="call-for-participation-projects-and-speakers"&gt;&lt;a class="toclink" href="#call-for-participation-projects-and-speakers"&gt;Call for Participation; projects and speakers&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="cfp-projects"&gt;&lt;a class="toclink" href="#cfp-projects"&gt;CFP - Projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7471"&gt;Ockam - Syntax highlighting for fenced code blocks, in command help output, on Linux works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7575"&gt;Ockam - Shut down Worker/Processor if initialization failed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7478"&gt;Ockam - Output for ockam project ticket is improved and information is not opaque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/3749"&gt;Hyperswitch - [FEATURE] : add &lt;code&gt;offset&lt;/code&gt; field to disputes list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/3748"&gt;Hyperswitch - [FEATURE]: add&lt;code&gt;offset&lt;/code&gt; field to mandates list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/3746"&gt;Hyperswitch - [FEATURE]: add pagination support for customers list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="cfp-speakers"&gt;&lt;a class="toclink" href="#cfp-speakers"&gt;CFP - Speakers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.&lt;/p&gt;
&lt;p&gt;If you are an event organizer hoping to expand the reach of your event, please submit a link to the submission website through a &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;PR to TWiR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;508 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2024-02-13..2024-02-20"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121088"&gt;implicitly enable evex512 if avx512 is enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120932"&gt;&lt;code&gt;const_mut_refs&lt;/code&gt;: allow mutable pointers to statics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119673"&gt;&lt;code&gt;macro_rules&lt;/code&gt;: Preserve all metavariable spans in a global side table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120982"&gt;add APIs for fetching foreign items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121203"&gt;add &lt;code&gt;rust.frame-pointers&lt;/code&gt; config option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121198"&gt;add more checks for &lt;code&gt;unnamed_fields&lt;/code&gt; during HIR analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121256"&gt;allow AST and HIR visitors to return &lt;code&gt;ControlFlow&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121179"&gt;allow mutable references in const values when they point to no memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121087"&gt;always evaluate free constants and statics, even if previous errors occurred&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121020"&gt;avoid an ICE in diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120530"&gt;be less confident when &lt;code&gt;dyn&lt;/code&gt; suggestion is not checked for object safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118882"&gt;check normalized call signature for WF in mir typeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119338"&gt;consider principal trait ref's auto-trait super-traits in dyn upcasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120847"&gt;continue compilation after &lt;code&gt;check_mod_type_wf&lt;/code&gt; errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121113"&gt;continue compilation even if inherent impl checks fail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121032"&gt;continue reporting remaining errors instead of silently dropping them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121100"&gt;detect when method call on argument could be removed to fulfill failed trait bound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121181"&gt;fix an ICE in the recursion lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121104"&gt;ignore unsized types when trying to determine the size of the original type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119432"&gt;make &lt;code&gt;ConstPropLint&lt;/code&gt; lint run on promoteds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121119"&gt;make &lt;code&gt;async Fn&lt;/code&gt; trait kind errors better&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120780"&gt;properly deal with weak alias types as self types of impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121286"&gt;rename &lt;code&gt;ConstPropLint&lt;/code&gt; to &lt;code&gt;KnownPanicsLint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116564"&gt;store static initializers in metadata instead of the MIR of statics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119928"&gt;suggest &lt;code&gt;into_iter()&lt;/code&gt; when &lt;code&gt;Iterator&lt;/code&gt; method called on &lt;code&gt;impl IntoIterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121318"&gt;trigger &lt;code&gt;unsafe_code&lt;/code&gt; lint on invocations of &lt;code&gt;global_asm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121193"&gt;use fulfillment in next trait solver coherence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3192"&gt;miri: implement x86 AVX intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121015"&gt;optimize &lt;code&gt;delayed_bug&lt;/code&gt; handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/100603"&gt;optimize away poison guards when std is built with panic=abort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120576"&gt;overhaul &lt;code&gt;Diagnostic&lt;/code&gt; and &lt;code&gt;DiagnosticBuilder&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120889"&gt;implement &lt;code&gt;Instant&lt;/code&gt; for UEFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121024"&gt;implement &lt;code&gt;Default&lt;/code&gt; for &lt;code&gt;AsciiChar&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119808"&gt;store &lt;code&gt;core::str::CharSearcher::utf8_size&lt;/code&gt; as u8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120538"&gt;make &lt;code&gt;File::read_to_end&lt;/code&gt; less special&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121241"&gt;implement &lt;code&gt;NonZero&lt;/code&gt; traits generically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120563"&gt;make &lt;code&gt;NonZero::get&lt;/code&gt; generic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120741"&gt;make &lt;code&gt;io::BorrowedCursor::advance&lt;/code&gt; safe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121311"&gt;make &lt;code&gt;is_nonoverlapping #[inline]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121204"&gt;specialize flattening iterators with only one inner item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/105917"&gt;specialize some methods of &lt;code&gt;io::Chain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116385"&gt;rename &lt;code&gt;MaybeUninit::write_slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120952"&gt;don't use &lt;code&gt;mem::zeroed&lt;/code&gt; in &lt;code&gt;vec::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118264"&gt;optimize &lt;code&gt;VecDeque::drain&lt;/code&gt; for (half-)open ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120505"&gt;fix BTreeMap's &lt;code&gt;Cursor::remove_{next,prev}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121041"&gt;add &lt;code&gt;Future&lt;/code&gt; and &lt;code&gt;IntoFuture&lt;/code&gt; to the 2024 prelude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/505"&gt;hashbrown: inline tweaks to &lt;code&gt;HashTable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/495"&gt;hashbrown: make &lt;code&gt;HashSet::insert&lt;/code&gt; return OccupiedEntry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/429"&gt;codegen_gcc: correctly handle &lt;code&gt;--use-system-gcc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/437"&gt;codegen_gcc: implement dummy emit=llvm-ir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/440"&gt;codegen_gcc: use the default rust mangling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_cranelift/pull/1457"&gt;codegen_cranelift: fix &lt;code&gt;simd_select_bitmask&lt;/code&gt; on big-endian systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_cranelift/pull/1458"&gt;codegen_cranelift: fix download hash check on big-endian systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13434"&gt;cargo add: Ensure users know a feature is being created&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13446"&gt;cargo add: Remove inconsistent period&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13448"&gt;cargo test: Suggest &lt;code&gt;--&lt;/code&gt; for libtest arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12861"&gt;cargo: respect &lt;code&gt;rust-version&lt;/code&gt; when generating lockfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120526"&gt;rustdoc: correctly handle long crate names on mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121022"&gt;rustdoc: cross-crate re-exports: correctly render late-bound params in source order even if early-bound params are present&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/120548"&gt;rustdoc: fix handling of &lt;code&gt;doc_auto_cfg&lt;/code&gt; feature for cfg attributes on glob reexport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/6073"&gt;rustfmt: fix error trying to format unnormalized UTF8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121035"&gt;format &lt;code&gt;async&lt;/code&gt; trait bounds in rustfmt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/121137"&gt;add clippy into the known &lt;code&gt;cfg&lt;/code&gt; list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12292"&gt;clippy: add new lint &lt;code&gt;deprecated_clippy_cfg_attr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12293"&gt;clippy: &lt;code&gt;case_sensitive_file_extension_comparisons&lt;/code&gt;: Don't trigger on digits-only extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11881"&gt;clippy: &lt;code&gt;implied_bounds_in_impls&lt;/code&gt;: avoid linting on overlapping associated tys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12275"&gt;clippy: &lt;code&gt;incompatible_msrv&lt;/code&gt;: allow expressions that come from desugaring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/10903"&gt;clippy: &lt;code&gt;new_without_default&lt;/code&gt;: Now emits on const fns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11641"&gt;clippy: allow negative literals in &lt;code&gt;redundant_guards&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12294"&gt;clippy: check trait items in &lt;code&gt;min_ident_chars&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12314"&gt;clippy: default test output conflict handling to error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12305"&gt;clippy: ensure ASM syntax detect &lt;code&gt;global_asm!&lt;/code&gt; and &lt;code&gt;asm!&lt;/code&gt; only on x86 architectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12059"&gt;clippy: add check for identical guards in lint &lt;code&gt;match_same_arms&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12309"&gt;clippy: make &lt;code&gt;#[allow]&lt;/code&gt; work on field for &lt;code&gt;pub_underscore_fields&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12285"&gt;clippy: ignore imported items in &lt;code&gt;min_ident_chars&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16550"&gt;rust-analyzer: activate on top level &lt;code&gt;Cargo.toml&lt;/code&gt; and &lt;code&gt;rust-project.json&lt;/code&gt; files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16358"&gt;rust-analyzer: deduplicate references when some of them are in macro expansions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16489"&gt;rust-analyzer: create alias when renaming an import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16303"&gt;rust-analyzer: add non-exhaustive-let diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16589"&gt;rust-analyzer: add unresolved-ident diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16475"&gt;rust-analyzer: support multiple tab stops for completions in VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15003"&gt;rust-analyzer: add basic support for &lt;code&gt;become&lt;/code&gt; expr/tail calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16618"&gt;rust-analyzer: don't add &lt;code&gt;\&lt;/code&gt; before &lt;code&gt;{&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16583"&gt;rust-analyzer: don't show type mismatches for &lt;code&gt;{unknown}&lt;/code&gt; to non-&lt;code&gt;{unknown}&lt;/code&gt; mismatches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16574"&gt;rust-analyzer: fix "needless return" diagnostic for trailing item declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16247"&gt;rust-analyzer: fix build scripts not being rebuilt in some occasions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16590"&gt;rust-analyzer: fix false positives for "unnecessary else" diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16579"&gt;rust-analyzer: fix snippets being placed leftwards of where they should be&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16553"&gt;rust-analyzer: improve recover on &lt;code&gt;=&lt;/code&gt; for record field initializer and pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16544"&gt;rust-analyzer: only complete traits in &lt;code&gt;impl .. for&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16569"&gt;rust-analyzer: place snippets correctly in multi-edit assists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16616"&gt;rust-analyzer: server hanging up on build script task&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Relatively few PRs affecting performance, but massive improvements thanks to the
update to LLVM 18 (PR #12005), as well as the merging of two related compiler
queries (PR #120919) and other small improvements from a rollup (PR #121055).&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=74c3f5a146860c94ff4d179fc3bfa34f879adf41&amp;amp;end=5af2130440c198afefbe5b8099342057cf272ef4&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;74c3f5a1..5af21304&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3 Regressions, 1 Improvements, 6 Mixed; 1 of them in rollups
65 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/d18e18944c4ab14988ca5219b17530454d133474/triage/2024-02-20.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3558"&gt;eRFC: Iterate on and stabilize libtest's programmatic output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3537"&gt;RFC: Make Cargo respect minimum supported Rust version (MSRV) when selecting dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id="rust"&gt;&lt;a class="toclink" href="#rust"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Rust&lt;/a&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/118247"&gt;change equate for binders to not rely on subtyping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/120393"&gt;Implement RFC 3373: Avoid non-local definitions in functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/96992"&gt;Tracking Issue for &lt;code&gt;waker_getters&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/119888"&gt;Stabilize the &lt;code&gt;#[diagnostic]&lt;/code&gt; namespace and &lt;code&gt;#[diagnostic::on_unimplemented]&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/80970"&gt;Tracking Issue for cfg-target-abi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/120805"&gt;make non-PartialEq-typed consts as patterns a hard error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/99333"&gt;Allow ?-converting from &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; in functions returning &lt;code&gt;Option&amp;lt;Result&amp;lt;T, E&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/99153"&gt;Add Read Impl for &amp;amp;Stdin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/119536"&gt;Make &lt;code&gt;Barrier::new()&lt;/code&gt; const &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/109691"&gt;Implement &lt;code&gt;Future&lt;/code&gt; for &lt;code&gt;Option&amp;lt;F&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[new] &lt;a href="https://github.com/rust-lang/rfcs/pull/3573"&gt;&lt;code&gt;is&lt;/code&gt; operator for pattern-matching and binding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2024-02-21 - 2024-03-20 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-02-21 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/298991687/"&gt;&lt;strong&gt;Rust for Rustaceans Book Club: Chapter 2 - Types&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-21 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/292763497/"&gt;&lt;strong&gt;Rust Study/Hack/Hang-out&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-22 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298251150/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-27 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/299068302/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-29 | Virtual (Berlin, DE) | &lt;a href="https://berline.rs/"&gt;OpenTechSchool Berlin&lt;/a&gt; + &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://meet.jit.si/RustHackAndLearnBerlin"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://www.meetup.com/rust-berlin/events/298457901/"&gt;&lt;strong&gt;Mirror: Rust Hack n Learn Meetup&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/2024/02/29/rust-hack-and-learn.html"&gt;&lt;strong&gt;Mirror: Berline.rs page&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-29 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298372724/"&gt;&lt;strong&gt;Surfing the Rusty Wireless Waves with the ESP32-C3 Board&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-06 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/299047891/"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-07 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/298368787/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/298341582/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | Hybrid (Virtual + In-person) Munich, DE | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/298507657/"&gt;&lt;strong&gt;Rust Munich 2024 / 1 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-14 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/298406445/"&gt;&lt;strong&gt;Web Frontend Co-Learning (online)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-21 | Seattle, WA, US | &lt;a href="https://www.meetup.com/seattle-rust-user-group/"&gt;Seattle Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seattle-rust-user-group/events/298631832/"&gt;&lt;strong&gt;Seattle Rust User Group Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 | Virtual + In Person (Barcelona, ES) | &lt;a href="https://www.meetup.com/es-ES/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/bcnrust/events/299223178/"&gt;&lt;strong&gt;13th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt; - &lt;a href="https://www.youtube.com/@bcnrust"&gt;Stream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-02-21 | Lyon, FR | &lt;a href="https://www.meetup.com/fr-FR/rust-lyon/"&gt;Rust Lyon&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/fr-FR/rust-lyon/events/298775631/"&gt;&lt;strong&gt;Rust Lyon Meetup #8&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-22 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/298689622/"&gt;&lt;strong&gt;Rust and Talk at Partisia&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-29 | Berlin, DE | &lt;a href="https://www.meetup.com/rust-berlin/"&gt;Rust Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-berlin/events/299190389/"&gt;&lt;strong&gt;Rust and Tell - Season start 2024&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-12 | Munich, DE + Virtual | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/298507657/"&gt;&lt;strong&gt;Rust Munich 2024 / 1 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-19 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/299028814/"&gt;&lt;strong&gt;Hack Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-20 | Girona, ES | &lt;a href="https://www.meetup.com/rust-girona/"&gt;Rust Girona&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-girona/events/299172343/"&gt;&lt;strong&gt;Introduction to programming Microcontrollers with Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26 | Barcelona, ES + Virtual | &lt;a href="https://www.meetup.com/es-ES/bcnrust/"&gt;BcnRust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/es-ES/bcnrust/events/299223178/"&gt;&lt;strong&gt;13th BcnRust Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-26, 2024-03-28 | London, UK | &lt;a href="https://www.rustnationuk.com/"&gt;Rust Nation UK&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rustnationuk.com/"&gt;&lt;strong&gt;Rust Nation 2024&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-02-21 | Boston, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/299054786/"&gt;&lt;strong&gt;Evening Boston Rust Meetup at Microsoft, February 21&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-22 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/mv-rust-meetup/"&gt;Mountain View Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mv-rust-meetup/events/299043763/"&gt;&lt;strong&gt;Rust Meetup at Hacker Dojo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-28 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/297380841/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-07 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/mv-rust-meetup/"&gt;Mountain View Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mv-rust-meetup/events/299043793/"&gt;&lt;strong&gt;Rust Meetup at Hacker Dojo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2024-02-27 | Canberra, ACT, AU | &lt;a href="https://www.meetup.com/rust-canberra/"&gt;Canberra Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-canberra/events/297650401/"&gt;&lt;strong&gt;February Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-27 | Sydney, NSW, AU | &lt;a href="https://www.meetup.com/rust-sydney/"&gt;Rust Sydney&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-sydney/events/298892952/"&gt;&lt;strong&gt;🦀 spire ⚡ &amp;amp; Quick&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-02-29 | Brisbane, QLD, AU | &lt;a href="https://www.meetup.com/rust-brisbane/"&gt;Rust Brisbane&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-brisbane/events/299304438/"&gt;&lt;strong&gt;February Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-03-05 | Auckland, NZ | &lt;a href="https://www.meetup.com/rust-akl/"&gt;Rust AKL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/299158887/"&gt;&lt;strong&gt;Rust AKL: Introduction to Embedded Rust + The State of Rust UI&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/1arr8xi/official_rrust_whos_hiring_thread_for_jobseekers"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Shared mutable state is evil, and you can solve it by forbidding mutation, or by forbidding sharing. Rust supports both.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://lobste.rs/s/fud3fk/from_1s_4ms#c_relksr"&gt;kornel on Lobste.rs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1535"&gt;Aleksey Kladov&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/1awuo07/this_week_in_rust_535/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 21 Feb 2024 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2024-02-21:/blog/2024/02/21/this-week-in-rust-535/</guid><category>This Week in Rust</category></item></channel></rss>