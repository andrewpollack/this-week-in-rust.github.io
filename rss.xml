<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 27 Oct 2021 00:00:00 -0400</lastBuildDate><item><title>This Week in Rust 414</title><link>https://this-week-in-rust.org/blog/2021/10/27/this-week-in-rust-414/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html"&gt;Announcing Rust 1.56.0 and Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="foundation"&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/posts/2021-10-26-member-spotlight-tag1/"&gt;Member Spotlight: Tag1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerkour.com/blog/black-hat-rust-october-update/"&gt;Black Hat Rust October Update (now in Beta üçæ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-10-25.html"&gt;SixtyFPS (GUI crate) weekly report for 24th of October 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gloo-rs.web.app/blog/release-0.4.0/"&gt;Releasing Gloo v0.4.0: Gloo is a modular toolkit for building fast, reliable Web applications and libraries with Rust and Wasm &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0010/"&gt;This week in Fluvio #10: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datafuselabs.github.io/weekly/2021-10-27-databend-weekly/"&gt;This week in Databend #13: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/10/25/changelog-100.html"&gt;Rust Analyzer Changelog #100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/10/25/changelog-158.html"&gt;IntelliJ Rust Changelog #158&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/blog/63/async-on-embedded-present-and-future"&gt;Async on Embedded: Present &amp;amp; Future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://passcod.name/technical/no-time-for-chrono.html"&gt;No Time for Chrono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://senyosimpson.com/short-forms/pointer-fu-tokio/"&gt;Pointer Fu: An adventure in the Tokio code base&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/joshchoo/how-actix-webs-application-state-and-data-extractor-works-internally-fm1"&gt;How actix-web's application state and Data extractor works internally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coredumped.dev/2021/10/21/building-an-emacs-lisp-vm-in-rust/"&gt;Building an Emacs lisp VM in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://whileydave.com/2021/10/26/test-driving-the-rust-model-checker-rmc/"&gt;Test-Driving the Rust Model Checker (RMC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thecodedmessage.com/posts/hello-rust/"&gt;Sayonara, C++, and hello to Rust!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seiya.me/writing-linux-clone-in-rust"&gt;Writing a Linux-compatible kernel in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://estebank.github.io/sustainable-growth-and-visibility.html"&gt;Sustainable growth and visibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/039-rust-1.54-1.55/"&gt;What's New in Rust 1.54 and 1.55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/043-bastian-gruber/"&gt;Rust Web Development with Bastian Gruber&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.osohq.com/post/cross-platform-rust-libraries"&gt;ü¶Ä How We Built a Cross-Platform Library with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://burgers.io/custom-logging-in-rust-using-tracing-part-2"&gt;Custom Logging in Rust using tracing and tracing-subscriber, part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.greyblake.com/blog/2021-10-25-builder-with-typestate-in-rust/"&gt;Builder with typestate in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dimfeld/starting-with-solana-part-2-17gc"&gt;Starting with Solana, Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/tjmaynes/implementing-the-health-check-api-pattern-with-rust-29ll"&gt;Implementing the Health Check API Pattern with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/logrocket/icedrs-tutorial-how-to-build-a-simple-rust-frontend-web-app-2pg7"&gt;Iced.rs tutorial: How to build a simple Rust frontend web app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayush1325/writing-a-qml-application-in-rust-part-1-3pgi"&gt;Writing a QML Application in Rust (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/21/10/rust-embedded-development"&gt;Use Rust for embedded development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yieldcode.blog/supercharge-nodejs-with-rust/"&gt;Supercharge Your NodeJS With Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itnext.io/implementing-the-health-check-api-pattern-with-rust-eaef04cb4d2d"&gt;Implementing the Health Check API Pattern with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fasterthanli.me/articles/my-ideal-rust-workflow"&gt;My ideal Rust workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reltech.substack.com/p/getting-started-with-rust-on-a-raspberry"&gt;Getting Started with Rust on a Raspberry Pi Pico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://medium.com/@otukof/build-your-text-editor-with-rust-final-part-4c841a649900"&gt;Build Your Text Editor With Rust! Final Part&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=rBGPAmfsVjo"&gt;Writing a Programming Language (in Rust) 2: Branching, Literals and Addition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://blog.tarkalabs.com/how-to-build-a-web-application-using-rust-part-iii-ed6511ebaa97"&gt;How to Build a Web Application using Rust ‚Äî Part III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=rAVHBl3W9W8"&gt;FLTK Rust: intro into the fltk-evented crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=5rwnWfMJflU"&gt;Rust Programming - Macros Quick Dev Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=ePMbrtzZz9E"&gt;Rewriting a C++ project in Rust to learn the language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Yd6PvqNct-o"&gt;rg3d - live coding session #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Nuba5LNy5cY"&gt;Understand Rust's Borrow Checker in 5 Minutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mojosd.medium.com/rust-code-reading-club-8fe356287049"&gt;Rustc Code Reading Club&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/ezanmoto"&gt;Writing a Programming Language (in Rust): Weekly Stream, Saturdays at 15:00~17:00 GMT+1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://quickwit.io/blog/search-a-sorted-block/"&gt;A cool Rust optimization story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://finance.yahoo.com/news/concordium-devx-initiative-launches-rust-131500585.html"&gt;Concordium‚Äôs DevX Initiative Launches Rust Maintainers Sponsorship Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linkerd.io/2021/10/26/how-linkerd-retries-http-requests-with-bodies/"&gt;How Linkerd retries HTTP requests with bodies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/coinmonks/build-a-scalable-trading-bot-with-rust-over-the-weekend-part-2-bb7d703eebe7"&gt;Build a Scalable Trading Bot With Rust Over the Weekend ‚Äî Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://web.crev.dev/rust-reviews/"&gt;cargo-crev&lt;/a&gt;, a tool to distribute security review of the crates we all depend on.&lt;/p&gt;
&lt;p&gt;As there was no suggestion this week, llogiq is pretty thankful to himself for choosing this crate.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wahn/rs_pbrt/issues/136"&gt;wahn/rs_pbrt - [parse_blend_file] Attic Close-up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kdr-aus/ogma/issues/16"&gt;kdr-aus/ogma - Implement filter on Str input type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kdr-aus/divvy/issues/2"&gt;kdr-aus/ogma - Implement &lt;code&gt;From&amp;lt;char for Str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2121"&gt;ockam-network/ockam - Compile to WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1804"&gt;ockam-network/ockam - Ockam TCP Transport using smoltcp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;353 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-10-04..2021-10-11"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/83233"&gt;implement &lt;code&gt;split_array&lt;/code&gt; and &lt;code&gt;split_array_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/85254"&gt;normalize MIR with &lt;code&gt;RevealAll&lt;/code&gt; before optimizations.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86479"&gt;automatic exponential formatting of &lt;code&gt;f&lt;/code&gt;{&lt;code&gt;32&lt;/code&gt;, &lt;code&gt;64&lt;/code&gt;} in &lt;code&gt;Debug&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86984"&gt;reject octal zeros in &lt;code&gt;IPv4&lt;/code&gt; addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87404"&gt;add support for artifact size profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87440"&gt;remove unnecessary condition in &lt;code&gt;Barrier::wait()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88041"&gt;make all proc-macro back-compat lints deny-by-default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88300"&gt;stabilise &lt;code&gt;unix_process_wait_more&lt;/code&gt;, extra &lt;code&gt;ExitStatusExt&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88624"&gt;stabilize feature &lt;code&gt;saturating_div&lt;/code&gt; for rust 1.58.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88789"&gt;remove unnecessary bound on `Zip' specialization impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88860"&gt;deduplicate &lt;code&gt;panic_fmt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89257"&gt;give better error for &lt;code&gt;macro_rules name&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89292"&gt;stabilize &lt;code&gt;CString::from_vec_with_nul&lt;/code&gt;(&lt;code&gt;_unchecked&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89427"&gt;point at overlapping impls when type annotations are needed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89558"&gt;add rustc lint, warning when iterating over hashmaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89829"&gt;consider types appearing in const expressions to be invariant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89889"&gt;use the "nice E0277 errors" for &lt;code&gt;!Send&lt;/code&gt; &lt;code&gt;impl Future&lt;/code&gt; from foreign crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89895"&gt;don't mark &lt;code&gt;for&lt;/code&gt; loop iter expression as desugared&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89944"&gt;change &lt;code&gt;Duration::&lt;/code&gt;(&lt;code&gt;try_&lt;/code&gt;)&lt;code&gt;from_secs_&lt;/code&gt;{&lt;code&gt;f32&lt;/code&gt;, &lt;code&gt;f64&lt;/code&gt;} underflow error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89956"&gt;suggest a case insensitive match name regardless of levenshtein distance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90077"&gt;make &lt;code&gt;From&lt;/code&gt; impls of &lt;code&gt;NonZero&lt;/code&gt; integer const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90009"&gt;make more &lt;code&gt;From&lt;/code&gt; impls &lt;code&gt;const&lt;/code&gt; (libcore)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90162"&gt;mark {&lt;code&gt;array&lt;/code&gt;, &lt;code&gt;slice&lt;/code&gt;}&lt;code&gt;::&lt;/code&gt;{&lt;code&gt;from_ref&lt;/code&gt;, &lt;code&gt;from_mut&lt;/code&gt;} as &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90010"&gt;avoid overflow in &lt;code&gt;VecDeque::with_capacity_in()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90099"&gt;fix MIRI UB in &lt;code&gt;Vec::swap_remove&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90104"&gt;implement coherence checks for negative trait impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/90117"&gt;make &lt;code&gt;RSplit&amp;lt;T, P&amp;gt;: Clone  not require&lt;/code&gt;T: Clone`&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/104"&gt;codegen-gcc: disable strict aliasing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7838"&gt;clippy: warn on structs with a trailing zero-sized array but no &lt;code&gt;repr&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7840"&gt;clippy: cover &lt;code&gt;Result&lt;/code&gt; for &lt;code&gt;question_mark&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7801"&gt;clippy: make &lt;code&gt;useless_format&lt;/code&gt; recognize &lt;code&gt;format!("")&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7811"&gt;clippy: avoid &lt;code&gt;eq_op&lt;/code&gt; in test code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7849"&gt;clippy: fix FP in &lt;code&gt;missing_safety_doc&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7850"&gt;clippy: fix FP: no lint when cast is coming from &lt;code&gt;signum&lt;/code&gt; method call for &lt;code&gt;cast_possible_truncation&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7856"&gt;clippy: &lt;code&gt;missing_safety_doc&lt;/code&gt;: handle 'implementation safety' headers as well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7865"&gt;clippy: fix &lt;code&gt;match_str_case_mismatch&lt;/code&gt; on uncased chars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;Multiple regressions this week, several of which were in rollups, without much
to balance them out on the improvements front.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=d45ed7502ad225739270a368528725930f54b7b6&amp;amp;end=3c8f001d454b1b495f7472d8430ef8fdf10aac11&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;d45ed7..3c8f001d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 Regressions, 4 Improvements, 3 Mixed; 3 of them in rollups;
35 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-10-26.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3184"&gt;Thread local Cell methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/2972"&gt;Constrained Naked Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89999"&gt;Update &lt;code&gt;std::env::temp_dir&lt;/code&gt; to use GetTempPath2 on Windows when available.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89551"&gt;Stabilize &lt;code&gt;const_raw_ptr_deref&lt;/code&gt; for &lt;code&gt;*const T&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88805"&gt;Clarification of default socket flags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88714"&gt;use CLOCK_BOOTTIME in &lt;code&gt;Instant::now&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88601"&gt;Implement &lt;code&gt;Termination&lt;/code&gt; for &lt;code&gt;Result&amp;lt;Infallible, E&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/87512"&gt;Port clippy lint &lt;code&gt;redundant_field_names&lt;/code&gt; to compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/87479"&gt;GATs: Decide whether to have defaults for &lt;code&gt;where Self: 'a&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85766"&gt;Stabilize &lt;code&gt;File::options()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81793"&gt;Tracking Issue for relaxed struct unsizing rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81383"&gt;Tracking Issue for &lt;code&gt;option_result_unwrap_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/71126"&gt;Tracking Issue for &lt;code&gt;destructuring_assignment&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/27747"&gt;Tracking issue for &lt;code&gt;slice_concat_ext&lt;/code&gt; stabilization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3185"&gt;Static async fn in traits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://skillsmatter.com/meetups/13606-rust-london-october2021#community"&gt;October 27, 2021, London, UK - Rust London Ockam Takeover - Rust London User Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Desert-Rustaceans/events/281215858/"&gt;October 27, 2021, Phoenix, AZ - Desert Rust Halloween - Desert Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cph.rs/"&gt;October 28, 2021, Copenhagen, DK - Hack Night #22 - Copenhagen Rust Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/281558952/"&gt;November 2, 2021, Buffalo, NY, US - First Tuesdays - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccpbmb/"&gt;November 9, 2021, Seattle, WA, US - Monthly Meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/9Xj8H2EXTD"&gt;November 10, 2021, Malaysia - Rust Meetup - Rust Malaysia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsyccpbnb/"&gt;November 10, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Snapview&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://snapview.jobs.personio.de/job/381815?display=en&amp;amp;language=en"&gt;(Senior) Rust Backend Engineer (m/f/d (Remote))&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Quickwit&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quickwit.io/jobs/distributed-software-engineer"&gt;Senior Rust Engineer (Remote: UTC-1..=UTC+9)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Seaplane&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/seaplane/j/CEFCB5F5B8/"&gt;Rust Software Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Little Bear Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/little-bear-labs/j/D88494543C/"&gt;Senior Backend Engineer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken?team=Engineering"&gt;Several Rust Engineering Positions Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Subspace Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/subspacelabs"&gt;Several Rust Engineering Positions Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I think in general "force the user to think about the extra cases, and be explicit about ignoring them" is definitely idiomatic rust.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://internals.rust-lang.org/t/pre-rfc-add-a-chunk-iterator-to-libcore/15101/16"&gt;Daniel Wagner Hall on rust-internals&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1127"&gt;robin&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/k5nsab/this_week_in_rust_367/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 27 Oct 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-10-27:blog/2021/10/27/this-week-in-rust-414/</guid></item><item><title>This Week in Rust 413</title><link>https://this-week-in-rust.org/blog/2021/10/20/this-week-in-rust-413/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="foundation"&gt;Foundation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/posts/2021-10-18-crates-io-oncall-ferrous-systems/"&gt;Adios Pagers: New Developments on Crates.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0009/"&gt;This week in Fluvio #9: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-10-18.html"&gt;SixtyFPS (GUI crate): Changelog for 17th of October 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sea-ql.org/SeaORM/blog/2021-10-15-whats-new-in-0.3.0/"&gt;What's new in SeaORM 0.3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/ogma-project-0-1-release/65848"&gt;Annoucing the ogma project v0.1: a shell-like scripting language for tabular data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mabez.dev/blog/posts/esp-rust-18-10-2021/"&gt;Rust on Espressif chips - 18-10-2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/10/18/changelog-99.html"&gt;Rust Analyzer Changelog #99&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datafuselabs.github.io/weekly/2021-10-20-databend-weekly/"&gt;This week in Databend #12: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/readme/featured/rust-programming"&gt;How Rust developers are making the web safer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkolaczk.github.io/overhead-of-optional/"&gt;Overhead of Returning Optional Values in Java and Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nullderef.com/blog/web-api-client/"&gt;Designing an API Client in Rust: New Rspotify Version a Year Later&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://odysee.com/@Pipeliner:f/Rust-VFX:a?r=6Ac8ttKMEn1Airp7gL6QvZpi2tcV9DCX"&gt;[Rust Working Group] Rust for Visual Effects - Anders Langlands, Owen Nelson, Luke Titley&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/testing-proc-macros/"&gt;Structuring, testing and debugging procedural macro crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://burgers.io/custom-logging-in-rust-using-tracing"&gt;Custom Logging in Rust using tracing and tracing-subscriber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pfesenmeier.github.io/wsl2-and-embedded-development/"&gt;WSL2 and Embedded Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jeffa.io/rust_guide_generics_demystified_part_2"&gt;Rust Guide: Generics Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://patrickfreed.github.io/rust/2021/10/15/making-slow-rust-code-fast.html"&gt;Making slow Rust code fast - performance tuning using Criterion.rs and flamegraphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.greyblake.com/blog/2021-10-19-builder-pattern-in-rust/"&gt;Builder pattern in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cogoo/solana-how-to-send-custom-instructions-via-instruction-data-4g9g"&gt;Solana: How to send custom instructions via instruction data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexis-lozano.com/hexagonal-architecture-in-rust-7/"&gt;Hexagonal architecture in Rust #7 - Long-lived repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[JA] &lt;a href="https://dev.to/fmtweisszwerg/rust-guan-shu-obarodo-yin-shu-noshu-gayi-naruchang-he-22fb"&gt;Rust Èñ¢Êï∞„Ç™„Éº„Éê„Éº„É≠„Éº„Éâ„ÄÅÂºïÊï∞„ÅÆÊï∞„ÅåÁï∞„Å™„ÇãÂ†¥Âêà&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=SvFPdgGwzTQ"&gt;Getting started with Rust ü¶Ä 2021: 7b. Building a GUI app in Rust [Part B]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://vimeo.com/632377558"&gt;Processing Shaders with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=AI1M7Wr4_6w"&gt;"Streaming video analysis in Rust using Pravega" by Tom Kaitchuck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Vg1LGHuAPP8"&gt;Rust for Java Developers 3/3 - Understanding Ownership&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fy.blackhats.net.au/blog/html/2021/10/08/results_from_the_opensuse_2021_rust_survey.html"&gt;Results from the OpenSUSE 2021 Rust Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aswf.io/news/academy-software-foundation-announces-formation-of-rust-working-group-initial-release-of-openexr-rust-binding/"&gt;Academy Software Foundation Announces Formation of Rust Working Group, Initial Release of OpenEXR Rust Binding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tech.marksblogg.com/roapi-rust-data-api.html"&gt;ROAPI: An API Server for Static Datasets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://docs.rs/serde_with"&gt;serde_with&lt;/a&gt;, a crate of helper macros to ease implementing serde traits for your types.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/971"&gt;piegames&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821/395"&gt;Paccat is looking for contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2051"&gt;ockam - Use Zeroize for temporary sensitive data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/2055"&gt;ockam - Remove None errors from our error enums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;353 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-10-04..2021-10-11"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89965"&gt;fix ICE with &lt;code&gt;let...else&lt;/code&gt; and &lt;code&gt;ref mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89946"&gt;fix an ICE with TAITs and Future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89870"&gt;suggest &lt;code&gt;Box::pin&lt;/code&gt; when &lt;code&gt;Pin::new&lt;/code&gt; is used instead&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89390"&gt;fix incorrect &lt;code&gt;Box::pin&lt;/code&gt; suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89974"&gt;nicer error message if the user attempts to do &lt;code&gt;let&lt;/code&gt;...&lt;code&gt;else if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89124"&gt;index and hash HIR as part of lowering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89514"&gt;polymorphization: shims and predicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88717"&gt;optimize &lt;code&gt;VecDeque::append&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88788"&gt;speedup int &lt;code&gt;log10&lt;/code&gt; branchless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89509"&gt;stabilize &lt;code&gt;unreachable_unchecked&lt;/code&gt; as &lt;code&gt;const fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84096"&gt;use &lt;code&gt;BCryptGenRandom&lt;/code&gt; instead of &lt;code&gt;RtlGenRandom&lt;/code&gt; on Windows.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89953"&gt;make &lt;code&gt;Option::as_mut&lt;/code&gt; const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89977"&gt;make &lt;code&gt;Result::as_mut&lt;/code&gt; const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88540"&gt;add &lt;code&gt;slice::swap_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89507"&gt;add &lt;code&gt;#[repr(i8)]&lt;/code&gt; to &lt;code&gt;Ordering&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89651"&gt;add &lt;code&gt;Poll::ready&lt;/code&gt; and revert stabilization of &lt;code&gt;task::ready!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89337"&gt;avoid allocations and copying in &lt;code&gt;Vec::leak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89815"&gt;rustdoc: associated consts sidebar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5026"&gt;rustfmt: stabilize &lt;code&gt;disable_all_formatting&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7832"&gt;clippy: fix false positive of &lt;code&gt;implicit_saturating_sub&lt;/code&gt; with &lt;code&gt;else&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7788"&gt;clippy: do not expand macros in &lt;code&gt;equatable_if_let&lt;/code&gt; suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7824"&gt;clippy: &lt;code&gt;unnecessary_sort_by&lt;/code&gt; checks if argument implements &lt;code&gt;Ord&lt;/code&gt; trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7791"&gt;clippy: allow giving reasons for &lt;code&gt;disallowed_types&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7682"&gt;clippy: implement &lt;code&gt;uninit_vec&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7743"&gt;clippy: add &lt;code&gt;format_in_format_args&lt;/code&gt; and &lt;code&gt;to_string_in_format_args&lt;/code&gt; lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7805"&gt;clippy: add lint &lt;code&gt;transmute_num_to_bytes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7806"&gt;clippy: add &lt;code&gt;match_str_case_mismatch&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A week where improvements outweigh regressions. The highlight of the week is the change to split out LLVM profile guided optimization (PGO) and using clang 13 to compile LLVM which led to improvements in many real world crates (e.g., cargo) in the range of 10%. Most regressions were limited and at most in the less than 1% range. We are seeing more performance changes in rollups which are supposed to be performance neutral. We'll have to decide how to best address this.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=9475e609b8458fff9e444934a6017d2e590642cf&amp;amp;end=d45ed7502ad225739270a368528725930f54b7b6&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;9475e609..d45ed750&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3 Regressions, 4 Improvements, 2 Mixed; 2 of them in rollups;
34 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-10-19.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rfcs/pull/3176"&gt;Multiple artifact deps on the same crate with different names, for different targets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89677"&gt;Stabilize is_symlink() for Metadata and Path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88601"&gt;Implement &lt;code&gt;Termination&lt;/code&gt; for &lt;code&gt;Result&amp;lt;Infallible, E&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/pull/87512"&gt;Port clippy lint &lt;code&gt;redundant_field_names&lt;/code&gt; to compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87339"&gt;Make two Paths unequal if they differ in trailing slash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/85766"&gt;Stabilize &lt;code&gt;File::options()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81793"&gt;Tracking Issue for relaxed struct unsizing rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/81383"&gt;Tracking Issue for &lt;code&gt;option_result_unwrap_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/77174"&gt;Tracking Issue for inherent_ascii_escape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/71126"&gt;Tracking Issue for &lt;code&gt;destructuring_assignment&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/27747"&gt;Tracking issue for &lt;code&gt;slice_concat_ext&lt;/code&gt; stabilization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3184"&gt;Thread local Cell methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3183"&gt;RFC: Console Input Simplified&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/281236385/"&gt;October 20, 2021, Buffalo, NY, US - Buffalo Rust User Group, Alternate Day - Buffalo Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/zkqvjsyccnbbc/"&gt;October 20, 2021, Vancouver, BC, CA - WASM plugin for Istio - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-meetup.ir/"&gt;October 22, 2021, Iran - The First Rust Iran online meetup - Rust Iran Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/281406298"&gt;October 26, 2021, Dublin, IE - Rust Dublin October Remote Meetup üéÉ - Rust Dublin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;October 26, 2021, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwryccnbjc/"&gt;October 26, 2021, Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://skillsmatter.com/meetups/13606-rust-london-october2021#community"&gt;October 27, 2021, London, UK - Rust London Ockam Takeover - Rust London User Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Desert-Rustaceans/events/281215858/"&gt;October 27, 2021, Phoenix, AZ - Desert Rust Halloween - Desert Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cph.rs/"&gt;October 28, 2021, Copenhagen, DK - Hack Night #22 - Copenhagen Rust Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/281558952/"&gt;November 2, 2021, Buffalo, NY, US - First Tuesdays - Buffalo Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Modeldrive&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.modeldrive.com/jobs"&gt;Senior Rust Engineer (London / Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Connected Cars&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://connectedcars.io/jobs/embedded-software-engineer"&gt;Software Engineering Lead (Denmark)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bytewax&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bytewax.notion.site/Senior-Software-Engineer-9d83531eb0704afd8f323e4080e0d620"&gt;Senior Software Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Timescale&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://boards.greenhouse.io/timescale/jobs/5542785002"&gt;Senior Rust Engineer (Remote: UTC-8 to UTC-5)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Immunant&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://immunant.com/jobs/"&gt;Systems Programmer/Rustacean (Optionally Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Nexthink&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.smartrecruiters.com/Nexthink/743999779427018"&gt;Site Reliability Engineer (Madrid, ES)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Rust Engineer - Banking (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The biggest failure in Rust‚Äòs communication strategy has been the inability to explain to non-experts that unsafe abstractions are the point, not a sign of failure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://mobile.twitter.com/withoutboats/status/1447512045558149122"&gt;withoutboats on twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1124"&gt;Alice Ryhl&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/qcgk2e/this_week_in_rust_413/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 20 Oct 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-10-20:blog/2021/10/20/this-week-in-rust-413/</guid></item><item><title>This Week in Rust 412</title><link>https://this-week-in-rust.org/blog/2021/10/13/this-week-in-rust-412/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2021/10/08/Lang-team-Oct-update.html"&gt;Lang team October update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aaronerhardt.github.io/blog/posts/announcing_relm4_v0.2/"&gt;Announcing Relm4 v0.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-10-11.html"&gt;SixtyFPS (GUI crate) weekly update for 10th of October 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0008/"&gt;This week in Fluvio #8: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-32/"&gt;Knurling-rs changelog #32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gfx-rs.github.io/2021/10/07/release-0.11.html"&gt;wgpu: Release of 0.11 with beta WebGL support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datafuselabs.github.io/weekly/2021-10-13-databend-weekly/"&gt;This week in Databend #11: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rtl-sdr.com/futuresdr-an-async-sdr-framework-implemented-in-rust/"&gt;FutureSDR: An Async Software Defined Radio Framework Implemented in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/10/11/changelog-98.html"&gt;Rust Analyzer Changelog #98&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2021/10/11/changelog-157.html"&gt;IntelliJ Rust Changelog #157&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kentiklabs.com/blog/container-visibility/"&gt;Convis - Open Source Container Visibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/rust/2021/10/19/debugging-rust-in-jetbrains-ides-state-of-affairs/"&gt;Debugging Rust in JetBrains IDEs: state of affairs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gamedev.rs/news/026/"&gt;This Month in Rust GameDev #26 - September 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tevps.net/blog/2021/10/10/awesome-rust-projects-hacktoberfest/"&gt;Awesome Rust projects for Hacktoberfest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swatinem.de/blog/zero-cost-async/"&gt;Rust async can truly be zero-cost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://davidkoloski.me/blog/intelligent-brute-forcing/"&gt;Intelligent brute forcing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://acrimon.dev/blog/async-locks/"&gt;Locks in asynchronous applications in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.getsynth.com/docs/blog/2021/10/11/nightly"&gt;The nightly elephant in the room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/871283/"&gt;Rust and GCC, two different ways&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.p99conf.io/session/whoops-i-rewrote-it-in-rust/"&gt;Whoops! I Rewrote It in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.p99conf.io/session/rust-is-safe-but-is-it-fast/"&gt;Rust Is Safe. But Is It Fast?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=cuvp-e4ztC0"&gt;Rust, Wright's Law, and the Future of Low-Latency Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jeffa.io/rust_guide_generics_demystified_part_1"&gt;Rust Guide: Generics Demystified Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nickymeuleman.netlify.app/blog/multithreading-rust"&gt;Multithreading in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.greyblake.com/blog/2021-10-11-phantom-types-in-rust/"&gt;Phantom Types in Rust üëª&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gill.net.in/posts/pic32-blink-led-rust/"&gt;Programming PIC32 Microcontroller with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vorner.github.io/2021/10/10/testing-with-spirit.html"&gt;Testing with Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexis-lozano.com/hexagonal-architecture-in-rust-6/"&gt;Hexagonal architecture in Rust #6 - CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.secondstate.io/articles/embed-javascript-in-rust/"&gt;Incorporating JavaScript into a Rust app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itnext.io/rust-iterators-2f0bb958aa08"&gt;Rust Iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ballpointcarrot.net/posts/rust-arm-lambdas/"&gt;Running Rust on AWS Lambda on ARM64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://source.android.com/setup/build/rust/building-rust-modules/overview"&gt;Android Rust Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/akkoro/lambda-function-http-authorization-with-auth0-and-assemblylift-webassembly-lambda-api-gateway-rust-4fl8"&gt;Lambda function HTTP authorization with Auth0 and AssemblyLift (WebAssembly + Lambda + API Gateway + Rust) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dineshgdk/game-of-life-in-rust-4mfc"&gt;Game of Life in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://medium.com/@otukof/build-your-text-editor-with-rust-part-6-3cff61dc2de5"&gt;Build Your Text Editor With Rust! Part 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/mileswatson/url-shortener-with-rust-svelte-aws-6-deploying-to-aws-2gi0"&gt;URL Shortener with Rust, Svelte, &amp;amp; AWS (6/): Deploying to AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series]&lt;a href="https://dev.to/penumbra23/container-runtime-in-rust-part-ii-34em"&gt;Container Runtime in Rust - Part II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=NtUkr_z7l84"&gt;Getting started with Rust ü¶Ä 2021: 7a. Building a GUI app in Rust [Part A]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=bnnacleqg6k"&gt;Type-Driven API Design in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=rDoqT-a6UFg"&gt;Visualizing memory layout of Rust's data types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=dHkzSZnYXmk"&gt;Crust of Rust: functions, closures, and their traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=LDlBTbO8oQ4"&gt;LRG-01: The essence of Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/fzyzcjy/flutter_rust_bridge"&gt;flutter_rust_bridge&lt;/a&gt;, a memory-safe binding generator for Flutter/Dart ‚Üî Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/972"&gt;fzyzcjy&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1998"&gt;ockam - Make TryAsyncClone trait derivable. Add TryAsyncClone impl for structs that implement Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1999"&gt;ockam - Use async_trait through ockam_core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/this-week-in-rust/issues/2469"&gt;This Week in Rust is looking for additional editors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;353 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-10-04..2021-10-11"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88952"&gt;add new tier-3 target: armv7-unknown-linux-uclibceabihf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88090"&gt;perform type inference in range pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88780"&gt;add abs_diff for integer types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89082"&gt;implement #85440 (Random test ordering)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89413"&gt;correctly handle supertraits for min_specialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89323"&gt;consider unfulfilled obligations in binop errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89461"&gt;add &lt;code&gt;deref_into_dyn_supertrait&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89501"&gt;note specific regions involved in 'borrowed data escapes' error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89528"&gt;fix suggestion to borrow when casting from pointer to reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89428"&gt;feature gate the non_exhaustive_omitted_patterns lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89423"&gt;fix ICE caused by non_exaustive_omitted_patterns struct lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89454"&gt;perf: only check for &lt;code&gt;rustc_trivial_field_reads&lt;/code&gt; attribute on traits, not items, impls, etc.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89534"&gt;perf: introduce &lt;code&gt;tcx.get_diagnostic_name&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7770"&gt;improved help message for &lt;code&gt;suspicious_map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89585"&gt;emit item no type error even if type inference fails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89582"&gt;optimize File::read_to_end and read_to_string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89576"&gt;prevent error reporting from outputting a recursion error if it finds an ambiguous trait impl during suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89597"&gt;create more accurate debuginfo for vtables.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89596"&gt;make cfg imply doc(cfg)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89633"&gt;show detailed expected/found types in error message when trait paths are the same&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89632"&gt;fix docblock code display on mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89622"&gt;use correct edition for panic in (&lt;code&gt;debug_&lt;/code&gt;)&lt;code&gt;assert!()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75644"&gt;add &lt;code&gt;core::array::from_fn&lt;/code&gt; and &lt;code&gt;core::array::try_from_fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86434"&gt;add &lt;code&gt;Ipv6Addr::is_benchmarking&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87601"&gt;add functions to add unsigned and signed integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87091"&gt;implement advance_(back_)_by on more iterators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86525"&gt;array &lt;code&gt;.len()&lt;/code&gt; MIR optimization pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89270"&gt;&lt;code&gt;path.push()&lt;/code&gt; should work as expected on windows verbatim paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89219"&gt;use get_unchecked in &lt;code&gt;str::&lt;/code&gt;(&lt;code&gt;r&lt;/code&gt;)&lt;code&gt;split_once&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87993"&gt;stabilize &lt;code&gt;try_reserve&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89735"&gt;stabilize &lt;code&gt;proc_macro::is_available&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89508"&gt;stabilize &lt;code&gt;const_panic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88436"&gt;stabilize &lt;code&gt;command_access&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2505"&gt;futures: make &lt;code&gt;futures::task::noop_waker_ref&lt;/code&gt; available without &lt;code&gt;std&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/100"&gt;&lt;code&gt;rustc_codegen_gcc&lt;/code&gt;: add missing cast and change some bitcasts to casts to avoid a gimple verification failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5020"&gt;rustfmt: stabilize &lt;code&gt;match_block_trailing_comma&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/4994"&gt;rustfmt: wrap long array and slice patterns.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88816"&gt;rustdoc: migrate to table so the gui can handle &amp;gt;2k constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7748"&gt;clippy: add &lt;code&gt;undocumented_unsafe_blocks&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7795"&gt;clippy: fix false positive in external macros for &lt;code&gt;mut_mut&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7794"&gt;clippy: fix false positive when &lt;code&gt;Drop&lt;/code&gt; and &lt;code&gt;Copy&lt;/code&gt; involved in &lt;code&gt;field_reassign_with_default&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7772"&gt;clippy: handle intra-doc links in &lt;code&gt;doc_markdown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7800"&gt;clippy: refactor &lt;code&gt;clippy::match_ref_pats&lt;/code&gt; to check for multiple reference patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7782"&gt;clippy: make &lt;code&gt;shadow_reuse&lt;/code&gt; suggestion less verbose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7793"&gt;clippy: add option to &lt;code&gt;new_lint&lt;/code&gt; to generate MSRV enabled lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7774"&gt;clippy: drop exponent on suggestion when exponent value is zero&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A relatively quiet week: two smallish regressions, and one largish regression that is isolated to doc builds. A couple of nice small wins as well.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=25ec8273855fde2d72ae877b397e054de5300e10&amp;amp;end=9475e609b8458fff9e444934a6017d2e590642cf&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;25ec82..9475e6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 Regressions, 2 Improvements, 2 Mixed; 1 of them in rollups
42 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-10-12.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89677"&gt;Stabilize is_symlink() for Metadata and Path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89542"&gt;Partially stabilize duration_consts_2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89509"&gt;Stabilize unreachable_unchecked as const fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89507"&gt;Add &lt;code&gt;#[repr(i8)]&lt;/code&gt; to Ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89433"&gt;Fix ctrl-c causing reads of stdin to return empty on Windows.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88652"&gt;linux/aarch64 Now() should be actually_monotonic()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88300"&gt;Stabilise unix_process_wait_more, extra ExitStatusExt methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88041"&gt;Make all proc-macro back-compat lints deny-by-default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87704"&gt;Windows: Resolve process::Command program without using the current directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87467"&gt;Implement RefUnwindSafe for &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87339"&gt;Make two Paths unequal if they differ in trailing slash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/86984"&gt;Reject octal zeros in IPv4 addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/86479"&gt;Automatic exponential formatting in Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/73179"&gt;Tracking Issue for methods to go from nul-terminated &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; to CString &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust.bettercode.eu/"&gt;October 13, 2021 - betterCode Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/MUCplusplus/events/281231257"&gt;October 13, 2021 - C++/Rust: Learning from Each Other - MUC++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/280981968/"&gt;October 13, 2021, Los Angeles, CA, US - Processing shaders in Rust with Dzmitry Malyshau - Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/281236385/"&gt;October 20, 2021, Buffalo, NY, US - Buffalo Rust User Group, Alternate Day - Buffalo Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/zkqvjsyccnbbc/"&gt;October 20, 2021, Vancouver, BC, CA - WASM plugin for Istio - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsyccnbrb/"&gt;October 13, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-meetup.ir/"&gt;October 22, 2021, IR - The First Rust Iran online meetup - Rust Iran Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;System 76&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://system76.com/careers/pop_os-software-engineer-rust"&gt;Pop! OS Software Engineer (Rust) (Remote US)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Enso&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/enso-org/hiring/blob/main/people/senior-rust-developer.md"&gt;Senior Rust Developer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Second Spectrum&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.secondspectrum.com/careers/opportunities.html#job-780636"&gt;Software Engineer Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is the language where you get the hangover first.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://www.youtube.com/watch?v=ylOpCXI2EMM&amp;amp;t=565s"&gt;unattributed via Niko Matsakis' RustConf keynote&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1122"&gt;Alice Ryhl&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/q7sltn/this_week_in_rust_412/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 13 Oct 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-10-13:blog/2021/10/13/this-week-in-rust-412/</guid></item><item><title>This Week in Rust 411</title><link>https://this-week-in-rust.org/blog/2021/10/06/this-week-in-rust-411/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h2&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;h3 id="projecttooling-updates"&gt;Project/Tooling Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fluvio.io/news/this-week-in-fluvio-0007/"&gt;This week in Fluvio #7: the programmable streaming platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datafuselabs.github.io/weekly/2021-10-06-databend-weekly/"&gt;This week in Databend #10: an elastic and reliable cloud warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sixtyfps.io/thisweek/2021-10-04.html"&gt;SixtyFPS (GUI crate) weekly update for 3rd of October 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thephilbert.io/2021/10/04/gcc-rust-monthly-report-10-september-2021/"&gt;GCC Rust Monthly Report #10 September 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2021/10/04/changelog-97.html"&gt;Rust Analyzer Changelog #97&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amethyst.rs/posts/amethyst--starting-fresh"&gt;Amethyst ‚Äì Starting fresh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="research-and-papers"&gt;Research and Papers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/abs/10.1145/3453483.3454084"&gt;SyRust: automatic testing of Rust libraries with semantic-aware program synthesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocamlpro.github.io/verification_for_dummies/"&gt;Verification for dummies: SMT and Induction&lt;/a&gt; using the &lt;a href="https://github.com/OCamlPro/mikino_bin"&gt;mikino&lt;/a&gt; model-checker&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2110.01098"&gt;Does the Bronze Garbage Collector Make Rust Easier to Use? A Controlled Experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2021-09/"&gt;This Month in Rust OSDev (September 2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustinblockchain.org/newsletters/rib-newsletter-28/"&gt;Rust in Blockchain #28&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codeandbitters.com/published-crate-analysis/"&gt;Does the published crate match the upstream source?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@cedricbeust/what-rust-could-learn-from-kotlin-b32ebe2da28d"&gt;What Rust could learn from Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nullderef.com/blog/plugin-dynload/"&gt;Plugins in Rust: Diving into Dynamic Loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tweedegolf.nl/blog/62/measuring-power-consumption-sync-vs-async"&gt;Measuring power consumption: sync vs. async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/870555/"&gt;Using Rust for kernel development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.phylum.io/spark-and-rust-how-to-build-fast-distributed-and-flexible-analytics-pipelines"&gt;Spark and Rust - How to Build Fast, Distributed and Flexible Analytics Pipelines with Side Effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://paulmck.livejournal.com/62436.html"&gt;So You Want to Rust the Linux Kernel?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/417431284"&gt;[ZH] Rust Web Eco WatchÔΩú SeaORM: To be the Rust version of ActiveRecord &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=k023OIxlzpA&amp;amp;list=PL85XCvVPmGQgWcpd230SUixObnBoL9cif"&gt;Talks from Rust Computer Vision Meetup 2021-09-29 (YouTube playlist)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=VQdStWU2ewY"&gt;Rust v.s Java 17 Pattern Matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/040-louis-pilford/"&gt;Gleam with Louis Pilfold&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;Rust Walkthroughs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/aero/giving-your-json-a-web-api-with-rust-290"&gt;Giving Your JSON a Web API with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nrxus.github.io/faux/guide/exporting-mocks.html"&gt;Exporting Test Mocks Across Crates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://windsoilder.github.io/writing_dockerfile_in_rust_project.html"&gt;Writing dockerfile in rust project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://passcod.name/technical/rust-crimes-enum-ints.html"&gt;Rust crimes: Enum ints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@fujita.tomonori/scalable-server-design-in-rust-with-tokio-4c81a5f350a3"&gt;Scalable server design in Rust with Tokio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ballpointcarrot/running-rust-on-aws-lambda-on-arm64-4h28"&gt;Running Rust on AWS Lambda on ARM64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.qovery.com/guides/tutorial/how-to-deploy-a-rust-rest-api-application-on-aws-with-ease/?utm_source=twitter.com&amp;amp;utm_medium=social&amp;amp;utm_campaign=because-some-users-asked-how-to-deploy-r&amp;amp;utm_content=54750877"&gt;How to deploy a Rust REST API application on AWS with ease&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PT] &lt;a href="https://dev.to/higordiego/rust-borrowing-1220"&gt;Rust - Borrowing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://medium.com/@otukof/build-your-text-editor-with-rust-678a463f968b"&gt;Build Your Text Editor With¬†Rust!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=t6rlp0TXE2I&amp;amp;list=PL4k64WemroGkSMVCGvtksaYvzz4mvOzfK&amp;amp;index=2"&gt;Building a Reddit Ticker with Rust and Flutter using Rid and Bloc/Cubit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=8_HPKGZGM5I"&gt;Pattern Syntax in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;Crate of the Week&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/pubgrub"&gt;pubgrub&lt;/a&gt;, a Rust implementation of the state of the art version solving algorithm.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/968"&gt;Louis Pilfold&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;Call for Participation&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/this-week-in-rust/issues/2469"&gt;This Week in Rust is looking for additional editors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://veloren.net/hacktoberfest-2021/"&gt;Veloren will be participating in Hacktoberfest 2021!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustfest.world/news/introducing-rust-in-arts"&gt;RustFest - Introducing Rust in Arts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jplatte/caniuse.rs/issues/16"&gt;caniuse.rs - Data to add&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/labels/E-help-wanted"&gt;cargo - Help Wanted Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ockam&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1928"&gt;Implement IntoIterator/FromIterator for AddressSet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ockam-network/ockam/issues/1944"&gt;Split Context methods accepting &lt;code&gt;Into&amp;lt;T&amp;gt;&lt;/code&gt; generics up to improve compile time and binary size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;jsonschema-rs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Stranger6667/jsonschema-rs/issues/288"&gt;Implement unevaluatedProperties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Stranger6667/jsonschema-rs/issues/287"&gt;Implement unevaluatedItems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Stranger6667/jsonschema-rs/issues/286"&gt;Implement dependentRequired &amp;amp; dependentSchemas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Stranger6667/jsonschema-rs/issues/236"&gt;Python: Add an iterator over validation errors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/h2&gt;
&lt;p&gt;266 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2021-09-27..2021-10-04"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/84267"&gt;make &lt;em&gt;const (), &lt;/em&gt;mut () okay for FFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89239"&gt;resolve: cache module loading for all foreign modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89447"&gt;improve error message for missing angle brackets in &lt;code&gt;[_]::method&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89408"&gt;avoid nondeterminism in &lt;code&gt;trimmed_def_paths&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89340"&gt;improve error message for printf-style format strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89327"&gt;pick one possible lifetime in case there are multiple choices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89293"&gt;suggest using the path separator for tuple struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89248"&gt;suggest similarly named associated items in trait impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89249"&gt;improve cause information for NLL higher-ranked errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89233"&gt;hide &lt;code&gt;&amp;lt;...&amp;gt; defined here&lt;/code&gt; note if the source is not available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89255"&gt;fix incorrect disambiguation suggestion for associated items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89489"&gt;fix unsound optimization with explicit variant discriminants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89250"&gt;don't anonymize bound region names during typeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89214"&gt;pass real crate-level attributes to &lt;code&gt;pre_expansion_lint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89110"&gt;use larger span for adjustment THIR expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88963"&gt;coerce const FnDefs to implement const Fn traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86853"&gt;constify ?-operator for &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88353"&gt;partially stabilize &lt;code&gt;array_methods&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87998"&gt;avoid spurious "previous iteration of loop" errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89443"&gt;include the length in &lt;code&gt;BTree&lt;/code&gt; hashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88060"&gt;optimize unnecessary check in &lt;code&gt;Vec::retain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/88452"&gt;&lt;code&gt;VecDeque&lt;/code&gt;: improve performance for &lt;code&gt;From&amp;lt;[T; N]&lt;/code&gt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/89335"&gt;optimize &lt;code&gt;is_sorted&lt;/code&gt; for &lt;code&gt;Range&lt;/code&gt; and &lt;code&gt;RangeInclusive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[optimize &lt;code&gt;str::from_utf8()&lt;/code&gt; validation when slice contains multibyte chars and &lt;code&gt;str.chars().count()&lt;/code&gt; in all * &lt;a href="https://github.com/rust-lang/rust/pull/89165"&gt;Fix &lt;code&gt;read_to_end&lt;/code&gt; to not grow an exact size buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87870"&gt;make &lt;code&gt;&amp;lt;[T]&amp;gt;::split_at_unchecked&lt;/code&gt; and &lt;code&gt;&amp;lt;[T]&amp;gt;::split_at_mut_unchecked&lt;/code&gt; public&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/87910"&gt;mark unsafe methods &lt;code&gt;NonZero*::unchecked_&lt;/code&gt;{&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;mul&lt;/code&gt;} as const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/86828"&gt;const fn for &lt;code&gt;Option::&lt;/code&gt;{&lt;code&gt;copied&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;}&lt;/a&gt;
cases](https://github.com/rust-lang/rust/pull/88834)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/296"&gt;hashbrown: relax the bounds on &lt;code&gt;HashSet&lt;/code&gt;: &lt;code&gt;Debug&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7747"&gt;clippy: correctly handle signs in exponents in &lt;code&gt;numeric_literal::format()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7741"&gt;clippy: make &lt;code&gt;if_then_panic&lt;/code&gt; handle situation of &lt;code&gt;BinOpKind::And || BinOpKind::Or&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7338"&gt;clippy: re-write &lt;code&gt;shadow&lt;/code&gt; lints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7734"&gt;clippy: make &lt;code&gt;doc_unsafe&lt;/code&gt; warn on unsafe traits as well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7677"&gt;clippy: fix bug for &lt;code&gt;large_enum_variants&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7608"&gt;clippy: add new 'while_let_some_result' linting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7762"&gt;clippy: add lint &lt;code&gt;equatable_if_let&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7761"&gt;clippy: fix ICE in &lt;code&gt;implicit_hasher&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/7755"&gt;clippy: exclude enum from derivable impls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h3&gt;
&lt;p&gt;A fairly busy week, with a relatively high percentage of PRs landing with
regressions and improvements. The overall trajectory is fairly neutral for this
week though.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=83f147b3baf21acfc367a6da1045d212cd3957e4&amp;amp;end=25ec8273855fde2d72ae877b397e054de5300e10&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;83f147b..25ec82&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 Regressions, 5 Improvements, 5 Mixed; 1 of them in rollups&lt;/p&gt;
&lt;p&gt;43 comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-10-05.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;Approved RFCs&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="final-comment-period"&gt;Final Comment Period&lt;/h3&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No RFCs are currently in the final comment period.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89542"&gt;Partially stabilize duration_consts_2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89509"&gt;Stabilize unreachable_unchecked as const fn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89507"&gt;Add &lt;code&gt;#[repr(i8)]&lt;/code&gt; to Ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89433"&gt;Fix ctrl-c causing reads of stdin to return empty on Windows.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/89381"&gt;Tracking Issue for saturating_div&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/89337"&gt;Avoid allocations and copying in &lt;code&gt;Vec::leak&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88652"&gt;linux/aarch64 Now() should be actually_monotonic()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88300"&gt;Stabilise unix_process_wait_more, extra ExitStatusExt methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/88041"&gt;Make all proc-macro back-compat lints deny-by-default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87704"&gt;Windows: Resolve process::Command program without using the current directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/87467"&gt;Implement RefUnwindSafe for &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/86984"&gt;Reject octal zeros in IPv4 addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/73179"&gt;Tracking Issue for methods to go from nul-terminated &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; to CString &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/71436"&gt;Tracking issue for &lt;code&gt;proc_macro::is_available()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: close] &lt;a href="https://github.com/rust-lang/rust/issues/58935"&gt;Tracking issue for &lt;code&gt;alloc::prelude&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-rfcs"&gt;New RFCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3180"&gt;Cargo --crate-type CLI Argument&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="upcoming-events"&gt;Upcoming Events&lt;/h2&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discord.gg/yNtPTb2"&gt;October 9, 2021 - Rust Gamedev Discord - Rust Gamedev Monthly Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://berline.rs/"&gt;October 12, 2021, Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksryccnbqb/"&gt;October 12, 2021, Seattle, WA, US - Monthly meetup - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.bettercode.eu/"&gt;October 13, 2021 - betterCode Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/MUCplusplus/events/281231257"&gt;October 13, 2021 - C++/Rust: Learning from Each Other - MUC++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Los-Angeles/events/280981968/"&gt;October 13, 2021, Los Angeles, CA, US - Processing shaders in Rust with Dzmitry Malyshau - Rust Los Angeles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Buffalo-Rust-Meetup/events/281236385/"&gt;October 20, 2021, Buffalo, NY, US - Buffalo Rust User Group, Alternate Day - Buffalo Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/zkqvjsyccnbbc/"&gt;October 20, 2021, Vancouver, BC, CA - WASM plugin for Istio - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;North America&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-ATL/events/lhpkmsyccnbrb/"&gt;October 13, 2021, Atlanta, GA, US - Grab a beer with fellow Rustaceans - Rust Atlanta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Grafbase&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://careers.grafbase.com/jobs/1345933-backend-engineer"&gt;Backend Engineer (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Jigzi&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angel.co/company/jewish-interactive/jobs/1682182-frontend-rust-developer"&gt;Software Engineer - WebAssembly, Frontend (remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;pganalyze&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devitjobs.us/jobs/pganalyze-Senior-Backend-Engineer"&gt;Senior Backend Engineer - Rust (remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Oso&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/oso/70ed08c0-521f-4089-a51c-422a73f64366"&gt;Software Engineer (NY/Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/oso/0b65731e-4cf4-4e42-96ed-5f985f08fa66"&gt;Developer Advocate (NY/Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.osohq.com/company/jobs"&gt;And more...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kraken&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust - Core Backend (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Rust Engineer - Banking (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Subspace Labs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/subspacelabs"&gt;Multiple Rust Engineering Positions Available&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;There's a common trope among people unfamiliar with rust where they assume that if you use unsafe at all, then it's just as unsafe as C and rust provided no benefit. Comparing C's approach to safety vs Rust's is like comparing an &lt;a href="https://en.wikipedia.org/wiki/Open-world_assumption"&gt;open world assumption&lt;/a&gt; to a closed world assumption in formal logic systems. In C, you publish your api if it's possible to use correctly (open world). In Rust, you publish a safe api if it's &lt;strong&gt;im&lt;/strong&gt; possible to use &lt;strong&gt;in&lt;/strong&gt; correctly (closed world). Rust's key innovation here is that it enables you to build a 'bridge' from open world (unsafe) to a closed world (safe), a seemingly impossible feat that feels like somehow pairwise reducing an uncountable infinity with a countable infinity. Rust's decision to design an analogous closed-world assumption for safe code is extremely powerful, but it seems very hard for old school C programmers to wrap their head around it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‚Äì &lt;a href="https://www.reddit.com/r/rust/comments/pzo1v9/comment/hf2thv2/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3"&gt;/u/infogulch on /r/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1122"&gt;Alice Ryhl&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/q3pb94/this_week_in_rust_411/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 06 Oct 2021 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2021-10-06:blog/2021/10/06/this-week-in-rust-411/</guid></item></channel></rss>