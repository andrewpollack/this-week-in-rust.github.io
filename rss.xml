<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><atom:link href="https://this-week-in-rust.org/rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 28 Oct 2020 00:00:00 -0400</lastBuildDate><item><title>This Week in Rust 362</title><link>https://this-week-in-rust.org/blog/2020/10/28/this-week-in-rust-362/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/emberian/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="rustfest-global"&gt;RustFest Global&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://rustfest.global/schedule"&gt;RustFest schedule&lt;/a&gt; is now online! RustFest offers &lt;a href="https://rustfest.global/tickets"&gt;&lt;em&gt;free tickets until November 1st&lt;/em&gt;&lt;/a&gt;. It happens across all timezones and is accessible to everyone!&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/10/23/Core-team-membership.html"&gt;Core team membership changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/10/26/changelog-48.html"&gt;Rust Analyzer Changelog #48&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-changelog-3/"&gt;Knurling-rs Changelog #3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thefuntastic.com/blog/fighting-rusts-type-system"&gt;Fighting Rust's Expressive Type System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://usethe.computer/posts/14-xmhell.html"&gt;XMHell: Handling 38GB of UTF-16 XML with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.kuviman.com/2020/10/18/ludumdare47.html"&gt;LudumDare 47 - The Island&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bheisler.github.io/post/recipe-manager-part-3-parsing-and-more-druid/"&gt;Building a Recipe Manager - Part 3 - Parsing and more Druid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pwychowaniec.com/en/posts/imitating-specialization-with-oibits/"&gt;Imitating specialization with OIBITs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evrone.com/armin-ronacher-interview"&gt;Flask Creator Armin Ronacher Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gregstoll.wordpress.com/2020/10/22/clue-solver-now-in-rust-with-more-accurate-simulations/"&gt;clue solver now in Rust with more accurate simulations!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-rust"&gt;Learn Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://levpaul.com/posts/rust-lesson-1/"&gt;Rust for a Gopher Lesson 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://levpaul.com/posts/rust-lesson-2/"&gt;Rust for a Gopher Lesson 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/dotxlem/build-a-todo-list-backend-with-assemblylift-1ak3"&gt;Build a "todo list" backend with AssemblyLift 🚀🔒&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.darrien.dev/posts/so-you-want-to-object/"&gt;So you want to write object oriented Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://dev.to/krowemoh/series/9410"&gt;A Web App in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kobzol.github.io/rust/intellij/2020/10/19/contributing-4-introduce-constant-refactoring.html"&gt;Contributing to the IntelliJ Rust plugin: Implementing a refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lpalmieri.com/posts/fast-rust-docker-builds"&gt;5x Faster Rust Docker Builds with cargo-chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jamesmcm.github.io/blog/2020/10/24/lambda-runtime/#en"&gt;Writing a simple AWS Lambda Custom Runtime in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.arewewebyet.org/"&gt;Is Rust Web Yet? Yes, and it's freaking fast!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/-tj7ODHX93o"&gt;(Live Coding) Audio adventures in Rust: Local files playback &amp;amp; library interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io//blog/2020/10/24/introducing-ungrammar.html"&gt;Introducing Ungrammar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A new group of maintainers has taken ownership of the &lt;a href="https://github.com/deps-rs/deps.rs"&gt;deps.rs project&lt;/a&gt; and revived the &lt;a href="https://deps.rs"&gt;deps.rs page&lt;/a&gt;, making the page and generated badges for READMEs usable again.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.grepular.com/Sandbox_Rust_Development_with_Rust_Analyzer"&gt;Sandbox Rust Development with Rust Analyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://blog.firosolutions.com/2020/10/tokio_special_with_carl_lerche/"&gt;Security Headlines: Tokio special with Carl Lerche&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/EmbarkStudios/rust-gpu"&gt;rust-gpu&lt;/a&gt; from Embark Studios, a system to compile Rust code into Vulkan graphics shaders (with other shader types to follow).&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/831"&gt;Vlad Frolov&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Kerollmops/heed/issues/51"&gt;heed - Create two different libraries: heed and heedx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;400 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-10-19..2020-10-26"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77283"&gt;tweak &lt;code&gt;if let&lt;/code&gt; suggestion to be more liberal with suggestion and to not ICE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78255"&gt;reduce diagram mess in 'match arms have incompatible types' error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78214"&gt;tweak match arm semicolon removal suggestion to account for futures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78235"&gt;explain where the closure return type was inferred&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77250"&gt;rewrite &lt;code&gt;collect_tokens&lt;/code&gt; implementations to use a flattened buffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77720"&gt;fix trait solving ICEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77526"&gt;stop promoting union field accesses in 'const'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78324"&gt;ensure that statics are inhabited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/68965"&gt;rustc_mir: track inlined callees in &lt;code&gt;SourceScopeData&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78061"&gt;optimize const value interning for ZST types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78077"&gt;calculate visibilities once in resolve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78151"&gt;mir-opt: disable MatchBranchSimplification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77339"&gt;implement &lt;code&gt;TryFrom&lt;/code&gt; between &lt;code&gt;NonZero&lt;/code&gt; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77726"&gt;add &lt;code&gt;Pin::static_ref&lt;/code&gt;, &lt;code&gt;static_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77187"&gt;support custom allocators in &lt;code&gt;Box&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/133"&gt;hashbrown: parametrize RawTable, HashSet and HashMap over an allocator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78084"&gt;rustdoc: greatly improve display for small mobile devices screens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6109"&gt;clippy: add linter for a single element for loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6103"&gt;clippy: add lint for &lt;code&gt;&amp;amp;mut Mutex::lock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6181"&gt;clippy: add new lint for undropped &lt;code&gt;ManuallyDrop&lt;/code&gt; values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6187"&gt;clippy: lint unnecessary int-to-int and float-to-float casts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-10-27.md"&gt;2020-10-27&lt;/a&gt;:
0 Regressions, 2 Improvements, 3 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-10-27.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2909"&gt;Destructuring assignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2930"&gt;RFC: Reading into uninitialized buffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2959"&gt;RFC: Promote aarch64-unknown-linux-gnu to a Tier-1 Rust target&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2890"&gt;YieldSafe auto trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2775"&gt;Variadic tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2666"&gt;RFC for a match based surface syntax to get pointer-to-field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77802"&gt;Allow making &lt;code&gt;RUSTC_BOOTSTRAP&lt;/code&gt; conditional on the crate name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78068"&gt;consider assignments of union field of ManuallyDrop type safe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/78026"&gt;Define &lt;code&gt;fs::hard_link&lt;/code&gt; to not follow symlinks.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/77841"&gt;repr(transparent) on generic type skips "exactly one non-zero-sized field" check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77691"&gt;Rename/Deprecate LayoutErr in favor of LayoutError&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/73394"&gt;Tracking Issue for raw_ref_macros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3007"&gt;RFC: Plan to make core and std's panic identical.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcnbmc/"&gt;October 29. Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/274142374/"&gt;November 4. Johannesburg, ZA - Monthly Joburg Rust Chat! - Johannesburg Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/274202454/"&gt;November 4. Dublin, IE - Rust Dublin November - Rust Dublin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstrybcpbgb/"&gt;November 4. Indianapolis, IN, US - Indy.rs - with Social Distancing - Indy.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustfest.global/"&gt;November 7 &amp;amp; 8, Global, RustFest Global&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Seattle-Rust-Meetup/events/gskksrybcpbnb/"&gt;November 10, Seattle, WA, US - Seattle Rust Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="asia-pacific"&gt;Asia Pacific&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876718/"&gt;November 1. Auckland, NZ - Rust meetup - Introduction to Rust - Rust AKL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://iohk.io/en/careers/fk0qe6q/software-engineer-rust/#main-content"&gt;Software Engineer - Rust at IOHK (Remote - EU Time Zone)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://corp.roblox.com/careers/listing/?gh_jid=2036153"&gt;Senior Software Engineer - Data Access at Roblox (San Mateo, CA)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;what many devs often miss initially when talking about Rust is that it isn't just about the design &amp;amp; details of the language (which is great), Rust's super power is that in combination with its fantastic community &amp;amp; ecosystem, and the amazing friendly people that create &amp;amp; form it&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://mobile.twitter.com/repi"&gt;Johann Andersson on twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;llogiq is pretty pleased with his own suggestion and unanimously voted for it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/iu3ge0/this_week_in_rust_356/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 28 Oct 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-10-28:blog/2020/10/28/this-week-in-rust-362/</guid></item><item><title>This Week in Rust 361</title><link>https://this-week-in-rust.org/blog/2020/10/21/this-week-in-rust-361/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/emberian/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;p&gt;No newsletters this week.&lt;/p&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/10/20/regression-labels.html"&gt;Marking issues as regressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/10/16/Backlog-Bonanza.html"&gt;Lang team Backlog Bonanza and Project Proposals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/10/19/changelog-47.html"&gt;Rust-Analyzer Changelog #47&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/10/19/changelog-133.html"&gt;IntelliJ Rust Changelog #133&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/a/athaydes.com/renato-athaydes/posts/fearlessconcurrencyhowclojurerustponyerlanganddartletyouachievethat"&gt;Fearless concurrency: how Clojure, Rust, Pony, Erlang and Dart let you achieve that.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.coralbark.net/blog/technology/2020/10/shock-result-rust-faster-than-python-in-one-test-of-file-parsing/"&gt;Shock Result&amp;lt;&amp;gt;?: Rust faster than Python in one test of file parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bheisler.github.io/post/recipe-manager-part-2-druid-experience-report/"&gt;Building a Recipe Manager - Part 2 - Druid Experience Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://da-data.blogspot.com/2020/10/no-c-still-isnt-cutting-it.html"&gt;No, C++ still isn't cutting it.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://benma.github.io/2020/10/16/rust-zeroize-move.html"&gt;A pitfall of Rust's move/copy/drop semantics and zeroing data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tavianator.com/2020/one_plus_one.html"&gt;Proving that 1 + 1 = 10 in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/10/15/study-of-std-io-error.html"&gt;Study of std::io::Error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://samwho.dev/blog/fun-with-rust-traits/"&gt;Fun With Rust's Traits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-simple-rust"&gt;Learn Simple Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hashrust.com/blog/arrays-vectors-and-slices-in-rust/"&gt;Arrays, vectors and slices in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yaah.dev/building-your-own-error-type"&gt;Building Your Own Error Type: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.thoughtram.io/lifetimes-in-rust/"&gt;Lifetimes in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://impl.dev/posts/write-readable-rust-code/"&gt;Piece by Piece: Write Readable Rust Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://steveklabnik.com/writing/are-out-parameters-idiomatic-in-rust"&gt;Are out parameters idiomatic in Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.possiblerust.com/pattern/non-generic-inner-functions"&gt;Non-Generic Inner Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mbuffett.com/posts/bevy-snake-tutorial/"&gt;Creating a Snake Clone in Rust, with Bevy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lupyuen.github.io/pinetime-rust-mynewt/articles/watchface"&gt;Create Your Own PineTime Watch Face in Rust... And Publish on crates.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sirech/either-types-for-rust-46k4"&gt;Either Types for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nickymeuleman/rust-syntax-what-the-questionmark-2n58"&gt;Rust syntax: What is the questionmark?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jack.wrenn.fyi/blog/private-trait-methods/"&gt;Private Methods on a Public Trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gliderkite.github.io/posts/learn-rust-with-benford/"&gt;Learn Rust with Benford's Law&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/Koxiaet/8c05ebd4e0e9347eb05f265dfb7252e1"&gt;How to Write Hygienic Rust Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/m6Gee5kNe7U"&gt;Rust Linz, October 2020 - Valentin Tolmer - How not to rely on inheritance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-more-rust"&gt;Learn More Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.osohq.com/post/runtime-reflection-pt-2"&gt;Building a runtime reflection system for Rust 🦀️ (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/compiling-rust-for-raspberry-pi-arm-922b55dbb050"&gt;Compile Rust for Raspberry Pi ARM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zupzup.org/epoll-with-rust/"&gt;Basic non-blocking IO using epoll in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meltware.com/2020/10/21/rust-async-nonsense.html"&gt;Debugging async generator errors in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/5q4NB9WdYIo"&gt;(Live Coding) Audio adventures in Rust: Spotify integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/wREGR7QQHco"&gt;Rust Linz, October 2020 - Matthias Heiden - Writing a Kernel Driver with Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tokio.rs/blog/2020-10-tokio-0-3"&gt;Announcing Tokio 0.3 and the path to 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/osohq/oso"&gt;oso, an open-source policy engine for authorization written in Rust&lt;/a&gt;, released &lt;a href="https://docs.rs/oso/0.7.0/oso/"&gt;version 0.7.0 of their authorization library for Rust projects!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⚡️ &lt;a href="https://evrone.com/dotenv-linter-v220"&gt;Dotenv-linter v2.2.0: find and fix problems in .env files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mihai-dinculescu/cargo-wipe"&gt;Version 0.3.0 of cargo-wipe has been released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rustfest.eu/a-new-look"&gt;A new look, tickets and what's to come&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unicode-org/icu4x/wiki/ICU4X-Project-Announcement"&gt;ICU4X Project Announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zdnet.com/article/kata-containers-rewritten-in-rust-and-gets-a-major-speed-boost/"&gt;Kata Containers rewritten in Rust gets a major speed boost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scattered-thoughts.net/writing/assorted-thoughts-on-zig-and-rust/"&gt;Assorted thoughts on zig (and rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evrone.com/armin-ronacher-interview"&gt;Flask Creator Armin Ronacher Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itnext.io/a-recipe-for-starting-actix-web-server-and-launch-chrome-b792987935a"&gt;A recipe for start using Rust actix-web and launch chrome 🚀&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Sailfish-OS-3.4-Released"&gt;Sailfish OS 3.4 Released with Experimental Rust Support, Finally Eyeing 64-bit ARM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lupyuen.github.io/pinetime-rust-mynewt/articles/watchface"&gt;Create Your Own PineTime Watch Face in Rust... And Publish on crates.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hexgolems.com/2020/10/getting-started-with-ddlog/"&gt;Getting started with Datalog &amp;amp; Rust for program analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tech-blog.sonos.com/posts/three-open-source-sonos-projects-in-rust/"&gt;Three open source Sonos projects: efficient embedded development in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/unicode-org/icu4x"&gt;icu4x&lt;/a&gt;, the Unicode Consortium's official crate for dealing with i18n in resource constrained environments.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/828"&gt;Willi Kappler&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/extrawurst/gitui/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22"&gt;GitUI: Good First Issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/this-week-in-rust/issues/708"&gt;this-week-in-rust: Very light font can be difficult to read&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;398 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-10-12..2020-10-19"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78047"&gt;make set_span take &lt;code&gt;mut self&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77855"&gt;resolve: further improvements to "try using the enum's variant" diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77825"&gt;&lt;code&gt;min_const_generics&lt;/code&gt; diagnostics improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/78058"&gt;make sure arenas don't allocate bigger than &lt;code&gt;HUGE_PAGE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77908"&gt;make &lt;code&gt;ObligationForest&lt;/code&gt; more efficient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74480"&gt;add &lt;code&gt;std::thread::available_concurrency&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77997"&gt;remove &lt;code&gt;shrink_to_fit&lt;/code&gt; from default &lt;code&gt;ToString::to_string&lt;/code&gt; implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75265"&gt;add &lt;code&gt;str::&lt;/code&gt;{&lt;code&gt;Split&lt;/code&gt;, &lt;code&gt;RSplit&lt;/code&gt;, &lt;code&gt;SplitN&lt;/code&gt;, &lt;code&gt;RSplitN&lt;/code&gt;, &lt;code&gt;SplitTerminator&lt;/code&gt;, &lt;code&gt;RSplitTerminator&lt;/code&gt;, &lt;code&gt;SplitInclusive&lt;/code&gt;}&lt;code&gt;::as_str&lt;/code&gt; methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77751"&gt;liballoc: &lt;code&gt;VecDeque&lt;/code&gt;: Add binary search functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77788"&gt;BTreeMap: fix gdb provider on &lt;code&gt;BTreeMap&lt;/code&gt; with ZST keys or values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/hashbrown/pull/208"&gt;hashbrown: remove the need for unwrap when using &lt;code&gt;ProbeSeq&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-10-21.md"&gt;2020-10-21&lt;/a&gt;:
4 Regressions, 7 Improvements, 0 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-10-21.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2959"&gt;RFC: Promote aarch64-unknown-linux-gnu to a Tier-1 Rust target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2890"&gt;YieldSafe auto trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2886"&gt;Access to traits' associated functions and constants from trait objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2775"&gt;Variadic tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2666"&gt;RFC for a match based surface syntax to get pointer-to-field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77802"&gt;Allow making &lt;code&gt;RUSTC_BOOTSTRAP&lt;/code&gt; conditional on the crate name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77526"&gt;stop promoting union field accesses in 'const'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77015"&gt;passes: &lt;code&gt;check_attr&lt;/code&gt; on more targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/76227"&gt;Stabilize &lt;code&gt;Poll::is_ready&lt;/code&gt; and &lt;code&gt;is_pending&lt;/code&gt; as const&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;No new RFCs were proposed this week.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-edi/events/273685985"&gt;October 22. Edinburgh, UK - Fluence: interface-types for server-side WebAssembly modules - Rust Edinburgh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcnbkc/"&gt;October 27. Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcnbmc/"&gt;October 29. Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia-pacific"&gt;Asia Pacific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-akl/events/266876718/"&gt;November 1. Auckland, NZ - Rust meetup - Introduction to Rust - Rust AKL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hopin.to/careers/902859"&gt;Senior Back End Engineer at Hopin (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4019a818-4a7b-46ef-9225-c53c7a7f238c"&gt;Backend Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4c864c8f-bde6-443d-b521-dd90df0e9105"&gt;Senior Backend Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2863623f-13c9-4f50-992d-7c25736a60f9"&gt;Senior Full Stack Engineer - Rust at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/4485f672-dc5f-4e49-a10b-2b0399e28a8d"&gt;Software Engineer - Trading Technology (Rust) at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/2442ee5c-56b6-4a73-a477-8cdda2b218d5"&gt;Rust Engineer, Desktop GUI - Cryptowatch at Kraken (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/kraken/fe1e07f4-6d7c-4f65-9a8f-27cf3b3fd2b1"&gt;Backend Engineer, Kraken Futures - Rust at Kraken(Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://massa.network/#jobs"&gt;Full remote Rust developer, long-term contract (French CDI) at Massa Labs (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;And it's true that a lot of stuff requires a "sufficiently smart compiler" but really it's 2020, if your compiler isn't serving you breakfast in bed you need to be upping your expectations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-lang.zulipchat.com/#narrow/stream/257879-project-portable-simd/topic/The.20movemasquerade/near/212794818"&gt;Jubilee on the Rust Zulip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/949"&gt;Josh Triplett&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/jg7hkt/this_week_in_rust_361/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 21 Oct 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-10-21:blog/2020/10/21/this-week-in-rust-361/</guid></item><item><title>This Week in Rust 360</title><link>https://this-week-in-rust.org/blog/2020/10/14/this-week-in-rust-360/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/emberian/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2020/10/08/Rust-1.47.html"&gt;Announcing Rust 1.47.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-gamedev.github.io/posts/newsletter-014/"&gt;This Month in Rust GameDev #14&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/10/12/changelog-46.html"&gt;Rust Analyzer Changelog #46&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.marcoieni.com/2020/10/2-videos-about-rust-code-coverage-in-vscode/"&gt;Two videos about rust code coverage in VSCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dtrace.org/blogs/bmc/2020/10/11/rust-after-the-honeymoon/"&gt;Rust after the honeymoon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cberner.com/2020/10/12/building-fastest-raptorq-rfc6330-codec-rust/"&gt;Building the Fastest RaptorQ (RFC6330) Codec in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://loige.co/learning-rust-through-open-source-and-live-code-reviews/"&gt;Learning Rust through open source and live code reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/fallenstedt/making-a-canvas-based-game-with-rust-and-webassembly-2l46"&gt;My Mistakes Making a Canvas Based Game with Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2020/10/a-new-backend-for-cranelift-part-1-instruction-selection/"&gt;A New Backend for Cranelift, Part 1: Instruction Selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidify.org/blog/rust-parameters/"&gt;Optional parameters in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Diggsey/posts/blob/master/actor-systems/README.md"&gt;Building an async-compatible actor system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/EmSjZbSzA3A"&gt;Contract as Code as Contract: Using Rust to Unify Specification and Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-simple-rust"&gt;Learn Simple Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.thoughtram.io/iterators-in-rust/"&gt;Iterators in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.scottlogic.com/2020/10/08/lets-build-snake-with-rust.html"&gt;Learn Rust by building the game Snake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/imaculate3/fearless-concurrency-5fk8"&gt;That's so Rusty! Fearless concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yjdoc2/making-a-simple-calculator-in-rust-d65"&gt;Making a Simple Calculator in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://morestina.net/blog/1607/fallible-iteration"&gt;Patterns of fallible iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=Iy5pvVPZT50"&gt;Learn Rust Together Part 5: Structs and Enums!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/ewDAOLTto-A"&gt;3. #everyonecancontribute cafe: Gitpod &amp;amp; learning Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-more-rust"&gt;Learn More Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pretired.dazwilkin.com/posts/201008/"&gt;Deploying a Rust HTTP server to DigitalOcean App Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/8/"&gt;Make A Language - Part Eight: Function Definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/supercharge-your-electron-apps-with-rust/"&gt;Supercharge your Electron apps with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[ZH] &lt;a href="https://yodalee.me/2020/06/introduction/"&gt;Build a Shoot 'em up game with framework Amethyst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/jNNz4h3iIlw"&gt;Rust FFI: Microsoft Flight Simulator SDK Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/W0ZRZyljKjo"&gt;Fuzz Testing popular Rust library in 5 min using cargo-fuzz / libfuzzer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://daniel.haxx.se/blog/2020/10/09/rust-in-curl-with-hyper/"&gt;Rust in Curl with Hyper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.abetterinternet.org/post/memory-safe-curl/"&gt;Memory Safe 'curl' for a More Secure Internet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smithay.github.io/calloop-v-0-7.html"&gt;Version 0.7 of calloop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fpcomplete.com/blog/collect-rust-traverse-haskell-scala/"&gt;Collect in Rust, Traverse in Haskell and Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/gretingz/bc194c20a2de2c7bcc0f457282ba2662"&gt;Proving that 1 + 1 = 2 in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jamesmcm.github.io/blog/2020/10/11/programming-projects/#en"&gt;What should I program?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/ja5aoe/getting_back_to_c_after_rust_is_a_pain/"&gt;Getting back to C++ after Rust is a pain.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="call-for-blog-posts"&gt;Call for Blog Posts&lt;/h1&gt;
&lt;p&gt;The Rust Core Team wants input from the community!
If you haven't already, &lt;a href="https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html"&gt;read the official blog&lt;/a&gt; and submit a blog post - it will show up here!
Here are the wonderful submissions since the call for blog posts:&lt;/p&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/paste"&gt;paste&lt;/a&gt;, a macro to concatenate identifiers (which would otherwise be nightly only).&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/825"&gt;mark-i-m&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/sirixdb/create-a-rust-client-during-hacktoberfest-5al4"&gt;Create a Rust-Client for SirixDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/out-of-cheese-error/the-way/issues/75"&gt;the-way: Highlight parameters in shell snippet when copying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/out-of-cheese-error/the-way/issues/76"&gt;the-way: Replace copy_to_clipboard code with arboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;409 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-10-05..2020-10-12"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77341"&gt;resolve: improve "try using the enum's variant"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77560"&gt;Fix &lt;code&gt;LitKind&lt;/code&gt;'s byte buffer to use refcounted slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77552"&gt;Replace &lt;code&gt;(Body, DefId)&lt;/code&gt; with &lt;code&gt;Body&lt;/code&gt; where possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77597"&gt;perf: &lt;code&gt;UninhabitedEnumBranching&lt;/code&gt; avoid n²&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77587"&gt;Fix span for unicode escape suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77594"&gt;Implement &lt;code&gt;advance_by&lt;/code&gt;, &lt;code&gt;advance_back_by&lt;/code&gt; for &lt;code&gt;iter::Chain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74194"&gt;Add &lt;code&gt;PartialEq&lt;/code&gt; impls for &lt;code&gt;Vec&lt;/code&gt; ↔ &lt;code&gt;slice&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdsimd/pull/31"&gt;stdsimd: Use xor to implement &lt;code&gt;Neg::neg&lt;/code&gt; for floats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-10-13.md"&gt;2020-10-13&lt;/a&gt;:
0 Regressions, 3 Improvements, 3 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, fairly busy week, but without major regressions that need to be addressed.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-10-13.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2959"&gt;RFC: Promote aarch64-unknown-linux-gnu to a Tier-1 Rust target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2886"&gt;Access to traits' associated functions and constants from trait objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77547"&gt;stabilize union with 'ManuallyDrop' fields and 'impl Drop for Union'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77526"&gt;stop promoting union field accesses in 'const'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77015"&gt;passes: &lt;code&gt;check_attr&lt;/code&gt; on more targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/75802"&gt;resolve: Do not put nonexistent crate &lt;code&gt;meta&lt;/code&gt; into prelude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: postpone]&lt;a href="https://github.com/rust-lang/rust/issues/44619"&gt;Tracking issue for experiments around coercions, generics, and Copy type ergonomics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcnbtb/"&gt;Octover 15. Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/272996842/"&gt;October 20. Denver, CO, US - Rust Denver - Data Science with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-NYC/events/273887563"&gt;October 21. New York, NY, US - A Journey into the Nucleus at Dropbox with Parker Timmerman - Rust NYC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/cxrtxrybcnbcc/"&gt;October 21. Vancover, BC, CA - Rust Study/Hack/Hang-out night - Vancouver Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-edi/events/273685985"&gt;October 22. Edinburgh, UK - Fluence: interface-types for server-side WebAssembly modules - Rust Edinburgh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Dallas-Rust/events/jqxqwrybcnbkc/"&gt;October 27. Dallas, TX, US - Last Tuesday - Dallas Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angel.co/company/stake-technologies/jobs/1005201-lead-software-engineer"&gt;Lead Software Engineer at Stake Technologies (SG, Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angel.co/company/stake-technologies/jobs/1005914-software-engineer"&gt;Software Engineer at Stake Technologies (SG, Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://narrative.so/job/service-engineer-rust"&gt;Service Engineer [Rust] at Narrative (Auckland, NZ - Remote within New Zealand)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Just because Rust allows you to write super cool non-allocating zero-copy algorithms safely, doesn’t mean every algorithm you write should be super cool, zero-copy and non-allocating.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://users.rust-lang.org/t/feeling-rust-is-so-difficult/29962/15"&gt;trentj on rust-users&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/948"&gt;Nixon Enraght-Moony&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/jbh0ci/this_week_in_rust_360/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 14 Oct 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-10-14:blog/2020/10/14/this-week-in-rust-360/</guid></item><item><title>This Week in Rust 359</title><link>https://this-week-in-rust.org/blog/2020/10/07/this-week-in-rust-359/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; is a systems language pursuing the trifecta: safety, concurrency, and speed.
This is a weekly summary of its progress and community.
Want something mentioned? Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; or &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/emberian/this-week-in-rust"&gt;on GitHub&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/emberian/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-community"&gt;Updates from Rust Community&lt;/h1&gt;
&lt;h3 id="official"&gt;Official&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/10/06/1.47.0-prerelease.html"&gt;1.47.0 pre-release testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Inside] &lt;a href="https://blog.rust-lang.org/inside-rust/2020/10/06/1.47.0-prerelease-2.html"&gt;1.47.0 second pre-release testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;Newsletters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2020-09/"&gt;This Month in Rust OSDev (September 2020)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rustinblockchain.org/newsletters/2020-09-30-secure-enclaves-a-la-crab/"&gt;Rust in Blockchain Newsletter #16 - Secure Enclaves à la Crab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dimforge.com/blog/2020/10/01/this-month-in-dimforge/"&gt;This Month in Dimforge #1 (October 2020)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tooling"&gt;Tooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2020/10/05/changelog-45.html"&gt;Rust Analyzer Changelog #45&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intellij-rust.github.io/2020/10/05/changelog-132.html"&gt;IntelliJ Rust Changelog #132&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;Observations/Thoughts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tarquin-the-brave.github.io/blog/posts/rust_use_statements/"&gt;Why I scatter &lt;code&gt;use&lt;/code&gt; statements throughout Rust code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thefuntastic.com/blog/rust-tide-clock"&gt;Rust + Raspberry Pi Tide Clock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jonstodle.com/youre-allowed-to-write-slow-rust-code/"&gt;You're Allowed To Write Slow Rust Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jakobmeier.ch/blogging/Rust_on_the_Web.html"&gt;Rust meets the web - a clash of programming paradigms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cmyr.net/blog/druid-dynamism.html"&gt;Dynamic widget sketches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nickb.dev/blog/results-of-authoring-a-js-library-with-rust-and-wasm"&gt;Results of Authoring a JS Library with Rust and Wasm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/ringbahn-iii/"&gt;Ringbahn III: A deeper dive into drivers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2020/10/03/fast-thread-locals-in-rust.html"&gt;Fast Thread Locals In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gliderkite.github.io/posts/formicarium/"&gt;Formicarium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-simple-rust"&gt;Learn Simple Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/dlx-in-rust/"&gt;Dancing Links In Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nitschinger.at/Getting-Started-with-the-nRF52840-in-Rust/"&gt;Getting Started with the nRF52840 in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/imaculate3/that-s-so-rusty-smart-pointers-245l"&gt;That's so Rust!: Smart pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/dK9-oXptFcM"&gt;Test-Based and Graphical User Interfaces | Rust Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-more-rust"&gt;Learn More Rust&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jondot/8-steps-for-troubleshooting-your-rust-build-times-2ffc965fd13e"&gt;8 Solutions for Troubleshooting Your Rust Build Times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pkolaczk.github.io/benchmarking-cassandra/"&gt;Benchmarking Apache Cassandra with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials"&gt;Operating System development tutorials in Rust on the Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/knurling-sessions-introduction/"&gt;Learning Embedded Rust with Knurling-rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.kdubovikov.ml/articles/rust/building-a-weather-station-bot"&gt;Building a Weather Station Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shortepic.com/blog/first/"&gt;Next-Gen Rust Web Apps: Towards a Svelte Fulcro in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shortepic.com/blog/second/"&gt;Next-Gen Rust Web Apps: TicTacToe in Valerie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shortepic.com/blog/third/"&gt;Next-Gen Rust Web Apps: Borrowing From Fulcro for your Rust WASM Spa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/4/"&gt;Make A Language - Part Four: Backtracking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/5/"&gt;Make A Language - Part Five: Binding Usages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/6/"&gt;Make A Language - Part Six: Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arzg.github.io/lang/7/"&gt;Make A Language - Part Seven: A REPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://astropad.com/what-weve-learned-porting-our-apps-to-windows/"&gt;What we've learned porting our apps to Windows - Astropad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/playlist?list=PLzIwronG0sE5lQCPFP69Ukgz4d9dngaSi"&gt;Build a Discord Bot with Rust and Serenity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="project-updates"&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://headcrab.rs/2020/10/01/september-update.html"&gt;Headcrab: September 2020 progress report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/rust/comments/j6b03y/rrust_is_partnering_with_the_rust_communities_on/"&gt;/r/rust is partnering with the Rust communities on Discord, Mozilla's Matrix, and Stack Overflow as venues for "IRC-like" real-time chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lists.freedesktop.org/archives/mesa-dev/2020-October/224639.html"&gt;[Mesa-dev] Rust drivers in Mesa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reberhardt.com/blog/2020/10/05/designing-a-new-class-at-stanford-safety-in-systems-programming.html"&gt;Designing a New Rust Class at Stanford: Safety in Systems Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/finegeometer/articles/blob/master/memory-safety-alternative.md"&gt;Memory Safety Alternative&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="call-for-blog-posts"&gt;Call for Blog Posts&lt;/h1&gt;
&lt;p&gt;The Rust Core Team wants input from the community!
If you haven't already, &lt;a href="https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html"&gt;read the official blog&lt;/a&gt; and submit a blog post - it will show up here!
Here are the wonderful submissions since the call for blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@v.mishra/rust-2021-apis-orms-and-standards-bfdf3ddc15a0"&gt;Rust 2021: APIs, ORMS and standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jackh726.github.io/rust/2020/10/01/rust-2021.html"&gt;Rust 2021 - Stability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tmandry.gitlab.io/blog/posts/rust-2021-organization/"&gt;The Rust Organization in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nikhilism.com/post/2020/rust-2021/"&gt;Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/samsieber/e976664ba333fd8a0b5f3b0ba167cb76#file-rust-2021-md"&gt;Rust 2021: lowering barriers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markentier.tech/posts/2020/10/rust-2021/"&gt;Rust 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://casualhacks.net/blog/2020-10-05/the-rust-2021-experience-macros/"&gt;The Rust 2021 Experience - Year of the Macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tmandry.gitlab.io/blog/posts/rust-2021-project/"&gt;The Rust Project in 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="crate-of-the-week"&gt;Crate of the Week&lt;/h1&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/mozilla/uniffi-rs"&gt;uniffi&lt;/a&gt;, a unified ffi binding generator for Rust.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/823"&gt;mark-i-m&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="call-for-participation"&gt;Call for Participation&lt;/h1&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but didn't know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotenv-linter/dotenv-linter/issues?q=is%3Aopen+is%3Aissue+label%3Ahacktoberfest"&gt;dotenv-linter: Hacktoberfest Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/RustPython/RustPython/issues/2258"&gt;RustPython: [CFP] Implement the _sre module in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="updates-from-rust-core"&gt;Updates from Rust Core&lt;/h1&gt;
&lt;p&gt;427 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2020-09-28..2020-10-05"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/llvm-project/pull/77"&gt;LLVM: handle rtcGPR64RegClassID in AArch64RegisterBankInfo::getRegBankFromRegClass()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77441"&gt;fix AVR stack corruption bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustup/pull/2493"&gt;add &lt;code&gt;aarch64-unknown-linux-musl&lt;/code&gt; support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77202"&gt;defer Apple SDKROOT detection to link time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77543"&gt;force posix-style quoting on lld, independent of host platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76474"&gt;add option to pass a custom codegen backend from a driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77251"&gt;bypass const_item_mutation if const's type has Drop impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76754"&gt;clean up diagnostics for arithmetic operation errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77261"&gt;deduplicate and generalize some (de/)serializer impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77275"&gt;expand: stop normalizing &lt;code&gt;NtIdent&lt;/code&gt;s before passing them to built-in macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77439"&gt;fix missing diagnostic span for &lt;code&gt;impl Trait&lt;/code&gt; with const generics, and add various tests for &lt;code&gt;min_const_generics&lt;/code&gt; and &lt;code&gt;const_generics&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77469"&gt;improve rustdoc error for failed intra-doc link resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77426"&gt;include scope id in SocketAddrV6::Display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77284"&gt;library: forward compiler-builtins "mem" feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77281"&gt;liveness analysis for everybody&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77257"&gt;optimize &lt;code&gt;IntRange::from_pat&lt;/code&gt;, then shrink &lt;code&gt;ParamEnv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77354"&gt;overhaul const-checking diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77360"&gt;references to ZSTs may be at arbitrary aligned addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77170"&gt;remove &lt;code&gt;#[rustc_allow_const_fn_ptr]&lt;/code&gt; and add &lt;code&gt;#![feature(const_fn_fn_ptr_basics)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76739"&gt;resolve: prohibit anon const non-static lifetimes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/617"&gt;chalk: add static lifetime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/593"&gt;chalk: implement generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/619"&gt;chalk: parse opaque types without bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/613"&gt;chalk: fix assertion failure during recursive solving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/chalk/pull/616"&gt;chalk: support fundamental types with multiple type parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77324"&gt;don't fire &lt;code&gt;const_item_mutation&lt;/code&gt; lint on writes through a pointer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/1570"&gt;miri: check that all syscall arguments are scalars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/backtrace-rs/pull/372"&gt;add support for Miri backtraces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77415"&gt;better error message for &lt;code&gt;async&lt;/code&gt; blocks in a const-context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77512"&gt;allow &lt;code&gt;Abort&lt;/code&gt; terminators in all const-contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77303"&gt;const evaluatable: improve &lt;code&gt;TooGeneric&lt;/code&gt; handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/74839"&gt;implement multiple return terminator optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77396"&gt;disable the SimplifyArmIdentity mir-opt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76448"&gt;implement Make &lt;code&gt;handle_alloc_error&lt;/code&gt; default to panic (for no_std + liballoc)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77289"&gt;change &lt;code&gt;AllocRef::by_ref&lt;/code&gt; to take &lt;code&gt;&amp;amp;self&lt;/code&gt; instead of &lt;code&gt;&amp;amp;mut self&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76610"&gt;implement as_ne_bytes() for integers and floats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77111"&gt;stabilize &lt;code&gt;slice_ptr_range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77282"&gt;add missing definitions required by the sparc-unknown-linux-gnu target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77504"&gt;support vectors with fewer than 8 elements for &lt;code&gt;simd_select_bitmask&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77380"&gt;unbox mutexes and condvars on some platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76919"&gt;use futex-based &lt;code&gt;thread::park&lt;/code&gt;/&lt;code&gt;unpark&lt;/code&gt; on Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76017"&gt;use less divisions in display u128/i128&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75377"&gt;fix &lt;code&gt;Debug&lt;/code&gt; implementations of some of the &lt;code&gt;HashMap&lt;/code&gt; and &lt;code&gt;BTreeMap&lt;/code&gt; iterator types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/76909"&gt;add &lt;code&gt;Iterator::advance_by&lt;/code&gt; and &lt;code&gt;DoubleEndedIterator::advance_back_by&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/77368"&gt;backport LLVM apfloat commit to rustc_apfloat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/8754"&gt;cargo: fix dylib+rlib with LTO.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/75699"&gt;uplift drop-bounds lint from clippy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6092"&gt;clippy: add lint for inline assembly syntax style preference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/6105"&gt;clippy: lint for invisible Unicode characters other than ZWSP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-10-05.md"&gt;2020-10-05&lt;/a&gt;:
1 Regressions, 2 Improvements, 1 Mixed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A quiet week. One rather large regression on a synthetic benchmark and a few
small improvements.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rust/issues/77023"&gt;#77023&lt;/a&gt; is an interesting
case. It encoded an invariant about slice lengths as an &lt;code&gt;assume&lt;/code&gt; intrinsic
inside &lt;code&gt;len&lt;/code&gt; function. It seems to have caused a small compile-time slowdown,
but there was no improvement in &lt;code&gt;check&lt;/code&gt; build performance (a proxy for generated
code quality). In fact, the LLVM documentation &lt;a href="https://llvm.org/docs/LangRef.html#llvm-assume-intrinsic"&gt;specifically advises
against&lt;/a&gt; overuse of
the &lt;code&gt;assume&lt;/code&gt; intrinsic in cases where the invariant is unlikely to be of much
help to the optimizer. That seems to be the case here.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2020-10-05.md"&gt;full report&lt;/a&gt; for more.&lt;/p&gt;
&lt;h2 id="approved-rfcs"&gt;Approved RFCs&lt;/h2&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="final-comment-period"&gt;Final Comment Period&lt;/h2&gt;
&lt;p&gt;Every week &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the
'final comment period' for RFCs and key PRs which are reaching a
decision. Express your opinions now.&lt;/p&gt;
&lt;h3 id="rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2909"&gt;Destructuring assignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2782"&gt;RFC: impl-only glob imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2524"&gt;RFC: Permit _ in type aliases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/labels/final-comment-period"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/77547"&gt;stabilize union with 'ManuallyDrop' fields and 'impl Drop for Union'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/75991"&gt;Set up CI for aarch64-apple-darwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/75914"&gt;Promote aarch64-pc-windows-msvc to Tier 2 Development Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/75802"&gt;resolve: Do not put nonexistent crate &lt;code&gt;meta&lt;/code&gt; into prelude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/55300"&gt;Tracking issue for slice_partition_at_index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="new-rfcs"&gt;New RFCs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/2997"&gt;Add 0000-vecdeque-binary-search.md: Binary search fns for VecDeque&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="upcoming-events"&gt;Upcoming Events&lt;/h1&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Johannesburg-Rust-Meetup/events/273455489/"&gt;October 7. Johannesburg, ZA - Johannesburg Rust Meetup - Monthly Joburg Rust Chat!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Dublin/events/273014329/"&gt;October 7. Dublin, IE - Rust Dublin - October Remote Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/jhfstrybcnbkb/"&gt;October 7. Indianapolis, IN, US - Indy.rs - Indy.rs - with Social Distancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/de-DE/Rust-Linz/events/271857253/"&gt;October 8. Linz, AT - Rust Linz - Rust Meetup Linz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/San-Diego-Rust/events/273486967/"&gt;October 8. San Diego, CA, US - San Diego Rust - San Diego Rust October 2020 Tele-Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rustlab.it/agenda"&gt;October 12 - 18. RustLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Saar/events/273252813/"&gt;October 13. Saabrücken, DE - Rust-Saar Meetup - &lt;code&gt;4u16&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/txcprrybcnbtb/"&gt;Octover 15. Berlin, DE - Rust Hack and Learn - Berline.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Rust-Boulder-Denver/events/272996842/"&gt;October 20. Denver, CO, US - Rust Denver - Data Science with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Vancouver-Rust/events/cxrtxrybcnbcc/"&gt;October 21. Vancover, BC, CA - Vancouver Rust - Rust Study/Hack/Hang-out night&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h1 id="rust-jobs"&gt;Rust Jobs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apply.workable.com/sense/j/ADDB5A7717/"&gt;Embedded Software Engineer&lt;/a&gt; at &lt;a href="https://sense.com"&gt;Sense&lt;/a&gt; (Rust/C/Python, Remote or Cambridge, MA)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iohk.io/en/careers/fk0qe6q/software-engineer-rust/"&gt;Software Engineer - Rust - IOHK (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobs.lever.co/redcanary/51159c79-56ec-4335-8175-bf9cd72621a6"&gt;Senior Software Engineer, Rust/Go &amp;amp; Linux - Red Canary (Remote)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.abetterinternet.org/careers/le-sre-sw2/"&gt;Software Engineer at Let's Encrypt (Remote within US and Canada)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Tweet us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; to get your job offers listed here!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;Quote of the Week&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] clippy is for people who find a certain emptiness inside when they finally get code through the compiler.😉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Unknown person answering the Rust survey&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/947"&gt;blonk&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, and &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/j71tq7/this_week_in_rust_359/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 07 Oct 2020 00:00:00 -0400</pubDate><guid>tag:this-week-in-rust.org,2020-10-07:blog/2020/10/07/this-week-in-rust-359/</guid></item></channel></rss>