<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>This Week in Rust</title><link>https://this-week-in-rust.org/</link><description></description><lastBuildDate>Wed, 27 Dec 2023 00:00:00 -0500</lastBuildDate><item><title>This Week in Rust 527</title><link>https://this-week-in-rust.org/blog/2023/12/27/this-week-in-rust-527/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2023/12/21/async-fn-rpit-in-traits.html"&gt;Announcing &lt;code&gt;async fn&lt;/code&gt; and return-position &lt;code&gt;impl Trait&lt;/code&gt; in traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/inside-rust/2023/12/22/trait-system-refactor-initiative.html"&gt;Rustc Trait System Refactor Initiative Update: A call for testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="foundation"&gt;&lt;a class="toclink" href="#foundation"&gt;Foundation&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://foundation.rust-lang.org/news/2023-12-21-improving-supply-chain-security/"&gt;Improving Supply Chain Security for Rust Through Artifact Signing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://slint.dev/blog/2023-in-review"&gt;2023: Slint in Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2023/12/20/loco-rust-rails"&gt;Introducing Loco: The Rails of Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thedataquarry.com/posts/path-to-becoming-a-rustacean/"&gt;My path to becoming a Rustacean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://steveklabnik.com/writing/memory-safety-is-a-red-herring"&gt;Memory Safety is a Red Herring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/rust/2023/12/20/the-most-common-rust-compiler-errors-as-encountered-in-rustrover-part-2/"&gt;The Most Common Rust Compiler Errors as Encountered in RustRover: Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ntietz.com/blog/my-reference-was-dropped-why-is-the-compiler-complaining-about-multiple-borrows/"&gt;My reference was dropped, why is the compiler complaining about multiple borrows?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@adetaylor/can-cppref-t-be-ergonomic-c9cb1365bda1"&gt;Can CppRef be ergonomic?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://youtu.be/_UItLy_nLf8"&gt;Rust 1.74.1 &amp;amp; Rust News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nickb.dev/blog/the-dark-side-of-inlining-and-monomorphization/"&gt;The dark side of inlining and monomorphization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/blog/2023/12/26/the-heart-of-a-language-server.html"&gt;The Heart of a Language Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://priver.dev/blog/rust/multi-threading/"&gt;Rust: Multi threading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://blog.kerollmops.com/meilisearch-expands-search-power-with-arroy-s-filtered-disk-ann"&gt;Meilisearch Expands Search Power with Arroy's Filtered Disk ANN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/blob/develop/examples/app/portals/README.md"&gt;Encrypted Portals between Macs – built in Rust and Swift (sorta similar to ngrok and tailscale)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=IdnjG5N2l4M"&gt;Error handling in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.surveyhero.com/c/static-mut"&gt;An anonymous survey about mutable statics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/web"&gt;Web development in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/rocket-hello-world"&gt;Rocket: Web-based Hello World! with tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/rouille"&gt;rouille&lt;/a&gt;, a small synchronous web framework.&lt;/p&gt;
&lt;p&gt;Thanks to <a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1275">Peter Puetz</a> for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation-projects-and-speakers"&gt;&lt;a class="toclink" href="#call-for-participation-projects-and-speakers"&gt;Call for Participation; projects and speakers&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="cfp-projects"&gt;&lt;a class="toclink" href="#cfp-projects"&gt;CFP - Projects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GreptimeTeam/greptimedb/issues/2931"&gt;greptimedb - Add more tables into &lt;code&gt;information_schema&lt;/code&gt; for better compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7254"&gt;Ockam - Check that the bootstrap_server command argument is a valid host:port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6702"&gt;Ockam - Refactor to use typed interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6684"&gt;Ockam - Check structs comply with the cddl schema&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="cfp-speakers"&gt;&lt;a class="toclink" href="#cfp-speakers"&gt;CFP - Speakers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Are you a new or experienced speaker looking for a place to share something cool? This section highlights events that are being planned and are accepting submissions to join their event as a speaker.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No new calls for speakers this week&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are an event organizer hoping to expand the reach of your event, please submit a link to the submission website either through a PR to TWiR or on the [Rust-lang forums].[link TBD]&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;268 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-12-20..2023-12-27"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118847"&gt;add support for &lt;code&gt;for await&lt;/code&gt; loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/112936"&gt;add illumos aarch64 target for rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117601"&gt;add support for hexagon-unknown-none-elf as target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119071"&gt;-Znext-solver: adapt overflow rules to avoid breakage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118973"&gt;&lt;code&gt;rustc_codegen_ssa&lt;/code&gt;: Don't drop &lt;code&gt;IncorrectCguReuseType&lt;/code&gt; , make &lt;code&gt;rustc_expected_cgu_reuse&lt;/code&gt; attr work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119107"&gt;&lt;code&gt;subtype_predicate&lt;/code&gt;: remove unnecessary probe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118691"&gt;add check for possible &lt;code&gt;CStr&lt;/code&gt; literals in pre-2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119141"&gt;add method to get instance instantiation arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119235"&gt;add missing feature gate for sanitizer CFI cfgs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119225"&gt;avoid redundant Option for &lt;code&gt;cross_crate_inlinable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119155"&gt;coverage: check for &lt;code&gt;async fn&lt;/code&gt; explicitly, without needing a heuristic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119037"&gt;do not allow ABI mismatches inside &lt;code&gt;repr(C)&lt;/code&gt; types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119261"&gt;do not fetch HIR in &lt;code&gt;inferred_outlives_of&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118431"&gt;emit better suggestions for &lt;code&gt;&amp;amp;T == T&lt;/code&gt; and &lt;code&gt;T == &amp;amp;T&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119215"&gt;emits error if has bound regions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119173"&gt;encode &lt;code&gt;CoroutineKind&lt;/code&gt; directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118796"&gt;exhaustiveness: improve complexity on some wide matches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119233"&gt;exhaustiveness: keep the original &lt;code&gt;thir::Pat&lt;/code&gt; around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119218"&gt;exhaustiveness: reveal empty opaques in depth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116821"&gt;exhaustiveness: reveal opaque types properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119042"&gt;fallback &lt;code&gt;default&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt; during ast-lowering for lifetime binder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119274"&gt;fix ICE when using raw ptr in a pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119135"&gt;fix crash due to &lt;code&gt;CrateItem::kind()&lt;/code&gt; not handling constructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119122"&gt;give temporaries in if let guards correct scopes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116274"&gt;make &lt;code&gt;soft_unstable&lt;/code&gt; show up in future breakage reports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119258"&gt;make closures carry their own ClosureKind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117176"&gt;mark &lt;code&gt;ty::Const::Error&lt;/code&gt; when meet unsupport ty for const generic params&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119297"&gt;pass &lt;code&gt;DeadItem&lt;/code&gt; and lint as consistent group in dead-code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119146"&gt;remove &lt;code&gt;DiagCtxt&lt;/code&gt; API duplication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119265"&gt;remove metadata decoding &lt;code&gt;DefPathHash&lt;/code&gt; cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119136"&gt;resolve: eagerly feed closure visibilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119134"&gt;resolve: feed visibilities for unresolved trait impl items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119168"&gt;resolve: stop feeding visibilities for import list stems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119129"&gt;rework &lt;code&gt;-Zverbose&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119154"&gt;simple modification of &lt;code&gt;non_lifetime_binders&lt;/code&gt;'s diagnostic information to adapt to type binders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119238"&gt;skip duplicate stable crate ID encoding into metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119198"&gt;split coroutine desugaring kind from source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119278"&gt;subtree sync for &lt;code&gt;rustc_codegen_cranelift&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119328"&gt;suggest &lt;code&gt;=&lt;/code&gt; to &lt;code&gt;==&lt;/code&gt; in more cases, even in the face of reference mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119094"&gt;add function ABI and type layout to StableMIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119077"&gt;separate MIR lints from validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3237"&gt;miri: implement and test &lt;code&gt;simd_masked_load&lt;/code&gt; and &lt;code&gt;simd_masked_store&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119226"&gt;improve coding efficiency for &lt;code&gt;RawDefId&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118824"&gt;use &lt;code&gt;Vec&lt;/code&gt; for region constraints instead of &lt;code&gt;BTreeMap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119153"&gt;stabilize &lt;code&gt;file_create_new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119276"&gt;stabilize &lt;code&gt;ip_in_core&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106790"&gt;add more niches to rawvec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119222"&gt;add &lt;code&gt;IntoAsyncIterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119133"&gt;add &lt;code&gt;hint::assert_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12201"&gt;cargo: extend the build directive syntax with &lt;code&gt;cargo:&lt;/code&gt;:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12509"&gt;cargo: hold the mutate exclusive lock when vendoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13187"&gt;cargo: refactor: centralize git checkouts and db paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13186"&gt;cargo: refactor: custom error types for &lt;code&gt;cargo-util-schemas&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13195"&gt;cargo: rework &lt;code&gt;--check-cfg&lt;/code&gt; generation comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119246"&gt;rustdoc: Add &lt;code&gt;is_object_safe&lt;/code&gt; information for traits in JSON output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119283"&gt;rustdoc: fix display of warning block if it is first element of the top doc block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11994"&gt;clippy: &lt;code&gt;question_mark&lt;/code&gt;: also trigger on &lt;code&gt;return&lt;/code&gt; statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11998"&gt;clippy: check whether out of bound when access a known length array with a constant index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11967"&gt;clippy: do not consider &lt;code&gt;async { (impl IntoFuture).await }&lt;/code&gt; as redundant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11871"&gt;clippy: extend &lt;code&gt;UNNECESSARY_TO_OWNED&lt;/code&gt; to handle &lt;code&gt;split&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11997"&gt;clippy: move &lt;code&gt;uninhabited_references&lt;/code&gt; to &lt;code&gt;nursery&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/12004"&gt;clippy: new lints &lt;code&gt;iter_filter_is_some&lt;/code&gt; and &lt;code&gt;iter_filter_is_ok&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11991"&gt;clippy: stop &lt;code&gt;bool_comparison&lt;/code&gt;'s suggestion from consuming parentheses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16137"&gt;rust-analyzer: complete exported macros in &lt;code&gt;#[macro_use($0)]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16088"&gt;rust-analyzer: implement a rust-analyzer span backed proc-macro server mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16066"&gt;rust-analyzer: auto remove unnecessary braces after remove unused imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16175"&gt;rust-analyzer: correctly set and mark the proc-macro spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16184"&gt;rust-analyzer: fix completions analysis not caching all nodes in Semantics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16178"&gt;rust-analyzer: fix span marking for builtin fn macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16167"&gt;rust-analyzer: fully remove dummy spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16185"&gt;rust-analyzer: remove wrong comma after remove unnecessary braces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some of the recent noise swings have been appearing again this week, but luckily
less often than before. There were a few actual regressions, but most of them
were localized to a single stress test. On the other hand, there were a few very
nice wins across the board, especially for check and incremental builds, primarily
thanks to &lt;a href="https://github.com/rust-lang/rust/pull/118824"&gt;#118824&lt;/a&gt; and
&lt;a href="https://github.com/rust-lang/rust/pull/119265"&gt;#119265&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@kobzol&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=bf9229a2e366b4c311f059014a4aa08af16de5d8&amp;amp;end=1ab783112ab4e4807304dbd249b39771246013ef&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;bf9229a2e366b4c311f059014a4aa08af16de5d8..1ab783112ab4e4807304dbd249b39771246013ef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;(instructions:u)&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;range&lt;/th&gt;
&lt;th align="center"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;0.6%&lt;/td&gt;
&lt;td align="center"&gt;[0.6%, 0.6%]&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;2.5%&lt;/td&gt;
&lt;td align="center"&gt;[0.3%, 4.2%]&lt;/td&gt;
&lt;td align="center"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;-0.8%&lt;/td&gt;
&lt;td align="center"&gt;[-3.3%, -0.1%]&lt;/td&gt;
&lt;td align="center"&gt;180&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;-1.2%&lt;/td&gt;
&lt;td align="center"&gt;[-5.5%, -0.2%]&lt;/td&gt;
&lt;td align="center"&gt;109&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;All ❌✅ (primary)&lt;/td&gt;
&lt;td align="center"&gt;-0.8%&lt;/td&gt;
&lt;td align="center"&gt;[-3.3%, 0.6%]&lt;/td&gt;
&lt;td align="center"&gt;181&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 Regressions, 7 Improvements, 2 Mixed; 1 of them in rollups
58 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/73d96e7ca26ef9ddfc1c32c7701e1f1159512c49/triage/2023-12-26.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/115046"&gt;Use version-sorting for all sorting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/37854"&gt;Tracking issue for exclusive range patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/119066"&gt;rustdoc: clean up source sidebar hide button&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Unsafe Code Guideline RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3546"&gt;RFC: Allow type inference for const or static&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-12-27 - 2024-01-24 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-28 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/297687485/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-03 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/wqzhftygccbfb"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-09 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/fvdtgtygccbmb/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-11 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/297687491/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-16 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/297128172/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-27 | Copenhagen, DK | &lt;a href="https://www.meetup.com/copenhagen-rust-community/"&gt;Copenhagen Rust Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/copenhagen-rust-community/events/297894275/"&gt;&lt;strong&gt;Rust hacknight #1: CLIs, TUIs and plushies&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-28 | Vienna, AT | &lt;a href="https://www.meetup.com/rust-vienna/"&gt;Rust Vienna&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-vienna/events/297826979/"&gt;&lt;strong&gt;Rust Dojo 3: Holiday Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-11 | Reading, UK | &lt;a href="https://www.meetup.com/reading-rust-workshop/"&gt;Reading Rust Workshop&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/reading-rust-workshop/events/296020357/"&gt;&lt;strong&gt;Reading Rust Meetup at Browns&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-11 | Wrocław, PL | &lt;a href="https://www.meetup.com/rust-wroclaw/"&gt;Rust Wrocław&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-wroclaw/events/298029291/"&gt;&lt;strong&gt;Rust Meetup #36&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-13 | Helsinki, FI | &lt;a href="https://www.meetup.com/finland-rust-meetup/"&gt;Finland Rust-lang Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/finland-rust-meetup/events/297811750/"&gt;&lt;strong&gt;January Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-27 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/xvkdgtyfcqbkc/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-06 | Boston, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/297633937/"&gt;&lt;strong&gt;Beacon Hill Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-08 | Chicago, IL, US | &lt;a href="https://www.meetup.com/deep-dish-rust/"&gt;Deep Dish Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/deep-dish-rust/events/298003192/"&gt;&lt;strong&gt;Rust Hack Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-09 | Seattle, WA, US | &lt;a href="https://www.meetup.com/cap-hill-rust/"&gt;Cap Hill Rust Coding/Hacking/Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/cap-hill-rust/events/296564978/"&gt;&lt;strong&gt;Rusty Coding/Hacking/Learning Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-09 | Minneapolis, MN, US | &lt;a href="https://www.meetup.com/minneapolis-rust-meetup/"&gt;Minneapolis Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/minneapolis-rust-meetup/events/297760207/"&gt;&lt;strong&gt;Minneapolis Rust Meetup Happy Hour&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-14 | Cambridge, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/297634920/"&gt;&lt;strong&gt;Alewife Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-16 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/297452643/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-17 | Chicago, IL, US | &lt;a href="https://www.meetup.com/deep-dish-rust/"&gt;Deep Dish Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/deep-dish-rust/events/298003233/"&gt;&lt;strong&gt;Rust Happy Hour&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/18qhi3s/hey_rustaceans_got_a_question_ask_here_522023/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust can be rather more verbose than C; there are a lot of invariants that have to be expressed in the code. But that is countered by the need for far less error-handling code; it turns out to be a wash, with the size of the two implementations being about the same.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://lwn.net/Articles/953116"&gt;Alice Ryhl at the Linux Plumbers Conference as quoted by Jonathan Corbet, LWN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1498"&gt;Ivan Fraixedes&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/18sjuxk/this_week_in_rust_527/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 27 Dec 2023 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2023-12-27:/blog/2023/12/27/this-week-in-rust-527/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 526</title><link>https://this-week-in-rust.org/blog/2023/12/20/this-week-in-rust-526/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2023/12/18/survey-launch.html"&gt;Blog: Launching the 2023 State of Rust Survey&lt;/a&gt; | &lt;a href="https://www.surveyhero.com/c/4vxempzc"&gt;Direct Link to Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2023/12/15/2024-Edition-CFP.html"&gt;A Call for Proposals for the Rust 2024 Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ratatui.rs/highlights/v025/"&gt;ratatui: a Rust library for cooking up terminal user interfaces - v0.25.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ecton.dev/introducing-gooey/"&gt;Introducing Gooey: My take on a Rusty GUI framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/easier-cedar-policy-management/"&gt;Two New Open Source Rust Crates Create Easier Cedar Policy Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://firedbg.sea-ql.org/blog/2023-12-12-introducing-firedbg/"&gt;Introducing FireDBG - a Time Travel Visual Debugger for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fornjot.app/blog/release/0.48.0/"&gt;Fornjot 0.48.0 - open source b-rep CAD kernel written in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/952029/"&gt;Committing to Rust for kernel code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/953116/"&gt;A Rust implementation of Android's Binder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/951550/"&gt;Preventing atomic-context violations in Rust code with klint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/954974/"&gt;Rust for Linux — in space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flawless.dev/essays/rust-is-growing/"&gt;Rust is growing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dureuill.net/articles/recurring-lifetime/"&gt;A curiously recurring lifetime issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://notgull.net/cautionary-unsafe-tale/"&gt;The rabbit hole of unsafe Rust bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://android-developers.googleblog.com/2023/12/faster-rust-toolchains-for-android.html"&gt;Faster Rust Toolchains for Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/rust/2023/12/14/the-most-common-rust-compiler-errors-as-encountered-in-rustrover-part-1/"&gt;The Most Common Rust Compiler Errors as Encountered in RustRover: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/towards-data-science/nine-rules-for-simd-acceleration-of-your-rust-code-part-2-6a104b3be6f3"&gt;Nine Rules for SIMD Acceleration of your Rust Code (Part 2): General Lessons from Boosting Data Ingestion in the range-set-blaze Crate by 7x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://barretts.club/posts/max6675-hal/"&gt;What I Learned Making an embedded-hal Driver in Rust (for the MAX6675 Thermocouple Digitizer)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://priver.dev/blog/rust/traits/"&gt;Rust: Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://write.yiransheng.com/vpn"&gt;Write a Toy VPN in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2023/12/15/using-actix-rust"&gt;Getting Started with Actix Web in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2023/12/13/using-rocket-rust"&gt;Getting Started with Rocket in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/generic-types-for-simple-function"&gt;Generic types for function parameters in Rust 🦀&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/towards-data-science/benchmarking-rust-compiler-settings-with-criterion-62db50cd62fb"&gt;Benchmarking Rust Compiler Settings with Criterion: Controlling Criterion with Scripts and Environment Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://blog.kerollmops.com/multithreading-and-memory-mapping-refining-ann-performance-with-arroy"&gt;Multithreading and Memory-Mapping: Refining ANN Performance with Arroy&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://rust.code-maven.com/tiny-http"&gt;Getting started with Tiny HTTP building a web application in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/embedded-rust-education-2023-reflections-2024-visions"&gt;Embedded Rust Education: 2023 Reflections &amp;amp; 2024 Visions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/default-arguments-for-functions"&gt;Default arguments for functions in Rust using macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://www.youtube.com/watch?v=DutVRGs9oZc"&gt;Rust in Production Ep 1 - InfluxData's Paul Dix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://adspthepodcast.com/2023/12/15/Episode-160.html"&gt;Episode 160: Rust &amp;amp; Safety at Adobe with Sean Parent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/constcat"&gt;constcat&lt;/a&gt;, a &lt;code&gt;std::concat!&lt;/code&gt;-replacement with support for const variables and expressions.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1272"&gt;Ross MacArthur&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7145"&gt;Ockam - Fix documentation warnings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6692"&gt;Ockam - Library - Validate CBOR structs according to the cddl schema for &lt;code&gt;nodes/models/secure_channel&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7116"&gt;Ockam - Implement events in &lt;code&gt;SqlxDatabase&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2910"&gt;Hyperswitch - [REFACTOR]: [Nuvei] MCA metadata validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2904"&gt;Hyperswitch - [FEATURE] : [Noon] Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2908"&gt;Hyperswitch - [FEATURE] : [Zen] Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2909"&gt;Hyperswitch - [REFACTOR] : [Authorizedotnet] Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;386 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-12-13..2023-12-20"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118491"&gt;enable stack probes on aarch64 for LLVM 18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119074"&gt;add new tier 3 aarch64-apple-watchos target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/compiler-builtins/pull/556"&gt;add hexagon support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119100"&gt;add the function body span to StableMIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/impl-trait-utils/pull/6"&gt;allow &lt;code&gt;async_fn_in_trait&lt;/code&gt; traits with Send variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/llvm-project/pull/159"&gt;cherry-pick "M68k: Fix ODR violation in GISel code (#72797)"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118905"&gt;AIX: fix XCOFF metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118937"&gt;&lt;code&gt;-Ztrait-solver=next&lt;/code&gt; to &lt;code&gt;-Znext-solver&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118891"&gt;actually parse async gen blocks correctly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119000"&gt;add a method to StableMIR to check if a type is a CStr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118213"&gt;add more suggestions to unexpected cfg names and values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118830"&gt;add support for &lt;code&gt;--env&lt;/code&gt; on &lt;code&gt;tracked_env::var&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118417"&gt;add unstable &lt;code&gt;-Zdefault-hidden-visibility&lt;/code&gt; cmdline flag for &lt;code&gt;rustc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118974"&gt;annotate panic reasons during enum layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117050"&gt;attempt to try to resolve blocking concerns&lt;/a&gt; (RFC &lt;a href="https://rust-lang.github.io/rfcs/3086-macro-metavar-expr.html"&gt;#3086&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119052"&gt;avoid overflow in GVN constant indexing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117749"&gt;cache param env canonicalization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119023"&gt;check &lt;code&gt;FnPtr&lt;/code&gt;/&lt;code&gt;FnDef&lt;/code&gt; built-in fn traits correctly with effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119047"&gt;check generic params after sigature for main-fn-ty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118396"&gt;collect lang items from AST, get rid of &lt;code&gt;GenericBound::LangItemTrait&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118871"&gt;coroutine variant fields can be uninitialized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118852"&gt;coverage: skip instrumenting a function if no spans were extracted from MIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119059"&gt;deny &lt;code&gt;~const&lt;/code&gt; trait bounds in inherent impl headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119061"&gt;desugar &lt;code&gt;yield&lt;/code&gt; in &lt;code&gt;async gen&lt;/code&gt; correctly, ensure &lt;code&gt;gen&lt;/code&gt; always returns unit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/113091"&gt;don't merge cfg and doc(cfg) attributes for re-exports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118927"&gt;erase late bound regions from &lt;code&gt;Instance::fn_sig()&lt;/code&gt; and add a few more details to StableMIR APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118584"&gt;fix ICE &lt;code&gt;ProjectionKinds Deref and Field were mismatched&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118906"&gt;fix LLD thread flags in bootstrap on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118873"&gt;fix &lt;code&gt;waker_getters&lt;/code&gt; tracking issue number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118864"&gt;fix alignment passed down to LLVM for &lt;code&gt;simd_masked_load&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118538"&gt;fix dynamic size/align computation logic for packed types with dyn trait tail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118928"&gt;fix overlapping spans in delimited meta-vars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/glacier/pull/1702"&gt;ICE 110453: fixed with errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118941"&gt;llvm-wrapper: adapt for LLVM API changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117984"&gt;make &lt;code&gt;IMPLIED_BOUNDS_ENTAILMENT&lt;/code&gt; into a hard error from a lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118842"&gt;make exhaustiveness usable outside of rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119112"&gt;match lowering: Remove the &lt;code&gt;make_target_blocks&lt;/code&gt; hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118880"&gt;more expressions correctly are marked to end with curly braces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-playground/pull/1020"&gt;nudge the user to kill programs using excessive CPU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118964"&gt;opportunistically resolve region var in canonicalizer (instead of resolving root var)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117818"&gt;properly reject &lt;code&gt;default&lt;/code&gt; on free const items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119022"&gt;remove unnecessary constness from ProjectionCandidate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119093"&gt;replace some instances of &lt;code&gt;FxHashMap&lt;/code&gt;/&lt;code&gt;FxHashSet&lt;/code&gt; with stable alternatives (mostly in &lt;code&gt;rustc_hir&lt;/code&gt; and &lt;code&gt;rustc_ast_lowering&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118657"&gt;resolve: replace visibility table in resolver outputs with query feeding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117884"&gt;skip rpit constraint checker if borrowck return type error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118909"&gt;some cleanup and improvement for invalid ref casting impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118389"&gt;tweak &lt;code&gt;short_ty_string&lt;/code&gt; to reduce number of files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118914"&gt;unconditionally register alias-relate in projection goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/stdarch/pull/1507"&gt;update FreeBSD CI image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118888"&gt;uplift &lt;code&gt;TypeAndMut&lt;/code&gt; and &lt;code&gt;ClosureKind&lt;/code&gt; to &lt;code&gt;rustc_type_ir&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118993"&gt;use &lt;code&gt;if cfg!&lt;/code&gt; instead of &lt;code&gt;#[cfg]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110494"&gt;use the LLVM option NoTrapAfterNoreturn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3229"&gt;miri: visit the AllocIds and BorTags in borrow state FrameExtra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3221"&gt;miri run: default to edition 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3220"&gt;miri: make mmap not use expose semantics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/119084"&gt;fast path for &lt;code&gt;declared_generic_bounds_from_env&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118234"&gt;stabilize &lt;code&gt;type_name_of_val&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117824"&gt;stabilize &lt;code&gt;ptr::{from_ref, from_mut}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118853"&gt;add &lt;code&gt;core::intrinsics::simd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/114962"&gt;add a column number to &lt;code&gt;dbg!()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/106790"&gt;add more niches to &lt;code&gt;rawvec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118523"&gt;add ASCII whitespace trimming functions to &lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118770"&gt;fix cases where std accidentally relied on inline(never)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116438"&gt;Windows: allow &lt;code&gt;File::create&lt;/code&gt; to work on hidden files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118851"&gt;std: add xcoff in object's feature list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118534"&gt;codegen: panic when trying to compute size/align of extern type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc_codegen_gcc/pull/382"&gt;codegen_gcc: simd: implement missing intrinsics from simd/generic-arithmetic-pass.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115165"&gt;codegen_llvm: set &lt;code&gt;DW_AT_accessibility&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13184"&gt;cargo: clean up package metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13152"&gt;cargo: do not allow empty name in package ID spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13164"&gt;cargo: fill in more empty name holes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12509"&gt;cargo: hold the mutate exclusive lock when vendoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118910"&gt;rustdoc: use Map instead of Object for source files and search index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115660"&gt;rustdoc: allow resizing the sidebar / hiding the top bar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118961"&gt;rustdoc-search: fix a race condition in search index loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118402"&gt;rustdoc-search: use set ops for ranking and filtering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-bindgen/pull/2698"&gt;bindgen: use &lt;code&gt;\r\n&lt;/code&gt; on windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-bindgen/pull/2663"&gt;bindgen: better working destructors on windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11938"&gt;clippy: add new &lt;code&gt;unconditional_recursion&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11869"&gt;clippy: new Lint: &lt;code&gt;result_filter_map&lt;/code&gt; / Mirror of &lt;code&gt;option_filter_map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11977"&gt;clippy: don't visit nested bodies in &lt;code&gt;is_const_evaluatable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11974"&gt;clippy: &lt;code&gt;redundant_pattern_matching&lt;/code&gt;: lint &lt;code&gt;if let true&lt;/code&gt;, &lt;code&gt;while let true&lt;/code&gt;, &lt;code&gt;matches!(.., true)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11966"&gt;clippy: do not lint &lt;code&gt;assertions_on_constants&lt;/code&gt; for &lt;code&gt;const _: () = assert!(expr)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11956"&gt;clippy: &lt;code&gt;doc_markdown&lt;/code&gt; Recognize words followed by empty parentheses &lt;code&gt;()&lt;/code&gt; for quoting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11953"&gt;clippy: fix binder handling in &lt;code&gt;unnecessary_to_owned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16163"&gt;rust-analyzer: deduplicate annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16162"&gt;rust-analyzer: optimizing Performance with &lt;code&gt;Promise.all&lt;/code&gt; 🏎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16158"&gt;rust-analyzer: desugar doc correctly for mbe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16155"&gt;rust-analyzer: dont assume ascii in &lt;code&gt;remove_markdown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16152"&gt;rust-analyzer: resolve alias before resolving enum variant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16151"&gt;rust-analyzer: add minimal support for the 2024 edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16150"&gt;rust-analyzer: move out &lt;code&gt;WithFixture&lt;/code&gt; into dev-dep only crate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16131"&gt;rust-analyzer: fix false positive type mismatch in const reference patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16130"&gt;rust-analyzer: syntax fixup now removes subtrees with fake spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16115"&gt;rust-analyzer: update builtin attrs from rustc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16061"&gt;rust-analyzer: fix fragment parser replacing matches with dummies on incomplete parses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15887"&gt;rust-analyzer: fix incorrectly replacing references in macro invocation in "Convert to named struct" assist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A lot of noise in the results this week; there was an lull in the noise
recently, so our auto-inferred noise threshold went down, and thus five PR's
were artificially flagged this week (and three supposed improvements were just
reverting to the mean). Beyond that, we had three nice improvements: the first
to debug builds in #117962 (by ceasing emission of expensive+unused
&lt;code&gt;.debug_pubnames&lt;/code&gt; and &lt;code&gt;.debug_pubtypes&lt;/code&gt;), a second to diesel and serde
in #119048 (by avoiding some unnecessary work), and a third to several benchmarks
in #117749 (by adding some caching of an internal compiler structure).&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@pnkfelix&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=57010939ed1d00076b4af0ed06a81ec69ea5e4a8&amp;amp;end=bf9229a2e366b4c311f059014a4aa08af16de5d8&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;57010939..bf9229a2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6 Regressions, 9 Improvements, 3 Mixed; 5 of them in rollups
67 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/b9ecf1aba002cd6b33d06f784e088839636d7e92/triage/2023-12-18.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: postpone] &lt;a href="https://github.com/rust-lang/rfcs/pull/3263"&gt;RFC: Precise Pre-release Deps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117703"&gt;Support async recursive calls (as long as they have indirection)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/116274"&gt;make soft_unstable show up in future breakage reports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/108443"&gt;Tracking Issue for ip_in_core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Unsafe Code Guideline RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3543"&gt;RFC: patchable-function-entry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-12-20 - 2024-01-17 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-20 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/292763506/"&gt;&lt;strong&gt;Adventures in egui app dev&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-26 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/mvdtgtyfcqbjc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-28 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/297687485/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-03 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/wqzhftygccbfb"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-09 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/fvdtgtygccbmb/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-11 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/297687491/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-16 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/297128172/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-27 | Copenhagen, DK | &lt;a href="https://www.meetup.com/copenhagen-rust-community/"&gt;Copenhagen Rust Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/copenhagen-rust-community/events/297894275/"&gt;&lt;strong&gt;Rust hacknight #1: CLIs, TUIs and plushies&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-28 | Vienna, AT | &lt;a href="https://www.meetup.com/rust-vienna/"&gt;Rust Vienna&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-vienna/events/297826979/"&gt;&lt;strong&gt;Rust Dojo 3: Holiday Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-11 | Reading, UK | &lt;a href="https://www.meetup.com/reading-rust-workshop/"&gt;Reading Rust Workshop&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/reading-rust-workshop/events/296020357/"&gt;&lt;strong&gt;Reading Rust Meetup at Browns&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-11 | Wrocław, PL | &lt;a href="https://www.meetup.com/rust-wroclaw/"&gt;Rust Wrocław&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-wroclaw/events/298029291/"&gt;&lt;strong&gt;Rust Meetup #36&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-13 | Helsinki, FI | &lt;a href="https://www.meetup.com/finland-rust-meetup/"&gt;Finland Rust-lang Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/finland-rust-meetup/events/297811750/"&gt;&lt;strong&gt;January Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-20 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/297818036/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-27 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/xvkdgtyfcqbkc/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-06 | Boston, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/297633937/"&gt;&lt;strong&gt;Beacon Hill Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-08 | Chicago, IL, US | &lt;a href="https://www.meetup.com/deep-dish-rust/"&gt;Deep Dish Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/deep-dish-rust/events/298003192/"&gt;&lt;strong&gt;Rust Hack Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-09 | Seattle, WA, US | &lt;a href="https://www.meetup.com/cap-hill-rust/"&gt;Cap Hill Rust Coding/Hacking/Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/cap-hill-rust/events/296564978/"&gt;&lt;strong&gt;Rusty Coding/Hacking/Learning Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-09 | Minneapolis, MN, US | &lt;a href="https://www.meetup.com/minneapolis-rust-meetup/"&gt;Minneapolis Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/minneapolis-rust-meetup/events/297760207/"&gt;&lt;strong&gt;Minneapolis Rust Meetup Happy Hour&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-14 | Cambridge, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/297634920/"&gt;&lt;strong&gt;Alewife Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-16 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/297452643/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-17 | Chicago, IL, US | &lt;a href="https://www.meetup.com/deep-dish-rust/"&gt;Deep Dish Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/deep-dish-rust/events/298003233/"&gt;&lt;strong&gt;Rust Happy Hour&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/182f6dv/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The Tianyi-33 satellite is a 50kg class space science experimental satellite equipped with an operating system independently developed by Beijing University of Posts and Telecommunications—the Rust-based dual-kernel real-time operating system &lt;strong&gt;RROS&lt;/strong&gt;. RROS will carry out general tasks represented by tensorflow/k8s and real-time tasks represented by real-time file systems and real-time network transmission on the satellite. It will ensure the normal execution of upper-layer applications and scientific research tasks, such as time-delay measurement between satellite and ground, live video broadcasting, onboard web chat services, pseudo-SSH experiments, etc. This marks the world’s first official application of a Rust-written dual-kernel operating system in a satellite scenario.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://bupt-os.github.io/website/news/2023_12_9/satellite_launch/"&gt;Qichen on the RROS web page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1496"&gt;Brian Kung&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/18ndmbb/this_week_in_rust_526/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 20 Dec 2023 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2023-12-20:/blog/2023/12/20/this-week-in-rust-526/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 525</title><link>https://this-week-in-rust.org/blog/2023/12/13/this-week-in-rust-525/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="official"&gt;&lt;a class="toclink" href="#official"&gt;Official&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2023/12/07/Rust-1.74.1.html"&gt;Announcing Rust 1.74.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2023/12/11/cargo-cache-cleaning.html"&gt;Cargo cache cleaning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="newsletters"&gt;&lt;a class="toclink" href="#newsletters"&gt;Newsletters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-osdev.com/this-month/2023-11/"&gt;This Month in Rust OSDev: November 2023&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-analyzer.github.io/thisweek/2023/12/11/changelog-211.html"&gt;rust-analyzer changelog #211&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hjvt.dev/posts/5"&gt;PC Music Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blaz.is/blog/post/mfio-release/"&gt;Announcing mfio - Completion I/O for Everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cohost.org/watchexec/post/3818997-watchexec-library-3"&gt;Watchexec Library 3.0 and CLI 1.24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[series] &lt;a href="https://blog.kerollmops.com/spotify-inspired-elevating-meilisearch-with-hybrid-search-and-rust"&gt;Spotify-Inspired: Elevating Meilisearch with Hybrid Search and Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.thecodedmessage.com/posts/oop-3-inheritance/"&gt;Rust Is Beyond Object-Oriented, Part 3: Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallcultfollowing.com/babysteps/blog/2023/12/07/rust-design-axioms/"&gt;Being Rusty: Discovering Rust's design axioms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matklad.github.io/2023/12/10/nsfw.html"&gt;Non-Send Futures When?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tmandry.gitlab.io/blog/posts/for-await-buffered-streams/"&gt;&lt;code&gt;for await&lt;/code&gt; and the battle of buffered streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/poll-progress/"&gt;poll_progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ferrous-systems.com/blog/rust-and-threadx/"&gt;Rust and ThreadX - experiments with an RTOS written in C, a former certified software component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/nine-rules-for-simd-acceleration-of-your-rust-code-part-1-c16fe639ce21"&gt;Nine Rules for SIMD Acceleration of Your Rust Code (Part 1): General Lessons from Boosting Data Ingestion in the range-set-blaze Crate by 7x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ochagavia.nl/blog/someone-interviewed-me/"&gt;Contributing to Rust as a novice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[audio] &lt;a href="https://rustacean-station.org/episode/stefan-baumgartner-rust-efficiency/"&gt;Exploring Rust's impact on efficiency and cost-savings, with Stefan Baumgartner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.qovery.com/blog/common-mistakes-with-rust-async/"&gt;Common Mistakes with Rust Async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/embassy-on-esp-uart-transmitter"&gt;Embassy on ESP: UART Transmitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2023/12/08/clap-rust"&gt;Writing a CLI Tool in Rust with Clap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yetanotherrustblog.net/memory-and-iteration/"&gt;Memory and Iteration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2023/12/06/using-axum-rust"&gt;Getting Started with Axum - Rust's Most Popular Web Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gruebelinchen.wordpress.com/2023/12/07/exploring-the-aws-lambda-sdk-in-rust/"&gt;Exploring the AWS Lambda SDK in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mux.com/blog/practical-client-side-rust-for-android-ios-and-web"&gt;Practical Client-side Rust for Android, iOS, and Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/playlist?list=PLWtPciJ1UMuD3_8Pb-EqrFhkYpastR2cn"&gt;Advent of Code 2023&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/turbofish"&gt;Turbofish ::&amp;lt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/meetups"&gt;Rust Meetup and user groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mainmatter.com/blog/2023/12/13/rust-adoption-playbook-for-ctos-and-engineering-managers/"&gt;Adopting Rust: the missing playbook for managers and CTOs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semanticdiff.com/blog/semanticdiff-0.8.8/"&gt;SemanticDiff 0.8.8 adds support for Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://github.com/SUPERCILEX/io-adapters"&gt;io-adapters&lt;/a&gt;, a crate tha lets you convert between different writeable APIs (&lt;code&gt;io&lt;/code&gt; vs. &lt;code&gt;fmt&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1271"&gt;Alex Saveau&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GreptimeTeam/greptimedb/issues/2877"&gt;greptimedb - API improvement for pretty print sql query result in http output 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GreptimeTeam/greptimedb/issues/2853"&gt;greptimedb - Unify builders' patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tokio-rs/tokio/issues/6208"&gt;tokio - Run loom tests in oss-fuzz 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6689"&gt;Ockam - Library - Validate CBOR structs according to the cddl schema for &lt;code&gt;kafka/protocol_aware&lt;/code&gt; and &lt;code&gt;nodes/services&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6704"&gt;Ockam - Command - refactor to use typed interfaces to implement commands for &lt;code&gt;relays&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/7118"&gt;Ockam - Make install.sh not fail when the latest version is already installed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/zerocopy/issues/422"&gt;zerocopy - Use cargo-semver-checks to make sure &lt;code&gt;derive&lt;/code&gt; feature doesn't change API surface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/zerocopy/issues/444"&gt;zerocopy - Verify that &lt;code&gt;all-jobs-succeeded&lt;/code&gt; CI job depends on all other jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2910"&gt;Hyperswitch - [REFACTOR]: [Nuvei] MCA metadata validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2904"&gt;Hyperswitch - [Feature] : [Noon] Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2899"&gt;Hyperswitch - [BUG]     : MCA metadata deserialization failures should be 4xx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2908"&gt;Hyperswitch - [Feature] : [Zen] Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;391 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-12-04..2023-12-11"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118420"&gt;introduce support for &lt;code&gt;async gen&lt;/code&gt; blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116952"&gt;implement 2024-edition lifetime capture rules RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117874"&gt;&lt;code&gt;riscv32&lt;/code&gt; platform support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116565"&gt;add teeos std impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118527"&gt;&lt;code&gt;never_patterns&lt;/code&gt;: Parse match arms with no body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118637"&gt;&lt;code&gt;rustc_symbol_mangling,rustc_interface,rustc_driver_impl&lt;/code&gt;: Enforce &lt;code&gt;rustc::potential_query_instability&lt;/code&gt; lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118516"&gt;add ADT variant infomation to StableMIR and finish implementing &lt;code&gt;TyKind::internal()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118346"&gt;add &lt;code&gt;deeply_normalize_for_diagnostics&lt;/code&gt;, use it in coherence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118650"&gt;add comment about keeping flags in sync between bootstrap.py and bootstrap.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117873"&gt;add emulated TLS support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118694"&gt;add instance evaluation and methods to read an allocation in StableMIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117758"&gt;add lint against ambiguous wide pointer comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118688"&gt;add method to get type of an Rvalue in StableMIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117953"&gt;add more SIMD platform-intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117966"&gt;add safe compilation options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118457"&gt;add support for &lt;code&gt;gen fn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118123"&gt;add support for making lib features internal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117661"&gt;added shadowed hint for overlapping associated types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118568"&gt;avoid adding builtin functions to &lt;code&gt;symbols.o&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118710"&gt;avoid instantiating infer vars with infer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118488"&gt;change prefetch to avoid deadlock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118324"&gt;compile-time evaluation: detect writes through immutable pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118595"&gt;coverage: be more strict about what counts as a "visible macro"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118695"&gt;coverage: merge refined spans in a separate final pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118666"&gt;coverage: simplify the heuristic for ignoring &lt;code&gt;async fn&lt;/code&gt; return spans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118198"&gt;coverage: use &lt;code&gt;SpanMarker&lt;/code&gt; to improve coverage spans for &lt;code&gt;if !&lt;/code&gt; expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118057"&gt;dedup for duplicate suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116420"&gt;discard invalid spans in external blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118726"&gt;do not parenthesize exterior &lt;code&gt;struct&lt;/code&gt; lit inside match guards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116170"&gt;don't include destruction scopes in THIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118788"&gt;don't print host effect param in pretty &lt;code&gt;path_generic_args&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118308"&gt;don't warn an empty pattern unreachable if we're not sure the data is valid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118504"&gt;enforce &lt;code&gt;must_use&lt;/code&gt; on associated types and RPITITs that have a must-use trait in bounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117681"&gt;explicitly implement &lt;code&gt;DynSync&lt;/code&gt; and &lt;code&gt;DynSend&lt;/code&gt; for &lt;code&gt;TyCtxt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118681"&gt;fix &lt;code&gt;is_foreign_item&lt;/code&gt; for StableMIR instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118689"&gt;fix const drop checking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118460"&gt;fix in-place collect not reallocating when necessary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118585"&gt;fix parser ICE when recovering &lt;code&gt;dyn&lt;/code&gt;/&lt;code&gt;impl&lt;/code&gt; after &lt;code&gt;for&amp;lt;...&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118502"&gt;fix: correct the arg for 'suggest to use associated function syntax' diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116278"&gt;generalize LLD usage in bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117088"&gt;generalize: handle occurs check failure in aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118368"&gt;implement &lt;code&gt;--env&lt;/code&gt; compiler flag (without &lt;code&gt;tracked_env&lt;/code&gt; support)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117116"&gt;implement &lt;code&gt;repr(packed)&lt;/code&gt; for &lt;code&gt;repr(simd)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/114571"&gt;improve &lt;code&gt;print_tts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118565"&gt;interpret: make &lt;code&gt;numeric_intrinsic&lt;/code&gt; accessible from Miri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118764"&gt;make async generators fused by default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118362"&gt;make sure &lt;code&gt;panic_nounwind_fmt&lt;/code&gt; can still be fully inlined (e.g. for &lt;code&gt;panic_immediate_abort)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118686"&gt;only check principal trait ref for object safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118268"&gt;pretty print &lt;code&gt;Fn&amp;lt;(..., ...)&amp;gt;&lt;/code&gt; trait refs with parentheses (almost) always&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118715"&gt;privacy: visit trait def id of projections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116496"&gt;provide context when &lt;code&gt;?&lt;/code&gt; can't be called because of &lt;code&gt;Result&amp;lt;_, E&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118494"&gt;rearrange &lt;code&gt;default_configuration&lt;/code&gt; and &lt;code&gt;CheckCfg::fill_well_known&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118730"&gt;recurse into refs when comparing tys for diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118684"&gt;remove &lt;code&gt;PolyGenSig&lt;/code&gt; since it's always a dummy binder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118598"&gt;remove the &lt;code&gt;precise_pointer_size_matching&lt;/code&gt; feature gate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118668"&gt;resolve associated item bindings by namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118230"&gt;streamline MIR dataflow cursors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118066"&gt;structured &lt;code&gt;use&lt;/code&gt; suggestion on privacy error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118693"&gt;tell MirUsedCollector that the pointer alignment checks calls its panic symbol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118317"&gt;tip for define macro name after &lt;code&gt;macro_rules!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118076"&gt;tweak &lt;code&gt;.clone()&lt;/code&gt; suggestion to work in more cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117922"&gt;tweak unclosed generics errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118734"&gt;unescaping cleanups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117586"&gt;uplift the (new solver) canonicalizer into &lt;code&gt;rustc_next_trait_solver&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118791"&gt;use &lt;code&gt;immediate_backend_type&lt;/code&gt; when reading from a const alloc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118608"&gt;use default params until effects in desugaring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3211"&gt;miri: fix promising a very large alignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3216"&gt;miri: fix x86 SSE4.1 ptestnzc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3214"&gt;miri: move some x86 intrinsics code to helper functions in &lt;code&gt;shims::x86&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3219"&gt;miri: return &lt;code&gt;MAP_FAILED&lt;/code&gt; when mmap fails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116949"&gt;stablize &lt;code&gt;arc_unwrap_or_clone&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/114136"&gt;add &lt;code&gt;LinkedList::{retain,retain_mut}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118350"&gt;simplify Default for tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118661"&gt;restore &lt;code&gt;const PartialEq&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118273"&gt;split &lt;code&gt;Vec::dedup_by&lt;/code&gt; into 2 cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2812"&gt;futures: fillBuf: do not call &lt;code&gt;poll_fill_buf&lt;/code&gt; twice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2810"&gt;futures: &lt;code&gt;FuturesOrdered&lt;/code&gt;: use 64-bit index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2809"&gt;futures: &lt;code&gt;FuturesUnordered&lt;/code&gt;: fix clear implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/futures-rs/pull/2811"&gt;futures: use &lt;code&gt;cfg(target_has_atomic)&lt;/code&gt; on no-std targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12933"&gt;cargo: spec: Extend PackageIdSpec with source kind + git ref for unambiguous specs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13125"&gt;cargo toml: disallow inheriting of dependency public status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13155"&gt;cargo toml: disallow &lt;code&gt;[lints]&lt;/code&gt; in virtual workspaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13154"&gt;cargo: schema: Remove reliance on cargo types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13097"&gt;cargo: schemas: Pull out mod for proposed schemas package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13118"&gt;cargo: trim-paths: assert &lt;code&gt;OSO&lt;/code&gt; and &lt;code&gt;SO&lt;/code&gt; cannot be trimmed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13132"&gt;cargo: avoid writing CACHEDIR.TAG if it already exists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13126"&gt;cargo: fix bash completion in directory with spaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13114"&gt;cargo: explicitly remap current dir by using &lt;code&gt;.&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13140"&gt;cargo: print rustc messages colored on wincon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13135"&gt;cargo: limit exported-private-dependencies lints to libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118812"&gt;rustdoc-search: do not treat associated type names as types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118600"&gt;rustdoc: Don't generate the "Fields" heading if there is no field displayed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118677"&gt;rustdoc: Fix display of features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118508"&gt;rustdoc: do not escape quotes in body text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118722"&gt;rustdoc: remove unused parameter &lt;code&gt;reversed&lt;/code&gt; from &lt;code&gt;onEach(Lazy)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-bindgen/pull/2667"&gt;bindgen: support float16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustfmt/pull/5933"&gt;rustfmt: add &lt;code&gt;StyleEdition enum&lt;/code&gt; and &lt;code&gt;StyleEditionDefault&lt;/code&gt; trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11913"&gt;clippy: &lt;code&gt;fix(ptr_as_ptr)&lt;/code&gt;: handle &lt;code&gt;std::ptr::null{_mut}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11900"&gt;clippy: &lt;code&gt;needless_borrows_for_generic_args&lt;/code&gt;: Handle when field operand impl Drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11878"&gt;clippy: &lt;code&gt;uninhabited_reference&lt;/code&gt;: new lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11907"&gt;clippy: add a function to check whether binary oprands are nontrivial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11538"&gt;clippy: fix &lt;code&gt;is_from_proc_macro&lt;/code&gt; patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15515"&gt;rust-analyzer: check if lhs is also a binexpr and use its rhs in flip binexpr assist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16055"&gt;rust-analyzer: fallback to method resolution on unresolved field access with matching method name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15990"&gt;rust-analyzer: add &lt;code&gt;trait_impl_reduntant_assoc_item&lt;/code&gt; diagnostic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16034"&gt;rust-analyzer: allow navigation targets to be duplicated when the focus range lies in the macro definition site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16027"&gt;rust-analyzer: implicit format args support&lt;/a&gt; (hooray!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15627"&gt;rust-analyzer: prioritize import suggestions based on the expected type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16041"&gt;rust-analyzer: fix WideChar offsets calculation in &lt;code&gt;line-index&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16045"&gt;rust-analyzer: fix panic with closure inside array len&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16009"&gt;rust-analyzer: bug in &lt;code&gt;extract_function.rs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16039"&gt;rust-analyzer: don't emit "missing items" diagnostic for negative impls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16037"&gt;rust-analyzer: don't print proc-macro panic backtraces in the logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16048"&gt;rust-analyzer: fix &lt;code&gt;concat_bytes!&lt;/code&gt; expansion emitting an identifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16060"&gt;rust-analyzer: fix completion failing in &lt;code&gt;format_args!&lt;/code&gt; with invalid template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16035"&gt;rust-analyzer: fix diagnostics panicking when resolving to different files due to macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15486"&gt;rust-analyzer: fix item tree lowering &lt;code&gt;pub(self)&lt;/code&gt; to &lt;code&gt;pub()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16024"&gt;rust-analyzer: fix runnable cwd on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16054"&gt;rust-analyzer: fix token downmapping being quadratic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16078"&gt;rust-analyzer: fix view mir, hir and eval function not working when cursor is inside macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16016"&gt;rust-analyzer: insert fn call parens only if the parens inserted around field name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16028"&gt;rust-analyzer: make drop inlay hint more readable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15705"&gt;rust-analyzer: resolve Self type references in delegate method assist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16058"&gt;rust-analyzer: smaller spans for unresolved field and method diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16036"&gt;rust-analyzer: make ParamLoweringMode accessible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16089"&gt;rust-analyzer: query for nearest parent block around the hint to resolve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16073"&gt;rust-analyzer: replace &lt;code&gt;doc_comments_and_attrs&lt;/code&gt; with &lt;code&gt;collect_attrs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15896"&gt;rust-analyzer: show placeholder while run command gets runnables from server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/pull/1762"&gt;rustc-perf: add support for benchmarking Cranelift codegen backend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A quiet week overall. A few smaller crate (e.g., helloworld) benchmarks saw
significant improvements in
&lt;a href="https://github.com/rust-lang/rust/pull/118568"&gt;#118568&lt;/a&gt;, but this merely
restores performance regressed earlier.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@simulacrum&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=9358642e3b8560eee89e6f40aa996c8394a3db31&amp;amp;end=57010939ed1d00076b4af0ed06a81ec69ea5e4a8&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;9358642..5701093&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 Regressions, 2 Improvements, 3 Mixed; 2 of them in rollups&lt;/p&gt;
&lt;p&gt;69 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/master/triage/2023-12-11.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/commit/dbdb738e80d49cb127907e5b40986dacb46ac4b6"&gt;Merge RFC 3531: "Macro fragment specifiers edition policy"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/86026"&gt;Tracking Issue for &lt;code&gt;Bound::map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117673"&gt;Stabilize THIR unsafeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/116821"&gt;Exhaustiveness: reveal opaque types properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117818"&gt;Properly reject &lt;code&gt;default&lt;/code&gt; on free const items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/118649"&gt;Make inductive cycles in coherence ambiguous always&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Unsafe Code Guideline RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3541"&gt;Async Drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3538"&gt;Closure PartialEq and Eq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2023/12/11/cargo-cache-cleaning.html"&gt;Cargo cache cleaning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-12-13 - 2024-01-10 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-14 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/296833674/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Virtual (Nuremberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/295679660/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-17 | Virtual (Tel Aviv, IL) | &lt;a href="https://www.meetup.com/code-mavens/"&gt;Code Mavens&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/297334993/"&gt;&lt;strong&gt;Don't panic! - Our journey to error handling in Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-18 | Virtual (Munich, DE) | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/296429053/"&gt;&lt;strong&gt;Rust Munich 2023 / 5 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/295679827/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/297128156/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Virtual (Linz, AT) &lt;a href="https://www.meetup.com/rust-linz/"&gt;Rust Linz&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-linz/events/297909995/"&gt;&lt;strong&gt;Rust Meetup Linz - 35th Edition&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-20 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/292763506/"&gt;&lt;strong&gt;Adventures in egui app dev&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-26 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/mvdtgtyfcqbjc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-28 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/297687485/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-03 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/wqzhftygccbfb"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-16 | Delhi, IN | &lt;a href="https://www.meetup.com/rustdelhi/"&gt;Rust Delhi&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdelhi/events/297652586/"&gt;&lt;strong&gt;Meetup #4&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-14 | Augsburg, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/297025700/"&gt;&lt;strong&gt;Augsburg Rust Meetup #4&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Basel, CH | &lt;a href="https://www.meetup.com/rust-basel/"&gt;Rust Basel&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-basel/events/297599586/"&gt;&lt;strong&gt;Testing: Learn from the pros&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-18 | Munich, DE + Virtual | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/296429053/"&gt;&lt;strong&gt;Rust Munich 2023 / 5 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Heidelberg, DE | &lt;a href="https://rheinneckar.events/@nix_rust"&gt;Nix Your Bugs &amp;amp; Rust Your Engines&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rheinneckar.events/events/298e520c-89ca-4754-96f8-e252b96b7a46"&gt;&lt;strong&gt;Nix Your Bugs &amp;amp; Rust Your Engines #1&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Leipzig, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/295504276/"&gt;&lt;strong&gt;Tauri, an Electron-alternative&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-27 | Copenhagen, DK | &lt;a href="https://www.meetup.com/copenhagen-rust-community/"&gt;Copenhagen Rust Community&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/copenhagen-rust-community/events/297894275/"&gt;&lt;strong&gt;Rust hacknight #1: CLIs, TUIs and plushies&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-13 | Chicago, IL, US | &lt;a href="https://www.meetup.com/deep-dish-rust/"&gt;Deep Dish Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/deep-dish-rust/events/297671182/"&gt;&lt;strong&gt;Rust Hack Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Lehi, UT, US | &lt;a href="https://www.meetup.com/utah-rust/"&gt;Utah Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/297720170/"&gt;&lt;strong&gt;Sending Data with Channels w/Herbert Wolverson&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/mv-rust-meetup/"&gt;Mountain View Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mv-rust-meetup/events/297628069/"&gt;&lt;strong&gt;Rust Meetup at Hacker Dojo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-15 | Somerville, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/297633899/"&gt;&lt;strong&gt;Ball Square Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/vwljctyfcqbzb/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-27 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/xvkdgtyfcqbkc/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-09 | Minneapolis, MN, US | &lt;a href="https://www.meetup.com/minneapolis-rust-meetup/"&gt;Minneapolis Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/minneapolis-rust-meetup/events/297760207/"&gt;&lt;strong&gt;Minneapolis Rust Meetup Happy Hour&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/182f6dv/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Sadly, the week went by without a nominated quote.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/18i1sov/this_week_in_rust_525/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 13 Dec 2023 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2023-12-13:/blog/2023/12/13/this-week-in-rust-525/</guid><category>This Week in Rust</category></item><item><title>This Week in Rust 524</title><link>https://this-week-in-rust.org/blog/2023/12/06/this-week-in-rust-524/</link><description>&lt;p&gt;Hello and welcome to another issue of &lt;em&gt;This Week in Rust&lt;/em&gt;!
&lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is a programming language empowering everyone to build reliable and efficient software.
This is a weekly summary of its progress and community.
Want something mentioned? Tag us at &lt;a href="https://twitter.com/ThisWeekInRust"&gt;@ThisWeekInRust&lt;/a&gt; on Twitter or &lt;a href="https://mastodon.social/@thisweekinrust"&gt;@ThisWeekinRust&lt;/a&gt; on mastodon.social, or &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;send us a pull request&lt;/a&gt;.
Want to get involved? &lt;a href="https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md"&gt;We love contributions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust&lt;/em&gt; is openly developed &lt;a href="https://github.com/rust-lang/this-week-in-rust"&gt;on GitHub&lt;/a&gt; and archives can be viewed at &lt;a href="https://this-week-in-rust.org/"&gt;this-week-in-rust.org&lt;/a&gt;.
If you find any errors in this week's issue, &lt;a href="https://github.com/rust-lang/this-week-in-rust/pulls"&gt;please submit a PR&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-rust-community"&gt;&lt;a class="toclink" href="#updates-from-rust-community"&gt;Updates from Rust Community&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Dear community contributors:
Please read README.md for guidance on submissions.
Each submitted link should be of the form:

* [Title of the Linked Page](https://example.com/my_article)

If you don't know which category to use, feel free to submit a PR anyway
and just ask the editors to select the category.

--&gt;

&lt;h3 id="projecttooling-updates"&gt;&lt;a class="toclink" href="#projecttooling-updates"&gt;Project/Tooling Updates&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fujiapple852/trippy/releases/tag/0.9.0"&gt;Trippy (Network diagnostic tool) - 0.9.0 release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="observationsthoughts"&gt;&lt;a class="toclink" href="#observationsthoughts"&gt;Observations/Thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.m-ou.se/super-let/"&gt;Rust temporary lifetimes and "super let"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.m-ou.se/format-args/"&gt;Behind the Scenes of Rust String Formatting: format_args!()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ntietz.com/blog/profiling-rust-programs-the-easy-way/"&gt;Profiling Rust programs the easy way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://without.boats/blog/three-problems-of-pinning/"&gt;Three problems of pinning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xuanwo.io/2023/04-rust-std-fs-slower-than-python/"&gt;Rust std fs slower than Python!? No, it's hardware!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://half-shot.uk/blog/leafpipe/"&gt;Leafpipe - Turning lots and lots of audio/visual into pretty stimuli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.shuttle.rs/blog/2023/11/29/type-safety"&gt;Why Type Safety is Important&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-walkthroughs"&gt;&lt;a class="toclink" href="#rust-walkthroughs"&gt;Rust Walkthroughs&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Mdh_2PXe9i8"&gt;“Rustifying” serverless: Boost AWS Lambda performance with Rust - AWS re:Invent talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=2IHPvPmzS8g"&gt;Speeding up Rust code with benchmarks and flamegraphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sedrik.se/posts/secure-axum"&gt;Making a secure Axum route&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="miscellaneous"&gt;&lt;a class="toclink" href="#miscellaneous"&gt;Miscellaneous&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/diverging-functions"&gt;Diverging Functions - functions that never return&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rust.code-maven.com/getting-started-with-loco"&gt;Getting started with Loco, the one-person web framework for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jlogan03.github.io/interpn/"&gt;Building a Hypercube Interpolator (in Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apollolabsblog.hashnode.dev/embassy-on-esp-gpio"&gt;Embassy on ESP: GPIO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[video] &lt;a href="https://www.youtube.com/watch?v=MvWCX5ckuDE"&gt;Axum 0.6 to 0.7 in 5 quick steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="crate-of-the-week"&gt;&lt;a class="toclink" href="#crate-of-the-week"&gt;Crate of the Week&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This week's crate is &lt;a href="https://crates.io/crates/symbols"&gt;symbols&lt;/a&gt;, a utility to quickly create proc-macros to solidify database tables into enums enabling compile time foreign key checks.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704/1267"&gt;Marco Napetti&lt;/a&gt; for the self-suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/crate-of-the-week/2704"&gt;Please submit your suggestions and votes for next week&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="call-for-participation"&gt;&lt;a class="toclink" href="#call-for-participation"&gt;Call for Participation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always wanted to contribute to open-source projects but did not know where to start?
Every week we highlight some tasks from the Rust community for you to pick and get started!&lt;/p&gt;
&lt;p&gt;Some of these tasks may also have mentors available, visit the task page for more information.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6690"&gt;Ockam - Library - Validate CBOR structs according to the cddl schema for &lt;code&gt;nodes/models&lt;/code&gt; misc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6701"&gt;Ockam - Command - refactor to use typed interfaces to implement commands for &lt;code&gt;nodes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/build-trust/ockam/issues/6707"&gt;Ockam - Library - Slim down the &lt;code&gt;NodeManagerWorker&lt;/code&gt; for &lt;code&gt;node / node status&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/zerocopy/issues/367"&gt;zerocopy - Test the output of zerocopy-derive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/zerocopy/issues/422"&gt;zerocopy - Use cargo-semver-checks to make sure &lt;code&gt;derive&lt;/code&gt; feature doesn't change API surface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/zerocopy/issues/444"&gt;zerocopy - Verify that &lt;code&gt;all-jobs-succeeded&lt;/code&gt; CI job depends on all other jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2910"&gt;Hyperswitch - Refactor - Nuvei - MCA metadata validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2904"&gt;Hyperswitch - Feature - Noon -  Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2906"&gt;Hyperswitch - Feature - Payme - Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2899"&gt;Hyperswitch - Bug - MCA metadata deserialization failures should be 4xx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juspay/hyperswitch/issues/2908"&gt;Hyperswitch - Feature - Zen - Sync with Hyperswitch Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a Rust project owner and are looking for contributors, please submit tasks &lt;a href="https://users.rust-lang.org/t/twir-call-for-participation/4821"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="updates-from-the-rust-project"&gt;&lt;a class="toclink" href="#updates-from-the-rust-project"&gt;Updates from the Rust Project&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;369 pull requests were &lt;a href="https://github.com/search?q=is%3Apr+org%3Arust-lang+is%3Amerged+merged%3A2023-11-27..2023-12-04"&gt;merged in the last week&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116892"&gt;add &lt;code&gt;-Zfunction-return={keep,thunk-extern}&lt;/code&gt; option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117526"&gt;account for &lt;code&gt;!&lt;/code&gt; arm in tail &lt;code&gt;match&lt;/code&gt; expr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118157"&gt;add &lt;code&gt;never_patterns&lt;/code&gt; feature gate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118172"&gt;add &lt;code&gt;pretty_terminator&lt;/code&gt; to pretty stable-mir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116915"&gt;add an assume that the index is inbounds to &lt;code&gt;slice::get_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118381"&gt;&lt;code&gt;rustc_span&lt;/code&gt;: Use correct edit distance start length for suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118202"&gt;added &lt;code&gt;linker_arg(s)&lt;/code&gt; Linker trait methods for link-arg to be prefixed "-Wl," for cc-like linker args and not verbatim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/114708"&gt;allow setting &lt;code&gt;rla&lt;/code&gt; labels via &lt;code&gt;rustbot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118347"&gt;avoid per-register closure expansions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118486"&gt;&lt;code&gt;generic_const_exprs&lt;/code&gt;: suggest to add the feature, not use it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118461"&gt;change &lt;code&gt;SwitchTarget&lt;/code&gt; representation in StableMIR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118514"&gt;&lt;code&gt;rustc_hir_typeck&lt;/code&gt;: Fix ICE when probing for non-ASCII function alternative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118426"&gt;constProp: correctly remove const if unknown value assigned to it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118525"&gt;coverage: skip spans that can't be un-expanded back to the function body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118348"&gt;cut code size for feature hashing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/111133"&gt;detect Python-like slicing and suggest how to fix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118366"&gt;detect and reject malformed &lt;code&gt;repr(Rust)&lt;/code&gt; hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118464"&gt;dispose &lt;code&gt;llvm::TargetMachines&lt;/code&gt; prior to &lt;code&gt;llvm::Context&lt;/code&gt; being disposed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118342"&gt;dont suggest &lt;code&gt;!&lt;/code&gt; for path in function call if it has generic args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118419"&gt;eagerly return &lt;code&gt;ExprKind::Err&lt;/code&gt; on &lt;code&gt;yield&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; in wrong coroutine context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118282"&gt;effects: run &lt;code&gt;enforce_context_effects&lt;/code&gt; for all method calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118482"&gt;explain a good reason for why LocalValue does not store the type of the local&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118526"&gt;fix ICE: &lt;code&gt;fn_arg_names: unexpected item DefId(..)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118379"&gt;fix &lt;code&gt;PartialEq&lt;/code&gt; args when &lt;code&gt;#[const_trait]&lt;/code&gt; is enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118498"&gt;fix an ICE when a valtree failed to evaluate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118542"&gt;fix parser ICE from attrs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118413"&gt;fix the issue of suggesting unwrap/expect for shorthand field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118323"&gt;give dev-friendly error message for incorrect config profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117754"&gt;handle recursion limit for subtype and well-formed predicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/116839"&gt;implement thread parking for xous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118551"&gt;more targeted errors when extern types end up in places they should not&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118454"&gt;new solver: improve instrument annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117805"&gt;on Fn arg mismatch for a fn path, suggest a closure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/114499"&gt;pass +forced-atomics feature for riscv32{i,im,imc}-unknown-none-elf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118378"&gt;perform LTO optimisations with wasm-ld + -Clinker-plugin-lto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118333"&gt;print list of missing target features when calling a function with target features outside an unsafe block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118072"&gt;provide structured suggestion for type mismatch in loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118265"&gt;remove the memcpy-on-equal-ptrs assumption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118528"&gt;replace &lt;code&gt;once_cell::sync::OnceCell&lt;/code&gt; with std &lt;code&gt;OnceLock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/113730"&gt;report errors in jobserver inherited through environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/113923"&gt;restore &lt;code&gt;#![no_builtins]&lt;/code&gt; crates participation in LTO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118495"&gt;restrict what symbols can be used in &lt;code&gt;#[diagnostic::on_unimplemented]&lt;/code&gt; format strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118573"&gt;rustc: harmonize &lt;code&gt;DefKind&lt;/code&gt; and &lt;code&gt;DefPathData&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118341"&gt;simplify indenting in THIR printing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118453"&gt;tweak message on ADT with private fields building&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117565"&gt;tweak parsing recovery of enums, for exprs and match arm patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118128"&gt;warn against using intrinsics that leave the scope of our memory model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118524"&gt;add more information to StableMIR Instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118540"&gt;codegen, miri: fix computing the offset of an unsized field in a packed &lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117840"&gt;miri: support 'promising' alignment for symbolic alignment check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3206"&gt;miri: SIMD bitmasks: use 'round up to multiple of 8' rather than 'clamp to at least 8'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3204"&gt;miri: add new SIMD intrinsics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/miri/pull/3194"&gt;miri: remove Stacked Borrows GC heuristics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118231"&gt;also add &lt;code&gt;is_empty&lt;/code&gt; to const raw slices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118487"&gt;move exposed-provenance APIs into separate feature gate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117472"&gt;stabilize C string literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118484"&gt;add substring API for &lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/115331"&gt;optimize &lt;code&gt;str::iter::Chars::advance_by&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/114841"&gt;add &lt;code&gt;track_caller&lt;/code&gt; for arith ops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/110353"&gt;expand in-place iteration specialization to Flatten, FlatMap and ArrayChunks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13066"&gt;cargo resolver: De-prioritize no-rust-version in MSRV resolver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13036"&gt;cargo resolver: Remove unused public-deps error handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13080"&gt;cargo toml: Decouple logic from schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13046"&gt;cargo: add &lt;code&gt;--public&lt;/code&gt; for &lt;code&gt;cargo add&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13055"&gt;cargo: add more doc comments for gc changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13065"&gt;cargo: reorder &lt;code&gt;--remap-path-prefix&lt;/code&gt; flags for &lt;code&gt;-Zbuild-std&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13053"&gt;cargo: fixed uninstall a running binary failed on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/12484"&gt;cargo: fixes error count display is different when there's only one error left&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13071"&gt;cargo: have cargo add --optional &lt;code&gt;&amp;lt;dep&amp;gt;&lt;/code&gt; create a &lt;code&gt;&amp;lt;dep&amp;gt;&lt;/code&gt; = &lt;code&gt;"dep:&amp;lt;dep&amp;gt;&lt;/code&gt; feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13012"&gt;cargo: include declared list of features in fingerprint for &lt;code&gt;-Zcheck-cfg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/cargo/pull/13076"&gt;cargo: remove the outdated comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/117869"&gt;rustdoc: Add highlighting for comments in items declaration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust/pull/118452"&gt;rustdoc-search: allow spaces around &lt;code&gt;:&lt;/code&gt; in path query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11837"&gt;clippy: &lt;code&gt;missing_asserts_for_indexing&lt;/code&gt;: accept length equality checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11896"&gt;clippy: &lt;code&gt;option_if_let_else&lt;/code&gt;: do not trigger on expressions returning &lt;code&gt;()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11363"&gt;clippy: &lt;code&gt;redundant_closure_call&lt;/code&gt;: avoid duplicated &lt;code&gt;async&lt;/code&gt; keyword when triggering on closure that returns &lt;code&gt;async&lt;/code&gt; block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11818"&gt;clippy: &lt;code&gt;redundant_guards&lt;/code&gt;: catch &lt;code&gt;is_empty&lt;/code&gt;, &lt;code&gt;starts_with&lt;/code&gt; and &lt;code&gt;ends_with&lt;/code&gt; on slices and &lt;code&gt;str&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11872"&gt;clippy: add lint against unit tests in doctests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11898"&gt;clippy: allow &lt;code&gt;allow&lt;/code&gt;ing &lt;code&gt;upper_case_acronyms&lt;/code&gt; on &lt;code&gt;enum&lt;/code&gt; variants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11853"&gt;clippy: expanding lint &lt;code&gt;blocks_in_if_conditions&lt;/code&gt; to check match expr as well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-clippy/pull/11597"&gt;clippy: new lint: &lt;code&gt;repeat_vec_with_capacity&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15993"&gt;rust-analyzer: debug use cargo workspace root as &lt;code&gt;cwd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15879"&gt;rust-analyzer: implement completion for the callable fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/16000"&gt;rust-analyzer: initial support for implicit drop inlay hint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15971"&gt;rust-analyzer: don't make &lt;code&gt;MissingMatchArms&lt;/code&gt; diagnostic for empty match body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust-analyzer/pull/15961"&gt;rust-analyzer: improve error handling for top-level &lt;code&gt;let&lt;/code&gt; statements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rust-compiler-performance-triage"&gt;&lt;a class="toclink" href="#rust-compiler-performance-triage"&gt;Rust Compiler Performance Triage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A small number of perf changes that unfortunately led to quite a few perf regressions. A large chunk of those regressions were in rustdoc and were considered acceptable since rustdoc is now doing strictly more work. Some other regressions have already been fixed and will hopefully soon be merged. The last of the regressions are still under investigation, but hopefully they will be resolved soon.&lt;/p&gt;
&lt;p&gt;Triage done by &lt;strong&gt;@rylev&lt;/strong&gt;.
Revision range: &lt;a href="https://perf.rust-lang.org/?start=df0295f07175acc7325ce3ca4152eb05752af1f2&amp;amp;end=9358642e3b8560eee89e6f40aa996c8394a3db31&amp;amp;absolute=false&amp;amp;stat=instructions%3Au"&gt;df0295f0..9358642e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;(instructions:u)&lt;/th&gt;
&lt;th align="center"&gt;mean&lt;/th&gt;
&lt;th align="center"&gt;range&lt;/th&gt;
&lt;th align="center"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;3.0%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 12.3%]&lt;/td&gt;
&lt;td align="center"&gt;53&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Regressions ❌ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;4.1%&lt;/td&gt;
&lt;td align="center"&gt;[0.2%, 11.6%]&lt;/td&gt;
&lt;td align="center"&gt;102&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (primary)&lt;/td&gt;
&lt;td align="center"&gt;-0.3%&lt;/td&gt;
&lt;td align="center"&gt;[-0.5%, -0.1%]&lt;/td&gt;
&lt;td align="center"&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Improvements ✅ &lt;br /&gt; (secondary)&lt;/td&gt;
&lt;td align="center"&gt;-0.6%&lt;/td&gt;
&lt;td align="center"&gt;[-1.2%, -0.2%]&lt;/td&gt;
&lt;td align="center"&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;All ❌✅ (primary)&lt;/td&gt;
&lt;td align="center"&gt;1.1%&lt;/td&gt;
&lt;td align="center"&gt;[-0.5%, 12.3%]&lt;/td&gt;
&lt;td align="center"&gt;118&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;4 Regressions, 1 Improvements, 1 Mixed; 1 of them in rollups
60 artifact comparisons made in total&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rustc-perf/blob/9086dc608bbb15310b2063ab690be021339e3850/triage/2023-12-05.md"&gt;Full report here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="approved-rfcs"&gt;&lt;a class="toclink" href="#approved-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/commits/master"&gt;Approved RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Changes to Rust follow the Rust &lt;a href="https://github.com/rust-lang/rfcs#rust-rfcs"&gt;RFC (request for comments) process&lt;/a&gt;. These
are the RFCs that were approved for implementation this week:&lt;/p&gt;
&lt;!-- Approved RFCs go here, use this format: * [Topic](URL) --&gt;
&lt;!-- or if none were approved this week, use: * *No RFCs were approved this week.* --&gt;
&lt;!-- * []() --&gt;
&lt;!--
### [Approved Major Change Proposals (MCP)](https://forge.rust-lang.org/compiler/mcp.html)
&lt;!~~ MCPs occur infrequently, so this section is commented out by default. ~~&gt;
&lt;!~~ MCPs which have been approved or rejected this week go here, use this format: * [major change accepted|rejected] [Topic](URL) ~~&gt;
--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs were approved this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="final-comment-period"&gt;&lt;a class="toclink" href="#final-comment-period"&gt;Final Comment Period&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Every week, &lt;a href="https://www.rust-lang.org/team.html"&gt;the team&lt;/a&gt; announces the 'final comment period' for RFCs and key PRs
which are reaching a decision. Express your opinions now.&lt;/p&gt;
&lt;h4 id="rfcs"&gt;&lt;a class="toclink" href="#rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/labels/final-comment-period"&gt;RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tracking-issues-prs"&gt;&lt;a class="toclink" href="#tracking-issues-prs"&gt;&lt;a href="https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Tracking Issues &amp;amp; PRs&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117758"&gt;Add lint against ambiguous wide pointer comparisons &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117824"&gt;Stabilize &lt;code&gt;ptr::{from_ref, from_mut&lt;/code&gt;}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/66359"&gt;Tracking issue for &lt;code&gt;any::type_name_of_val&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/115660"&gt;rustdoc: allow resizing the sidebar / hiding the top bar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/113091"&gt;Don't merge cfg and doc(cfg) attributes for re-exports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/117984"&gt;Make &lt;code&gt;IMPLIED_BOUNDS_ENTAILMENT&lt;/code&gt; into a hard error from a lint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/116821"&gt;Exhaustiveness: reveal opaque types properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/104098"&gt;fix fn/const items implied bounds and wf check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/118032"&gt;guarantee that char and u32 are ABI-compatible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/115046"&gt;Use version-sorting for all sorting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/issues/93610"&gt;Tracking Issue for &lt;code&gt;arc_unwrap_or_clone&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/114962"&gt;adds a column number to &lt;code&gt;dbg!()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/116392"&gt;Allow any &lt;code&gt;const&lt;/code&gt; expression blocks in &lt;code&gt;thread_local!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[disposition: merge] &lt;a href="https://github.com/rust-lang/rust/pull/115538"&gt;check &lt;code&gt;FnDef&lt;/code&gt; return type for WF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="language-reference"&gt;&lt;a class="toclink" href="#language-reference"&gt;&lt;a href="https://github.com/rust-lang/reference/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Language Reference&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Language Reference RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unsafe-code-guidelines"&gt;&lt;a class="toclink" href="#unsafe-code-guidelines"&gt;&lt;a href="https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aopen+label%3Afinal-comment-period+sort%3Aupdated-desc"&gt;Unsafe Code Guidelines&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No Unsafe Code Guideline RFCs entered Final Comment Period this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-and-updated-rfcs"&gt;&lt;a class="toclink" href="#new-and-updated-rfcs"&gt;&lt;a href="https://github.com/rust-lang/rfcs/pulls"&gt;New and Updated RFCs&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3537"&gt;RFC: Make Cargo respect minimum supported Rust version (MSRV) when selecting dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rfcs/pull/3536"&gt;RFC: Trait for !Sized thin pointers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="call-for-testing"&gt;&lt;a class="toclink" href="#call-for-testing"&gt;&lt;a href="https://github.com/rust-lang/rfcs/issues?q=label%3Acall-for-testing"&gt;Call for Testing&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important step for RFC implementation is for people to experiment with the
implementation and give feedback, especially before stabilization.  The following
RFCs would benefit from user testing before moving forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No RFCs issued a call for testing this week.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a feature implementer and would like your RFC to appear on the above list, add the new &lt;code&gt;call-for-testing&lt;/code&gt;
label to your RFC along with a comment providing testing instructions and/or guidance on which aspect(s) of the feature
need testing.&lt;/p&gt;
&lt;h2 id="upcoming-events"&gt;&lt;a class="toclink" href="#upcoming-events"&gt;Upcoming Events&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rusty Events between 2023-12-06 - 2024-01-03 🦀&lt;/p&gt;
&lt;h3 id="virtual"&gt;&lt;a class="toclink" href="#virtual"&gt;Virtual&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-06 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/297172140"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-10 | Virtual (Cardiff, UK) | &lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff"&gt;Rust and C++ Cardiff&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-and-c-plus-plus-in-cardiff/events/296583652/"&gt;&lt;strong&gt;Rust &amp;amp; C++ Christmas Game Jam Finale&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | Virtual | &lt;a href="https://mainmatter.com"&gt;Mainmatter&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-telemetry-workshop.mainmatter.com"&gt;&lt;strong&gt;Workshop: Telemetry for Rust applications&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/297532862/"&gt;&lt;strong&gt;Second Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/296833674/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Virtual (Nuremberg, DE) | &lt;a href="https://www.meetup.com/rust-noris/"&gt;Rust Nuremberg&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-noris/events/295679660/"&gt;&lt;strong&gt;Rust Nürnberg online&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-17 | Virtual (Tel Aviv, IL) | &lt;a href="https://www.meetup.com/code-mavens/"&gt;Code Mavens&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/code-mavens/events/297334993/"&gt;&lt;strong&gt;Don't panic! - Our journey to error handling in Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-18 | Virtual (Munich, DE) | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/296429053/"&gt;&lt;strong&gt;Rust Munich 2023 / 5 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Virtual (Berlin, DE) | &lt;a href="https://www.meetup.com/opentechschool-berlin/"&gt;OpenTechSchool Berlin&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/opentechschool-berlin/events/295679827/"&gt;&lt;strong&gt;Rust Hack and Learn&lt;/strong&gt;&lt;/a&gt; | &lt;a href="https://berline.rs/"&gt;&lt;strong&gt;Mirror&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Virtual (Washington, DC, US) | &lt;a href="https://www.meetup.com/rustdc/"&gt;Rust DC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdc/events/297128156/"&gt;&lt;strong&gt;Mid-month Rustful&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-20 | Virtual (Vancouver, BC, CA) | &lt;a href="https://www.meetup.com/vancouver-rust/"&gt;Vancouver Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/vancouver-rust/events/292763506/"&gt;&lt;strong&gt;Adventures in egui app dev&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-26 | Virtual (Dallas, TX, US) | &lt;a href="https://www.meetup.com/dallasrust/"&gt;Dallas Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dallasrust/events/mvdtgtyfcqbjc/"&gt;&lt;strong&gt;Last Tuesday&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-28 | Virtual (Charlottesville, NC, US) | &lt;a href="https://www.meetup.com/charlottesville-rust-meetup/"&gt;Charlottesville Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/charlottesville-rust-meetup/events/297687485/"&gt;&lt;strong&gt;Crafting Interpreters in Rust Collaboratively&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2024-01-03 | Virtual (Indianapolis, IN, US) | &lt;a href="https://www.meetup.com/indyrs/"&gt;Indy Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/indyrs/events/wqzhftygccbfb"&gt;&lt;strong&gt;Indy.rs - with Social Distancing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asia"&gt;&lt;a class="toclink" href="#asia"&gt;Asia&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-10 | Tokyo, JP | &lt;a href="https://www.meetup.com/tokyo-rust-meetup/"&gt;Tokyo Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/tokyo-rust-meetup/events/297674153"&gt;&lt;strong&gt;Fun with Labels, Macros, and Unsafe Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-16 | Delhi, IN | &lt;a href="https://www.meetup.com/rustdelhi/"&gt;Rust Delhi&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustdelhi/events/297652586/"&gt;&lt;strong&gt;Meetup #4&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="europe"&gt;&lt;a class="toclink" href="#europe"&gt;Europe&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-06 | Cologne, DE | &lt;a href="https://www.meetup.com/rustcologne/events"&gt;Rust Cologne&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rustcologne/events/297100007/"&gt;&lt;strong&gt;Advent Of Rust&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-07 | Aarhus, DK | &lt;a href="https://www.meetup.com/rust-aarhus/"&gt;Rust Aarhus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-aarhus/events/296223513/"&gt;&lt;strong&gt;Rust and Talk at Danske Commodities&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-07 | Lille, FR | &lt;a href="https://www.meetup.com/meetup-group-zgphbyet/"&gt;Rust Lille&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/meetup-group-zgphbyet/events/297477578/"&gt;&lt;strong&gt;Rust Lille #5&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-07 | London, UK | &lt;a href="https://www.meetup.com/rust-london-user-group/"&gt;Rust London User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-london-user-group/events/297703135/"&gt;&lt;strong&gt;Rust London Christmas Party with Realm (RSVP on Eventbrite)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Augsburg, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/297025700/"&gt;&lt;strong&gt;Augsburg Rust Meetup #4&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Basel, CH | &lt;a href="https://www.meetup.com/rust-basel/"&gt;Rust Basel&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-basel/events/297599586/"&gt;&lt;strong&gt;Testing: Learn from the pros&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-18 | Munich, DE + Virtual | &lt;a href="https://www.meetup.com/rust-munich/"&gt;Rust Munich&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-munich/events/296429053/"&gt;&lt;strong&gt;Rust Munich 2023 / 5 - hybrid&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Heidelberg, DE | &lt;a href="https://rheinneckar.events/@nix_rust"&gt;Nix Your Bugs &amp;amp; Rust Your Engines&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rheinneckar.events/events/298e520c-89ca-4754-96f8-e252b96b7a46"&gt;&lt;strong&gt;Nix Your Bugs &amp;amp; Rust Your Engines #1&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | Leipzig, DE | &lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/"&gt;Rust - Modern Systems Programming in Leipzig&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-modern-systems-programming-in-leipzig/events/295504276/"&gt;&lt;strong&gt;Tauri, an Electron-alternative&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="north-america"&gt;&lt;a class="toclink" href="#north-america"&gt;North America&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-07 | Seattle, WA, US | &lt;a href="https://www.meetup.com/seattle-rust-user-group/"&gt;Seattle Rust User Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/seattle-rust-user-group/events/297533440/"&gt;&lt;strong&gt;Seattle Rust User Group Meetup&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-11 | Minneapolis, MN, US | &lt;a href="https://www.meetup.com/minneapolis-rust-meetup/"&gt;Minneapolis Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/minneapolis-rust-meetup/events/297760172/"&gt;&lt;strong&gt;Minneapolis Rust Meetup Happy Hour&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | Seattle, WA, US | &lt;a href="https://www.meetup.com/cap-hill-rust/"&gt;Cap Hill Rust Coding/Hacking/Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/cap-hill-rust/events/296564619/"&gt;&lt;strong&gt;Rusty Coding/Hacking/Learning Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-12 | New York, NY, US | &lt;a href="https://www.meetup.com/rust-nyc/"&gt;Rust NYC&lt;/a&gt;  &lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-nyc/events/297659937/"&gt;&lt;strong&gt;Rust NYC Monthly Mixer: Share, Show, &amp;amp; Tell! 🦀&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-13 | Chicago, IL, US | &lt;a href="https://www.meetup.com/deep-dish-rust/"&gt;Deep Dish Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/deep-dish-rust/events/297671182/"&gt;&lt;strong&gt;Rust Hack Night&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Lehi, UT, US | &lt;a href="https://www.meetup.com/utah-rust/"&gt;Utah Rust&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/utah-rust/events/297720170/"&gt;&lt;strong&gt;Sending Data with Channels w/Herbert Wolverson&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-14 | Mountain View, CA, US | &lt;a href="https://www.meetup.com/mv-rust-meetup/"&gt;Mountain View Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/mv-rust-meetup/events/297628069/"&gt;&lt;strong&gt;Rust Meetup at Hacker Dojo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-15 | Somerville, MA, US | &lt;a href="https://www.meetup.com/bostonrust/"&gt;Boston Rust Meetup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/bostonrust/events/297633899/"&gt;&lt;strong&gt;Ball Square Rust Lunch&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-19 | San Francisco, CA, US | &lt;a href="https://www.meetup.com/san-francisco-rust-study-group"&gt;San Francisco Rust Study Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/san-francisco-rust-study-group/events/vwljctyfcqbzb/"&gt;&lt;strong&gt;Rust Hacking in Person&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2023-12-27 | Austin, TX, US | &lt;a href="https://www.meetup.com/rust-atx/"&gt;Rust ATX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/rust-atx/events/xvkdgtyfcqbkc/"&gt;&lt;strong&gt;Rust Lunch - Fareground&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="oceania"&gt;&lt;a class="toclink" href="#oceania"&gt;Oceania&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2023-12-11 | Perth, WA, AU | &lt;a href="https://www.meetup.com/perth-rust-meetup-group/"&gt;Rust Perth Meetup Group&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/perth-rust-meetup-group/events/297191089/"&gt;&lt;strong&gt;Rust End of Year Event&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running a Rust event please add it to the &lt;a href="https://www.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc%40group.calendar.google.com"&gt;calendar&lt;/a&gt; to get
it mentioned here. Please remember to add a link to the event too.
Email the &lt;a href="mailto:community-team@rust-lang.org"&gt;Rust Community Team&lt;/a&gt; for access.&lt;/p&gt;
&lt;h2 id="jobs"&gt;&lt;a class="toclink" href="#jobs"&gt;Jobs&lt;/a&gt;&lt;/h2&gt;
&lt;!--

Rust Jobs:

TWiR has stopped featuring individual job postings. You can read more about this change here:

https://github.com/rust-lang/this-week-in-rust/issues/3412

--&gt;

&lt;p&gt;Please see the latest &lt;a href="https://www.reddit.com/r/rust/comments/182f6dv/official_rrust_whos_hiring_thread_for_jobseekers/"&gt;Who's Hiring thread on r/rust&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quote-of-the-week"&gt;&lt;a class="toclink" href="#quote-of-the-week"&gt;Quote of the Week&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;NVIDIA's firmware, Airlie said, comes with a set of include files that, in turn, define structures that change over time. To deal with these changes, the driver is going to need some sort of automated ABI generation; he noted that the developers working on the Apple M1 GPU driver have run into the same problem. This problem could be made easier to tackle, he suggested, if the driver were, like the M1 driver, to be rewritten in Rust.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;– &lt;a href="https://lwn.net/SubscriberLink/953144/b85b695d0c760692"&gt;Jonathan Corbet paraphrasing David Airlie on Linux Weekly News&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328/1494"&gt;Brian Kung&lt;/a&gt; for the suggestion!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://users.rust-lang.org/t/twir-quote-of-the-week/328"&gt;Please submit quotes and vote for next week!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This Week in Rust is edited by: &lt;a href="https://github.com/nellshamrell"&gt;nellshamrell&lt;/a&gt;, &lt;a href="https://github.com/llogiq"&gt;llogiq&lt;/a&gt;, &lt;a href="https://github.com/cdmistman"&gt;cdmistman&lt;/a&gt;, &lt;a href="https://github.com/ericseppanen"&gt;ericseppanen&lt;/a&gt;, &lt;a href="https://github.com/extrawurst"&gt;extrawurst&lt;/a&gt;, &lt;a href="https://github.com/andrewpollack"&gt;andrewpollack&lt;/a&gt;, &lt;a href="https://github.com/U007D"&gt;U007D&lt;/a&gt;, &lt;a href="https://github.com/kolharsam"&gt;kolharsam&lt;/a&gt;, &lt;a href="https://github.com/joelmarcey"&gt;joelmarcey&lt;/a&gt;, &lt;a href="https://github.com/mariannegoldin"&gt;mariannegoldin&lt;/a&gt;, &lt;a href="https://github.com/bennyvasquez"&gt;bennyvasquez&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Email list hosting is sponsored by &lt;a href="https://foundation.rust-lang.org/"&gt;The Rust Foundation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;a href="https://www.reddit.com/r/rust/comments/18dax97/this_week_in_rust_524/"&gt;Discuss on r/rust&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">TWiR Contributors</dc:creator><pubDate>Wed, 06 Dec 2023 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:this-week-in-rust.org,2023-12-06:/blog/2023/12/06/this-week-in-rust-524/</guid><category>This Week in Rust</category></item></channel></rss>